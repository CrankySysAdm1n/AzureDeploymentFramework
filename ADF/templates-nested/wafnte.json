{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Deployment": {
      "type": "string"
    },
    "DeploymentID": {
      "type": "string"
    },
    "Environment": {
      "type": "string"
    },
    "Prefix": {
      "type": "string"
    },
    "wafInfo": {
      "type": "object"
    },
    "Global": {
      "type": "object"
    },
    "OMSworkspaceID": {
      "type": "string"
    },
    "WildcardCertBase64": {
      "type": "securestring"
    },
    "WildcardCertBase64Public": {
      "type": "securestring"
    },
    "WildcardCertBase64Password": {
      "type": "securestring"
    }
  },
  "variables": {
    // Network
    //"DeploymentDR": "[concat(parameters('Prefix'),parameters('Environment'),parameters('DeploymentID'), parameters('Global').AppName)]",
    "DeploymentSourceDR": "[concat('AZE2',parameters('Environment'),parameters('DeploymentID'), parameters('Global').AppName)]",
    "networkId": "[concat(parameters('Global').networkid[0],string(           sub(parameters('Global').networkid[1],int(parameters('DeploymentID')))))]",
    "VnetID": "[resourceId('Microsoft.Network/virtualNetworks', concat(parameters('Deployment'),'-vn'))]",
    "snWAF01Name": "snWAF01",
    "SubnetRefGW": "[concat(variables('VNetID'), '/subnets/', variables('snWAF01Name'))]",
    "KVName": "[parameters('Global').KVName]",
    "identity": {
      "type": "UserAssigned",
      "userAssignedIdentities": {
        "[resourceID('Microsoft.ManagedIdentity/userAssignedIdentities/',concat(parameters('Deployment'),'-uaiKeyVaultSecretsGet'))]": {
        }
      }
    },
    "authenticationCertificates": [
      {
        "properties": {
          "data": "[parameters('WildcardCertBase64Public')]"
        },
        "name": "wildcardNextAce"
      }
    ],
    "copy": [
      {
        "name": "Listeners",
        "count": "[length(parameters('wafInfo').Listeners)]",
        "input": {
          "name": "[parameters('wafInfo').Listeners[copyIndex('Listeners')].Port]",
          "backendAddressPool": {
            "id": "[resourceid('Microsoft.Network/applicationGateways/backendAddressPools',concat(parameters('Deployment'),'-waf',parameters('WAFInfo').WAFName),'appGatewayBackendPool')]"
          },
          "backendHttpSettings": {
            "id": "[if(contains(parameters('wafInfo').Listeners[copyIndex('Listeners')],'BackendPort') ,resourceid('Microsoft.Network/applicationGateways/backendHttpSettingsCollection',concat(parameters('Deployment'),'-waf',parameters('WAFInfo').WAFName),concat('appGatewayBackendHttpSettings',parameters('WAFInfo').Listeners[copyIndex('Listeners')].BackendPort)),json('null'))]"
          },
          "redirectConfiguration": {
            "id": "[resourceid('Microsoft.Network/applicationGateways/redirectConfigurations',concat(parameters('Deployment'),'-waf',parameters('WAFInfo').WAFName),concat('redirectConfiguration-',parameters('WAFInfo').Listeners[copyIndex('Listeners')].Hostname,'-80'))]"
          },
          "sslCertificate": {
            //  "id": "[resourceid('Microsoft.Network/applicationGateways/sslCertificates',concat(parameters('Deployment'),'-waf',parameters('WAFInfo').WAFName),parameters('WAFInfo').Listeners[copyIndex('Listeners')].Cert)]"
            "id": "[if(contains(parameters('wafInfo').Listeners[copyIndex('Listeners')],'Cert') ,resourceid('Microsoft.Network/applicationGateways/sslCertificates',concat(parameters('Deployment'),'-waf',parameters('WAFInfo').WAFName),parameters('WAFInfo').Listeners[copyIndex('Listeners')].Cert),json('null'))]"
          }
        }
      }
    ],
    "firewallPolicy": {
      "id": "[concat(resourceGroup().id,'/providers/Microsoft.Network/applicationGatewayWebApplicationFirewallPolicies/', parameters('Deployment'), '-wafPolicy', parameters('WAFInfo').WAFPolicyName)]"
    },
    "disabledRuleGroups": [
      {
        "ruleGroupName": "REQUEST-913-SCANNER-DETECTION",
        "rules": [
          913101
        ]
      },
      {
        "ruleGroupName": "REQUEST-920-PROTOCOL-ENFORCEMENT",
        "rules": [
          920230,
          920300,
          920320,
          920350,
          920420
        ]
      },
      {
        "ruleGroupName": "REQUEST-930-APPLICATION-ATTACK-LFI",
        "rules": [
          930100,
          930110
        ]
      },
      {
        "ruleGroupName": "REQUEST-931-APPLICATION-ATTACK-RFI",
        "rules": [
          931130
        ]
      },
      {
        "ruleGroupName": "REQUEST-932-APPLICATION-ATTACK-RCE",
        "rules": [
          932110,
          932115,
          932140
        ]
      },
      {
        "ruleGroupName": "REQUEST-942-APPLICATION-ATTACK-SQLI",
        "rules": [
          942110,
          942120,
          942130,
          942150,
          942180,
          942190,
          942200,
          942210,
          942260,
          942300,
          942310,
          942330,
          942340,
          942360,
          942370,
          942380,
          942390,
          942400
        ]
      },
      {
        "ruleGroupName": "REQUEST-941-APPLICATION-ATTACK-XSS",
        "rules": [
          941100,
          941130,
          941160,
          941200,
          941310,
          941320,
          941330,
          941340,
          941350
        ]
      },
      {
        "ruleGroupName": "REQUEST-943-APPLICATION-ATTACK-SESSION-FIXATION",
        "rules": [
          943110,
          943120
        ]
      }
    ],
    "exclusions": {
      "CONNECTS": [
        {
          "matchVariable": "RequestArgNames",
          "selectorMatchOperator": "Equals",
          "selector": "bulkData"
        },
        {
          "matchVariable": "RequestArgNames",
          "selectorMatchOperator": "Equals",
          "selector": "inputText"
        },
        {
          "matchVariable": "RequestArgNames",
          "selectorMatchOperator": "Equals",
          "selector": "topsheetnotes"
        },
        {
          "matchVariable": "RequestArgNames",
          "selectorMatchOperator": "Equals",
          "selector": "phrasetextonly"
        },
        {
          "matchVariable": "RequestArgNames",
          "selectorMatchOperator": "Equals",
          "selector": "rtfText"
        },
        {
          "matchVariable": "RequestArgNames",
          "selectorMatchOperator": "Equals",
          "selector": "comment"
        },
        {
          "matchVariable": "RequestArgNames",
          "selectorMatchOperator": "Equals",
          "selector": "message"
        },
        {
          "matchVariable": "RequestArgNames",
          "selectorMatchOperator": "Equals",
          "selector": "requiresattention"
        },
        {
          "matchVariable": "RequestArgNames",
          "selectorMatchOperator": "Equals",
          "selector": "usernotes"
        },
        {
          "matchVariable": "RequestArgNames",
          "selectorMatchOperator": "Equals",
          "selector": "notes"
        },
        {
          "matchVariable": "RequestArgNames",
          "selectorMatchOperator": "Equals",
          "selector": "pianoroll"
        },
        {
          "matchVariable": "RequestArgNames",
          "selectorMatchOperator": "Equals",
          "selector": "address"
        },
        {
          "matchVariable": "RequestArgNames",
          "selectorMatchOperator": "Equals",
          "selector": "address_saved"
        }
      ],
      "FORM": [
      ],
      "MYORDERS": [
        {
          "matchVariable": "RequestArgNames",
          "selectorMatchOperator": "Equals",
          "selector": "bulkData"
        },
        {
          "matchVariable": "RequestArgNames",
          "selectorMatchOperator": "Equals",
          "selector": "inputText"
        },
        {
          "matchVariable": "RequestArgNames",
          "selectorMatchOperator": "Equals",
          "selector": "topsheetnotes"
        },
        {
          "matchVariable": "RequestArgNames",
          "selectorMatchOperator": "Equals",
          "selector": "phrasetextonly"
        },
        {
          "matchVariable": "RequestArgNames",
          "selectorMatchOperator": "Equals",
          "selector": "rtfText"
        },
        {
          "matchVariable": "RequestArgNames",
          "selectorMatchOperator": "Equals",
          "selector": "comment"
        },
        {
          "matchVariable": "RequestArgNames",
          "selectorMatchOperator": "Equals",
          "selector": "message"
        },
        {
          "matchVariable": "RequestArgNames",
          "selectorMatchOperator": "Equals",
          "selector": "requiresattention"
        },
        {
          "matchVariable": "RequestArgNames",
          "selectorMatchOperator": "Equals",
          "selector": "usernotes"
        },
        {
          "matchVariable": "RequestArgNames",
          "selectorMatchOperator": "Equals",
          "selector": "notes"
        },
        {
          "matchVariable": "RequestArgNames",
          "selectorMatchOperator": "Equals",
          "selector": "pianoroll"
        },
        {
          "matchVariable": "RequestArgNames",
          "selectorMatchOperator": "Equals",
          "selector": "address"
        },
        {
          "matchVariable": "RequestArgNames",
          "selectorMatchOperator": "Equals",
          "selector": "address_saved"
        }
      ],
      "XML": [
        {
          "matchVariable": "RequestArgNames",
          "selectorMatchOperator": "Equals",
          "selector": "bulkData"
        },
        {
          "matchVariable": "RequestArgNames",
          "selectorMatchOperator": "Equals",
          "selector": "inputText"
        },
        {
          "matchVariable": "RequestArgNames",
          "selectorMatchOperator": "Equals",
          "selector": "topsheetnotes"
        },
        {
          "matchVariable": "RequestArgNames",
          "selectorMatchOperator": "Equals",
          "selector": "phrasetextonly"
        },
        {
          "matchVariable": "RequestArgNames",
          "selectorMatchOperator": "Equals",
          "selector": "rtfText"
        },
        {
          "matchVariable": "RequestArgNames",
          "selectorMatchOperator": "Equals",
          "selector": "comment"
        },
        {
          "matchVariable": "RequestArgNames",
          "selectorMatchOperator": "Equals",
          "selector": "message"
        },
        {
          "matchVariable": "RequestArgNames",
          "selectorMatchOperator": "Equals",
          "selector": "requiresattention"
        },
        {
          "matchVariable": "RequestArgNames",
          "selectorMatchOperator": "Equals",
          "selector": "usernotes"
        },
        {
          "matchVariable": "RequestArgNames",
          "selectorMatchOperator": "Equals",
          "selector": "pianoroll"
        }
      ]
    },
    "requestBodyCheck": true,
    "maxRequestBodySizeInKb": 128,
    "fileUploadLimitInMb": 100,
    "SSLpolicyLookup": {
      "tls12": {
        "policyName": "AppGwSslPolicy20170401S",
        "policyType": "Predefined"
      },
      "Default": "[json('null')]"

    }
  },
  "resources": [
    {
      //"condition": false,
      "apiVersion": "2020-04-01",
      "name": "[concat(parameters('Deployment'),'-waf',parameters('WAFInfo').WAFName)]",
      "type": "Microsoft.Network/applicationGateways",
      "location": "[resourceGroup().location]",
      "dependsOn": [
      ],
      "identity": "[if( or(equals(parameters('wafInfo').WAFTier,'Standard_V2'),equals(parameters('WAFInfo').WAFTier,'WAF_V2')) ,variables('identity'),json('null'))]",
      "properties": {
        "forceFirewallPolicyAssociation": true,
        "sslPolicy": "[if(contains(parameters('WAFInfo'),'SSLPolicy'),variables('SSLpolicyLookup')[parameters('WAFInfo').SSLPolicy],json('null'))]",
        "firewallPolicy": "[if ( and(contains(parameters('wafInfo'),'WAFPolicyAttached'), equals(parameters('wafInfo').WAFPolicyAttached, bool('true'))), variables('firewallPolicy'), json('null')) ]",
        "sku": {
          "name": "[parameters('WAFInfo').WAFSize]",
          "tier": "[parameters('WAFInfo').WAFTier]",
          "capacity": "[parameters('WAFInfo').WAFCapacity]"
        },
        "webApplicationFirewallConfiguration": {
          "enabled": "[parameters('WAFInfo').WAFEnabled]",
          "firewallMode": "[parameters('WAFInfo').WAFMode]",
          "ruleSetType": "OWASP",
          "ruleSetVersion": "3.0",
          "disabledRuleGroups": "[if(and(contains(parameters('WAFInfo'),'WAFPolicyOld'),equals(parameters('WAFInfo').WAFPolicyOld,bool('true'))),variables('disabledRuleGroups'),json('null'))]",
          "exclusions": "[if(and(contains(parameters('WAFInfo'),'WAFPolicyOld'),equals(parameters('WAFInfo').WAFPolicyOld,bool('true'))),variables('exclusions')[parameters('WAFInfo').WAFName],json('null'))]",
          "requestBodyCheck": "[variables('requestBodyCheck')]",
          "maxRequestBodySizeInKb": "[variables('maxRequestBodySizeInKb')]",
          "fileUploadLimitInMb": "[variables('fileUploadLimitInMb')]"
        },
        "authenticationCertificates": "[if( or(equals(parameters('wafInfo').WAFTier,'Standard_V2'),equals(parameters('WAFInfo').WAFTier,'WAF_V2')) ,json('null'),variables('authenticationCertificates'))]",
        "gatewayIPConfigurations": [
          {
            "name": "appGatewayIpConfig",
            "properties": {
              "subnet": {
                "id": "[variables('subnetRefGW')]"
              }
            }
          }
        ],
        "frontendIPConfigurations": [
          {
            "name": "appGatewayFrontendIPPublic",
            "properties": {
              "PublicIPAddress": {
                "id": "[concat(resourceId('Microsoft.Network/publicIPAddresses/', concat(parameters('Deployment'),'-waf',parameters('WAFInfo').WAFName,'-publicip1')) )]"
                // "id": "[concat(resourceId('Microsoft.Network/publicIPAddresses/', concat(parameters('Deployment'),'-publicipWAF',parameters('WAFInfo').WAFName)) )]"
              }
            }
          },
          {
            "name": "appGatewayFrontendIPPrivate",
            "properties": {
              "privateIPAddress": "[concat(variables('networkId'),'.',parameters('WAFInfo').PrivateIP)]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('SubnetRefGW')]"
              }
            }
          }
        ],
        "probes": [
          {
            "name": "Probe1",
            "type": "Microsoft.Network/applicationGateways/probes",
            "properties": {
              "protocol": "Https",
              "host": "probe.titleedge.com",
              "path": "/",
              "interval": 30,
              "timeout": 30,
              "unhealthyThreshold": 3,
              "pickHostNameFromBackendHttpSettings": false,
              "minServers": 0,
              "match": {
                "body": "",
                "statusCodes": [
                  "200-399"
                ]
              }
            }
          }
        ],
        "rewriteRuleSets": [
          {
            "name": "URL-Rewrite",
            "properties": {
              "rewriteRules": [
                {
                  "ruleSequence": 100,
                  "conditions": [
                  ],
                  "name": "Hide Server",
                  "actionSet": {
                    "requestHeaderConfigurations": [
                    ],
                    "responseHeaderConfigurations": [
                      {
                        "headerName": "Server"
                      }
                    ]
                  }
                },
                {
                  "ruleSequence": 100,
                  "conditions": [
                  ],
                  "name": "Hide X Powered By",
                  "actionSet": {
                    "requestHeaderConfigurations": [
                    ],
                    "responseHeaderConfigurations": [
                      {
                        "headerName": "X-Powered-By"
                      }
                    ]
                  }
                }
              ]
            }
          }
        ],
        "copy": [
          // {
          //   "name": "authenticationCertificates",
          //   "count": "[length(parameters('WAFInfo').SSLCerts)]",
          //   "input": {
          //     "name": "[concat(parameters('WAFInfo').SSLCerts[copyIndex('authenticationCertificates')],'Public')]",
          //     "properties": {
          //       "data": "[parameters('WildcardCertBase64Public')]"
          //     }
          //   }
          // },
          {
            "name": "sslCertificates",
            "count": "[length(parameters('WAFInfo').SSLCerts)]",
            "input": {
              "name": "[parameters('WAFInfo').SSLCerts[copyIndex('sslCertificates')]]",
              "properties": {
                "data": "[if(or(equals(parameters('wafInfo').WAFTier,'Standard'),equals(parameters('WAFInfo').WAFTier,'WAF')),parameters('WildcardCertBase64'),json('null'))]",
                "password": "[if(or(equals(parameters('wafInfo').WAFTier,'Standard'),equals(parameters('WAFInfo').WAFTier,'WAF')),parameters('WildcardCertBase64Password'),json('null'))]",
                "publicCertData": "[if(or(equals(parameters('wafInfo').WAFTier,'Standard'),equals(parameters('WAFInfo').WAFTier,'WAF')),parameters('WildcardCertBase64Public'),json('null'))]",
                "keyvaultsecretid": "[if(or(equals(parameters('wafInfo').WAFTier,'Standard_V2'),equals(parameters('WAFInfo').WAFTier,'WAF_V2')),concat('https://',variables('KVName'), '.vault.azure.net/secrets/', parameters('WAFInfo').SSLCerts[copyIndex('sslCertificates')]),json('null'))]"
              }
            }
          },
          {
            "name": "frontendPorts",
            "count": "[length(parameters('WAFInfo').frontendPorts)]",
            "input": {
              "name": "[concat('appGatewayFrontendPort',parameters('WAFInfo').frontendPorts[copyIndex('frontendPorts')].Port)]",
              "properties": {
                "Port": "[parameters('WAFInfo').frontendPorts[copyIndex('frontendPorts')].Port]"
              }
            }
          },

          {
            "name": "backendHttpSettingsCollection",
            "count": "[length(parameters('WAFInfo').BackendHttp)]",
            "input": {
              "name": "[concat('appGatewayBackendHttpSettings',parameters('WAFInfo').BackendHttp[copyIndex('backendHttpSettingsCollection')].Port)]",
              "properties": {
                "Port": "[parameters('WAFInfo').BackendHttp[copyIndex('backendHttpSettingsCollection')].Port]",
                "Protocol": "[parameters('WAFInfo').BackendHttp[copyIndex('backendHttpSettingsCollection')].Protocol]",
                "CookieBasedAffinity": "[parameters('WAFInfo').BackendHttp[copyIndex('backendHttpSettingsCollection')].CookieBasedAffinity]",
                "RequestTimeout": "[parameters('WAFInfo').BackendHttp[copyIndex('backendHttpSettingsCollection')].RequestTimeout]",
                "probe": {
                  "id": "[concat(resourceId('Microsoft.Network/applicationGateways/', concat(parameters('Deployment'),'-waf',parameters('WAFInfo').WAFName)),'/probes/Probe1' )]"
                }
                // "authenticationCertificates": "[if(and(equals(parameters('WAFInfo').BackendHttp[copyIndex('backendHttpSettingsCollection')].Protocol,'https'),equals(parameters('WAFInfo').WAFTier,'WAF')),array(json( concat('{\"id\":\"',string(resourceid('Microsoft.Network/applicationGateways/authenticationCertificates',concat(parameters('Deployment'),'-waf',parameters('WAFInfo').WAFName),concat(parameters('WAFInfo').BackendHttp[copyIndex('backendHttpSettingsCollection')].Cert))),'\"}'))),json('null'))]"
              }
            }
          },
          {
            "name": "httpListeners",
            "count": "[length(parameters('WAFInfo').Listeners)]",
            "input": {
              "name": "[concat('httpListener-',parameters('WAFInfo').Listeners[copyIndex('httpListeners')].Hostname,'-',parameters('WAFInfo').Listeners[copyIndex('httpListeners')].Port)]",
              "properties": {
                "FrontendIPConfiguration": {
                  "id": "[concat(resourceId('Microsoft.Network/applicationGateways/', concat(parameters('Deployment'),'-waf',parameters('WAFInfo').WAFName)),'/frontendIPConfigurations/appGatewayFrontendIP',parameters('WAFInfo').Interface)]"
                },
                "FrontendPort": {
                  "id": "[concat(resourceId('Microsoft.Network/applicationGateways/', concat(parameters('Deployment'),'-waf',parameters('WAFInfo').WAFName)),'/frontendPorts/appGatewayFrontendPort',parameters('WAFInfo').Listeners[copyIndex('httpListeners')].Port )]"
                },
                "Protocol": "[parameters('WAFInfo').Listeners[copyIndex('httpListeners')].Protocol]",
                //"hostName": "[concat(parameters('Environment'),parameters('DeploymentID'),parameters('WAFInfo').Listeners[copyIndex('httpListeners')].Hostname,'.',parameters('WAFInfo').Listeners[copyIndex('httpListeners')].Domain)]", //yates-i6.softpro.io
                //"requireServerNameIndication": "[equals(parameters('WAFInfo').Listeners[copyIndex('httpListeners')].Protocol,'https')]",
                "sslCertificate": "[if(equals(parameters('WAFInfo').Listeners[copyIndex('httpListeners')].Protocol,'https'),variables('Listeners')[copyIndex('httpListeners')].sslCertificate,json('null'))]"
              }
            }
          },
          {
            "name": "requestRoutingRules",
            "count": "[length(parameters('WAFInfo').Listeners)]",
            "input": {
              "name": "[concat('requestRoutingRule-',parameters('WAFInfo').Listeners[copyIndex('requestRoutingRules')].Hostname,parameters('WAFInfo').Listeners[copyIndex('requestRoutingRules')].Port)]",
              "properties": {
                "RuleType": "Basic",
                "httpListener": {
                  "id": "[concat(resourceId('Microsoft.Network/applicationGateways/', concat(parameters('Deployment'),'-waf',parameters('WAFInfo').WAFName)),'/httpListeners/','httpListener-',parameters('WAFInfo').Listeners[copyIndex('requestRoutingRules')].Hostname,'-',parameters('WAFInfo').Listeners[copyIndex('requestRoutingRules')].Port )]"
                },
                "backendAddressPool": "[if(equals(parameters('WAFInfo').Listeners[copyIndex('requestRoutingRules')].Protocol,'https'),variables('Listeners')[copyIndex('requestRoutingRules')].backendAddressPool,json('null'))]",
                "backendHttpSettings": "[if(equals(parameters('WAFInfo').Listeners[copyIndex('requestRoutingRules')].Protocol,'https'),variables('Listeners')[copyIndex('requestRoutingRules')].backendHttpSettings,json('null'))]",
                "redirectConfiguration": "[if(equals(parameters('WAFInfo').Listeners[copyIndex('requestRoutingRules')].Protocol,'http'),variables('Listeners')[copyIndex('requestRoutingRules')].redirectConfiguration,json('null'))]",
                "rewriteRuleSet": {
                  "id": "[concat(resourceId('Microsoft.Network/applicationGateways', concat(parameters('Deployment'),'-waf',parameters('WAFInfo').WAFName)), '/rewriteRuleSets/URL-Rewrite')]"
                }
              }
            }
          },
          {
            "condition": "[equals(parameters('WAFInfo').Listeners[copyIndex('redirectConfigurations')].Protocol,'http')]",
            "name": "redirectConfigurations",
            "count": "[length(parameters('WAFInfo').Listeners)]",
            "input": {
              "name": "[concat('redirectConfiguration-',parameters('WAFInfo').Listeners[copyIndex('redirectConfigurations')].Hostname,'-',parameters('WAFInfo').Listeners[copyIndex('redirectConfigurations')].Port)]",
              "properties": {
                "redirectType": "Permanent",
                "targetListener": {
                  //"id": "/subscriptions/b8f402aa-20f7-4888-b45c-3cf086dad9c3/resourceGroups/AZC1-ADF-RG-D8/providers/Microsoft.Network/applicationGateways/AZC1-ADF-D8-wafVPX/httpListeners/httpListener-contoso.com-443"
                  "id": "[resourceid('Microsoft.Network/applicationGateways/httpListeners',concat(parameters('Deployment'),'-waf',parameters('WAFInfo').WAFName),concat('httpListener-',parameters('WAFInfo').Listeners[copyIndex('redirectConfigurations')].Hostname,'-443'))]"
                },
                "includePath": true,
                "includeQueryString": true
              }
            }
          }
        ],
        // Presume only 1 backendAddressPool per WAF?!
        "backendAddressPools": [
          {
            "name": "appGatewayBackendPool",
            "properties": {
              "copy": [
                {
                  "name": "BackendAddresses",
                  "count": "[length(parameters('WAFInfo').FQDNs)]",
                  "input": {
                    "fqdn": "[concat(variables('DeploymentSourceDR'),parameters('wafInfo').FQDNs[copyIndex('BackendAddresses')],'.',parameters('Global').DomainName)]"
                  }
                }
              ]
            }
          }
        ]
      },
      "resources": [
        {
          "type": "providers/diagnosticSettings",
          "name": "Microsoft.Insights/service",
          "dependsOn": [
            "[concat(parameters('Deployment'),'-waf',parameters('WAFInfo').WAFName)]"
          ],
          "apiVersion": "2015-07-01",
          "properties": {
            "workspaceId": "[parameters('OMSworkspaceID')]",
            "logs": [
              {
                "category": "ApplicationGatewayAccessLog",
                "enabled": true,
                "retentionPolicy": {
                  "days": 30,
                  "enabled": false
                }
              },
              {
                "category": "ApplicationGatewayPerformanceLog",
                "enabled": true,
                "retentionPolicy": {
                  "days": 30,
                  "enabled": false
                }
              },
              {
                "category": "ApplicationGatewayFirewallLog",
                "enabled": true,
                "retentionPolicy": {
                  "days": 30,
                  "enabled": false
                }
              }
            ],
            "metrics": [
              {
                "timeGrain": "PT5M",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": false,
                  "days": 0
                }
              }
            ]
          }
        }
      ]
    }
  ]
}