{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "Deployment": {
            "type": "string"
        },
        "Prefix": {
            "type": "string"
        },
        "DeploymentID": {
            "type": "string"
        },
        "Environment": {
            "type": "string"
        },
        "AppServer": {
            "type": "object"
        },
        "VM": {
            "type": "object"
        },
        "Global": {
            "type": "object"
        },
        "Stage": {
            "type": "object"
        },
        "OMSworkspaceID": {
            "type": "string"
        },
        "deploymentTime": {
            "type": "string",
            "defaultValue": "[utcNow()]"
        },
        "vmAdminPassword": {
            "type": "securestring"
        },
        "sshPublic": {
            "type": "securestring"
        }
    },
    "variables": {
        "Deployment": "[concat(parameters('Prefix'),'-',parameters('Global').OrgName,'-',parameters('Global').Appname,'-',parameters('Environment'),parameters('DeploymentID'))]",
        "RGName": "[concat(parameters('Prefix'),'-',parameters('Global').OrgName,'-',parameters('Global').AppName,'-RG-',parameters('Environment'),parameters('DeploymentID') )]",
        "OSType": "[json(parameters('Global').OSType)]",
        "WadCfg": "[json(parameters('Global').WadCfg)]",
        "ladCfg": "[json(parameters('Global').ladCfg)]",
        "computeSizeLookupOptions": "[json(parameters('Global').computeSizeLookupOptions)]",

        "VMSizeLookup": {
            "D": "D",
            "I": "D",
            "U": "P",
            "P": "P",
            "S": "S"
        },
        "DeploymentName": "[deployment().name]",
        "subscriptionId": "[subscription().subscriptionId]",
        "resourceGroupName": "[resourceGroup().name]",
        "storageAccountType": "[if(equals(parameters('Environment'),'P'), 'Premium_LRS', 'Standard_LRS')]",
        "networkId": "[concat(parameters('Global').networkid[0],string(           sub(parameters('Global').networkid[1],mul(2,int(parameters('DeploymentID'))))))]",
        "networkIdUpper": "[concat(parameters('Global').networkid[0],string(add(1,sub(parameters('Global').networkid[1],mul(2,int(parameters('DeploymentID')))))))]",
        "VNetID": "[resourceId(variables('subscriptionId'),variables('ResourceGroupName'), 'Microsoft.Network/VirtualNetworks', concat(Variables('Deployment'),'-vn'))]",
        "OMSworkspaceName": "[replace(concat(variables('Deployment'),'LogAnalytics'),'-','')]",
        "OMSworkspaceID": "[resourceid('Microsoft.OperationalInsights/workspaces/',variables('OMSworkspaceName'))]",
        "AppInsightsName": "[replace(concat(variables('Deployment'),'AppInsights'),'-','')]",
        "AppInsightsID": "[resourceid('Microsoft.insights/components/',variables('AppInsightsName'))]",
        "SADiagName": "[toLower(concat(replace(variables('Deployment'),'-',''),'sadiag'))]",
        "SAAppDataName": "[toLower(concat(replace(variables('Deployment'),'-',''),'sadata'))]",
        "saaccountiddiag": "[resourceid('Microsoft.Storage/storageAccounts/',variables('SADiagName'))]",
        "saaccountidglobalsource": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',parameters('Global').HubRGName,'/providers/Microsoft.Storage/storageAccounts/', parameters('Global').SAName)]",
        "Domain": "[split(parameters('Global').DomainName,'.')[0]]",
        "DSCConfigLookup": {
            "AppServers": "AppServers",
            "InitialDOP": "AppServers",
            "WVDServers": "AppServers",
            "VMAppSS": "AppServers"
        },
        "WAFBE": "[if(contains(parameters('AppServer'),'WAFBE'),parameters('AppServer').WAFBE,createArray())]",
        "LBBE": "[if(contains(parameters('AppServer'),'LBBE'),parameters('AppServer').LBBE,createArray())]",
        "copy": [
            {
                "name": "applicationGatewayBackendAddressPools",
                "count": "[length(variables('WAFBE'))]",
                "input": {
                    "id": "[resourceid('Microsoft.Network/applicationGateways/backendAddressPools',
                                        concat(parameters('Deployment'),'-waf',parameters('AppServer').WAFBE[CopyIndex('applicationGatewayBackendAddressPools')]),
                                        'appGatewayBackendPool')]"
                }
            },
            {
                "name": "loadBalancerBackendAddressPools",
                "count": "[length(variables('LBBE'))]",
                "input": {
                    "id": "[resourceid('Microsoft.Network/loadBalancers/backendAddressPools',
                                        concat(parameters('Deployment'),'-lb',parameters('AppServer').LBBE[CopyIndex('loadBalancerBackendAddressPools')]),
                                        parameters('AppServer').LBBE[CopyIndex('loadBalancerBackendAddressPools')])]"
                }
            },
            {
                "condition": "[contains(parameters('AppServer'),'NATName')]",
                "name": "loadBalancerInboundNatPools",
                "count": "[length(variables('LBBE'))]",
                "input": {
                    "id": "[resourceid('Microsoft.Network/loadBalancers/inboundNatPools',
                                        concat(parameters('Deployment'),'-lb',parameters('AppServer').LBBE[CopyIndex('loadBalancerInboundNatPools')]),
                                        if(contains(parameters('AppServer'),'NATName'),parameters('AppServer').NATName,'NA'))]"
                }
            }

        ],

        //         "loadBalancerInboundNatPools": [
        //     {
        //         "id": "[resourceId('Microsoft.Network/loadBalancers/inboundNatPools', concat(variables('Deployment'),'-lb', parameters('AppServer').LB), parameters('AppServer').NatName)]"
        //     }
        // ]
        //         "loadBalancerBackendAddressPools": [
        //     {
        //         "id": "/Microsoft.Network/loadBalancers/ACU1-BRW-HAA-D3-lbAPI/backendAddressPools/API"
        //     }
        // ],
        // "applicationGatewayBackendAddressPools": [
        //     {
        //         "id": "Microsoft.Network/applicationGateways/ACU1-BRW-HAA-D3-wafAPI02/backendAddressPools/appGatewayBackendPool"
        //     }
        // ],
        "azureActiveDirectory": {
            "clientApplication": "[parameters('Global').clientApplication]",
            "clusterApplication": "[parameters('Global').clusterApplication]",
            "tenantId": "[subscription().tenantId]"
        },
        "secrets": [
            {
                "sourceVault": {
                    "id": "[resourceId(parameters('Global').HubRGName, 'Microsoft.KeyVault/vaults', parameters('Global').KVName)]"
                },
                "vaultCertificates": [
                    {
                        "certificateUrl": "[parameters('Global').certificateUrl]",
                        "certificateStore": "My"
                    },
                    {
                        "certificateUrl": "[parameters('Global').certificateUrl]",
                        "certificateStore": "Root"
                    },
                    {
                        "certificateUrl": "[parameters('Global').certificateUrl]",
                        "certificateStore": "CA"
                    }
                ]
            }
        ],
        "userAssignedIdentities": {
            "Cluster": {
                "[resourceID('Microsoft.ManagedIdentity/userAssignedIdentities/',concat(variables('Deployment'),'-uaiKeyVaultSecretsGet'))]": {
                },
                "[resourceID('Microsoft.ManagedIdentity/userAssignedIdentities/',concat(variables('Deployment'),'-uaiStorageAccountOperator'))]": {
                },
                "[resourceID('Microsoft.ManagedIdentity/userAssignedIdentities/',concat(variables('Deployment'),'-uaiStorageAccountOperatorGlobal'))]": {
                },
                "[resourceID('Microsoft.ManagedIdentity/userAssignedIdentities/',concat(variables('Deployment'),'-uaiStorageAccountFileContributor'))]": {
                }
            },
            "Default": {
                "[resourceID('Microsoft.ManagedIdentity/userAssignedIdentities/',concat(variables('Deployment'),'-uaiKeyVaultSecretsGet'))]": {
                },
                "[resourceID('Microsoft.ManagedIdentity/userAssignedIdentities/',concat(variables('Deployment'),'-uaiStorageAccountOperatorGlobal'))]": {
                },
                "[resourceID('Microsoft.ManagedIdentity/userAssignedIdentities/',concat(variables('Deployment'),'-uaiStorageAccountFileContributor'))]": {
                }
            }
        }
    },
    "resources": [
        {
            "name": "[concat(variables('Deployment'), '-ss', parameters('AppServer').VMName)]",
            "type": "Microsoft.Compute/virtualMachineScaleSets",
            "location": "[resourceGroup().location]",
            "apiVersion": "2020-12-01",
            "identity": {
                "type": "SystemAssigned, UserAssigned",
                "userAssignedIdentities": "[variables('userAssignedIdentities')['Cluster']]"
            },
            "sku": {
                "name": "[variables('computeSizeLookupOptions')[concat(parameters('AppServer').ASNAME,'-',variables('vmsizelookup')[parameters('Environment')])]]",
                "tier": "Standard",
                "capacity": "[parameters('AppServer').AutoScalecapacity.minimum]"
            },
            "scale": null,
            // "zones" : "[if(contains(parameters('AppServer'),'zones'),
            //                 parameters('AppServer').zones,
            //                 createArray('1','2','3')
            //                 )]",
            "properties": {
                // "zoneBalance": true,
                "overprovision": false,
                "singlePlacementGroup": true,
                "upgradePolicy": {
                    "mode": "Automatic",
                    // "rollingUpgradePolicy": {

                    // },
                    "automaticOSUpgradePolicy": {
                        "enableAutomaticOSUpgrade": false
                    }
                },
                "virtualMachineProfile": {
                    "licenseType": "[if(contains(variables('OSType')[parameters('AppServer').OSType],'licenseType'),variables('OSType')[parameters('AppServer').OSType].licenseType,json('null'))]",
                    "osProfile": {
                        "computerNamePrefix": "[parameters('VM').vmHostName]",
                        "adminUsername": "[parameters('Global').vmAdminUserName]",
                        "adminPassword": "[parameters('vmAdminPassword')]",
                        "windowsConfiguration": {
                            "provisionVMAgent": true,
                            "enableAutomaticUpdates": true
                        },
                        "secrets": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS,'Windows'),variables('secrets'),json('null'))]"
                    },
                    "storageProfile": {
                        "osDisk": {
                            "createOption": "FromImage",
                            "caching": "ReadOnly",
                            "managedDisk": {
                                "storageAccountType": "[variables('StorageAccountType')]"
                            }
                        },
                        "dataDisks": "[reference(resourceId('Microsoft.Resources/deployments',concat('dp', variables('Deployment'), '-diskLookup', parameters('AppServer').VMName)),'2018-05-01').outputs.DATADisks.value]",
                        "imageReference": "[variables('OSType')[parameters('AppServer').OSType].imageReference]"
                    },
                    "diagnosticsProfile": {
                        "bootDiagnostics": {
                            "enabled": true,
                            "storageUri": "[concat('http://', variables('SADiagName'), '.blob.core.windows.net')]"
                        }
                    },
                    "networkProfile": {
                        "networkInterfaceConfigurations": [
                            {
                                "name": "NIC-0",
                                "properties": {
                                    "primary": true,
                                    "enableAcceleratedNetworking": false,
                                    "dnsSettings": {
                                        "dnsServers": [
                                        ]
                                    },
                                    "ipConfigurations": [
                                        {
                                            "name": "[concat(variables('Deployment'),'-',parameters('AppServer').VMName,'-nic0')]",
                                            "properties": {
                                                "subnet": {
                                                    "id": "[concat(variables('VNetID'), '/subnets/','sn',parameters('AppServer').Subnet)]"
                                                },
                                                "privateIPAddressVersion": "IPv4",
                                                "applicationGatewayBackendAddressPools": "[variables('applicationGatewayBackendAddressPools')]",
                                                "loadBalancerBackendAddressPools": "[variables('loadBalancerBackendAddressPools')]",
                                                "loadBalancerInboundNatPools": "[variables('loadBalancerInboundNatPools')]"
                                            }
                                        }
                                    ]
                                }
                            }
                        ]
                    },
                    "extensionProfile": {
                        "extensions": [
                            {
                                // Domain Join Options https://msdn.microsoft.com/en-us/library/aa392154(v=vs.85).aspx
                                //   "condition": "[and(not(contains(parameters('AppServer'),'ExcludeDomainJoin')),equals(parameters('VM').Extensions.DomainJoin,1))]",
                                //   "apiVersion": "2018-04-01",
                                //   "type": "extensions",
                                //   "location": "[resourceGroup().location]",
                                //   "dependsOn": [
                                //     "[resourceId('Microsoft.Compute/virtualMachines', concat(variables('Deployment'),'-vm', parameters('AppServer').VMName))]"
                                //   ],
                                "name": "joindomain",
                                "properties": {
                                    "publisher": "Microsoft.Compute",
                                    "type": "JsonADDomainExtension",
                                    "typeHandlerVersion": "1.3",
                                    "autoUpgradeMinorVersion": true,
                                    "settings": {
                                        "Name": "[parameters('Global').ADDomainName]",
                                        "OUPath": "[if(contains(parameters('AppServer'),'OUPath'),parameters('AppServer').OUPath,'')]",
                                        "User": "[concat(parameters('Global').vmAdminUserName,'@',parameters('Global').ADDomainName)]",
                                        "Restart": "true",
                                        "Options": 3
                                    },
                                    "protectedSettings": {
                                        "Password": "[parameters('vmAdminPassword')]"
                                    }
                                }
                            },
                            // {
                            //     "name": "[concat(parameters('AppServer').VMName,'-ServiceFabricNode')]",
                            //     "properties": {
                            //         "publisher": "Microsoft.Azure.ServiceFabric",
                            //         "type": "ServiceFabricNode",
                            //         "typeHandlerVersion": "1.0",
                            //         "autoUpgradeMinorVersion": true,
                            //         "protectedSettings": {
                            //             "StorageAccountKey1": "[listKeys(variables('saaccountiddiag'), '2016-01-01').keys[0].value]",
                            //             "StorageAccountKey2": "[listKeys(variables('saaccountiddiag'), '2016-01-01').keys[1].value]"
                            //         },
                            //         "settings": {
                            //             "clusterEndpoint": "[reference(concat(variables('Deployment'), '-sf', parameters('AppServer').SFName)).clusterEndpoint]",
                            //             "nodeTypeRef": "[parameters('VM').NodeType]",
                            //             "dataPath": "D:\\\\SvcFab",
                            //             "durabilityLevel": "[parameters('AppServer').durabilityLevel]",
                            //             "enableParallelJobs": true,
                            //             "nicPrefixOverride": "[if(equals(parameters('AppServer').Subnet,'MT02'),variables('networkIdUpper'),variables('networkId'))]",
                            //             "certificate": {
                            //                 "Thumbprint": "[parameters('Global').certificateThumbprint]",
                            //                 "x509StoreName": "My"
                            //             }
                            //         }
                            //     }
                            // },
                            {
                                "name": "VMDiagnostics",
                                "properties": {
                                    "publisher": "Microsoft.Azure.Diagnostics",
                                    "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS,'Windows'),'IaaSDiagnostics','LinuxDiagnostic')]",
                                    "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS,'Windows'),'1.9','3.0')]",
                                    "autoUpgradeMinorVersion": true,
                                    "settings": {
                                        "WadCfg": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS,'Windows'),variables('WadCfg'),json('null'))]",
                                        "ladCfg": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS,'Windows'),json('null'),variables('ladCfg'))]",
                                        "StorageAccount": "[variables('saaccountiddiag')]",
                                        "StorageType": "TableAndBlob"
                                    },
                                    "protectedSettings": {
                                        "storageAccountName": "[variables('SADiagName')]",
                                        "storageAccountKey": "[listKeys(variables('saaccountiddiag'), '2016-01-01').keys[0].value]",
                                        "storageAccountEndPoint": "https://core.windows.net/"
                                    }
                                }
                            },
                            {
                                "name": "DependencyAgent",
                                "properties": {
                                    "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                                    "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS,'Windows'),'DependencyAgentWindows','DependencyAgentLinux')]",
                                    "typeHandlerVersion": "9.5",
                                    "autoUpgradeMinorVersion": true
                                }
                            },
                            // https://docs.microsoft.com/en-us/azure/azure-monitor/insights/vminsights-health-enable?tabs=powershell
                            {
                                "name": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS,'Windows'),'AzureMonitorWindowsAgent','AzureMonitorLinuxAgent')]",
                                "properties": {
                                    "autoUpgradeMinorVersion": true,
                                    "publisher": "Microsoft.Azure.Monitor",
                                    "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS,'Windows'),'AzureMonitorWindowsAgent','AzureMonitorLinuxAgent')]",
                                    "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS,'Windows'),'1.0','1.5')]"
                                }
                            },
                            {
                                "name": "MonitoringAgent",
                                "properties": {
                                    "publisher": "Microsoft.EnterpriseCloud.Monitoring",
                                    "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS,'Windows'),'MicrosoftMonitoringAgent','OmsAgentForLinux')]",
                                    "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS,'Windows'),'1.0','1.4')]",
                                    "autoUpgradeMinorVersion": true,
                                    "settings": {
                                        "workspaceId": "[reference(variables('OMSworkspaceID'), '2017-04-26-preview').CustomerId]"
                                    },
                                    "protectedSettings": {
                                        "workspaceKey": "[listKeys(variables('OMSworkspaceID'), '2015-11-01-preview').primarySharedKey]"
                                    }
                                }
                            },
                            {
                                "name": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS,'Windows'),'GuestHealthWindowsAgent','GuestHealthLinuxAgent')]",
                                "properties": {
                                    "autoUpgradeMinorVersion": true,
                                    "publisher": "Microsoft.Azure.Monitor.VirtualMachines.GuestHealth",
                                    "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS,'Windows'),'GuestHealthWindowsAgent','GuestHealthLinuxAgent')]",
                                    "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS,'Windows'),'1.0','1.0')]"
                                }
                            },
                            {
                                "name": "Microsoft.Powershell.DSC",
                                "properties": {
                                    "provisionAfterExtensions": [
                                        "joindomain"
                                    ],
                                    "publisher": "Microsoft.Powershell",
                                    "type": "DSC",
                                    "typeHandlerVersion": "2.24",
                                    "autoUpgradeMinorVersion": true,
                                    "forceUpdateTag": "[parameters('deploymentTime')]",
                                    "settings": {
                                        "wmfVersion": "latest",
                                        "configuration": {
                                            "url": "[concat(parameters('global')._artifactsLocation, '/ext-DSC/DSC-',if(contains(parameters('AppServer'),'DSConfig'),
                                                                                        parameters('AppServer').DSConfig,
                                                                                        if(
                                                                                            contains(variables('DSCConfigLookup'),variables('DeploymentName')),
                                                                                                    variables('DSCConfigLookup')[variables('DeploymentName')],
                                                                                                    'AppServers'
                                                                                        )),
                                                                                        '.zip')]",
                                            "script": "[concat('DSC-',if(contains(parameters('AppServer'),'DSConfig'),
                                                                                        parameters('AppServer').DSConfig,
                                                                                        if(
                                                                                        contains(variables('DSCConfigLookup'),variables('DeploymentName')),
                                                                                                    variables('DSCConfigLookup')[variables('DeploymentName')],
                                                                                                    'AppServers'
                                                                                        )),'.ps1')]",
                                            "function": "[if(contains(parameters('AppServer'),'DSConfig'),
                                                                                        parameters('AppServer').DSConfig,
                                                                                        if(
                                                                                        contains(variables('DSCConfigLookup'),variables('DeploymentName')),
                                                                                                    variables('DSCConfigLookup')[variables('DeploymentName')],
                                                                                                    'AppServers'
                                                                                        ))]"
                                        },
                                        "configurationArguments": {
                                            "DomainName": "[parameters('Global').ADDomainName]",
                                            "Thumbprint": "[parameters('Global').certificateThumbprint]",
                                            "storageAccountId": "[variables('saaccountidglobalsource')]",
                                            "deployment": "[replace(variables('Deployment'),'-','')]",
                                            "networkid": "[concat(variables('networkId'),'.')]",
                                            "appInfo": "[if(contains(parameters('AppServer'),'AppInfo'),string(parameters('AppServer').AppInfo),'')]",
                                            "DNSInfo": "[if(and(equals(parameters('AppServer').VMName,'JMP01'),equals(parameters('Stage').DNSLookup,1)),string(reference(resourceId('Microsoft.Resources/deployments','DNSLookup'),'2017-05-10','Full').properties.outputs.dns.value),'')]",
                                            "DataDiskInfo": "[string(parameters('VM').DataDisk)]",
                                            "clientIDLocal": "[if(equals(concat(parameters('Environment'),parameters('DeploymentID')),'G0') ,'',reference(concat(subscription().Id,'/resourceGroups/',variables('RGName'), '/providers/Microsoft.ManagedIdentity/userAssignedIdentities/',variables('Deployment'),'-uaiStorageAccountOperator'),'2018-11-30').ClientId)]",
                                            "clientIDGlobal": "[if(equals(concat(parameters('Environment'),parameters('DeploymentID')),'G0') ,'',reference(concat(subscription().Id,'/resourceGroups/',variables('RGName'), '/providers/Microsoft.ManagedIdentity/userAssignedIdentities/',variables('Deployment'),'-uaiStorageAccountFileContributor'),'2018-11-30').ClientId)]"

                                        },
                                        "configurationData": {
                                            "url": "[concat(parameters('global')._artifactsLocation, '/ext-CD/',parameters('AppServer').Role,'-ConfigurationData.psd1')]"
                                        }
                                    },
                                    "protectedSettings": {
                                        "configurationArguments": {
                                            "AdminCreds": {
                                                "UserName": "[parameters('Global').vmAdminUserName]",
                                                "Password": "[parameters('vmAdminPassword')]"
                                            },
                                            "sshPublic": {
                                                "UserName": "pat",
                                                "Password": "[parameters('sshPublic')]"
                                            }
                                        },
                                        "configurationUrlSasToken": "[parameters('global')._artifactsLocationSasToken]",
                                        "configurationDataUrlSasToken": "[parameters('global')._artifactsLocationSasToken]"
                                    }
                                }
                            },
                            {
                                "name": "HealthExtension",
                                "properties": {
                                    "publisher": "Microsoft.ManagedServices",
                                    "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS,'Windows'),'ApplicationHealthWindows','ApplicationHealthLinux')]",
                                    "autoUpgradeMinorVersion": true,
                                    "typeHandlerVersion": "1.0",
                                    "settings": "[parameters('AppServer').Health]"
                                }
                            }
                        ]
                    }
                }
            },
            "resources": [
                {
                    "condition": "[equals(parameters('VM').Extensions.MSI,1)]",
                    "apiVersion": "2019-05-01",
                    "type": "Microsoft.Resources/deployments",
                    "name": "[concat('nested-roleAssignmentsGlobal',parameters('AppServer').VMName)]",
                    "resourceGroup": "[parameters('Global').HubRGName]",
                    "subscriptionId": "[variables('SubscriptionID')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachineScaleSets', concat(variables('Deployment'),'-ss', parameters('AppServer').VMName))]"
                    ],
                    "properties": {
                        "mode": "Incremental",
                        "template": {
                            "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                            "contentVersion": "1.0.0.0",
                            "parameters": {
                            },
                            "variables": {
                            },
                            "resources": [
                                {
                                    "type": "Microsoft.Authorization/roleAssignments",
                                    // Unique guid for the role assignment type, the resource group where it's assigned and the unique guid of the vm principalid
                                    "name": "[guid('81a9662b-bebf-436f-a333-f67b29880f12',parameters('Global').HubRGName,reference(resourceid('Microsoft.Compute/virtualMachineScaleSets',concat(variables('Deployment'),'-ss',parameters('AppServer').VMName)),'2017-12-01','Full').identity.principalId )]",
                                    "apiVersion": "2018-01-01-preview",
                                    "properties": {
                                        "roleDefinitionId": "[concat(subscription().Id, '/providers/Microsoft.Authorization/roleDefinitions/81a9662b-bebf-436f-a333-f67b29880f12')]",
                                        "principalId": "[reference(resourceid('Microsoft.Compute/virtualMachineScaleSets',concat(variables('Deployment'),'-ss',parameters('AppServer').VMName)),'2017-12-01','Full').identity.principalId]",
                                        "scope": "[concat(Subscription().id,'/resourceGroups/',parameters('Global').HubRGName)]"
                                    }
                                }
                            ]
                        },
                        "parameters": {
                        }
                    }
                },
                {
                    "name": "[concat(variables('Deployment'), '-ss', parameters('AppServer').VMName,'-Autoscale')]",
                    "apiVersion": "2015-04-01",
                    "type": "Microsoft.Insights/autoscaleSettings",
                    "location": "centralus",
                    "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachineScaleSets', concat(variables('Deployment'),'-ss', parameters('AppServer').VMName))]"
                    ],
                    "properties": {
                        "name": "[concat(variables('Deployment'), '-ss', parameters('AppServer').VMName,'-Autoscale')]",
                        "enabled": "[parameters('AppServer').AutoScale]",
                        "predictiveAutoscalePolicy": {
                            "scaleMode": "[parameters('AppServer').PredictiveScale]"
                        },
                        "targetResourceUri": "[resourceid('Microsoft.Compute/virtualMachineScaleSets',concat(variables('Deployment'), '-ss', parameters('AppServer').VMName))]",
                        "profiles": [
                            {
                                "name": "Auto created scale condition",
                                "capacity": {
                                    "minimum": "[parameters('AppServer').AutoScalecapacity.minimum]",
                                    "maximum": "[parameters('AppServer').AutoScalecapacity.maximum]",
                                    "default": "[parameters('AppServer').AutoScalecapacity.default]"
                                },
                                "rules": [
                                    {
                                        "scaleAction": {
                                            "direction": "Increase",
                                            "type": "ChangeCount",
                                            "value": "1",
                                            "cooldown": "PT5M"
                                        },
                                        "metricTrigger": {
                                            "metricName": "Percentage CPU",
                                            "metricNamespace": "microsoft.compute/virtualmachinescalesets",
                                            "metricResourceUri": "[resourceid('Microsoft.Compute/virtualMachineScaleSets',concat(variables('Deployment'), '-ss', parameters('AppServer').VMName))]",
                                            "operator": "GreaterThan",
                                            "statistic": "Average",
                                            "threshold": 70,
                                            "timeAggregation": "Average",
                                            "timeGrain": "PT1M",
                                            "timeWindow": "PT6M",
                                            "Dimensions": [],
                                            "dividePerInstance": false
                                        }
                                    },
                                    {
                                        "scaleAction": {
                                            "direction": "Decrease",
                                            "type": "ChangeCount",
                                            "value": "1",
                                            "cooldown": "PT5M"
                                        },
                                        "metricTrigger": {
                                            "metricName": "Percentage CPU",
                                            "metricNamespace": "microsoft.compute/virtualmachinescalesets",
                                            "metricResourceUri": "[resourceid('Microsoft.Compute/virtualMachineScaleSets',concat(variables('Deployment'), '-ss', parameters('AppServer').VMName))]",
                                            "operator": "LessThan",
                                            "statistic": "Average",
                                            "threshold": 15,
                                            "timeAggregation": "Average",
                                            "timeGrain": "PT1M",
                                            "timeWindow": "PT6M",
                                            "Dimensions": [],
                                            "dividePerInstance": false
                                        }
                                    }
                                ]
                            }
                        ],
                        "notifications": [],
                        "targetResourceLocation": "centralus"
                    },
                    "resources": [
                        // {
                        //     "name": "service",
                        //     "type": "Microsoft.Insights/diagnosticSettings",
                        //     "dependsOn": [
                        //         "[concat(variables('Deployment'), '-ss', parameters('AppServer').VMName,'-Autoscale')]"
                        //     ],
                        //     "apiVersion": "2015-07-01",
                        //     "properties": {
                        //         "workspaceId": "[variables('OMSworkspaceID')]",
                        //         "logs": [
                        //             {
                        //                 "category": "AutoscaleEvaluations",
                        //                 "enabled": true,
                        //                 "retentionPolicy": {
                        //                     "days": 30,
                        //                     "enabled": false
                        //                 }
                        //             },
                        //             {
                        //                 "category": "AutoscaleScaleActions",
                        //                 "enabled": true,
                        //                 "retentionPolicy": {
                        //                     "days": 30,
                        //                     "enabled": false
                        //                 }
                        //             }
                        //         ],
                        //         "metrics": [
                        //             {
                        //                 "timeGrain": "PT5M",
                        //                 "enabled": true,
                        //                 "retentionPolicy": {
                        //                     "enabled": false,
                        //                     "days": 0
                        //                 }
                        //             }
                        //         ]
                        //     }
                        // }
                    ]
                }
            ]
        }
        // {
        //     "type": "Microsoft.ServiceFabric/clusters",
        //     "name": "[concat(variables('Deployment'), '-sf', variables('AppServersSF')[copyIndex(0)].SFName)]",
        //     "apiVersion": "2018-02-01",
        //     "location": "[resourceGroup().location]",
        //     "copy": {
        //         "name": "sfLoop",
        //         "count": "[length(variables('AppServersSF'))]"
        //     },
        //     "dependsOn": [
        //     ],
        //     "scale": null,
        //     "properties": {
        //         "vmImage": "Windows",
        //         "reliabilityLevel": "[variables('AppServersSF')[copyIndex(0)].reliabilitylevel]",
        //         "upgradeMode": "Automatic",
        //         "addonFeatures": [
        //             "DnsService",
        //             "RepairManager"
        //         ],
        //         "managementEndpoint": "[toLower( concat('https://',if(equals(variables('AppServersSF')[copyIndex(0)].Subnet,'MT02'),variables('networkIdUpper'),variables('networkId')),'.',variables('AppServersSF')[copyIndex(0)].LBFEIP,':19080'))]",
        //         "certificate": {
        //             "thumbprint": "[parameters('Global').certificateThumbprint]",
        //             "x509StoreName": "My"
        //         },
        //         "clientCertificateThumbprints": [
        //             {
        //                 "isAdmin": true,
        //                 "certificateThumbprint": "[parameters('Global').certificateThumbprint]"
        //             }
        //         ],
        //         "clientCertificateCommonNames": [
        //         ],
        //         // "reverseProxyCertificate": {
        //         //     "thumbprint": "[parameters('Global').certificateThumbprint]",
        //         //     "x509StoreName": "My"
        //         // },
        //         "azureActiveDirectory": "[if(equals(parameters('VM').Extensions.VMSSAzureADEnabled,1) ,variables('azureActiveDirectory'),json('null'))]",
        //         "fabricSettings": [
        //             {
        //                 "name": "Security",
        //                 "parameters": [
        //                     {
        //                         "name": "ClusterProtectionLevel",
        //                         "value": "EncryptAndSign"
        //                     }
        //                 ]
        //             }
        //         ],
        //         "diagnosticsStorageAccountConfig": {
        //             "storageAccountName": "[variables('SADiagName')]",
        //             "protectedAccountKeyName": "StorageAccountKey1",
        //             "blobEndpoint": "[concat('https', '://', variables('SADiagName'), '.blob.core.windows.net', '/')]",
        //             "queueEndpoint": "[concat('https', '://', variables('SADiagName'), '.queue.core.windows.net', '/')]",
        //             "tableEndpoint": "[concat('https', '://', variables('SADiagName'), '.table.core.windows.net', '/')]"
        //         },
        //         "copy": [
        //             {
        //                 "name": "nodeTypes",
        //                 "count": "[length(parameters('DeploymentInfo').AppServersVMSS)]",
        //                 "input": {
        //                     "name": "[variables('VM')[copyIndex('nodeTypes')].NodeType]",
        //                     "vmInstanceCount": "[variables('VM')[copyIndex('nodeTypes')].Capacity]",
        //                     "clientConnectionEndpointPort": 19000,
        //                     "httpGatewayEndpointPort": 19080,
        //                     "applicationPorts": {
        //                         "startPort": 20000,
        //                         "endPort": 30000
        //                     },
        //                     "ephemeralPorts": {
        //                         "startPort": 49152,
        //                         "endPort": 65534
        //                     },
        //                     "isPrimary": "[variables('VM')[copyIndex('nodeTypes')].Primary]",
        //                     "reverseProxyEndpointPort": 19081,
        //                     "durabilityLevel": "[variables('VM')[copyIndex('nodeTypes')].durabilityLevel]",
        //                     "placementProperties": "[variables('VM')[copyIndex('nodeTypes')].placementProperties]"
        //                 }
        //             }
        //         ]
        //     }
        // }
    ]
}