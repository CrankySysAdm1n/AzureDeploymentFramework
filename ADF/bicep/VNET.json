{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.3.539.46024",
      "templateHash": "1403063605690207567"
    }
  },
  "parameters": {
    "Prefix": {
      "type": "string",
      "defaultValue": "AZE2",
      "allowedValues": [
        "AZE2",
        "AZC1",
        "AEU2",
        "ACU1"
      ]
    },
    "Environment": {
      "type": "string",
      "defaultValue": "D",
      "allowedValues": [
        "I",
        "D",
        "U",
        "P",
        "S",
        "G",
        "A"
      ]
    },
    "DeploymentID": {
      "type": "string",
      "defaultValue": "1",
      "allowedValues": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9"
      ]
    },
    "Stage": {
      "type": "object"
    },
    "Extensions": {
      "type": "object"
    },
    "Global": {
      "type": "object"
    },
    "DeploymentInfo": {
      "type": "object"
    },
    "vmAdminPassword": {
      "type": "secureString"
    },
    "devOpsPat": {
      "type": "secureString"
    },
    "sshPublic": {
      "type": "secureString"
    }
  },
  "functions": [],
  "variables": {
    "subscriptionId": "[subscription().subscriptionId]",
    "resourceGroupName": "[resourceGroup().name]",
    "Deployment": "[format('{0}-{1}-{2}-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID'))]",
    "OMSworkspaceName": "[replace(format('{0}LogAnalytics', variables('Deployment')), '-', '')]",
    "OMSworkspaceID": "[resourceId('Microsoft.OperationalInsights/workspaces/', variables('OMSworkspaceName'))]",
    "networkId": "[concat(parameters('Global').networkid[0], string(sub(parameters('Global').networkid[1], mul(2, int(parameters('DeploymentID'))))))]",
    "networkIdUpper": "[concat(parameters('Global').networkid[0], string(add(1, sub(parameters('Global').networkid[1], mul(2, int(parameters('DeploymentID')))))))]",
    "addressPrefixes": [
      "[format('{0}.0/23', variables('networkId'))]"
    ],
    "DNSServers": "[parameters('Global').DNSServers]",
    "Domain": "[split(parameters('Global').DomainName, '.')[0]]",
    "RouteTableGlobal": {
      "id": "[resourceId(parameters('Global').HubRGName, 'Microsoft.Network/routeTables/', concat(replace(parameters('Global').hubVNetName, 'vn', 'rt'), variables('Domain'), parameters('Global').RTName))]"
    },
    "SubnetInfo": "[parameters('DeploymentInfo').SubnetInfo]",
    "hubVNetName": "[if(contains(parameters('DeploymentInfo'), 'hubRegionPrefix'), replace(parameters('Global').hubVNetName, parameters('Prefix'), parameters('DeploymentInfo').hubRegionPrefix), parameters('Global').hubVNetName)]",
    "hubVNetResourceGroupName": "[if(contains(parameters('DeploymentInfo'), 'hubRegionPrefix'), replace(parameters('Global').hubRGName, parameters('Prefix'), parameters('DeploymentInfo').hubRegionPrefix), parameters('Global').hubRGName)]",
    "hubVNetSubscriptionID": "[parameters('Global').hubSubscriptionID]",
    "Deploymentnsg": "[format('{0}-{1}-{2}-{3}{4}{5}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').AppName, parameters('Environment'), parameters('DeploymentID'), if(equals(concat(parameters('Environment'), parameters('DeploymentID')), 'P0'), '-Hub', '-Spoke'))]",
    "delegations": {
      "default": [],
      "Microsoft.Web/serverfarms": [
        {
          "name": "delegation",
          "properties": {
            "serviceName": "Microsoft.Web/serverfarms"
          }
        }
      ],
      "Microsoft.ContainerInstance/containerGroups": [
        {
          "name": "aciDelegation",
          "properties": {
            "serviceName": "Microsoft.ContainerInstance/containerGroups"
          }
        }
      ]
    }
  },
  "resources": [
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2019-12-01",
      "name": "[format('{0}-vn', variables('Deployment'))]",
      "location": "[resourceGroup().location]",
      "properties": {
        "copy": [
          {
            "name": "subnets",
            "count": "[length(variables('SubnetInfo'))]",
            "input": {
              "name": "[variables('SubnetInfo')[copyIndex('subnets')].name]",
              "properties": {
                "addressPrefix": "[format('{0}.{1}', if(equals(variables('SubnetInfo')[copyIndex('subnets')].name, 'snMT02'), variables('networkIdUpper'), variables('networkId')), variables('SubnetInfo')[copyIndex('subnets')].Prefix)]",
                "networkSecurityGroup": "[if(and(contains(variables('SubnetInfo')[copyIndex('subnets')], 'NSG'), equals(variables('SubnetInfo')[copyIndex('subnets')].NSG, 1)), json(format('{{\"id\":\"{0}\"}}', string(resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-nsg{1}', variables('Deploymentnsg'), variables('SubnetInfo')[copyIndex('subnets')].name))))), json('null'))]",
                "routeTable": "[if(and(contains(variables('SubnetInfo')[copyIndex('subnets')], 'Route'), equals(variables('SubnetInfo')[copyIndex('subnets')].Route, 1)), variables('RouteTableGlobal'), json('null'))]",
                "privateEndpointNetworkPolicies": "Disabled",
                "delegations": "[if(contains(variables('SubnetInfo')[copyIndex('subnets')], 'delegations'), variables('delegations')[variables('SubnetInfo')[copyIndex('subnets')].delegations], variables('delegations').default)]"
              }
            }
          }
        ],
        "addressSpace": {
          "addressPrefixes": "[variables('addressPrefixes')]"
        },
        "dhcpOptions": {
          "dnsServers": "[array(variables('DNSServers'))]"
        }
      }
    },
    {
      "type": "microsoft.insights/diagnosticSettings",
      "apiVersion": "2017-05-01-preview",
      "scope": "[format('Microsoft.Network/virtualNetworks/{0}', format('{0}-vn', variables('Deployment')))]",
      "name": "service",
      "properties": {
        "workspaceId": "[variables('OMSworkspaceID')]",
        "logs": [
          {
            "category": "VMProtectionAlerts",
            "enabled": true
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', format('{0}-vn', variables('Deployment')))]"
      ]
    },
    {
      "condition": "[equals(parameters('Stage').VNetPeering, 1)]",
      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
      "apiVersion": "2017-10-01",
      "name": "[format('{0}/{1}', format('{0}-vn', variables('Deployment')), format('{0}-vn--{1}', variables('Deployment'), variables('hubVNetName')))]",
      "properties": {
        "allowVirtualNetworkAccess": true,
        "allowForwardedTraffic": true,
        "allowGatewayTransit": false,
        "useRemoteGateways": false,
        "remoteVirtualNetwork": {
          "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('hubVNetSubscriptionID'), variables('hubVNetResourceGroupName')), 'Microsoft.Network/virtualNetworks', variables('hubVNetName'))]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', format('{0}-vn', variables('Deployment')))]"
      ]
    },
    {
      "condition": "[equals(parameters('Stage').VNetPeering, 1)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "[format('{0}--{1}-vn', variables('hubVNetName'), variables('Deployment'))]",
      "resourceGroup": "[variables('hubVNetResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "subscriptionID": {
            "value": "[variables('subscriptionId')]"
          },
          "resourceGroupName": {
            "value": "[variables('resourceGroupName')]"
          },
          "vNetName": {
            "value": "[format('{0}-vn', variables('Deployment'))]"
          },
          "vNetNameHub": {
            "value": "[variables('hubVNetName')]"
          },
          "peeringName": {
            "value": "[format('{0}--{1}-vn', variables('hubVNetName'), variables('Deployment'))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.3.539.46024",
              "templateHash": "5694434840411802249"
            }
          },
          "parameters": {
            "subscriptionID": {
              "type": "string"
            },
            "resourceGroupName": {
              "type": "string"
            },
            "vNetName": {
              "type": "string"
            },
            "vNetNameHub": {
              "type": "string"
            },
            "peeringName": {
              "type": "string"
            }
          },
          "functions": [],
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
              "apiVersion": "2017-10-01",
              "name": "[format('{0}/{1}', parameters('vNetNameHub'), parameters('peeringName'))]",
              "properties": {
                "allowVirtualNetworkAccess": true,
                "allowForwardedTraffic": true,
                "allowGatewayTransit": false,
                "useRemoteGateways": false,
                "remoteVirtualNetwork": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionID'), parameters('resourceGroupName')), 'Microsoft.Network/virtualNetworks', parameters('vNetName'))]"
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', format('{0}-vn', variables('Deployment')))]"
      ]
    }
  ],
  "outputs": {
    "VNetID": {
      "type": "string",
      "value": "[variables('networkId')]"
    }
  }
}