{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.3.539.46024",
      "templateHash": "12548237060355863954"
    }
  },
  "parameters": {
    "Prefix": {
      "type": "string",
      "defaultValue": "AZE2",
      "allowedValues": [
        "AZE2",
        "AZC1",
        "AEU2",
        "ACU1"
      ]
    },
    "Environment": {
      "type": "string",
      "defaultValue": "D",
      "allowedValues": [
        "I",
        "D",
        "U",
        "P",
        "S",
        "G",
        "A"
      ]
    },
    "DeploymentID": {
      "type": "string",
      "defaultValue": "1",
      "allowedValues": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9"
      ]
    },
    "Stage": {
      "type": "object"
    },
    "Extensions": {
      "type": "object"
    },
    "Global": {
      "type": "object"
    },
    "DeploymentInfo": {
      "type": "object"
    },
    "vmAdminPassword": {
      "type": "secureString"
    },
    "devOpsPat": {
      "type": "secureString"
    },
    "sshPublic": {
      "type": "secureString"
    }
  },
  "functions": [],
  "variables": {
    "copy": [
      {
        "name": "SAInfo",
        "count": "[length(range(0, length(variables('storageInfo'))))]",
        "input": {
          "match": "[or(equals(parameters('Global').CN, '.'), contains(parameters('Global').CN, parameters('DeploymentInfo').saInfo[range(0, length(variables('storageInfo')))[copyIndex('SAInfo')]].nameSuffix))]"
        }
      }
    ],
    "Deployment": "[format('{0}-{1}-{2}-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID'))]",
    "DeploymentURI": "[toLower(concat(parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID')))]",
    "OMSworkspaceName": "[format('{0}LogAnalytics', variables('DeploymentURI'))]",
    "OMSworkspaceID": "[resourceId('Microsoft.OperationalInsights/workspaces/', variables('OMSworkspaceName'))]",
    "storageInfo": "[if(contains(parameters('DeploymentInfo'), 'saInfo'), parameters('DeploymentInfo').saInfo, createArray())]"
  },
  "resources": [
    {
      "condition": "[variables('SAInfo')[copyIndex()].match]",
      "copy": {
        "name": "SA",
        "count": "[length(variables('storageInfo'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "[format('dp{0}-storageDeploy{1}', variables('Deployment'), if(equals(length(variables('storageInfo')), 0), 'na', variables('storageInfo')[copyIndex()].nameSuffix))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "Deployment": {
            "value": "[variables('Deployment')]"
          },
          "DeploymentURI": {
            "value": "[variables('DeploymentURI')]"
          },
          "DeploymentID": {
            "value": "[parameters('DeploymentID')]"
          },
          "Environment": {
            "value": "[parameters('Environment')]"
          },
          "storageInfo": {
            "value": "[variables('storageInfo')[copyIndex()]]"
          },
          "Global": {
            "value": "[parameters('Global')]"
          },
          "Stage": {
            "value": "[parameters('Stage')]"
          },
          "OMSworkspaceID": {
            "value": "[variables('OMSworkspaceID')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.3.539.46024",
              "templateHash": "13454906206602243111"
            }
          },
          "parameters": {
            "Deployment": {
              "type": "string"
            },
            "DeploymentURI": {
              "type": "string"
            },
            "DeploymentID": {
              "type": "string"
            },
            "Environment": {
              "type": "string"
            },
            "storageInfo": {
              "type": "object"
            },
            "Global": {
              "type": "object"
            },
            "Stage": {
              "type": "object"
            },
            "OMSworkspaceID": {
              "type": "string"
            },
            "now": {
              "type": "string",
              "defaultValue": "[utcNow('F')]"
            }
          },
          "functions": [],
          "variables": {
            "hubRG": "[parameters('Global').hubRGName]",
            "storageLoggingAbstractions": [
              "blobServices",
              "fileServices",
              "queueServices",
              "tableService"
            ],
            "azureFilesIdentityBasedAuthentication": {
              "directoryServiceOptions": "AD",
              "activeDirectoryProperties": {
                "domainName": "[parameters('Global').DomainName]",
                "netBiosDomainName": "[first(split(parameters('Global').DomainName, '.'))]",
                "forestName": "[parameters('Global').DomainName]",
                "domainGuid": "99cbe596-b191-4853-aca3-4e19d44f67e0",
                "domainSid": "S-1-5-21-4089952384-727918856-4151886579",
                "azureStorageSid": "string"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2021-02-01",
              "name": "[toLower(format('{0}sa{1}', parameters('DeploymentURI'), parameters('storageInfo').nameSuffix))]",
              "location": "[resourceGroup().location]",
              "sku": {
                "name": "[parameters('storageInfo').skuName]"
              },
              "kind": "StorageV2",
              "properties": {
                "allowBlobPublicAccess": false,
                "supportsBlobContainerRetention": true,
                "azureFilesIdentityBasedAuthentication": "[if(and(contains(parameters('storageInfo'), 'ADDS'), equals(parameters('storageInfo').ADDS, 1)), variables('azureFilesIdentityBasedAuthentication'), json('null'))]",
                "largeFileSharesState": "[if(contains(parameters('storageInfo'), 'largeFileSharesState'), parameters('storageInfo').largeFileSharesState, json('null'))]",
                "networkAcls": {
                  "bypass": "Logging, Metrics, AzureServices",
                  "defaultAction": "[if(contains(parameters('storageInfo'), 'allNetworks'), parameters('storageInfo').allNetworks, 'Allow')]"
                },
                "supportsHttpsTrafficOnly": true,
                "minimumTlsVersion": "TLS1_2",
                "encryption": {
                  "keySource": "Microsoft.Storage",
                  "services": {
                    "blob": {
                      "enabled": true
                    },
                    "file": {
                      "enabled": true
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices",
              "apiVersion": "2021-02-01",
              "name": "[format('{0}/default', toLower(format('{0}sa{1}', parameters('DeploymentURI'), parameters('storageInfo').nameSuffix)))]",
              "properties": {
                "isVersioningEnabled": "[if(contains(parameters('storageInfo'), 'blobVersioning'), parameters('storageInfo').blobVersioning, bool('false'))]",
                "changeFeed": {
                  "enabled": "[if(contains(parameters('storageInfo'), 'changeFeed'), parameters('storageInfo').changeFeed, bool('false'))]"
                },
                "deleteRetentionPolicy": "[if(contains(parameters('storageInfo'), 'softDeletePolicy'), parameters('storageInfo').softDeletePolicy, json('null'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', toLower(format('{0}sa{1}', parameters('DeploymentURI'), parameters('storageInfo').nameSuffix)))]"
              ]
            },
            {
              "type": "microsoft.insights/diagnosticSettings",
              "apiVersion": "2017-05-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', toLower(format('{0}sa{1}', parameters('DeploymentURI'), parameters('storageInfo').nameSuffix)))]",
              "name": "service",
              "properties": {
                "workspaceId": "[parameters('OMSworkspaceID')]",
                "metrics": [
                  {
                    "category": "Capacity",
                    "enabled": false,
                    "retentionPolicy": {
                      "enabled": false,
                      "days": 0
                    }
                  },
                  {
                    "category": "Transaction",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": false,
                      "days": 0
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', toLower(format('{0}sa{1}', parameters('DeploymentURI'), parameters('storageInfo').nameSuffix)))]"
              ]
            },
            {
              "type": "microsoft.insights/diagnosticSettings",
              "apiVersion": "2017-05-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}', split(format('{0}/default', toLower(format('{0}sa{1}', parameters('DeploymentURI'), parameters('storageInfo').nameSuffix))), '/')[0], split(format('{0}/default', toLower(format('{0}sa{1}', parameters('DeploymentURI'), parameters('storageInfo').nameSuffix))), '/')[1])]",
              "name": "service",
              "properties": {
                "workspaceId": "[parameters('OMSworkspaceID')]",
                "metrics": [
                  {
                    "category": "Capacity",
                    "enabled": false,
                    "retentionPolicy": {
                      "enabled": false,
                      "days": 0
                    }
                  },
                  {
                    "category": "Transaction",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": false,
                      "days": 0
                    }
                  }
                ],
                "logs": [
                  {
                    "category": "StorageRead",
                    "enabled": "[if(contains(parameters('storageInfo'), 'logging'), bool(parameters('storageInfo').logging.r), bool('false'))]",
                    "retentionPolicy": {
                      "enabled": false,
                      "days": 0
                    }
                  },
                  {
                    "category": "StorageWrite",
                    "enabled": "[if(contains(parameters('storageInfo'), 'logging'), bool(parameters('storageInfo').logging.w), bool('false'))]",
                    "retentionPolicy": {
                      "enabled": false,
                      "days": 0
                    }
                  },
                  {
                    "category": "StorageDelete",
                    "enabled": "[if(contains(parameters('storageInfo'), 'logging'), bool(parameters('storageInfo').logging.d), bool('false'))]",
                    "retentionPolicy": {
                      "enabled": false,
                      "days": 0
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', split(format('{0}/default', toLower(format('{0}sa{1}', parameters('DeploymentURI'), parameters('storageInfo').nameSuffix))), '/')[0], split(format('{0}/default', toLower(format('{0}sa{1}', parameters('DeploymentURI'), parameters('storageInfo').nameSuffix))), '/')[1])]"
              ]
            },
            {
              "type": "microsoft.insights/diagnosticSettings",
              "apiVersion": "2017-05-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/fileServices/{1}', toLower(format('{0}sa{1}', parameters('DeploymentURI'), parameters('storageInfo').nameSuffix)), 'default')]",
              "name": "service",
              "properties": {
                "workspaceId": "[parameters('OMSworkspaceID')]",
                "metrics": [
                  {
                    "category": "Capacity",
                    "enabled": false,
                    "retentionPolicy": {
                      "enabled": false,
                      "days": 0
                    }
                  },
                  {
                    "category": "Transaction",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": false,
                      "days": 0
                    }
                  }
                ],
                "logs": [
                  {
                    "category": "StorageRead",
                    "enabled": "[if(contains(parameters('storageInfo'), 'logging'), bool(parameters('storageInfo').logging.r), bool('false'))]",
                    "retentionPolicy": {
                      "enabled": false,
                      "days": 0
                    }
                  },
                  {
                    "category": "StorageWrite",
                    "enabled": "[if(contains(parameters('storageInfo'), 'logging'), bool(parameters('storageInfo').logging.w), bool('false'))]",
                    "retentionPolicy": {
                      "enabled": false,
                      "days": 0
                    }
                  },
                  {
                    "category": "StorageDelete",
                    "enabled": "[if(contains(parameters('storageInfo'), 'logging'), bool(parameters('storageInfo').logging.d), bool('false'))]",
                    "retentionPolicy": {
                      "enabled": false,
                      "days": 0
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', toLower(format('{0}sa{1}', parameters('DeploymentURI'), parameters('storageInfo').nameSuffix)))]"
              ]
            },
            {
              "type": "microsoft.insights/diagnosticSettings",
              "apiVersion": "2017-05-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/queueServices/{1}', toLower(format('{0}sa{1}', parameters('DeploymentURI'), parameters('storageInfo').nameSuffix)), 'default')]",
              "name": "service",
              "properties": {
                "workspaceId": "[parameters('OMSworkspaceID')]",
                "metrics": [
                  {
                    "category": "Capacity",
                    "enabled": false,
                    "retentionPolicy": {
                      "enabled": false,
                      "days": 0
                    }
                  },
                  {
                    "category": "Transaction",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": false,
                      "days": 0
                    }
                  }
                ],
                "logs": [
                  {
                    "category": "StorageRead",
                    "enabled": "[if(contains(parameters('storageInfo'), 'logging'), bool(parameters('storageInfo').logging.r), bool('false'))]",
                    "retentionPolicy": {
                      "enabled": false,
                      "days": 0
                    }
                  },
                  {
                    "category": "StorageWrite",
                    "enabled": "[if(contains(parameters('storageInfo'), 'logging'), bool(parameters('storageInfo').logging.w), bool('false'))]",
                    "retentionPolicy": {
                      "enabled": false,
                      "days": 0
                    }
                  },
                  {
                    "category": "StorageDelete",
                    "enabled": "[if(contains(parameters('storageInfo'), 'logging'), bool(parameters('storageInfo').logging.d), bool('false'))]",
                    "retentionPolicy": {
                      "enabled": false,
                      "days": 0
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', toLower(format('{0}sa{1}', parameters('DeploymentURI'), parameters('storageInfo').nameSuffix)))]"
              ]
            },
            {
              "type": "microsoft.insights/diagnosticSettings",
              "apiVersion": "2017-05-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/tableServices/{1}', toLower(format('{0}sa{1}', parameters('DeploymentURI'), parameters('storageInfo').nameSuffix)), 'default')]",
              "name": "service",
              "properties": {
                "workspaceId": "[parameters('OMSworkspaceID')]",
                "metrics": [
                  {
                    "category": "Capacity",
                    "enabled": false,
                    "retentionPolicy": {
                      "enabled": false,
                      "days": 0
                    }
                  },
                  {
                    "category": "Transaction",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": false,
                      "days": 0
                    }
                  }
                ],
                "logs": [
                  {
                    "category": "StorageRead",
                    "enabled": "[if(contains(parameters('storageInfo'), 'logging'), bool(parameters('storageInfo').logging.r), bool('false'))]",
                    "retentionPolicy": {
                      "enabled": false,
                      "days": 0
                    }
                  },
                  {
                    "category": "StorageWrite",
                    "enabled": "[if(contains(parameters('storageInfo'), 'logging'), bool(parameters('storageInfo').logging.w), bool('false'))]",
                    "retentionPolicy": {
                      "enabled": false,
                      "days": 0
                    }
                  },
                  {
                    "category": "StorageDelete",
                    "enabled": "[if(contains(parameters('storageInfo'), 'logging'), bool(parameters('storageInfo').logging.d), bool('false'))]",
                    "retentionPolicy": {
                      "enabled": false,
                      "days": 0
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', toLower(format('{0}sa{1}', parameters('DeploymentURI'), parameters('storageInfo').nameSuffix)))]"
              ]
            },
            {
              "condition": "[contains(parameters('storageInfo'), 'fileShares')]",
              "copy": {
                "name": "SAFileShares",
                "count": "[length(range(0, if(contains(parameters('storageInfo'), 'fileShares'), length(parameters('storageInfo').fileShares), 0)))]"
              },
              "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
              "apiVersion": "2019-04-01",
              "name": "[toLower(format('{0}sa{1}/default/{2}', parameters('DeploymentURI'), parameters('storageInfo').namesuffix, if(contains(parameters('storageInfo'), 'fileShares'), parameters('storageInfo').fileShares[range(0, if(contains(parameters('storageInfo'), 'fileShares'), length(parameters('storageInfo').fileShares), 0))[copyIndex()]].name, 'na')))]",
              "properties": {
                "shareQuota": "[parameters('storageInfo').fileShares[add(range(0, if(contains(parameters('storageInfo'), 'fileShares'), length(parameters('storageInfo').fileShares), 0))[copyIndex()], 0)].quota]",
                "metadata": {}
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', toLower(format('{0}sa{1}', parameters('DeploymentURI'), parameters('storageInfo').nameSuffix)))]"
              ]
            },
            {
              "condition": "[contains(parameters('storageInfo'), 'privatelinkinfo')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2019-10-01",
              "name": "[format('dp{0}-privatelinkloopSA{1}', parameters('Deployment'), parameters('storageInfo').nameSuffix)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "Deployment": {
                    "value": "[parameters('Deployment')]"
                  },
                  "PrivateLinkInfo": {
                    "value": "[parameters('storageInfo').privateLinkInfo]"
                  },
                  "providerType": {
                    "value": "Microsoft.Storage/storageAccounts"
                  },
                  "resourceName": {
                    "value": "[toLower(format('{0}sa{1}', parameters('DeploymentURI'), parameters('storageInfo').nameSuffix))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.3.539.46024",
                      "templateHash": "220068135372372234"
                    }
                  },
                  "parameters": {
                    "Deployment": {
                      "type": "string"
                    },
                    "PrivateLinkInfo": {
                      "type": "array"
                    },
                    "providerType": {
                      "type": "string"
                    },
                    "resourceName": {
                      "type": "string"
                    }
                  },
                  "functions": [],
                  "variables": {
                    "copy": [
                      {
                        "name": "privateLink",
                        "count": "[length(parameters('PrivateLinkInfo'))]",
                        "input": {
                          "name": "[format('{0}-pl{1}', parameters('Deployment'), parameters('PrivateLinkInfo')[copyIndex('privateLink')].Subnet)]",
                          "vNet": "[format('{0}-vn', parameters('Deployment'))]"
                        }
                      }
                    ]
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "subnetPrivateEndpoint",
                        "count": "[length(parameters('PrivateLinkInfo'))]"
                      },
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2019-11-01",
                      "name": "[format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet)]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "privateLinkServiceConnections": [
                          {
                            "name": "[format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet)]",
                            "properties": {
                              "privateLinkServiceId": "[resourceId(parameters('providerType'), parameters('resourceName'))]",
                              "groupIds": "[array(parameters('PrivateLinkInfo')[copyIndex()].groupID)]",
                              "privateLinkServiceConnectionState": {
                                "status": "Approved",
                                "description": "Auto-Approved",
                                "actionsRequired": "None"
                              }
                            }
                          }
                        ],
                        "manualPrivateLinkServiceConnections": [],
                        "subnet": {
                          "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('privateLink')[copyIndex()].vNet, parameters('PrivateLinkInfo')[copyIndex()].Subnet)]"
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "NICID": {
                      "type": "array",
                      "copy": {
                        "count": "[length(parameters('PrivateLinkInfo'))]",
                        "input": "[reference(resourceId('Microsoft.Network/privateEndpoints', format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet)), '2019-11-01', 'Full').properties.networkInterfaces[0].id]"
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', toLower(format('{0}sa{1}', parameters('DeploymentURI'), parameters('storageInfo').nameSuffix)))]"
              ]
            },
            {
              "condition": "[contains(parameters('storageInfo'), 'privatelinkinfo')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2019-10-01",
              "name": "[format('dp{0}-registerPrivateDNS{1}', parameters('Deployment'), parameters('storageInfo').nameSuffix)]",
              "resourceGroup": "[variables('hubRG')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "PrivateLinkInfo": {
                    "value": "[parameters('storageInfo').privateLinkInfo]"
                  },
                  "providerURL": {
                    "value": ".core.windows.net/"
                  },
                  "resourceName": {
                    "value": "[toLower(format('{0}sa{1}', parameters('DeploymentURI'), parameters('storageInfo').nameSuffix))]"
                  },
                  "Nics": {
                    "value": "[if(contains(parameters('storageInfo'), 'privatelinkinfo'), array(reference(resourceId('Microsoft.Resources/deployments', format('dp{0}-privatelinkloopSA{1}', parameters('Deployment'), parameters('storageInfo').nameSuffix)), '2019-10-01').outputs.NICID.value), array(''))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.3.539.46024",
                      "templateHash": "9125085642128777972"
                    }
                  },
                  "parameters": {
                    "PrivateLinkInfo": {
                      "type": "array"
                    },
                    "resourceName": {
                      "type": "string"
                    },
                    "providerURL": {
                      "type": "string"
                    },
                    "Nics": {
                      "type": "array"
                    }
                  },
                  "functions": [],
                  "variables": {
                    "DNSLookup": {
                      "vault": "vaultcore",
                      "SQL": "documents",
                      "MongoDB": "mongo.cosmos",
                      "Cassandra": "cassandra.cosmos",
                      "mysqlServer": "mysql",
                      "mariadbServer": "mariadb",
                      "configurationStores": "azconfig",
                      "namespace": "servicebus",
                      "sqlServer": "database"
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "privateLinkDNS",
                        "count": "[length(parameters('PrivateLinkInfo'))]"
                      },
                      "type": "Microsoft.Network/privateDnsZones/A",
                      "apiVersion": "2020-06-01",
                      "name": "[format('privatelink.{0}{1}{2}', if(contains(variables('DNSLookup'), parameters('PrivateLinkInfo')[copyIndex()].groupID), variables('DNSLookup')[parameters('PrivateLinkInfo')[copyIndex()].groupID], parameters('PrivateLinkInfo')[copyIndex()].groupID), parameters('providerURL'), parameters('resourceName'))]",
                      "properties": {
                        "ttl": 3600,
                        "aRecords": [
                          {
                            "ipv4Address": "[reference(parameters('Nics')[copyIndex()], '2018-05-01').ipConfigurations[0].properties.privateIPAddress]"
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('dp{0}-privatelinkloopSA{1}', parameters('Deployment'), parameters('storageInfo').nameSuffix))]"
              ]
            }
          ]
        }
      }
    }
  ]
}