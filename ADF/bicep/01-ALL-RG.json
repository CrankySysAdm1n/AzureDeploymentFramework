{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.4.1318.3566",
      "templateHash": "5838106223211807358"
    }
  },
  "parameters": {
    "Prefix": {
      "type": "string",
      "allowedValues": [
        "AEU1",
        "AEU2",
        "ACU1",
        "AWU1",
        "AWU2",
        "AWCU"
      ]
    },
    "Environment": {
      "type": "string",
      "allowedValues": [
        "I",
        "D",
        "T",
        "U",
        "P",
        "S",
        "G",
        "A"
      ]
    },
    "DeploymentID": {
      "type": "string",
      "allowedValues": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9"
      ]
    },
    "Stage": {
      "type": "object"
    },
    "Extensions": {
      "type": "object"
    },
    "Global": {
      "type": "object"
    },
    "DeploymentInfo": {
      "type": "object"
    }
  },
  "variables": {
    "copy": [
      {
        "name": "DNSServers",
        "count": "[length(variables('DNSServerList'))]",
        "input": "[if(lessOrEquals(length(variables('DNSServerList')[copyIndex('DNSServers')]), 3), format('{0}.{1}', variables('networkId'), variables('DNSServerList')[copyIndex('DNSServers')]), variables('DNSServerList')[copyIndex('DNSServers')])]"
      }
    ],
    "Deployment": "[format('{0}-{1}-{2}-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID'))]",
    "DeploymentURI": "[toLower(format('{0}{1}{2}{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID')))]",
    "networkId": "[format('{0}{1}', parameters('Global').networkid[0], string(sub(parameters('Global').networkid[1], mul(2, int(parameters('DeploymentID'))))))]",
    "networkIdUpper": "[format('{0}{1}', parameters('Global').networkid[0], string(add(1, sub(parameters('Global').networkid[1], mul(2, int(parameters('DeploymentID')))))))]",
    "addressPrefixes": [
      "[format('{0}.0/23', variables('networkId'))]"
    ],
    "AzureDNS": "168.63.129.16",
    "DNSServerList": "[if(contains(parameters('DeploymentInfo'), 'DNSServers'), parameters('DeploymentInfo').DNSServers, parameters('Global').DNSServers)]"
  },
  "resources": [
    {
      "condition": "[bool(parameters('Stage').OMS)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('dp{0}-OMS', variables('Deployment'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "DeploymentID": {
            "value": "[parameters('DeploymentID')]"
          },
          "DeploymentInfo": {
            "value": "[parameters('DeploymentInfo')]"
          },
          "Environment": {
            "value": "[parameters('Environment')]"
          },
          "Extensions": {
            "value": "[parameters('Extensions')]"
          },
          "Global": {
            "value": "[parameters('Global')]"
          },
          "Prefix": {
            "value": "[parameters('Prefix')]"
          },
          "Stage": {
            "value": "[parameters('Stage')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "9173528264692247918"
            }
          },
          "parameters": {
            "Prefix": {
              "type": "string"
            },
            "Environment": {
              "type": "string",
              "defaultValue": "D",
              "allowedValues": [
                "I",
                "D",
                "T",
                "U",
                "P",
                "S",
                "G",
                "A"
              ]
            },
            "DeploymentID": {
              "type": "string",
              "defaultValue": "1",
              "allowedValues": [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9"
              ]
            },
            "Stage": {
              "type": "object"
            },
            "Extensions": {
              "type": "object"
            },
            "Global": {
              "type": "object"
            },
            "DeploymentInfo": {
              "type": "object"
            },
            "now": {
              "type": "string",
              "defaultValue": "[utcNow('F')]"
            }
          },
          "variables": {
            "Deployment": "[format('{0}-{1}-{2}-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID'))]",
            "DeploymentURI": "[toLower(format('{0}{1}{2}{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID')))]",
            "OMSWorkspaceName": "[format('{0}LogAnalytics', variables('DeploymentURI'))]",
            "AAName": "[format('{0}OMSAutomation', variables('DeploymentURI'))]",
            "appInsightsName": "[format('{0}AppInsights', variables('DeploymentURI'))]",
            "appConfigurationInfo": "[if(contains(parameters('DeploymentInfo'), 'appConfigurationInfo'), parameters('DeploymentInfo').appConfigurationInfo, createArray())]",
            "dataRetention": 31,
            "serviceTier": "PerNode",
            "AAserviceTier": "Basic",
            "patchingZones": [
              "1",
              "2",
              "3"
            ],
            "patchingEnabled": {
              "linuxWeekly": false,
              "windowsNOW": true,
              "windowsWeekly": true,
              "windowsMonthly": true
            },
            "dataSources": [
              {
                "name": "AzureActivityLog",
                "kind": "AzureActivityLog",
                "properties": {
                  "linkedResourceId": "[format('{0}/providers/Microsoft.Insights/eventTypes/management', subscription().id)]"
                }
              },
              {
                "name": "LogicalDisk1",
                "kind": "WindowsPerformanceCounter",
                "properties": {
                  "objectName": "LogicalDisk",
                  "instanceName": "*",
                  "intervalSeconds": 10,
                  "counterName": "Avg Disk sec/Read"
                }
              },
              {
                "name": "LogicalDisk2",
                "kind": "WindowsPerformanceCounter",
                "properties": {
                  "objectName": "LogicalDisk",
                  "instanceName": "*",
                  "intervalSeconds": 10,
                  "counterName": "Avg Disk sec/Write"
                }
              },
              {
                "name": "LogicalDisk3",
                "kind": "WindowsPerformanceCounter",
                "properties": {
                  "objectName": "LogicalDisk",
                  "instanceName": "*",
                  "intervalSeconds": 10,
                  "counterName": "Current Disk Queue Length"
                }
              },
              {
                "name": "LogicalDisk4",
                "kind": "WindowsPerformanceCounter",
                "properties": {
                  "objectName": "LogicalDisk",
                  "instanceName": "*",
                  "intervalSeconds": 10,
                  "counterName": "Disk Reads/sec"
                }
              },
              {
                "name": "LogicalDisk5",
                "kind": "WindowsPerformanceCounter",
                "properties": {
                  "objectName": "LogicalDisk",
                  "instanceName": "*",
                  "intervalSeconds": 10,
                  "counterName": "Disk Transfers/sec"
                }
              },
              {
                "name": "LogicalDisk6",
                "kind": "WindowsPerformanceCounter",
                "properties": {
                  "objectName": "LogicalDisk",
                  "instanceName": "*",
                  "intervalSeconds": 10,
                  "counterName": "Disk Writes/sec"
                }
              },
              {
                "name": "LogicalDisk7",
                "kind": "WindowsPerformanceCounter",
                "properties": {
                  "objectName": "LogicalDisk",
                  "instanceName": "*",
                  "intervalSeconds": 10,
                  "counterName": "Free Megabytes"
                }
              },
              {
                "name": "LogicalDisk8",
                "kind": "WindowsPerformanceCounter",
                "properties": {
                  "objectName": "LogicalDisk",
                  "instanceName": "*",
                  "intervalSeconds": 10,
                  "counterName": "% Free Space"
                }
              },
              {
                "name": "LogicalDisk9",
                "kind": "WindowsPerformanceCounter",
                "properties": {
                  "objectName": "LogicalDisk",
                  "instanceName": "*",
                  "intervalSeconds": 10,
                  "counterName": "Avg Disk sec/Transfer"
                }
              },
              {
                "name": "LogicalDisk10",
                "kind": "WindowsPerformanceCounter",
                "properties": {
                  "objectName": "LogicalDisk",
                  "instanceName": "*",
                  "intervalSeconds": 10,
                  "counterName": "Disk Bytes/sec"
                }
              },
              {
                "name": "LogicalDisk11",
                "kind": "WindowsPerformanceCounter",
                "properties": {
                  "objectName": "LogicalDisk",
                  "instanceName": "*",
                  "intervalSeconds": 10,
                  "counterName": "Disk Read Bytes/sec"
                }
              },
              {
                "name": "LogicalDisk12",
                "kind": "WindowsPerformanceCounter",
                "properties": {
                  "objectName": "LogicalDisk",
                  "instanceName": "*",
                  "intervalSeconds": 10,
                  "counterName": "Disk Write Bytes/sec"
                }
              },
              {
                "name": "PhysicalDisk",
                "kind": "WindowsPerformanceCounter",
                "properties": {
                  "objectName": "PhysicalDisk",
                  "instanceName": "_Total",
                  "intervalSeconds": 10,
                  "counterName": "% Free Space"
                }
              },
              {
                "name": "PhysicalDisk1",
                "kind": "WindowsPerformanceCounter",
                "properties": {
                  "objectName": "PhysicalDisk",
                  "instanceName": "_Total",
                  "intervalSeconds": 10,
                  "counterName": "% Disk Time"
                }
              },
              {
                "name": "PhysicalDisk2",
                "kind": "WindowsPerformanceCounter",
                "properties": {
                  "objectName": "PhysicalDisk",
                  "instanceName": "_Total",
                  "intervalSeconds": 10,
                  "counterName": "% Disk Read Time"
                }
              },
              {
                "name": "PhysicalDisk3",
                "kind": "WindowsPerformanceCounter",
                "properties": {
                  "objectName": "PhysicalDisk",
                  "instanceName": "_Total",
                  "intervalSeconds": 10,
                  "counterName": "% Disk Write Time"
                }
              },
              {
                "name": "PhysicalDisk4",
                "kind": "WindowsPerformanceCounter",
                "properties": {
                  "objectName": "PhysicalDisk",
                  "instanceName": "_Total",
                  "intervalSeconds": 10,
                  "counterName": "Disk Transfers/sec"
                }
              },
              {
                "name": "PhysicalDisk5",
                "kind": "WindowsPerformanceCounter",
                "properties": {
                  "objectName": "PhysicalDisk",
                  "instanceName": "_Total",
                  "intervalSeconds": 10,
                  "counterName": "Disk Reads/sec"
                }
              },
              {
                "name": "PhysicalDisk6",
                "kind": "WindowsPerformanceCounter",
                "properties": {
                  "objectName": "PhysicalDisk",
                  "instanceName": "_Total",
                  "intervalSeconds": 10,
                  "counterName": "Disk Writes/sec"
                }
              },
              {
                "name": "PhysicalDisk7",
                "kind": "WindowsPerformanceCounter",
                "properties": {
                  "objectName": "PhysicalDisk",
                  "instanceName": "_Total",
                  "intervalSeconds": 10,
                  "counterName": "Disk Bytes/sec"
                }
              },
              {
                "name": "PhysicalDisk8",
                "kind": "WindowsPerformanceCounter",
                "properties": {
                  "objectName": "PhysicalDisk",
                  "instanceName": "_Total",
                  "intervalSeconds": 10,
                  "counterName": "Disk Read Bytes/sec"
                }
              },
              {
                "name": "PhysicalDisk9",
                "kind": "WindowsPerformanceCounter",
                "properties": {
                  "objectName": "PhysicalDisk",
                  "instanceName": "_Total",
                  "intervalSeconds": 10,
                  "counterName": "Disk Write Bytes/sec"
                }
              },
              {
                "name": "PhysicalDisk10",
                "kind": "WindowsPerformanceCounter",
                "properties": {
                  "objectName": "PhysicalDisk",
                  "instanceName": "_Total",
                  "intervalSeconds": 10,
                  "counterName": "Avg. Disk Queue Length"
                }
              },
              {
                "name": "PhysicalDisk11",
                "kind": "WindowsPerformanceCounter",
                "properties": {
                  "objectName": "PhysicalDisk",
                  "instanceName": "_Total",
                  "intervalSeconds": 10,
                  "counterName": "Avg. Disk Read Queue Length"
                }
              },
              {
                "name": "PhysicalDisk12",
                "kind": "WindowsPerformanceCounter",
                "properties": {
                  "objectName": "PhysicalDisk",
                  "instanceName": "_Total",
                  "intervalSeconds": 10,
                  "counterName": "Avg. Disk Write Queue Length"
                }
              },
              {
                "name": "PhysicalDisk13",
                "kind": "WindowsPerformanceCounter",
                "properties": {
                  "objectName": "PhysicalDisk",
                  "instanceName": "*",
                  "intervalSeconds": 10,
                  "counterName": "Disk Transfers/sec"
                }
              },
              {
                "name": "Memory1",
                "kind": "WindowsPerformanceCounter",
                "properties": {
                  "objectName": "Memory",
                  "instanceName": "*",
                  "intervalSeconds": 10,
                  "counterName": "Available MBytes"
                }
              },
              {
                "name": "Memory2",
                "kind": "WindowsPerformanceCounter",
                "properties": {
                  "objectName": "Memory",
                  "instanceName": "*",
                  "intervalSeconds": 10,
                  "counterName": "% Committed Bytes In Use"
                }
              },
              {
                "name": "Network1",
                "kind": "WindowsPerformanceCounter",
                "properties": {
                  "objectName": "Network Adapter",
                  "instanceName": "*",
                  "intervalSeconds": 10,
                  "counterName": "Bytes Received/sec"
                }
              },
              {
                "name": "Network2",
                "kind": "WindowsPerformanceCounter",
                "properties": {
                  "objectName": "Network Adapter",
                  "instanceName": "*",
                  "intervalSeconds": 10,
                  "counterName": "Bytes Sent/sec"
                }
              },
              {
                "name": "Network3",
                "kind": "WindowsPerformanceCounter",
                "properties": {
                  "objectName": "Network Adapter",
                  "instanceName": "*",
                  "intervalSeconds": 10,
                  "counterName": "Bytes Total/sec"
                }
              },
              {
                "name": "CPU1",
                "kind": "WindowsPerformanceCounter",
                "properties": {
                  "objectName": "Processor",
                  "instanceName": "_Total",
                  "intervalSeconds": 10,
                  "counterName": "% Processor Time"
                }
              },
              {
                "name": "CPU2",
                "kind": "WindowsPerformanceCounter",
                "properties": {
                  "objectName": "Processor",
                  "instanceName": "_Total",
                  "intervalSeconds": 10,
                  "counterName": "% Privileged Time"
                }
              },
              {
                "name": "CPU3",
                "kind": "WindowsPerformanceCounter",
                "properties": {
                  "objectName": "Processor",
                  "instanceName": "_Total",
                  "intervalSeconds": 10,
                  "counterName": "% User Time"
                }
              },
              {
                "name": "CPU5",
                "kind": "WindowsPerformanceCounter",
                "properties": {
                  "objectName": "Processor Information",
                  "instanceName": "_Total",
                  "intervalSeconds": 10,
                  "counterName": "Processor Frequency"
                }
              },
              {
                "name": "CPU6",
                "kind": "WindowsPerformanceCounter",
                "properties": {
                  "objectName": "System",
                  "instanceName": "*",
                  "intervalSeconds": 10,
                  "counterName": "Processor Queue Length"
                }
              },
              {
                "name": "System",
                "kind": "WindowsEvent",
                "properties": {
                  "eventLogName": "System",
                  "eventTypes": [
                    {
                      "eventType": "Error"
                    },
                    {
                      "eventType": "Warning"
                    }
                  ]
                }
              },
              {
                "name": "Application",
                "kind": "WindowsEvent",
                "properties": {
                  "eventLogName": "Application",
                  "eventTypes": [
                    {
                      "eventType": "Error"
                    },
                    {
                      "eventType": "Warning"
                    }
                  ]
                }
              },
              {
                "name": "DSCEventLogs",
                "kind": "WindowsEvent",
                "properties": {
                  "eventLogName": "Microsoft-Windows-DSC/Operational",
                  "eventTypes": [
                    {
                      "eventType": "Error"
                    },
                    {
                      "eventType": "Warning"
                    },
                    {
                      "eventType": "Information"
                    }
                  ]
                }
              },
              {
                "name": "TSSessionManager",
                "kind": "WindowsEvent",
                "properties": {
                  "eventLogName": "Microsoft-Windows-TerminalServices-LocalSessionManager/Operational",
                  "eventTypes": [
                    {
                      "eventType": "Error"
                    },
                    {
                      "eventType": "Warning"
                    },
                    {
                      "eventType": "Information"
                    }
                  ]
                }
              },
              {
                "name": "Linux",
                "kind": "LinuxPerformanceObject",
                "properties": {
                  "performanceCounters": [
                    {
                      "counterName": "% Used Inodes"
                    },
                    {
                      "counterName": "Free Megabytes"
                    },
                    {
                      "counterName": "% Used Space"
                    },
                    {
                      "counterName": "Disk Transfers/sec"
                    },
                    {
                      "counterName": "Disk Reads/sec"
                    },
                    {
                      "counterName": "Disk Writes/sec"
                    }
                  ],
                  "objectName": "Logical Disk",
                  "instanceName": "*",
                  "intervalSeconds": 10
                }
              },
              {
                "name": "LinuxPerfCollection",
                "kind": "LinuxPerformanceCollection",
                "properties": {
                  "state": "Enabled"
                }
              },
              {
                "name": "IISLog",
                "kind": "IISLogs",
                "properties": {
                  "state": "OnPremiseEnabled"
                }
              },
              {
                "name": "Syslog",
                "kind": "LinuxSyslog",
                "properties": {
                  "syslogName": "kern",
                  "syslogSeverities": [
                    {
                      "severity": "emerg"
                    },
                    {
                      "severity": "alert"
                    },
                    {
                      "severity": "crit"
                    },
                    {
                      "severity": "err"
                    },
                    {
                      "severity": "warning"
                    }
                  ]
                }
              },
              {
                "name": "SyslogCollection",
                "kind": "LinuxSyslogCollection",
                "properties": {
                  "state": "Enabled"
                }
              }
            ],
            "solutions": [
              "AzureAutomation",
              "Updates",
              "Security",
              "AgentHealthAssessment",
              "ChangeTracking",
              "AzureActivity",
              "ADAssessment",
              "ADReplication",
              "SQLAssessment",
              "ServiceMap",
              "AntiMalware",
              "DnsAnalytics",
              "ApplicationInsights",
              "AzureWebAppsAnalytics",
              "AzureNSGAnalytics",
              "AlertManagement",
              "CapacityPerformance",
              "NetworkMonitoring",
              "Containers",
              "ContainerInsights",
              "ServiceFabric",
              "InfrastructureInsights",
              "VMInsights",
              "SecurityInsights",
              "SQLAdvancedThreatProtection",
              "WindowsDefenderATP",
              "KeyVaultAnalytics",
              "AzureSQLAnalytics",
              "BehaviorAnalyticsInsights"
            ],
            "aaAssets": {
              "modules": [
                {
                  "name": "xPSDesiredStateConfiguration",
                  "url": "https://www.powershellgallery.com/api/v2/package/xPSDesiredStateConfiguration/7.0.0.0"
                },
                {
                  "name": "xActiveDirectory",
                  "url": "https://www.powershellgallery.com/api/v2/package/xActiveDirectory/2.16.0.0"
                },
                {
                  "name": "xStorage",
                  "url": "https://www.powershellgallery.com/api/v2/package/xStorage/3.2.0.0"
                },
                {
                  "name": "xPendingReboot",
                  "url": "https://www.powershellgallery.com/api/v2/package/xPendingReboot/0.3.0.0"
                },
                {
                  "name": "xComputerManagement",
                  "url": "https://www.powershellgallery.com/api/v2/package/xComputerManagement/3.0.0.0"
                },
                {
                  "name": "xWebAdministration",
                  "url": "https://www.powershellgallery.com/api/v2/package/xWebAdministration/1.18.0.0"
                },
                {
                  "name": "xSQLServer",
                  "url": "https://www.powershellgallery.com/api/v2/package/xSQLServer/8.2.0.0"
                },
                {
                  "name": "xFailOverCluster",
                  "url": "https://www.powershellgallery.com/api/v2/package/xFailOverCluster/1.8.0.0"
                },
                {
                  "name": "xNetworking",
                  "url": "https://www.powershellgallery.com/api/v2/package/xNetworking/5.2.0.0"
                },
                {
                  "name": "SecurityPolicyDsc",
                  "url": "https://www.powershellgallery.com/api/v2/package/SecurityPolicyDsc/2.0.0.0"
                },
                {
                  "name": "xTimeZone",
                  "url": "https://www.powershellgallery.com/api/v2/package/xTimeZone/1.6.0.0"
                },
                {
                  "name": "xSystemSecurity",
                  "url": "https://www.powershellgallery.com/api/v2/package/xSystemSecurity/1.2.0.0"
                },
                {
                  "name": "xRemoteDesktopSessionHost",
                  "url": "https://www.powershellgallery.com/api/v2/package/xRemoteDesktopSessionHost/1.4.0.0"
                },
                {
                  "name": "xRemoteDesktopAdmin",
                  "url": "https://www.powershellgallery.com/api/v2/package/xRemoteDesktopAdmin/1.1.0.0"
                },
                {
                  "name": "xDSCFirewall",
                  "url": "https://www.powershellgallery.com/api/v2/package/xDSCFirewall/1.6.21"
                },
                {
                  "name": "xWindowsUpdate",
                  "url": "https://www.powershellgallery.com/api/v2/package/xWindowsUpdate/2.7.0.0"
                },
                {
                  "name": "PowerShellModule",
                  "url": "https://www.powershellgallery.com/api/v2/package/PowerShellModule/0.3"
                },
                {
                  "name": "xDnsServer",
                  "url": "https://www.powershellgallery.com/api/v2/package/xDnsServer/1.8.0.0"
                },
                {
                  "name": "xSmbShare",
                  "url": "https://www.powershellgallery.com/api/v2/package/xSmbShare/2.0.0.0"
                }
              ]
            },
            "alertInfo": [
              {
                "search": {
                  "name": "Buffer Cache Hit Ratio2",
                  "category": "SQL Performance",
                  "query": "Alert | where AlertName == \"Buffer Cache Hit Ratio is too low\" and AlertState != \"Closed\""
                },
                "alert": {
                  "displayName": "Buffer Cache Hit Ratio",
                  "description": "Buffer Cache Hit Ratio perfmon counter information goes here.",
                  "severity": "Warning",
                  "enabled": "true",
                  "thresholdOperator": "gt",
                  "thresholdValue": 0,
                  "schedule": {
                    "interval": 15,
                    "timeSpan": 60
                  },
                  "throttleMinutes": 60,
                  "emailNotification": {
                    "recipients": "[parameters('Global').alertRecipients]",
                    "subject": "buffer hit cache ratio hooya"
                  }
                }
              },
              {
                "search": {
                  "query": "Type=Event EventID=20 Source=\"Microsoft-Windows-WindowsUpdateClient\" EventLog=\"System\" TimeGenerated>NOW-24HOURS | Measure Count() By Computer",
                  "name": "A Software Update Installation Failed 1",
                  "category": "Software Updates"
                }
              },
              {
                "search": {
                  "query": "Type=Event EventID=20 Source=\"Microsoft-Windows-WindowsUpdateClient\" EventLog=\"System\" TimeGenerated>NOW-168HOURS",
                  "name": "A Software Update Installation Failed 2",
                  "category": "Software Updates"
                }
              },
              {
                "search": {
                  "query": "Type=Event EventID=4202 Source=\"TCPIP\" EventLog=\"System\" TimeGenerated>NOW-24HOURS | Measure Count() By Computer",
                  "name": "A Network adatper was disconnected from the network",
                  "category": "Networking"
                }
              },
              {
                "search": {
                  "query": "Type=Event EventID=4198 OR EventID=4199 Source=\"TCPIP\" EventLog=\"System\" TimeGenerated>NOW-24HOURS",
                  "name": "Duplicate IP address has been detected",
                  "category": "Networking"
                }
              },
              {
                "search": {
                  "query": "Type=Event EventID=98 Source=\"Microsoft-Windows-Ntfs\" EventLog=\"System\" TimeGenerated>NOW-24HOURS | Measure Count() By Computer",
                  "name": "NTFS File System Corruption",
                  "category": "NTFS"
                }
              },
              {
                "search": {
                  "query": "Type=Event EventID=40 OR EventID=36 Source=\"DISK\" EventLog=\"System\" TimeGenerated>NOW-24HOURS | Measure Count() By Compute",
                  "name": "NTFS Quouta treshold limit reached",
                  "category": "NTFS"
                }
              }
            ]
          },
          "resources": [
            {
              "type": "Microsoft.Automation/automationAccounts",
              "apiVersion": "2020-01-13-preview",
              "name": "[variables('AAName')]",
              "location": "[if(contains(parameters('Global'), 'AALocation'), parameters('Global').AALocation, resourceGroup().location)]",
              "properties": {
                "sku": {
                  "name": "[variables('AAserviceTier')]"
                }
              }
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2017-05-01-preview",
              "scope": "[format('Microsoft.Automation/automationAccounts/{0}', variables('AAName'))]",
              "name": "service",
              "properties": {
                "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('OMSWorkspaceName'))]",
                "logs": [
                  {
                    "category": "JobLogs",
                    "enabled": true,
                    "retentionPolicy": {
                      "days": 0,
                      "enabled": false
                    }
                  },
                  {
                    "category": "JobStreams",
                    "enabled": true,
                    "retentionPolicy": {
                      "days": 0,
                      "enabled": false
                    }
                  },
                  {
                    "category": "DscNodeStatus",
                    "enabled": true,
                    "retentionPolicy": {
                      "days": 0,
                      "enabled": false
                    }
                  }
                ],
                "metrics": [
                  {
                    "timeGrain": "PT5M",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": false,
                      "days": 0
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Automation/automationAccounts', variables('AAName'))]",
                "[resourceId('Microsoft.OperationalInsights/workspaces', variables('OMSWorkspaceName'))]"
              ]
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2020-10-01",
              "name": "[variables('OMSWorkspaceName')]",
              "location": "[resourceGroup().location]",
              "properties": {
                "sku": {
                  "name": "[variables('serviceTier')]"
                },
                "retentionInDays": "[variables('dataRetention')]",
                "features": {
                  "legacy": 0,
                  "searchVersion": 1,
                  "enableLogAccessUsingOnlyResourcePermissions": true
                },
                "workspaceCapping": {
                  "dailyQuotaGb": 1
                },
                "publicNetworkAccessForIngestion": "Enabled",
                "publicNetworkAccessForQuery": "Enabled"
              }
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2017-05-01-preview",
              "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', variables('OMSWorkspaceName'))]",
              "name": "service",
              "properties": {
                "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('OMSWorkspaceName'))]",
                "logs": [
                  {
                    "category": "Audit",
                    "enabled": true
                  }
                ],
                "metrics": [
                  {
                    "timeGrain": "PT5M",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": false,
                      "days": 0
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', variables('OMSWorkspaceName'))]"
              ]
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/linkedServices",
              "apiVersion": "2015-11-01-preview",
              "name": "[format('{0}/{1}', variables('OMSWorkspaceName'), 'Automation')]",
              "properties": {
                "resourceId": "[resourceId('Microsoft.Automation/automationAccounts', variables('AAName'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Automation/automationAccounts', variables('AAName'))]",
                "[resourceId('Microsoft.OperationalInsights/workspaces', variables('OMSWorkspaceName'))]"
              ]
            },
            {
              "condition": "[bool(parameters('Stage').OMSUpdateMonthly)]",
              "copy": {
                "name": "updateConfigWindows3",
                "count": "[length(variables('patchingZones'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "type": "Microsoft.Automation/automationAccounts/softwareUpdateConfigurations",
              "apiVersion": "2019-06-01",
              "name": "[format('{0}/{1}', variables('AAName'), format('Update-Third-Saturday-Windows-Zone{0}', variables('patchingZones')[copyIndex()]))]",
              "properties": {
                "updateConfiguration": {
                  "operatingSystem": "Windows",
                  "windows": {
                    "includedUpdateClassifications": "Critical, Definition, FeaturePack, Security, ServicePack, Tools, UpdateRollup, Updates",
                    "excludedKbNumbers": [],
                    "includedKbNumbers": [],
                    "rebootSetting": "IfRequired"
                  },
                  "duration": "PT2H",
                  "targets": {
                    "azureQueries": [
                      {
                        "scope": [
                          "[resourceGroup().id]"
                        ],
                        "tagSettings": {
                          "tags": {
                            "zone": [
                              "[variables('patchingZones')[copyIndex()]]"
                            ]
                          },
                          "filterOperator": "Any"
                        },
                        "locations": []
                      }
                    ]
                  }
                },
                "tasks": {},
                "scheduleInfo": {
                  "isEnabled": "[variables('patchingEnabled').windowsMonthly]",
                  "frequency": "Month",
                  "timeZone": "[parameters('Global').patchSchedulerTimeZone]",
                  "interval": 1,
                  "startTime": "[dateTimeAdd(format('{0}:00', add(20, int(variables('patchingZones')[copyIndex()]))), 'P1D')]",
                  "advancedSchedule": {
                    "monthlyOccurrences": [
                      {
                        "day": "Saturday",
                        "occurrence": 3
                      }
                    ]
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Automation/automationAccounts', variables('AAName'))]"
              ]
            },
            {
              "condition": "[bool(parameters('Stage').OMSUpdateWeekly)]",
              "copy": {
                "name": "updateConfigWindows",
                "count": "[length(variables('patchingZones'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "type": "Microsoft.Automation/automationAccounts/softwareUpdateConfigurations",
              "apiVersion": "2019-06-01",
              "name": "[format('{0}/{1}', variables('AAName'), format('Update-Twice-Weekly-Windows-Zone{0}', variables('patchingZones')[copyIndex()]))]",
              "properties": {
                "updateConfiguration": {
                  "operatingSystem": "Windows",
                  "windows": {
                    "includedUpdateClassifications": "Critical, Definition, FeaturePack, Security, ServicePack, Tools, UpdateRollup, Updates",
                    "excludedKbNumbers": [],
                    "includedKbNumbers": [],
                    "rebootSetting": "IfRequired"
                  },
                  "duration": "PT2H",
                  "targets": {
                    "azureQueries": [
                      {
                        "scope": [
                          "[resourceGroup().id]"
                        ],
                        "tagSettings": {
                          "tags": {
                            "zone": [
                              "[variables('patchingZones')[copyIndex()]]"
                            ]
                          },
                          "filterOperator": "Any"
                        },
                        "locations": []
                      }
                    ]
                  }
                },
                "tasks": {},
                "scheduleInfo": {
                  "isEnabled": "[variables('patchingEnabled').windowsWeekly]",
                  "frequency": "Week",
                  "interval": 1,
                  "timeZone": "[parameters('Global').patchSchedulerTimeZone]",
                  "startTime": "[dateTimeAdd(format('{0}:00', add(12, int(variables('patchingZones')[copyIndex()]))), 'P1D')]",
                  "advancedSchedule": {
                    "weekDays": [
                      "Wednesday",
                      "Thursday"
                    ]
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Automation/automationAccounts', variables('AAName'))]"
              ]
            },
            {
              "condition": "[bool(parameters('Extensions').VMInsights)]",
              "type": "Microsoft.Insights/dataCollectionRules",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}VMInsights', variables('DeploymentURI'))]",
              "location": "[resourceGroup().location]",
              "properties": {
                "description": "Data collection rule for VM Insights health.",
                "dataSources": {
                  "windowsEventLogs": [
                    {
                      "name": "cloudSecurityTeamEvents",
                      "streams": [
                        "Microsoft-WindowsEvent"
                      ],
                      "scheduledTransferPeriod": "PT1M",
                      "xPathQueries": [
                        "Security!"
                      ]
                    },
                    {
                      "name": "appTeam1AppEvents",
                      "streams": [
                        "Microsoft-WindowsEvent"
                      ],
                      "scheduledTransferPeriod": "PT5M",
                      "xPathQueries": [
                        "System![System[(Level = 1 or Level = 2 or Level = 3)]]",
                        "Application!*[System[(Level = 1 or Level = 2 or Level = 3)]]"
                      ]
                    }
                  ],
                  "syslog": [
                    {
                      "name": "cronSyslog",
                      "streams": [
                        "Microsoft-Syslog"
                      ],
                      "facilityNames": [
                        "cron"
                      ],
                      "logLevels": [
                        "Debug",
                        "Critical",
                        "Emergency"
                      ]
                    },
                    {
                      "name": "syslogBase",
                      "streams": [
                        "Microsoft-Syslog"
                      ],
                      "facilityNames": [
                        "syslog"
                      ],
                      "logLevels": [
                        "Alert",
                        "Critical",
                        "Emergency"
                      ]
                    }
                  ],
                  "performanceCounters": [
                    {
                      "name": "VMHealthPerfCounters",
                      "scheduledTransferPeriod": "PT1M",
                      "samplingFrequencyInSeconds": 30,
                      "counterSpecifiers": [
                        "\\Memory\\Available Bytes",
                        "\\Memory\\Committed Bytes",
                        "\\Processor(_Total)\\% Processor Time",
                        "\\LogicalDisk(*)\\% Free Space",
                        "\\LogicalDisk(_Total)\\Free Megabytes",
                        "\\PhysicalDisk(_Total)\\Avg. Disk Queue Length"
                      ],
                      "streams": [
                        "Microsoft-Perf"
                      ]
                    },
                    {
                      "name": "appTeamExtraCounters",
                      "streams": [
                        "Microsoft-Perf"
                      ],
                      "scheduledTransferPeriod": "PT5M",
                      "samplingFrequencyInSeconds": 30,
                      "counterSpecifiers": [
                        "\\Process(_Total)\\Thread Count"
                      ]
                    }
                  ],
                  "extensions": [
                    {
                      "name": "Microsoft-VMInsights-Health",
                      "streams": [
                        "Microsoft-HealthStateChange"
                      ],
                      "extensionName": "HealthExtension",
                      "extensionSettings": {
                        "schemaVersion": "1.0",
                        "contentVersion": "",
                        "healthRuleOverrides": [
                          {
                            "scopes": [
                              "*"
                            ],
                            "monitors": [
                              "root"
                            ],
                            "monitorConfiguration": {},
                            "alertConfiguration": {
                              "isEnabled": true
                            }
                          }
                        ]
                      },
                      "inputDataSources": [
                        "VMHealthPerfCounters"
                      ]
                    }
                  ]
                },
                "destinations": {
                  "logAnalytics": [
                    {
                      "workspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('OMSWorkspaceName'))]",
                      "name": "LogAnalyticsWorkspace"
                    }
                  ]
                },
                "dataFlows": [
                  {
                    "streams": [
                      "Microsoft-HealthStateChange",
                      "Microsoft-Perf",
                      "Microsoft-Syslog",
                      "Microsoft-WindowsEvent"
                    ],
                    "destinations": [
                      "LogAnalyticsWorkspace"
                    ]
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', variables('OMSWorkspaceName'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/components",
              "apiVersion": "2020-02-02",
              "name": "[variables('appInsightsName')]",
              "location": "[if(contains(parameters('Global'), 'AppInsightsRegion'), parameters('Global').AppInsightsRegion, resourceGroup().location)]",
              "kind": "other",
              "properties": {
                "Application_Type": "web",
                "Flow_Type": "Redfield",
                "Request_Source": "rest",
                "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('OMSWorkspaceName'))]",
                "IngestionMode": "LogAnalytics",
                "publicNetworkAccessForIngestion": "Enabled"
              },
              "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', variables('OMSWorkspaceName'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2017-05-01-preview",
              "scope": "[format('Microsoft.Insights/components/{0}', variables('appInsightsName'))]",
              "name": "service",
              "properties": {
                "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('OMSWorkspaceName'))]",
                "logs": [
                  {
                    "enabled": true,
                    "category": "AppAvailabilityResults"
                  },
                  {
                    "enabled": true,
                    "category": "AppBrowserTimings"
                  },
                  {
                    "enabled": true,
                    "category": "AppEvents"
                  },
                  {
                    "enabled": true,
                    "category": "AppMetrics"
                  },
                  {
                    "enabled": true,
                    "category": "AppDependencies"
                  },
                  {
                    "enabled": true,
                    "category": "AppExceptions"
                  },
                  {
                    "enabled": true,
                    "category": "AppPageViews"
                  },
                  {
                    "enabled": true,
                    "category": "AppPerformanceCounters"
                  },
                  {
                    "enabled": true,
                    "category": "AppRequests"
                  },
                  {
                    "enabled": true,
                    "category": "AppSystemEvents"
                  },
                  {
                    "enabled": true,
                    "category": "AppTraces"
                  }
                ],
                "metrics": [
                  {
                    "timeGrain": "PT5M",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": false,
                      "days": 0
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Insights/components', variables('appInsightsName'))]",
                "[resourceId('Microsoft.OperationalInsights/workspaces', variables('OMSWorkspaceName'))]"
              ]
            },
            {
              "condition": "[bool(parameters('Stage').OMSDataSources)]",
              "copy": {
                "name": "OMS_dataSources",
                "count": "[length(variables('dataSources'))]"
              },
              "type": "Microsoft.OperationalInsights/workspaces/dataSources",
              "apiVersion": "2020-08-01",
              "name": "[format('{0}/{1}', variables('OMSWorkspaceName'), variables('dataSources')[copyIndex()].name)]",
              "kind": "[variables('dataSources')[copyIndex()].kind]",
              "properties": "[variables('dataSources')[copyIndex()].properties]",
              "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', variables('OMSWorkspaceName'))]"
              ]
            },
            {
              "condition": "[bool(parameters('Stage').OMSSolutions)]",
              "copy": {
                "name": "OMS_solutions",
                "count": "[length(variables('solutions'))]"
              },
              "type": "Microsoft.OperationsManagement/solutions",
              "apiVersion": "2015-11-01-preview",
              "name": "[format('{0}({1})', variables('solutions')[copyIndex()], variables('OMSWorkspaceName'))]",
              "location": "[resourceGroup().location]",
              "properties": {
                "workspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('OMSWorkspaceName'))]"
              },
              "plan": {
                "name": "[format('{0}({1})', variables('solutions')[copyIndex()], variables('OMSWorkspaceName'))]",
                "product": "[format('OMSGallery/{0}', variables('solutions')[copyIndex()])]",
                "promotionCode": "",
                "publisher": "Microsoft"
              },
              "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', variables('OMSWorkspaceName'))]"
              ]
            }
          ]
        }
      }
    },
    {
      "condition": "[bool(parameters('Stage').SA)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('dp{0}-SA', variables('Deployment'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "DeploymentID": {
            "value": "[parameters('DeploymentID')]"
          },
          "DeploymentInfo": {
            "value": "[parameters('DeploymentInfo')]"
          },
          "Environment": {
            "value": "[parameters('Environment')]"
          },
          "Extensions": {
            "value": "[parameters('Extensions')]"
          },
          "Global": {
            "value": "[parameters('Global')]"
          },
          "Prefix": {
            "value": "[parameters('Prefix')]"
          },
          "Stage": {
            "value": "[parameters('Stage')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "645363521651925227"
            }
          },
          "parameters": {
            "Prefix": {
              "type": "string"
            },
            "Environment": {
              "type": "string",
              "defaultValue": "D",
              "allowedValues": [
                "I",
                "D",
                "T",
                "U",
                "P",
                "S",
                "G",
                "A"
              ]
            },
            "DeploymentID": {
              "type": "string",
              "defaultValue": "1",
              "allowedValues": [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9"
              ]
            },
            "Stage": {
              "type": "object"
            },
            "Extensions": {
              "type": "object"
            },
            "Global": {
              "type": "object"
            },
            "DeploymentInfo": {
              "type": "object"
            }
          },
          "variables": {
            "copy": [
              {
                "name": "SAInfo",
                "count": "[length(variables('storageInfo'))]",
                "input": {
                  "match": "[or(equals(parameters('Global').CN, '.'), contains(array(parameters('Global').CN), variables('storageInfo')[copyIndex('SAInfo')].name))]"
                }
              }
            ],
            "Deployment": "[format('{0}-{1}-{2}-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID'))]",
            "DeploymentURI": "[toLower(format('{0}{1}{2}{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID')))]",
            "storageInfo": "[if(contains(parameters('DeploymentInfo'), 'saInfo'), parameters('DeploymentInfo').saInfo, createArray())]"
          },
          "resources": [
            {
              "condition": "[variables('SAInfo')[copyIndex()].match]",
              "copy": {
                "name": "SA",
                "count": "[length(variables('storageInfo'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dp{0}-SA-{1}', variables('Deployment'), variables('storageInfo')[copyIndex()].name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "Deployment": {
                    "value": "[variables('Deployment')]"
                  },
                  "DeploymentURI": {
                    "value": "[variables('DeploymentURI')]"
                  },
                  "storageInfo": {
                    "value": "[variables('storageInfo')[copyIndex()]]"
                  },
                  "Global": {
                    "value": "[parameters('Global')]"
                  },
                  "DeploymentID": {
                    "value": "[variables('Deployment')]"
                  },
                  "Environment": {
                    "value": "[parameters('Environment')]"
                  },
                  "Prefix": {
                    "value": "[parameters('Prefix')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1318.3566",
                      "templateHash": "13977291721903828895"
                    }
                  },
                  "parameters": {
                    "Deployment": {
                      "type": "string"
                    },
                    "DeploymentURI": {
                      "type": "string"
                    },
                    "storageInfo": {
                      "type": "object"
                    },
                    "Global": {
                      "type": "object"
                    },
                    "now": {
                      "type": "string",
                      "defaultValue": "[utcNow('F')]"
                    },
                    "Prefix": {
                      "type": "string"
                    },
                    "Environment": {
                      "type": "string"
                    },
                    "DeploymentID": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "HubRGJ": "[json(parameters('Global').hubRG)]",
                    "gh": {
                      "hubRGPrefix": "[if(contains(variables('HubRGJ'), 'Prefix'), variables('HubRGJ').Prefix, parameters('Prefix'))]",
                      "hubRGOrgName": "[if(contains(variables('HubRGJ'), 'OrgName'), variables('HubRGJ').OrgName, parameters('Global').OrgName)]",
                      "hubRGAppName": "[if(contains(variables('HubRGJ'), 'AppName'), variables('HubRGJ').AppName, parameters('Global').AppName)]",
                      "hubRGRGName": "[if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID'))))]"
                    },
                    "HubRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').hubRGPrefix, variables('gh').hubRGOrgName, variables('gh').hubRGAppName, variables('gh').hubRGRGName)]",
                    "azureFilesIdentityBasedAuthentication": {
                      "directoryServiceOptions": "AD",
                      "activeDirectoryProperties": {
                        "domainName": "Contoso.com",
                        "netBiosDomainName": "Contoso",
                        "forestName": "Contoso.com",
                        "domainGuid": "7bdbf663-36ad-43e2-9148-c142ace6ae24",
                        "domainSid": "S-1-5-21-4189862783-2073351504-2099725206",
                        "azureStorageSid": "S-1-5-21-4189862783-2073351504-2099725206-3101"
                      }
                    },
                    "fileShares": "[if(contains(parameters('storageInfo'), 'fileShares'), parameters('storageInfo').fileShares, createArray())]",
                    "containers": "[if(contains(parameters('storageInfo'), 'containers'), parameters('storageInfo').containers, createArray())]",
                    "rolesInfo": "[if(contains(parameters('storageInfo'), 'rolesInfo'), parameters('storageInfo').rolesInfo, createArray())]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2021-06-01",
                      "name": "[toLower(format('{0}sa{1}', parameters('DeploymentURI'), parameters('storageInfo').name))]",
                      "location": "[resourceGroup().location]",
                      "sku": {
                        "name": "[parameters('storageInfo').skuName]"
                      },
                      "kind": "StorageV2",
                      "properties": {
                        "isHnsEnabled": "[if(contains(parameters('storageInfo'), 'isHnsEnabled'), bool(parameters('storageInfo').isHnsEnabled), null())]",
                        "accessTier": "[if(contains(parameters('storageInfo'), 'accessTier'), parameters('storageInfo').accessTier, 'Hot')]",
                        "allowBlobPublicAccess": false,
                        "supportsBlobContainerRetention": true,
                        "azureFilesIdentityBasedAuthentication": "[if(and(contains(parameters('storageInfo'), 'ADDS'), bool(parameters('storageInfo').ADDS)), variables('azureFilesIdentityBasedAuthentication'), null())]",
                        "largeFileSharesState": "[if(contains(parameters('storageInfo'), 'largeFileSharesState'), parameters('storageInfo').largeFileSharesState, null())]",
                        "networkAcls": {
                          "bypass": "Logging, Metrics, AzureServices",
                          "defaultAction": "[if(not(contains(parameters('storageInfo'), 'allNetworks')), 'Allow', if(bool(parameters('storageInfo').allNetworks), 'Allow', 'Deny'))]"
                        },
                        "supportsHttpsTrafficOnly": true,
                        "minimumTlsVersion": "TLS1_2",
                        "encryption": {
                          "keySource": "Microsoft.Storage",
                          "services": {
                            "blob": {
                              "enabled": true
                            },
                            "file": {
                              "enabled": true
                            }
                          }
                        }
                      }
                    },
                    {
                      "condition": "[not(and(contains(parameters('storageInfo'), 'isHnsEnabled'), bool(parameters('storageInfo').isHnsEnabled)))]",
                      "type": "Microsoft.Storage/storageAccounts/blobServices",
                      "apiVersion": "2021-06-01",
                      "name": "[format('{0}/{1}', toLower(format('{0}sa{1}', parameters('DeploymentURI'), parameters('storageInfo').name)), 'default')]",
                      "properties": {
                        "isVersioningEnabled": "[if(contains(parameters('storageInfo'), 'blobVersioning'), parameters('storageInfo').blobVersioning, false())]",
                        "changeFeed": {
                          "enabled": "[if(contains(parameters('storageInfo'), 'changeFeed'), parameters('storageInfo').changeFeed, false())]"
                        },
                        "deleteRetentionPolicy": "[if(contains(parameters('storageInfo'), 'softDeletePolicy'), parameters('storageInfo').softDeletePolicy, null())]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', toLower(format('{0}sa{1}', parameters('DeploymentURI'), parameters('storageInfo').name)))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Storage/storageAccounts/fileServices",
                      "apiVersion": "2021-06-01",
                      "name": "[format('{0}/{1}', toLower(format('{0}sa{1}', parameters('DeploymentURI'), parameters('storageInfo').name)), 'default')]",
                      "properties": {
                        "shareDeleteRetentionPolicy": "[if(contains(parameters('storageInfo'), 'softDeletePolicy'), parameters('storageInfo').softDeletePolicy, null())]",
                        "protocolSettings": {
                          "smb": {
                            "versions": "SMB3.0;SMB3.1.1",
                            "kerberosTicketEncryption": "AES-256",
                            "multichannel": "[if(not(contains(parameters('storageInfo'), 'multichannel')), null(), createObject('enabled', bool(parameters('storageInfo').multichannel)))]"
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', toLower(format('{0}sa{1}', parameters('DeploymentURI'), parameters('storageInfo').name)))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2017-05-01-preview",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', toLower(format('{0}sa{1}', parameters('DeploymentURI'), parameters('storageInfo').name)))]",
                      "name": "service",
                      "properties": {
                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                        "metrics": [
                          {
                            "category": "Capacity",
                            "enabled": false,
                            "retentionPolicy": {
                              "enabled": false,
                              "days": 0
                            }
                          },
                          {
                            "category": "Transaction",
                            "enabled": true,
                            "retentionPolicy": {
                              "enabled": false,
                              "days": 0
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', toLower(format('{0}sa{1}', parameters('DeploymentURI'), parameters('storageInfo').name)))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2017-05-01-preview",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}', toLower(format('{0}sa{1}', parameters('DeploymentURI'), parameters('storageInfo').name)), 'default')]",
                      "name": "service",
                      "properties": {
                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                        "metrics": [
                          {
                            "category": "Capacity",
                            "enabled": false,
                            "retentionPolicy": {
                              "enabled": false,
                              "days": 0
                            }
                          },
                          {
                            "category": "Transaction",
                            "enabled": true,
                            "retentionPolicy": {
                              "enabled": false,
                              "days": 0
                            }
                          }
                        ],
                        "logs": [
                          {
                            "category": "StorageRead",
                            "enabled": "[if(contains(parameters('storageInfo'), 'logging'), bool(parameters('storageInfo').logging.r), false())]",
                            "retentionPolicy": {
                              "enabled": false,
                              "days": 0
                            }
                          },
                          {
                            "category": "StorageWrite",
                            "enabled": "[if(contains(parameters('storageInfo'), 'logging'), bool(parameters('storageInfo').logging.w), false())]",
                            "retentionPolicy": {
                              "enabled": false,
                              "days": 0
                            }
                          },
                          {
                            "category": "StorageDelete",
                            "enabled": "[if(contains(parameters('storageInfo'), 'logging'), bool(parameters('storageInfo').logging.d), false())]",
                            "retentionPolicy": {
                              "enabled": false,
                              "days": 0
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', toLower(format('{0}sa{1}', parameters('DeploymentURI'), parameters('storageInfo').name)), 'default')]"
                      ]
                    },
                    {
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2017-05-01-preview",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}/fileServices/{1}', toLower(format('{0}sa{1}', parameters('DeploymentURI'), parameters('storageInfo').name)), 'default')]",
                      "name": "service",
                      "properties": {
                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                        "metrics": [
                          {
                            "category": "Capacity",
                            "enabled": false,
                            "retentionPolicy": {
                              "enabled": false,
                              "days": 0
                            }
                          },
                          {
                            "category": "Transaction",
                            "enabled": true,
                            "retentionPolicy": {
                              "enabled": false,
                              "days": 0
                            }
                          }
                        ],
                        "logs": [
                          {
                            "category": "StorageRead",
                            "enabled": "[if(contains(parameters('storageInfo'), 'logging'), bool(parameters('storageInfo').logging.r), false())]",
                            "retentionPolicy": {
                              "enabled": false,
                              "days": 0
                            }
                          },
                          {
                            "category": "StorageWrite",
                            "enabled": "[if(contains(parameters('storageInfo'), 'logging'), bool(parameters('storageInfo').logging.w), false())]",
                            "retentionPolicy": {
                              "enabled": false,
                              "days": 0
                            }
                          },
                          {
                            "category": "StorageDelete",
                            "enabled": "[if(contains(parameters('storageInfo'), 'logging'), bool(parameters('storageInfo').logging.d), false())]",
                            "retentionPolicy": {
                              "enabled": false,
                              "days": 0
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts/fileServices', toLower(format('{0}sa{1}', parameters('DeploymentURI'), parameters('storageInfo').name)), 'default')]"
                      ]
                    },
                    {
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2017-05-01-preview",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}/queueServices/{1}', toLower(format('{0}sa{1}', parameters('DeploymentURI'), parameters('storageInfo').name)), 'default')]",
                      "name": "service",
                      "properties": {
                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                        "metrics": [
                          {
                            "category": "Capacity",
                            "enabled": false,
                            "retentionPolicy": {
                              "enabled": false,
                              "days": 0
                            }
                          },
                          {
                            "category": "Transaction",
                            "enabled": true,
                            "retentionPolicy": {
                              "enabled": false,
                              "days": 0
                            }
                          }
                        ],
                        "logs": [
                          {
                            "category": "StorageRead",
                            "enabled": "[if(contains(parameters('storageInfo'), 'logging'), bool(parameters('storageInfo').logging.r), false())]",
                            "retentionPolicy": {
                              "enabled": false,
                              "days": 0
                            }
                          },
                          {
                            "category": "StorageWrite",
                            "enabled": "[if(contains(parameters('storageInfo'), 'logging'), bool(parameters('storageInfo').logging.w), false())]",
                            "retentionPolicy": {
                              "enabled": false,
                              "days": 0
                            }
                          },
                          {
                            "category": "StorageDelete",
                            "enabled": "[if(contains(parameters('storageInfo'), 'logging'), bool(parameters('storageInfo').logging.d), false())]",
                            "retentionPolicy": {
                              "enabled": false,
                              "days": 0
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', toLower(format('{0}sa{1}', parameters('DeploymentURI'), parameters('storageInfo').name)))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2017-05-01-preview",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}/tableServices/{1}', toLower(format('{0}sa{1}', parameters('DeploymentURI'), parameters('storageInfo').name)), 'default')]",
                      "name": "service",
                      "properties": {
                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                        "metrics": [
                          {
                            "category": "Capacity",
                            "enabled": false,
                            "retentionPolicy": {
                              "enabled": false,
                              "days": 0
                            }
                          },
                          {
                            "category": "Transaction",
                            "enabled": true,
                            "retentionPolicy": {
                              "enabled": false,
                              "days": 0
                            }
                          }
                        ],
                        "logs": [
                          {
                            "category": "StorageRead",
                            "enabled": "[if(contains(parameters('storageInfo'), 'logging'), bool(parameters('storageInfo').logging.r), false())]",
                            "retentionPolicy": {
                              "enabled": false,
                              "days": 0
                            }
                          },
                          {
                            "category": "StorageWrite",
                            "enabled": "[if(contains(parameters('storageInfo'), 'logging'), bool(parameters('storageInfo').logging.w), false())]",
                            "retentionPolicy": {
                              "enabled": false,
                              "days": 0
                            }
                          },
                          {
                            "category": "StorageDelete",
                            "enabled": "[if(contains(parameters('storageInfo'), 'logging'), bool(parameters('storageInfo').logging.d), false())]",
                            "retentionPolicy": {
                              "enabled": false,
                              "days": 0
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', toLower(format('{0}sa{1}', parameters('DeploymentURI'), parameters('storageInfo').name)))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "RBAC",
                        "count": "[length(variables('rolesInfo'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp-rbac-role-{0}-{1}', parameters('storageInfo').name, variables('rolesInfo')[copyIndex()].name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "resourceId": {
                            "value": "[resourceId('Microsoft.Storage/storageAccounts', toLower(format('{0}sa{1}', parameters('DeploymentURI'), parameters('storageInfo').name)))]"
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          },
                          "roleInfo": {
                            "value": "[variables('rolesInfo')[copyIndex()]]"
                          },
                          "Type": {
                            "value": "[if(contains(variables('rolesInfo')[copyIndex()], 'Type'), variables('rolesInfo')[copyIndex()].Type, 'lookup')]"
                          },
                          "deployment": {
                            "value": "[parameters('Deployment')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "18000982583333431838"
                            }
                          },
                          "parameters": {
                            "resourceId": {
                              "type": "string"
                            },
                            "Global": {
                              "type": "object"
                            },
                            "roleInfo": {
                              "type": "object"
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": ""
                            },
                            "Type": {
                              "type": "string"
                            },
                            "deployment": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "roleAssignment",
                                "count": "[length(parameters('roleInfo').RBAC)]",
                                "input": {
                                  "RoleName": "[parameters('roleInfo').RBAC[copyIndex('roleAssignment')].Name]",
                                  "RoleID": "[variables('rolesGroupsLookup')[parameters('roleInfo').RBAC[copyIndex('roleAssignment')].Name].Id]",
                                  "principalType": "[parameters('principalType')]",
                                  "GUID": "[guid(parameters('roleInfo').Name, parameters('roleInfo').RBAC[copyIndex('roleAssignment')].Name, parameters('resourceId'))]",
                                  "FriendlyName": "[format('user: {0} --> roleInfoName: {1} --> resourceId: {2}', parameters('roleInfo').Name, parameters('roleInfo').RBAC[copyIndex('roleAssignment')].Name, parameters('resourceId'))]"
                                }
                              }
                            ],
                            "objectIdLookup": "[json(parameters('Global').objectIdLookup)]",
                            "rolesGroupsLookup": "[json(parameters('Global').RolesGroupsLookup)]"
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "RBACRAResource",
                                "count": "[length(variables('roleAssignment'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[take(replace(format('dp-rbac-all-ra-{0}-{1}-{2}', last(split(parameters('resourceId'), '/')), parameters('roleInfo').name, copyIndex()), '@', '_'), 64)]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "resourceId": {
                                    "value": "[parameters('resourceId')]"
                                  },
                                  "description": {
                                    "value": "[parameters('roleInfo').name]"
                                  },
                                  "roledescription": {
                                    "value": "[variables('roleAssignment')[copyIndex()].RoleName]"
                                  },
                                  "name": {
                                    "value": "[variables('roleAssignment')[copyIndex()].GUID]"
                                  },
                                  "roleDefinitionId": {
                                    "value": "[variables('roleAssignment')[copyIndex()].RoleID]"
                                  },
                                  "principalId": {
                                    "value": "[if(equals(parameters('Type'), 'lookup'), variables('objectIdLookup')[parameters('roleInfo').name], reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-uai{1}', parameters('deployment'), parameters('roleInfo').name)), '2018-11-30').principalId)]"
                                  },
                                  "principalType": {
                                    "value": "[variables('roleAssignment')[copyIndex()].principalType]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.4.1318.3566",
                                      "templateHash": "15020166987174036705"
                                    }
                                  },
                                  "parameters": {
                                    "resourceId": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "roleDefinitionId": {
                                      "type": "string"
                                    },
                                    "principalId": {
                                      "type": "string"
                                    },
                                    "principalType": {
                                      "type": "string",
                                      "defaultValue": ""
                                    },
                                    "description": {
                                      "type": "string"
                                    },
                                    "roledescription": {
                                      "type": "string",
                                      "defaultValue": ""
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2021-04-01",
                                      "name": "[take(format('dp-RRA-{0}-{1}', parameters('description'), last(split(parameters('resourceId'), '/'))), 64)]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "expressionEvaluationOptions": {
                                          "scope": "Outer"
                                        },
                                        "template": "[json('{\r\n  \"$schema\": \"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#\",\r\n  \"contentVersion\": \"1.0.0.0\",\r\n  \"parameters\": {\r\n    \"scope\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"name\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"roleDefinitionId\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"principalId\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"principalType\": {\r\n      \"type\": \"string\"\r\n    }\r\n  },\r\n  \"resources\": [\r\n    {\r\n      \"type\": \"Microsoft.Authorization/roleAssignments\",\r\n      \"apiVersion\": \"2020-08-01-preview\",\r\n      \"scope\": \"[parameters(''scope'')]\",\r\n      \"name\": \"[parameters(''name'')]\",\r\n      \"properties\": {\r\n        \"roleDefinitionId\": \"[resourceId(''Microsoft.Authorization/roleDefinitions'', parameters(''roleDefinitionId''))]\",\r\n        \"principalId\": \"[parameters(''principalId'')]\",\r\n        \"principalType\": \"[parameters(''principalType'')]\"\r\n      }\r\n    }\r\n  ],\r\n  \"outputs\": {\r\n    \"roleAssignmentId\": {\r\n      \"type\": \"string\",\r\n      \"value\": \"[extensionResourceId(parameters(''scope''), ''Microsoft.Authorization/roleAssignments'', parameters(''name''))]\"\r\n    }\r\n  }\r\n}')]",
                                        "parameters": {
                                          "scope": {
                                            "value": "[parameters('resourceId')]"
                                          },
                                          "name": {
                                            "value": "[parameters('name')]"
                                          },
                                          "roleDefinitionId": {
                                            "value": "[parameters('roleDefinitionId')]"
                                          },
                                          "principalId": {
                                            "value": "[parameters('principalId')]"
                                          },
                                          "principalType": {
                                            "value": "[parameters('principalType')]"
                                          }
                                        }
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "resourceid": {
                                      "type": "string",
                                      "value": "[parameters('resourceId')]"
                                    },
                                    "roleAssignmentId": {
                                      "type": "string",
                                      "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('dp-RRA-{0}-{1}', parameters('description'), last(split(parameters('resourceId'), '/'))), 64))).outputs.roleAssignmentId.value]"
                                    }
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "RoleAssignments": {
                              "type": "array",
                              "value": "[variables('roleAssignment')]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', toLower(format('{0}sa{1}', parameters('DeploymentURI'), parameters('storageInfo').name)))]"
                      ]
                    },
                    {
                      "condition": "[contains(parameters('storageInfo'), 'storageKeyRotation')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[toLower(format('{0}sa{1}-StorageKeyRotation-key1', parameters('DeploymentURI'), parameters('storageInfo').name))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "keyName": {
                            "value": "key1"
                          },
                          "regenerationPeriodDays": {
                            "value": "[if(contains(parameters('storageInfo').storageKeyRotation, 'regenerationPeriodDays'), parameters('storageInfo').storageKeyRotation.regenerationPeriodDays, 30)]"
                          },
                          "storageAccountName": {
                            "value": "[toLower(format('{0}sa{1}', parameters('DeploymentURI'), parameters('storageInfo').name))]"
                          },
                          "state": {
                            "value": "[if(contains(parameters('storageInfo').storageKeyRotation, 'state'), parameters('storageInfo').storageKeyRotation.state, 'enabled')]"
                          },
                          "userAssignedIdentityName": {
                            "value": "[format('{0}-uaiStorageKeyRotation', parameters('Deployment'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "8390260910814688114"
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "defaultValue": "acu1brwaoat5sadata2"
                            },
                            "keyvaultName": {
                              "type": "string",
                              "defaultValue": "ACU1-BRW-AOA-T5-kvData2"
                            },
                            "keyName": {
                              "type": "string",
                              "defaultValue": "key1",
                              "allowedValues": [
                                "key1",
                                "key2"
                              ]
                            },
                            "regenerationPeriodDays": {
                              "type": "int",
                              "defaultValue": 30
                            },
                            "state": {
                              "type": "string",
                              "defaultValue": "disabled",
                              "allowedValues": [
                                "enabled",
                                "disabled"
                              ]
                            },
                            "userAssignedIdentityName": {
                              "type": "string",
                              "defaultValue": "ACU1-BRW-AOA-T5-uaiStorageKeyRotation",
                              "metadata": {
                                "description": "User Assigned Identity requires RBAC:\n      KeyVault:        [Key Vault Administrator]\n      Storage Account: [Storage Account Key Operator Service Role]\n      Storage Account: [Storage Account Contributor]\n"
                              }
                            },
                            "now": {
                              "type": "string",
                              "defaultValue": "[utcNow('F')]"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/deploymentScripts",
                              "apiVersion": "2020-10-01",
                              "name": "setStorageKeyRotationKV",
                              "identity": {
                                "type": "UserAssigned",
                                "userAssignedIdentities": {
                                  "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName')))]": {}
                                }
                              },
                              "location": "[resourceGroup().location]",
                              "kind": "AzurePowerShell",
                              "properties": {
                                "azPowerShellVersion": "6.4.0",
                                "arguments": "[format(' -VaultName {0} -AccountName {1} -KeyName {2} -RegenerationPeriodDays {3} -State {4}', parameters('keyvaultName'), parameters('storageAccountName'), parameters('keyName'), parameters('regenerationPeriodDays'), parameters('state'))]",
                                "scriptContent": "param (\r\n    [string]$VaultName = 'ACU1-BRW-AOA-T5-kvData2',\r\n    \r\n    [string]$AccountName = 'acu1brwaoat5sadata2',\r\n    \r\n    [validateset('key1', 'key2')]\r\n    [string]$KeyName = 'key1',\r\n    \r\n    [int]$RegenerationPeriodDays = 30,\r\n\r\n    [validateset('enabled', 'disabled')]\r\n    [string]$State = 'enabled'\r\n)\r\n\r\ntry\r\n{\r\n    Write-Output \"`nUTC is: $(Get-Date)\"\r\n    \r\n    $c = Get-AzContext -ErrorAction stop\r\n    if ($c)\r\n    {\r\n        Write-Output \"`nContext is: \"\r\n        $c | Select-Object Account, Subscription, Tenant, Environment | Format-List | Out-String\r\n\r\n        $Disable = switch ($State)\r\n        {\r\n            enabled { $false }\r\n            disabled { $true }\r\n        }\r\n\r\n        $SA = Get-AzStorageAccount | Where-Object StorageAccountName -EQ $AccountName\r\n        $params = @{\r\n            regenerationPeriod = [System.Timespan]::FromDays($regenerationPeriodDays)\r\n            VaultName          = $VaultName\r\n            AccountName        = $AccountName\r\n            AccountResourceId  = $SA.Id\r\n            ActiveKeyName      = $KeyName\r\n            Disable            = $Disable\r\n            # DisableAutoRegenerateKey = $Disable\r\n        }\r\n\r\n        $DeploymentScriptOutputs = @{}\r\n\r\n        $result = Get-AzKeyVaultManagedStorageAccount -VaultName $VaultName -AccountName $AccountName -Verbose |\r\n            Where-Object ActiveKeyName -EQ $KeyName\r\n\r\n        if ($result)\r\n        {\r\n            if (\r\n                # only validating these 2 settings, you could add more checks here\r\n                $result.Attributes.Enabled -ne $Disable -and\r\n                $result.RegenerationPeriod.TotalDays -eq $regenerationPeriodDays\r\n            )\r\n            {\r\n                $DeploymentScriptOutputs['keyRotation'] = $result\r\n                $DeploymentScriptOutputs['set'] = $false\r\n            }\r\n            else \r\n            {\r\n                $set = $true\r\n            }\r\n        }\r\n        else\r\n        {\r\n            $set = $true\r\n        }\r\n\r\n        if ($set)\r\n        {\r\n            $result = Add-AzKeyVaultManagedStorageAccount @Params\r\n            $DeploymentScriptOutputs['keyRotation'] = $result\r\n            $DeploymentScriptOutputs['set'] = $true\r\n        }\r\n\r\n        $DeploymentScriptOutputs['keyRotation']\r\n        $DeploymentScriptOutputs['set']\r\n    }\r\n    else\r\n    {\r\n        throw 'Cannot get a context'\r\n    }\r\n}\r\ncatch\r\n{\r\n    Write-Warning $_\r\n    Write-Warning $_.exception\r\n}",
                                "forceUpdateTag": "[parameters('now')]",
                                "cleanupPreference": "OnSuccess",
                                "retentionInterval": "P1D"
                              }
                            }
                          ],
                          "outputs": {
                            "keyRotation": {
                              "type": "object",
                              "value": "[reference(resourceId('Microsoft.Resources/deploymentScripts', 'setStorageKeyRotationKV')).outputs.keyRotation]"
                            },
                            "updated": {
                              "type": "bool",
                              "value": "[reference(resourceId('Microsoft.Resources/deploymentScripts', 'setStorageKeyRotationKV')).outputs.set]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', toLower(format('{0}sa{1}', parameters('DeploymentURI'), parameters('storageInfo').name)))]"
                      ]
                    },
                    {
                      "condition": "[contains(parameters('storageInfo'), 'storageKeyRotation')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[toLower(format('{0}sa{1}-StorageKeyRotation-key2', parameters('DeploymentURI'), parameters('storageInfo').name))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "keyName": {
                            "value": "key2"
                          },
                          "regenerationPeriodDays": {
                            "value": "[if(contains(parameters('storageInfo').storageKeyRotation, 'regenerationPeriodDays'), parameters('storageInfo').storageKeyRotation.regenerationPeriodDays, 30)]"
                          },
                          "storageAccountName": {
                            "value": "[toLower(format('{0}sa{1}', parameters('DeploymentURI'), parameters('storageInfo').name))]"
                          },
                          "state": {
                            "value": "[if(contains(parameters('storageInfo').storageKeyRotation, 'state'), parameters('storageInfo').storageKeyRotation.state, 'enabled')]"
                          },
                          "userAssignedIdentityName": {
                            "value": "[format('{0}-uaiStorageKeyRotation', parameters('Deployment'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "8390260910814688114"
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "defaultValue": "acu1brwaoat5sadata2"
                            },
                            "keyvaultName": {
                              "type": "string",
                              "defaultValue": "ACU1-BRW-AOA-T5-kvData2"
                            },
                            "keyName": {
                              "type": "string",
                              "defaultValue": "key1",
                              "allowedValues": [
                                "key1",
                                "key2"
                              ]
                            },
                            "regenerationPeriodDays": {
                              "type": "int",
                              "defaultValue": 30
                            },
                            "state": {
                              "type": "string",
                              "defaultValue": "disabled",
                              "allowedValues": [
                                "enabled",
                                "disabled"
                              ]
                            },
                            "userAssignedIdentityName": {
                              "type": "string",
                              "defaultValue": "ACU1-BRW-AOA-T5-uaiStorageKeyRotation",
                              "metadata": {
                                "description": "User Assigned Identity requires RBAC:\n      KeyVault:        [Key Vault Administrator]\n      Storage Account: [Storage Account Key Operator Service Role]\n      Storage Account: [Storage Account Contributor]\n"
                              }
                            },
                            "now": {
                              "type": "string",
                              "defaultValue": "[utcNow('F')]"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/deploymentScripts",
                              "apiVersion": "2020-10-01",
                              "name": "setStorageKeyRotationKV",
                              "identity": {
                                "type": "UserAssigned",
                                "userAssignedIdentities": {
                                  "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName')))]": {}
                                }
                              },
                              "location": "[resourceGroup().location]",
                              "kind": "AzurePowerShell",
                              "properties": {
                                "azPowerShellVersion": "6.4.0",
                                "arguments": "[format(' -VaultName {0} -AccountName {1} -KeyName {2} -RegenerationPeriodDays {3} -State {4}', parameters('keyvaultName'), parameters('storageAccountName'), parameters('keyName'), parameters('regenerationPeriodDays'), parameters('state'))]",
                                "scriptContent": "param (\r\n    [string]$VaultName = 'ACU1-BRW-AOA-T5-kvData2',\r\n    \r\n    [string]$AccountName = 'acu1brwaoat5sadata2',\r\n    \r\n    [validateset('key1', 'key2')]\r\n    [string]$KeyName = 'key1',\r\n    \r\n    [int]$RegenerationPeriodDays = 30,\r\n\r\n    [validateset('enabled', 'disabled')]\r\n    [string]$State = 'enabled'\r\n)\r\n\r\ntry\r\n{\r\n    Write-Output \"`nUTC is: $(Get-Date)\"\r\n    \r\n    $c = Get-AzContext -ErrorAction stop\r\n    if ($c)\r\n    {\r\n        Write-Output \"`nContext is: \"\r\n        $c | Select-Object Account, Subscription, Tenant, Environment | Format-List | Out-String\r\n\r\n        $Disable = switch ($State)\r\n        {\r\n            enabled { $false }\r\n            disabled { $true }\r\n        }\r\n\r\n        $SA = Get-AzStorageAccount | Where-Object StorageAccountName -EQ $AccountName\r\n        $params = @{\r\n            regenerationPeriod = [System.Timespan]::FromDays($regenerationPeriodDays)\r\n            VaultName          = $VaultName\r\n            AccountName        = $AccountName\r\n            AccountResourceId  = $SA.Id\r\n            ActiveKeyName      = $KeyName\r\n            Disable            = $Disable\r\n            # DisableAutoRegenerateKey = $Disable\r\n        }\r\n\r\n        $DeploymentScriptOutputs = @{}\r\n\r\n        $result = Get-AzKeyVaultManagedStorageAccount -VaultName $VaultName -AccountName $AccountName -Verbose |\r\n            Where-Object ActiveKeyName -EQ $KeyName\r\n\r\n        if ($result)\r\n        {\r\n            if (\r\n                # only validating these 2 settings, you could add more checks here\r\n                $result.Attributes.Enabled -ne $Disable -and\r\n                $result.RegenerationPeriod.TotalDays -eq $regenerationPeriodDays\r\n            )\r\n            {\r\n                $DeploymentScriptOutputs['keyRotation'] = $result\r\n                $DeploymentScriptOutputs['set'] = $false\r\n            }\r\n            else \r\n            {\r\n                $set = $true\r\n            }\r\n        }\r\n        else\r\n        {\r\n            $set = $true\r\n        }\r\n\r\n        if ($set)\r\n        {\r\n            $result = Add-AzKeyVaultManagedStorageAccount @Params\r\n            $DeploymentScriptOutputs['keyRotation'] = $result\r\n            $DeploymentScriptOutputs['set'] = $true\r\n        }\r\n\r\n        $DeploymentScriptOutputs['keyRotation']\r\n        $DeploymentScriptOutputs['set']\r\n    }\r\n    else\r\n    {\r\n        throw 'Cannot get a context'\r\n    }\r\n}\r\ncatch\r\n{\r\n    Write-Warning $_\r\n    Write-Warning $_.exception\r\n}",
                                "forceUpdateTag": "[parameters('now')]",
                                "cleanupPreference": "OnSuccess",
                                "retentionInterval": "P1D"
                              }
                            }
                          ],
                          "outputs": {
                            "keyRotation": {
                              "type": "object",
                              "value": "[reference(resourceId('Microsoft.Resources/deploymentScripts', 'setStorageKeyRotationKV')).outputs.keyRotation]"
                            },
                            "updated": {
                              "type": "bool",
                              "value": "[reference(resourceId('Microsoft.Resources/deploymentScripts', 'setStorageKeyRotationKV')).outputs.set]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', toLower(format('{0}sa{1}', parameters('DeploymentURI'), parameters('storageInfo').name)))]",
                        "[resourceId('Microsoft.Resources/deployments', toLower(format('{0}sa{1}-StorageKeyRotation-key1', parameters('DeploymentURI'), parameters('storageInfo').name)))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "SAFileShares",
                        "count": "[length(variables('fileShares'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-SA-{1}-FileShare-{2}', parameters('Deployment'), parameters('storageInfo').name, variables('fileShares')[copyIndex()].name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "SAName": {
                            "value": "[toLower(format('{0}sa{1}', parameters('DeploymentURI'), parameters('storageInfo').name))]"
                          },
                          "fileShare": {
                            "value": "[variables('fileShares')[copyIndex()]]"
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          },
                          "deployment": {
                            "value": "[parameters('Deployment')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "16728411370713840423"
                            }
                          },
                          "parameters": {
                            "SAName": {
                              "type": "string"
                            },
                            "fileShare": {
                              "type": "object"
                            },
                            "Global": {
                              "type": "object"
                            },
                            "deployment": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "rolesInfo": "[if(contains(parameters('fileShare'), 'rolesInfo'), parameters('fileShare').rolesInfo, createArray())]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
                              "apiVersion": "2021-04-01",
                              "name": "[format('{0}/{1}/{2}', split(format('{0}/default', parameters('SAName')), '/')[0], split(format('{0}/default', parameters('SAName')), '/')[1], toLower(format('{0}', parameters('fileShare').name)))]",
                              "properties": {
                                "shareQuota": "[parameters('fileShare').quota]",
                                "metadata": {}
                              }
                            },
                            {
                              "copy": {
                                "name": "RBAC",
                                "count": "[length(variables('rolesInfo'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('dp-rbac-role-{0}-{1}', toLower(format('{0}', parameters('fileShare').name)), variables('rolesInfo')[copyIndex()].name)]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "resourceId": {
                                    "value": "[resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', split(format('{0}/default', parameters('SAName')), '/')[0], split(format('{0}/default', parameters('SAName')), '/')[1], toLower(format('{0}', parameters('fileShare').name)))]"
                                  },
                                  "Global": {
                                    "value": "[parameters('Global')]"
                                  },
                                  "roleInfo": {
                                    "value": "[variables('rolesInfo')[copyIndex()]]"
                                  },
                                  "Type": {
                                    "value": "[if(contains(variables('rolesInfo')[copyIndex()], 'Type'), variables('rolesInfo')[copyIndex()].Type, 'lookup')]"
                                  },
                                  "deployment": {
                                    "value": "[parameters('deployment')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.4.1318.3566",
                                      "templateHash": "18000982583333431838"
                                    }
                                  },
                                  "parameters": {
                                    "resourceId": {
                                      "type": "string"
                                    },
                                    "Global": {
                                      "type": "object"
                                    },
                                    "roleInfo": {
                                      "type": "object"
                                    },
                                    "principalType": {
                                      "type": "string",
                                      "defaultValue": ""
                                    },
                                    "Type": {
                                      "type": "string"
                                    },
                                    "deployment": {
                                      "type": "string"
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "roleAssignment",
                                        "count": "[length(parameters('roleInfo').RBAC)]",
                                        "input": {
                                          "RoleName": "[parameters('roleInfo').RBAC[copyIndex('roleAssignment')].Name]",
                                          "RoleID": "[variables('rolesGroupsLookup')[parameters('roleInfo').RBAC[copyIndex('roleAssignment')].Name].Id]",
                                          "principalType": "[parameters('principalType')]",
                                          "GUID": "[guid(parameters('roleInfo').Name, parameters('roleInfo').RBAC[copyIndex('roleAssignment')].Name, parameters('resourceId'))]",
                                          "FriendlyName": "[format('user: {0} --> roleInfoName: {1} --> resourceId: {2}', parameters('roleInfo').Name, parameters('roleInfo').RBAC[copyIndex('roleAssignment')].Name, parameters('resourceId'))]"
                                        }
                                      }
                                    ],
                                    "objectIdLookup": "[json(parameters('Global').objectIdLookup)]",
                                    "rolesGroupsLookup": "[json(parameters('Global').RolesGroupsLookup)]"
                                  },
                                  "resources": [
                                    {
                                      "copy": {
                                        "name": "RBACRAResource",
                                        "count": "[length(variables('roleAssignment'))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2020-10-01",
                                      "name": "[take(replace(format('dp-rbac-all-ra-{0}-{1}-{2}', last(split(parameters('resourceId'), '/')), parameters('roleInfo').name, copyIndex()), '@', '_'), 64)]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "resourceId": {
                                            "value": "[parameters('resourceId')]"
                                          },
                                          "description": {
                                            "value": "[parameters('roleInfo').name]"
                                          },
                                          "roledescription": {
                                            "value": "[variables('roleAssignment')[copyIndex()].RoleName]"
                                          },
                                          "name": {
                                            "value": "[variables('roleAssignment')[copyIndex()].GUID]"
                                          },
                                          "roleDefinitionId": {
                                            "value": "[variables('roleAssignment')[copyIndex()].RoleID]"
                                          },
                                          "principalId": {
                                            "value": "[if(equals(parameters('Type'), 'lookup'), variables('objectIdLookup')[parameters('roleInfo').name], reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-uai{1}', parameters('deployment'), parameters('roleInfo').name)), '2018-11-30').principalId)]"
                                          },
                                          "principalType": {
                                            "value": "[variables('roleAssignment')[copyIndex()].principalType]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.4.1318.3566",
                                              "templateHash": "15020166987174036705"
                                            }
                                          },
                                          "parameters": {
                                            "resourceId": {
                                              "type": "string"
                                            },
                                            "name": {
                                              "type": "string"
                                            },
                                            "roleDefinitionId": {
                                              "type": "string"
                                            },
                                            "principalId": {
                                              "type": "string"
                                            },
                                            "principalType": {
                                              "type": "string",
                                              "defaultValue": ""
                                            },
                                            "description": {
                                              "type": "string"
                                            },
                                            "roledescription": {
                                              "type": "string",
                                              "defaultValue": ""
                                            }
                                          },
                                          "resources": [
                                            {
                                              "type": "Microsoft.Resources/deployments",
                                              "apiVersion": "2021-04-01",
                                              "name": "[take(format('dp-RRA-{0}-{1}', parameters('description'), last(split(parameters('resourceId'), '/'))), 64)]",
                                              "properties": {
                                                "mode": "Incremental",
                                                "expressionEvaluationOptions": {
                                                  "scope": "Outer"
                                                },
                                                "template": "[json('{\r\n  \"$schema\": \"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#\",\r\n  \"contentVersion\": \"1.0.0.0\",\r\n  \"parameters\": {\r\n    \"scope\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"name\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"roleDefinitionId\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"principalId\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"principalType\": {\r\n      \"type\": \"string\"\r\n    }\r\n  },\r\n  \"resources\": [\r\n    {\r\n      \"type\": \"Microsoft.Authorization/roleAssignments\",\r\n      \"apiVersion\": \"2020-08-01-preview\",\r\n      \"scope\": \"[parameters(''scope'')]\",\r\n      \"name\": \"[parameters(''name'')]\",\r\n      \"properties\": {\r\n        \"roleDefinitionId\": \"[resourceId(''Microsoft.Authorization/roleDefinitions'', parameters(''roleDefinitionId''))]\",\r\n        \"principalId\": \"[parameters(''principalId'')]\",\r\n        \"principalType\": \"[parameters(''principalType'')]\"\r\n      }\r\n    }\r\n  ],\r\n  \"outputs\": {\r\n    \"roleAssignmentId\": {\r\n      \"type\": \"string\",\r\n      \"value\": \"[extensionResourceId(parameters(''scope''), ''Microsoft.Authorization/roleAssignments'', parameters(''name''))]\"\r\n    }\r\n  }\r\n}')]",
                                                "parameters": {
                                                  "scope": {
                                                    "value": "[parameters('resourceId')]"
                                                  },
                                                  "name": {
                                                    "value": "[parameters('name')]"
                                                  },
                                                  "roleDefinitionId": {
                                                    "value": "[parameters('roleDefinitionId')]"
                                                  },
                                                  "principalId": {
                                                    "value": "[parameters('principalId')]"
                                                  },
                                                  "principalType": {
                                                    "value": "[parameters('principalType')]"
                                                  }
                                                }
                                              }
                                            }
                                          ],
                                          "outputs": {
                                            "resourceid": {
                                              "type": "string",
                                              "value": "[parameters('resourceId')]"
                                            },
                                            "roleAssignmentId": {
                                              "type": "string",
                                              "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('dp-RRA-{0}-{1}', parameters('description'), last(split(parameters('resourceId'), '/'))), 64))).outputs.roleAssignmentId.value]"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "RoleAssignments": {
                                      "type": "array",
                                      "value": "[variables('roleAssignment')]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', split(format('{0}/default', parameters('SAName')), '/')[0], split(format('{0}/default', parameters('SAName')), '/')[1], toLower(format('{0}', parameters('fileShare').name)))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "SAFileServiceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/fileServices', split(format('{0}/default', parameters('SAName')), '/')[0], split(format('{0}/default', parameters('SAName')), '/')[1])]"
                            },
                            "SAFileService": {
                              "type": "string",
                              "value": "[format('{0}/default', parameters('SAName'))]"
                            },
                            "share": {
                              "type": "string",
                              "value": "[toLower(format('{0}', parameters('fileShare').name))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', toLower(format('{0}sa{1}', parameters('DeploymentURI'), parameters('storageInfo').name)))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "SAContainers",
                        "count": "[length(variables('containers'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-SA-{1}-Container-{2}', parameters('Deployment'), parameters('storageInfo').name, variables('containers')[copyIndex()].name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "SAName": {
                            "value": "[toLower(format('{0}sa{1}', parameters('DeploymentURI'), parameters('storageInfo').name))]"
                          },
                          "container": {
                            "value": "[variables('containers')[copyIndex()]]"
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          },
                          "deployment": {
                            "value": "[parameters('Deployment')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "15502567890791968174"
                            }
                          },
                          "parameters": {
                            "SAName": {
                              "type": "string"
                            },
                            "container": {
                              "type": "object"
                            },
                            "Global": {
                              "type": "object"
                            },
                            "deployment": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "rolesInfo": "[if(contains(parameters('container'), 'rolesInfo'), parameters('container').rolesInfo, createArray())]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
                              "apiVersion": "2021-04-01",
                              "name": "[format('{0}/{1}/{2}', split(format('{0}/default', parameters('SAName')), '/')[0], split(format('{0}/default', parameters('SAName')), '/')[1], toLower(format('{0}', parameters('container').name)))]",
                              "properties": {
                                "metadata": {}
                              }
                            },
                            {
                              "copy": {
                                "name": "RBAC",
                                "count": "[length(variables('rolesInfo'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('dp-rbac-role-{0}-{1}', toLower(format('{0}', parameters('container').name)), variables('rolesInfo')[copyIndex()].name)]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "resourceId": {
                                    "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', split(format('{0}/default', parameters('SAName')), '/')[0], split(format('{0}/default', parameters('SAName')), '/')[1], toLower(format('{0}', parameters('container').name)))]"
                                  },
                                  "Global": {
                                    "value": "[parameters('Global')]"
                                  },
                                  "roleInfo": {
                                    "value": "[variables('rolesInfo')[copyIndex()]]"
                                  },
                                  "Type": {
                                    "value": "[if(contains(variables('rolesInfo')[copyIndex()], 'Type'), variables('rolesInfo')[copyIndex()].Type, 'lookup')]"
                                  },
                                  "deployment": {
                                    "value": "[parameters('deployment')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.4.1318.3566",
                                      "templateHash": "18000982583333431838"
                                    }
                                  },
                                  "parameters": {
                                    "resourceId": {
                                      "type": "string"
                                    },
                                    "Global": {
                                      "type": "object"
                                    },
                                    "roleInfo": {
                                      "type": "object"
                                    },
                                    "principalType": {
                                      "type": "string",
                                      "defaultValue": ""
                                    },
                                    "Type": {
                                      "type": "string"
                                    },
                                    "deployment": {
                                      "type": "string"
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "roleAssignment",
                                        "count": "[length(parameters('roleInfo').RBAC)]",
                                        "input": {
                                          "RoleName": "[parameters('roleInfo').RBAC[copyIndex('roleAssignment')].Name]",
                                          "RoleID": "[variables('rolesGroupsLookup')[parameters('roleInfo').RBAC[copyIndex('roleAssignment')].Name].Id]",
                                          "principalType": "[parameters('principalType')]",
                                          "GUID": "[guid(parameters('roleInfo').Name, parameters('roleInfo').RBAC[copyIndex('roleAssignment')].Name, parameters('resourceId'))]",
                                          "FriendlyName": "[format('user: {0} --> roleInfoName: {1} --> resourceId: {2}', parameters('roleInfo').Name, parameters('roleInfo').RBAC[copyIndex('roleAssignment')].Name, parameters('resourceId'))]"
                                        }
                                      }
                                    ],
                                    "objectIdLookup": "[json(parameters('Global').objectIdLookup)]",
                                    "rolesGroupsLookup": "[json(parameters('Global').RolesGroupsLookup)]"
                                  },
                                  "resources": [
                                    {
                                      "copy": {
                                        "name": "RBACRAResource",
                                        "count": "[length(variables('roleAssignment'))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2020-10-01",
                                      "name": "[take(replace(format('dp-rbac-all-ra-{0}-{1}-{2}', last(split(parameters('resourceId'), '/')), parameters('roleInfo').name, copyIndex()), '@', '_'), 64)]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "resourceId": {
                                            "value": "[parameters('resourceId')]"
                                          },
                                          "description": {
                                            "value": "[parameters('roleInfo').name]"
                                          },
                                          "roledescription": {
                                            "value": "[variables('roleAssignment')[copyIndex()].RoleName]"
                                          },
                                          "name": {
                                            "value": "[variables('roleAssignment')[copyIndex()].GUID]"
                                          },
                                          "roleDefinitionId": {
                                            "value": "[variables('roleAssignment')[copyIndex()].RoleID]"
                                          },
                                          "principalId": {
                                            "value": "[if(equals(parameters('Type'), 'lookup'), variables('objectIdLookup')[parameters('roleInfo').name], reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-uai{1}', parameters('deployment'), parameters('roleInfo').name)), '2018-11-30').principalId)]"
                                          },
                                          "principalType": {
                                            "value": "[variables('roleAssignment')[copyIndex()].principalType]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.4.1318.3566",
                                              "templateHash": "15020166987174036705"
                                            }
                                          },
                                          "parameters": {
                                            "resourceId": {
                                              "type": "string"
                                            },
                                            "name": {
                                              "type": "string"
                                            },
                                            "roleDefinitionId": {
                                              "type": "string"
                                            },
                                            "principalId": {
                                              "type": "string"
                                            },
                                            "principalType": {
                                              "type": "string",
                                              "defaultValue": ""
                                            },
                                            "description": {
                                              "type": "string"
                                            },
                                            "roledescription": {
                                              "type": "string",
                                              "defaultValue": ""
                                            }
                                          },
                                          "resources": [
                                            {
                                              "type": "Microsoft.Resources/deployments",
                                              "apiVersion": "2021-04-01",
                                              "name": "[take(format('dp-RRA-{0}-{1}', parameters('description'), last(split(parameters('resourceId'), '/'))), 64)]",
                                              "properties": {
                                                "mode": "Incremental",
                                                "expressionEvaluationOptions": {
                                                  "scope": "Outer"
                                                },
                                                "template": "[json('{\r\n  \"$schema\": \"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#\",\r\n  \"contentVersion\": \"1.0.0.0\",\r\n  \"parameters\": {\r\n    \"scope\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"name\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"roleDefinitionId\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"principalId\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"principalType\": {\r\n      \"type\": \"string\"\r\n    }\r\n  },\r\n  \"resources\": [\r\n    {\r\n      \"type\": \"Microsoft.Authorization/roleAssignments\",\r\n      \"apiVersion\": \"2020-08-01-preview\",\r\n      \"scope\": \"[parameters(''scope'')]\",\r\n      \"name\": \"[parameters(''name'')]\",\r\n      \"properties\": {\r\n        \"roleDefinitionId\": \"[resourceId(''Microsoft.Authorization/roleDefinitions'', parameters(''roleDefinitionId''))]\",\r\n        \"principalId\": \"[parameters(''principalId'')]\",\r\n        \"principalType\": \"[parameters(''principalType'')]\"\r\n      }\r\n    }\r\n  ],\r\n  \"outputs\": {\r\n    \"roleAssignmentId\": {\r\n      \"type\": \"string\",\r\n      \"value\": \"[extensionResourceId(parameters(''scope''), ''Microsoft.Authorization/roleAssignments'', parameters(''name''))]\"\r\n    }\r\n  }\r\n}')]",
                                                "parameters": {
                                                  "scope": {
                                                    "value": "[parameters('resourceId')]"
                                                  },
                                                  "name": {
                                                    "value": "[parameters('name')]"
                                                  },
                                                  "roleDefinitionId": {
                                                    "value": "[parameters('roleDefinitionId')]"
                                                  },
                                                  "principalId": {
                                                    "value": "[parameters('principalId')]"
                                                  },
                                                  "principalType": {
                                                    "value": "[parameters('principalType')]"
                                                  }
                                                }
                                              }
                                            }
                                          ],
                                          "outputs": {
                                            "resourceid": {
                                              "type": "string",
                                              "value": "[parameters('resourceId')]"
                                            },
                                            "roleAssignmentId": {
                                              "type": "string",
                                              "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('dp-RRA-{0}-{1}', parameters('description'), last(split(parameters('resourceId'), '/'))), 64))).outputs.roleAssignmentId.value]"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "RoleAssignments": {
                                      "type": "array",
                                      "value": "[variables('roleAssignment')]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', split(format('{0}/default', parameters('SAName')), '/')[0], split(format('{0}/default', parameters('SAName')), '/')[1], toLower(format('{0}', parameters('container').name)))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "id": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', split(format('{0}/default', parameters('SAName')), '/')[0], split(format('{0}/default', parameters('SAName')), '/')[1], toLower(format('{0}', parameters('container').name)))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', toLower(format('{0}sa{1}', parameters('DeploymentURI'), parameters('storageInfo').name)))]"
                      ]
                    },
                    {
                      "condition": "[contains(parameters('storageInfo'), 'privatelinkinfo')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-SA-privatelinkloop-{1}', parameters('Deployment'), parameters('storageInfo').name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[parameters('Deployment')]"
                          },
                          "DeploymentURI": {
                            "value": "[parameters('DeploymentURI')]"
                          },
                          "PrivateLinkInfo": {
                            "value": "[parameters('storageInfo').privateLinkInfo]"
                          },
                          "providerType": {
                            "value": "Microsoft.Storage/storageAccounts"
                          },
                          "resourceName": {
                            "value": "[toLower(format('{0}sa{1}', parameters('DeploymentURI'), parameters('storageInfo').name))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "1242957729837230630"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "DeploymentURI": {
                              "type": "string"
                            },
                            "PrivateLinkInfo": {
                              "type": "array"
                            },
                            "providerType": {
                              "type": "string"
                            },
                            "resourceName": {
                              "type": "string"
                            },
                            "resourceRG": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().name]"
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "privateLink",
                                "count": "[length(parameters('PrivateLinkInfo'))]",
                                "input": {
                                  "name": "[format('{0}-pl{1}', parameters('Deployment'), parameters('PrivateLinkInfo')[copyIndex('privateLink')].Subnet)]",
                                  "vNet": "[format('{0}-vn', parameters('Deployment'))]"
                                }
                              }
                            ]
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "subnetPrivateEndpoint",
                                "count": "[length(parameters('PrivateLinkInfo'))]"
                              },
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2019-11-01",
                              "name": "[format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet)]",
                              "location": "[resourceGroup().location]",
                              "properties": {
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet)]",
                                    "properties": {
                                      "privateLinkServiceId": "[resourceId(parameters('resourceRG'), parameters('providerType'), parameters('resourceName'))]",
                                      "groupIds": "[array(parameters('PrivateLinkInfo')[copyIndex()].groupID)]",
                                      "privateLinkServiceConnectionState": {
                                        "status": "Approved",
                                        "description": "Auto-Approved",
                                        "actionsRequired": "None"
                                      }
                                    }
                                  }
                                ],
                                "manualPrivateLinkServiceConnections": [],
                                "subnet": {
                                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('privateLink')[copyIndex()].vNet, parameters('PrivateLinkInfo')[copyIndex()].Subnet)]"
                                }
                              }
                            },
                            {
                              "copy": {
                                "name": "NICDiags",
                                "count": "[length(parameters('PrivateLinkInfo'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('dp-{0}-pl-{1}-{2}-diags', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet)]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "DeploymentURI": {
                                    "value": "[parameters('DeploymentURI')]"
                                  },
                                  "NICName": {
                                    "value": "[last(split(reference(resourceId('Microsoft.Network/privateEndpoints', format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet))).networkInterfaces[0].id, '/'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.4.1318.3566",
                                      "templateHash": "3372180053977311610"
                                    }
                                  },
                                  "parameters": {
                                    "DeploymentURI": {
                                      "type": "string"
                                    },
                                    "NICName": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', parameters('NICName'))]",
                                      "name": "service",
                                      "properties": {
                                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                                        "metrics": [
                                          {
                                            "timeGrain": "PT5M",
                                            "enabled": true,
                                            "retentionPolicy": {
                                              "enabled": false,
                                              "days": 0
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "NICID": {
                              "type": "array",
                              "copy": {
                                "count": "[length(parameters('PrivateLinkInfo'))]",
                                "input": "[reference(resourceId('Microsoft.Network/privateEndpoints', format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet))).networkInterfaces[0].id]"
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', toLower(format('{0}sa{1}', parameters('DeploymentURI'), parameters('storageInfo').name)))]"
                      ]
                    },
                    {
                      "condition": "[contains(parameters('storageInfo'), 'privatelinkinfo')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-SA-registerPrivateDNS-{1}', parameters('Deployment'), parameters('storageInfo').name)]",
                      "resourceGroup": "[variables('HubRGName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "PrivateLinkInfo": {
                            "value": "[parameters('storageInfo').privateLinkInfo]"
                          },
                          "providerURL": {
                            "value": "[format('{0}', environment().suffixes.storage)]"
                          },
                          "providerType": {
                            "value": "Microsoft.Storage/storageAccounts"
                          },
                          "resourceName": {
                            "value": "[toLower(format('{0}sa{1}', parameters('DeploymentURI'), parameters('storageInfo').name))]"
                          },
                          "Nics": {
                            "value": "[if(and(contains(parameters('storageInfo'), 'privatelinkinfo'), not(equals(length(parameters('storageInfo')), 0))), array(reference(resourceId('Microsoft.Resources/deployments', format('dp{0}-SA-privatelinkloop-{1}', parameters('Deployment'), parameters('storageInfo').name)), '2020-10-01').outputs.NICID.value), array(''))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "9527034148045878947"
                            }
                          },
                          "parameters": {
                            "PrivateLinkInfo": {
                              "type": "array"
                            },
                            "resourceName": {
                              "type": "string"
                            },
                            "providerURL": {
                              "type": "string"
                            },
                            "providerType": {
                              "type": "string"
                            },
                            "Nics": {
                              "type": "array"
                            }
                          },
                          "variables": {
                            "DNSLookup": {
                              "Microsoft.AzureCosmosDB/databaseAccounts/SQL": "documents",
                              "Microsoft.AzureCosmosDB/databaseAccounts/MongoDB": "mongo.cosmos",
                              "Microsoft.AzureCosmosDB/databaseAccounts/Cassandra": "cassandra.cosmos",
                              "Microsoft.AzureCosmosDB/databaseAccounts/Gremlin": "gremlin.cosmos",
                              "Microsoft.AzureCosmosDB/databaseAccounts/Table": "table.cosmos",
                              "Microsoft.KeyVault/vaults": "vaultcore",
                              "Microsoft.DBforMySQL/servers": "mysql",
                              "Microsoft.DBforMariaDB/servers": "mariadb",
                              "Microsoft.AppConfiguration/configurationStores": "azconfig",
                              "Microsoft.ServiceBus/namespaces": "servicebus",
                              "Microsoft.Sql/servers": "database",
                              "Microsoft.Cache/redis": "redis.cache",
                              "Microsoft.Web/sites": "azurewebsites",
                              "Microsoft.Synapse/workspaces": "sql",
                              "Microsoft.ApiManagement/service": "azure-api"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "privateLinkDNS",
                                "count": "[length(parameters('PrivateLinkInfo'))]"
                              },
                              "type": "Microsoft.Network/privateDnsZones/A",
                              "apiVersion": "2020-06-01",
                              "name": "[format('privatelink.{0}.{1}/{2}', if(contains(variables('DNSLookup'), parameters('providerType')), variables('DNSLookup')[parameters('providerType')], parameters('PrivateLinkInfo')[copyIndex()].groupID), parameters('providerURL'), parameters('resourceName'))]",
                              "properties": {
                                "ttl": 3600,
                                "aRecords": [
                                  {
                                    "ipv4Address": "[reference(parameters('Nics')[copyIndex()], '2018-05-01').ipConfigurations[0].properties.privateIPAddress]"
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', toLower(format('{0}sa{1}', parameters('DeploymentURI'), parameters('storageInfo').name)))]",
                        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-SA-privatelinkloop-{1}', parameters('Deployment'), parameters('storageInfo').name))]"
                      ]
                    }
                  ]
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-OMS', variables('Deployment')))]"
      ]
    },
    {
      "condition": "[bool(parameters('Stage').CDN)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('dp{0}-CDN', variables('Deployment'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "DeploymentID": {
            "value": "[parameters('DeploymentID')]"
          },
          "DeploymentInfo": {
            "value": "[parameters('DeploymentInfo')]"
          },
          "Environment": {
            "value": "[parameters('Environment')]"
          },
          "Extensions": {
            "value": "[parameters('Extensions')]"
          },
          "Global": {
            "value": "[parameters('Global')]"
          },
          "Prefix": {
            "value": "[parameters('Prefix')]"
          },
          "Stage": {
            "value": "[parameters('Stage')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "6444292757537092319"
            }
          },
          "parameters": {
            "Prefix": {
              "type": "string"
            },
            "Environment": {
              "type": "string",
              "defaultValue": "D",
              "allowedValues": [
                "I",
                "D",
                "T",
                "U",
                "P",
                "S",
                "G",
                "A"
              ]
            },
            "DeploymentID": {
              "type": "string",
              "defaultValue": "1",
              "allowedValues": [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9"
              ]
            },
            "Stage": {
              "type": "object"
            },
            "Extensions": {
              "type": "object"
            },
            "Global": {
              "type": "object"
            },
            "DeploymentInfo": {
              "type": "object"
            },
            "now": {
              "type": "string",
              "defaultValue": "[utcNow('F')]"
            }
          },
          "variables": {
            "copy": [
              {
                "name": "CDN",
                "count": "[length(variables('CDNInfo'))]",
                "input": {
                  "match": "[or(equals(parameters('Global').CN, '.'), contains(array(parameters('Global').CN), parameters('DeploymentInfo').cdn[copyIndex('CDN')].Name))]",
                  "saname": "[toLower(format('{0}sa{1}', variables('DeploymentURI'), variables('CDNInfo')[copyIndex('CDN')].saname))]"
                }
              }
            ],
            "Deployment": "[format('{0}-{1}-{2}-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID'))]",
            "DeploymentURI": "[toLower(format('{0}{1}{2}{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID')))]",
            "regionLookup": "[json('{\r\n  \"francecentral\": {\r\n    \"displayname\": \"France Central\",\r\n    \"location\": \"francecentral\",\r\n    \"PREFIX\": \"AFC1\",\r\n    \"pairedRegion\": \"francesouth\"\r\n  },\r\n  \"southeastasia\": {\r\n    \"displayname\": \"Southeast Asia\",\r\n    \"location\": \"southeastasia\",\r\n    \"PREFIX\": \"ASA1\",\r\n    \"pairedRegion\": \"eastasia\"\r\n  },\r\n  \"southafricawest\": {\r\n    \"displayname\": \"South Africa West\",\r\n    \"location\": \"southafricawest\",\r\n    \"PREFIX\": \"ASAW\",\r\n    \"pairedRegion\": \"southafricanorth\"\r\n  },\r\n  \"eastus2\": {\r\n    \"displayname\": \"East US 2\",\r\n    \"location\": \"eastus2\",\r\n    \"PREFIX\": \"AEU2\",\r\n    \"pairedRegion\": \"centralus\"\r\n  },\r\n  \"eastus\": {\r\n    \"displayname\": \"East US\",\r\n    \"location\": \"eastus\",\r\n    \"PREFIX\": \"AEU1\",\r\n    \"pairedRegion\": \"westus\"\r\n  },\r\n  \"jioindiawest\": {\r\n    \"displayname\": \"Jio India West\",\r\n    \"location\": \"jioindiawest\",\r\n    \"PREFIX\": \"AJIW\",\r\n    \"pairedRegion\": \"jioindiacentral\"\r\n  },\r\n  \"westcentralus\": {\r\n    \"displayname\": \"West Central US\",\r\n    \"location\": \"westcentralus\",\r\n    \"PREFIX\": \"AWCU\",\r\n    \"pairedRegion\": \"westus2\"\r\n  },\r\n  \"koreacentral\": {\r\n    \"displayname\": \"Korea Central\",\r\n    \"location\": \"koreacentral\",\r\n    \"PREFIX\": \"AKC1\",\r\n    \"pairedRegion\": \"koreasouth\"\r\n  },\r\n  \"uaecentral\": {\r\n    \"displayname\": \"UAE Central\",\r\n    \"location\": \"uaecentral\",\r\n    \"PREFIX\": \"AUC1\",\r\n    \"pairedRegion\": \"uaenorth\"\r\n  },\r\n  \"westus\": {\r\n    \"displayname\": \"West US\",\r\n    \"location\": \"westus\",\r\n    \"PREFIX\": \"AWU1\",\r\n    \"pairedRegion\": \"eastus\"\r\n  },\r\n  \"southafricanorth\": {\r\n    \"displayname\": \"South Africa North\",\r\n    \"location\": \"southafricanorth\",\r\n    \"PREFIX\": \"ASAN\",\r\n    \"pairedRegion\": \"southafricawest\"\r\n  },\r\n  \"australiacentral2\": {\r\n    \"displayname\": \"Australia Central 2\",\r\n    \"location\": \"australiacentral2\",\r\n    \"PREFIX\": \"AAC2\",\r\n    \"pairedRegion\": \"australiacentral2\"\r\n  },\r\n  \"francesouth\": {\r\n    \"displayname\": \"France South\",\r\n    \"location\": \"francesouth\",\r\n    \"PREFIX\": \"AFS1\",\r\n    \"pairedRegion\": \"francecentral\"\r\n  },\r\n  \"ukwest\": {\r\n    \"displayname\": \"UK West\",\r\n    \"location\": \"ukwest\",\r\n    \"PREFIX\": \"AUW1\",\r\n    \"pairedRegion\": \"uksouth\"\r\n  },\r\n  \"southindia\": {\r\n    \"displayname\": \"South India\",\r\n    \"location\": \"southindia\",\r\n    \"PREFIX\": \"ASI1\",\r\n    \"pairedRegion\": \"centralindia\"\r\n  },\r\n  \"centralus\": {\r\n    \"displayname\": \"Central US\",\r\n    \"location\": \"centralus\",\r\n    \"PREFIX\": \"ACU1\",\r\n    \"pairedRegion\": \"eastus2\"\r\n  },\r\n  \"germanynorth\": {\r\n    \"displayname\": \"Germany North\",\r\n    \"location\": \"germanynorth\",\r\n    \"PREFIX\": \"AGN1\",\r\n    \"pairedRegion\": \"germanywestcentral\"\r\n  },\r\n  \"koreasouth\": {\r\n    \"displayname\": \"Korea South\",\r\n    \"location\": \"koreasouth\",\r\n    \"PREFIX\": \"AKS1\",\r\n    \"pairedRegion\": \"koreacentral\"\r\n  },\r\n  \"westindia\": {\r\n    \"displayname\": \"West India\",\r\n    \"location\": \"westindia\",\r\n    \"PREFIX\": \"AWI1\",\r\n    \"pairedRegion\": \"southindia\"\r\n  },\r\n  \"westus2\": {\r\n    \"displayname\": \"West US 2\",\r\n    \"location\": \"westus2\",\r\n    \"PREFIX\": \"AWU2\",\r\n    \"pairedRegion\": \"westcentralus\"\r\n  },\r\n  \"northcentralus\": {\r\n    \"displayname\": \"North Central US\",\r\n    \"location\": \"northcentralus\",\r\n    \"PREFIX\": \"ANCU\",\r\n    \"pairedRegion\": \"southcentralus\"\r\n  },\r\n  \"westeurope\": {\r\n    \"displayname\": \"West Europe\",\r\n    \"location\": \"westeurope\",\r\n    \"PREFIX\": \"AWEU\",\r\n    \"pairedRegion\": \"northeurope\"\r\n  },\r\n  \"canadacentral\": {\r\n    \"displayname\": \"Canada Central\",\r\n    \"location\": \"canadacentral\",\r\n    \"PREFIX\": \"ACC1\",\r\n    \"pairedRegion\": \"canadaeast\"\r\n  },\r\n  \"southcentralus\": {\r\n    \"displayname\": \"South Central US\",\r\n    \"location\": \"southcentralus\",\r\n    \"PREFIX\": \"ASCU\",\r\n    \"pairedRegion\": \"northcentralus\"\r\n  },\r\n  \"norwayeast\": {\r\n    \"displayname\": \"Norway East\",\r\n    \"location\": \"norwayeast\",\r\n    \"PREFIX\": \"ANE1\",\r\n    \"pairedRegion\": \"norwaywest\"\r\n  },\r\n  \"japanwest\": {\r\n    \"displayname\": \"Japan West\",\r\n    \"location\": \"japanwest\",\r\n    \"PREFIX\": \"AJW1\",\r\n    \"pairedRegion\": \"japaneast\"\r\n  },\r\n  \"norwaywest\": {\r\n    \"displayname\": \"Norway West\",\r\n    \"location\": \"norwaywest\",\r\n    \"PREFIX\": \"ANW1\",\r\n    \"pairedRegion\": \"norwayeast\"\r\n  },\r\n  \"jioindiacentral\": {\r\n    \"displayname\": \"Jio India Central\",\r\n    \"location\": \"jioindiacentral\",\r\n    \"PREFIX\": \"AJIC\",\r\n    \"pairedRegion\": \"jioindiawest\"\r\n  },\r\n  \"centralindia\": {\r\n    \"displayname\": \"Central India\",\r\n    \"location\": \"centralindia\",\r\n    \"PREFIX\": \"ACI1\",\r\n    \"pairedRegion\": \"southindia\"\r\n  },\r\n  \"westus3\": {\r\n    \"displayname\": \"West US 3\",\r\n    \"location\": \"westus3\",\r\n    \"PREFIX\": \"AWU3\",\r\n    \"pairedRegion\": \"eastus\"\r\n  },\r\n  \"brazilsouth\": {\r\n    \"displayname\": \"Brazil South\",\r\n    \"location\": \"brazilsouth\",\r\n    \"PREFIX\": \"ABS1\",\r\n    \"pairedRegion\": \"southcentralus\"\r\n  },\r\n  \"eastasia\": {\r\n    \"displayname\": \"East Asia\",\r\n    \"location\": \"eastasia\",\r\n    \"PREFIX\": \"AEA1\",\r\n    \"pairedRegion\": \"southeastasia\"\r\n  },\r\n  \"swedencentral\": {\r\n    \"displayname\": \"Sweden Central\",\r\n    \"location\": \"swedencentral\",\r\n    \"PREFIX\": \"ASC1\",\r\n    \"pairedRegion\": \"swedensouth\"\r\n  },\r\n  \"uksouth\": {\r\n    \"displayname\": \"UK South\",\r\n    \"location\": \"uksouth\",\r\n    \"PREFIX\": \"AUS1\",\r\n    \"pairedRegion\": \"ukwest\"\r\n  },\r\n  \"switzerlandnorth\": {\r\n    \"displayname\": \"Switzerland North\",\r\n    \"location\": \"switzerlandnorth\",\r\n    \"PREFIX\": \"ASN1\",\r\n    \"pairedRegion\": \"switzerlandwest\"\r\n  },\r\n  \"canadaeast\": {\r\n    \"displayname\": \"Canada East\",\r\n    \"location\": \"canadaeast\",\r\n    \"PREFIX\": \"ACE1\",\r\n    \"pairedRegion\": \"canadacentral\"\r\n  },\r\n  \"australiasoutheast\": {\r\n    \"displayname\": \"Australia Southeast\",\r\n    \"location\": \"australiasoutheast\",\r\n    \"PREFIX\": \"AAS1\",\r\n    \"pairedRegion\": \"australiaeast\"\r\n  },\r\n  \"northeurope\": {\r\n    \"displayname\": \"North Europe\",\r\n    \"location\": \"northeurope\",\r\n    \"PREFIX\": \"ANEU\",\r\n    \"pairedRegion\": \"westeurope\"\r\n  },\r\n  \"germanywestcentral\": {\r\n    \"displayname\": \"Germany West Central\",\r\n    \"location\": \"germanywestcentral\",\r\n    \"PREFIX\": \"AGWC\",\r\n    \"pairedRegion\": \"germanynorth\"\r\n  },\r\n  \"japaneast\": {\r\n    \"displayname\": \"Japan East\",\r\n    \"location\": \"japaneast\",\r\n    \"PREFIX\": \"AJE1\",\r\n    \"pairedRegion\": \"japanwest\"\r\n  },\r\n  \"uaenorth\": {\r\n    \"displayname\": \"UAE North\",\r\n    \"location\": \"uaenorth\",\r\n    \"PREFIX\": \"AUN1\",\r\n    \"pairedRegion\": \"uaecentral\"\r\n  },\r\n  \"australiaeast\": {\r\n    \"displayname\": \"Australia East\",\r\n    \"location\": \"australiaeast\",\r\n    \"PREFIX\": \"AAE1\",\r\n    \"pairedRegion\": \"australiasoutheast\"\r\n  },\r\n  \"switzerlandwest\": {\r\n    \"displayname\": \"Switzerland West\",\r\n    \"location\": \"switzerlandwest\",\r\n    \"PREFIX\": \"ASW1\",\r\n    \"pairedRegion\": \"switzerlandnorth\"\r\n  },\r\n  \"australiacentral\": {\r\n    \"displayname\": \"Australia Central\",\r\n    \"location\": \"australiacentral\",\r\n    \"PREFIX\": \"AAC1\",\r\n    \"pairedRegion\": \"australiacentral\"\r\n  },\r\n  \"brazilsoutheast\": {\r\n    \"displayname\": \"Brazil Southeast\",\r\n    \"location\": \"brazilsoutheast\",\r\n    \"PREFIX\": \"ABSE\",\r\n    \"pairedRegion\": \"brazilsouth\"\r\n  }\r\n}\r\n')]",
            "primaryPrefix": "[variables('regionLookup')[parameters('Global').PrimaryLocation].prefix]",
            "GlobalRGJ": "[json(parameters('Global').GlobalRG)]",
            "HubKVJ": "[json(parameters('Global').hubKV)]",
            "HubRGJ": "[json(parameters('Global').hubRG)]",
            "gh": {
              "globalRGPrefix": "[if(contains(variables('GlobalRGJ'), 'Prefix'), variables('GlobalRGJ').Prefix, variables('primaryPrefix'))]",
              "globalRGOrgName": "[if(contains(variables('GlobalRGJ'), 'OrgName'), variables('GlobalRGJ').OrgName, parameters('Global').OrgName)]",
              "globalRGAppName": "[if(contains(variables('GlobalRGJ'), 'AppName'), variables('GlobalRGJ').AppName, parameters('Global').AppName)]",
              "globalRGName": "[if(contains(variables('GlobalRGJ'), 'name'), variables('GlobalRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID')))]",
              "hubKVPrefix": "[if(contains(variables('HubKVJ'), 'Prefix'), variables('HubKVJ').Prefix, parameters('Prefix'))]",
              "hubKVOrgName": "[if(contains(variables('HubKVJ'), 'OrgName'), variables('HubKVJ').OrgName, parameters('Global').OrgName)]",
              "hubKVAppName": "[if(contains(variables('HubKVJ'), 'AppName'), variables('HubKVJ').AppName, parameters('Global').AppName)]",
              "hubKVRGName": "[if(contains(variables('HubKVJ'), 'RG'), variables('HubKVJ').RG, variables('HubRGJ').name)]"
            },
            "globalRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').globalRGPrefix, variables('gh').globalRGOrgName, variables('gh').globalRGAppName, variables('gh').globalRGName)]",
            "HubKVRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').hubKVPrefix, variables('gh').hubKVOrgName, variables('gh').hubKVAppName, variables('gh').hubKVRGName)]",
            "HubKVName": "[toLower(format('{0}-{1}-{2}-{3}-kv{4}', variables('gh').hubKVPrefix, variables('gh').hubKVOrgName, variables('gh').hubKVAppName, variables('gh').hubKVRGName, variables('HubKVJ').name))]",
            "CDNInfo": "[if(contains(parameters('DeploymentInfo'), 'CDNInfo'), parameters('DeploymentInfo').CDNInfo, createArray())]"
          },
          "resources": [
            {
              "condition": "[variables('CDN')[copyIndex()].match]",
              "copy": {
                "name": "SACDN",
                "count": "[length(variables('CDNInfo'))]"
              },
              "type": "Microsoft.Cdn/profiles",
              "apiVersion": "2020-09-01",
              "name": "[toLower(format('{0}sacdn{1}', variables('DeploymentURI'), variables('CDNInfo')[copyIndex()].name))]",
              "location": "[resourceGroup().location]",
              "sku": {
                "name": "Standard_Microsoft"
              }
            },
            {
              "condition": "[variables('CDN')[copyIndex()].match]",
              "copy": {
                "name": "SACDNEndpoint",
                "count": "[length(variables('CDNInfo'))]"
              },
              "type": "Microsoft.Cdn/profiles/endpoints",
              "apiVersion": "2020-09-01",
              "name": "[format('{0}/{1}', toLower(format('{0}sacdn{1}', variables('DeploymentURI'), variables('CDNInfo')[copyIndex()].name)), format('{0}', variables('CDN')[copyIndex()].saname))]",
              "location": "[resourceGroup().location]",
              "properties": {
                "originHostHeader": "[format('{0}.blob.{1}', variables('CDN')[copyIndex()].saname, environment().suffixes.storage)]",
                "isCompressionEnabled": true,
                "isHttpAllowed": true,
                "isHttpsAllowed": true,
                "queryStringCachingBehavior": "IgnoreQueryString",
                "contentTypesToCompress": [
                  "text/plain",
                  "text/html",
                  "text/css",
                  "application/x-javascript",
                  "text/javascript"
                ],
                "origins": [
                  {
                    "name": "origin1",
                    "properties": {
                      "hostName": "[format('{0}.blob.{1}', variables('CDN')[copyIndex()].saname, environment().suffixes.storage)]",
                      "enabled": true
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Cdn/profiles', toLower(format('{0}sacdn{1}', variables('DeploymentURI'), variables('CDNInfo')[copyIndex()].name)))]"
              ]
            },
            {
              "condition": "[and(variables('CDN')[copyIndex()].match, contains(variables('CDNInfo')[copyIndex()], 'hostname'))]",
              "copy": {
                "name": "SACDNCustomDomain",
                "count": "[length(variables('CDNInfo'))]"
              },
              "type": "Microsoft.Cdn/profiles/endpoints/customDomains",
              "apiVersion": "2020-09-01",
              "name": "[format('{0}/{1}/{2}', toLower(format('{0}sacdn{1}', variables('DeploymentURI'), variables('CDNInfo')[copyIndex()].name)), format('{0}', variables('CDN')[copyIndex()].saname), format('{0}', variables('CDN')[copyIndex()].saname))]",
              "properties": {
                "hostName": "[format('{0}.{1}', variables('CDN')[copyIndex()].saname, parameters('Global').DomainNameExt)]"
              },
              "dependsOn": [
                "DNSCNAME",
                "[resourceId('Microsoft.Cdn/profiles', toLower(format('{0}sacdn{1}', variables('DeploymentURI'), variables('CDNInfo')[copyIndex()].name)))]",
                "[resourceId('Microsoft.Cdn/profiles/endpoints', toLower(format('{0}sacdn{1}', variables('DeploymentURI'), variables('CDNInfo')[copyIndex()].name)), format('{0}', variables('CDN')[copyIndex()].saname))]"
              ]
            },
            {
              "condition": "[and(contains(variables('CDNInfo')[copyIndex()], 'EnableSSL'), bool(variables('CDNInfo')[copyIndex()].EnableSSL))]",
              "copy": {
                "name": "SetCDNServicesCertificates",
                "count": "[length(variables('CDNInfo'))]"
              },
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2020-10-01",
              "name": "[format('SetCDNServicesCertificates{0}-{1}', add(copyIndex(), 1), variables('CDNInfo')[copyIndex()].name)]",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-uaiNetworkContributor', variables('Deployment'))))]": {}
                }
              },
              "location": "[resourceGroup().location]",
              "kind": "AzurePowerShell",
              "properties": {
                "azPowerShellVersion": "6.6",
                "arguments": "[format(' -ResourceGroupName {0} -ProfileName {1}sacdn{2} -CustomDomainName {3}.{4} -EndPointName {5} -VaultName {6} -SecretName {7}', resourceGroup().name, variables('DeploymentURI'), variables('CDNInfo')[copyIndex()].name, variables('CDN')[copyIndex()].saname, parameters('Global').DomainNameExt, variables('CDN')[copyIndex()].saname, variables('HubKVName'), parameters('Global').CertName)]",
                "scriptContent": "\r\nparam (\r\n    [string]$ResourceGroupName,\r\n    [string]$ProfileName,\r\n    [string]$EndPointName,\r\n    [string]$CustomDomainName,\r\n    [string]$VaultName,\r\n    [string]$SecretName\r\n)\r\n\r\ntry\r\n{\r\n    Write-Output \"`nUTC is: $(Get-Date)\"\r\n    \r\n    $c = Get-AzContext -ErrorAction stop\r\n    if ($c)\r\n    {\r\n        Write-Output \"`nContext is: \"\r\n        $c | Select-Object Account, Subscription, Tenant, Environment | Format-List | Out-String\r\n\r\n        $Customdomain = Get-AzCdnCustomDomain -ProfileName $ProfileName -ResourceGroupName $ResourceGroupName -EndpointName $EndPointName |\r\n            Where-Object HostName -EQ $CustomDomainName\r\n\r\n        if ($Customdomain.CustomHttpsProvisioningSubstate -ne 'None')\r\n        {\r\n            Write-Output \"Provisioning CustomDomainHttp is complete! or in progress [$($Customdomain.CustomHttpsProvisioningSubstate)]\"\r\n            $Customdomain\r\n        }\r\n        else\r\n        {\r\n            Write-Output 'Do provisioning here Rest API'\r\n            $Customdomain\r\n\r\n            $Params = @{\r\n                Uri         = \"https://management.azure.com$($Customdomain.id)/enableCustomHttps?api-version=2019-12-31\"\r\n                Method      = 'POST'\r\n                ErrorAction = 'Stop'\r\n                Payload     = @{\r\n                    certificateSource           = 'AzureKeyVault'\r\n                    protocolType                = 'ServerNameIndication'\r\n                    minimumTlsVersion           = 'TLS12'\r\n                    certificateSourceParameters = @{\r\n                        subscriptionId    = $c.Subscription.Id\r\n                        resourceGroupName = $ResourceGroupName\r\n                        vaultName         = $VaultName\r\n                        secretName        = $SecretName\r\n                        updateRule        = 'NoAction'\r\n                        deleteRule        = 'NoAction'\r\n                        '@odata.type'     = '#Microsoft.Azure.Cdn.Models.KeyVaultCertificateSourceParameters'\r\n                    }\r\n                } | ConvertTo-Json -Depth 5\r\n            }\r\n\r\n            # Execute REST call (POST) ---------------------------------------------------------------\r\n            Write-Output ($Params | Select-Object -ExcludeProperty Headers | Format-List | Out-String)\r\n            $Result = Invoke-AzRestMethod @Params\r\n            \r\n            if ($Result.StatusCode -eq '202')\r\n            {\r\n                Write-Output 'Successfully started provisioning'\r\n                $Result.Content | ConvertFrom-Json\r\n            }\r\n            else\r\n            {\r\n                $Result\r\n            }\r\n            #------------------------------------------------------------------------------------------\r\n        }\r\n    }\r\n    else\r\n    {\r\n        throw 'Cannot get a context'\r\n    }\r\n}\r\ncatch\r\n{\r\n    Write-Warning $_\r\n    Write-Warning $_.exception\r\n}\r\n",
                "forceUpdateTag": "[parameters('now')]",
                "cleanupPreference": "OnSuccess",
                "retentionInterval": "P1D",
                "timeout": "PT3M"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Cdn/profiles/endpoints/customDomains', toLower(format('{0}sacdn{1}', variables('DeploymentURI'), variables('CDNInfo')[copyIndex()].name)), format('{0}', variables('CDN')[copyIndex()].saname), format('{0}', variables('CDN')[copyIndex()].saname))]"
              ]
            },
            {
              "condition": "[variables('CDN')[copyIndex()].match]",
              "copy": {
                "name": "SACDNDiagnostics",
                "count": "[length(variables('CDNInfo'))]"
              },
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2017-05-01-preview",
              "scope": "[format('Microsoft.Cdn/profiles/{0}/endpoints/{1}', toLower(format('{0}sacdn{1}', variables('DeploymentURI'), variables('CDNInfo')[copyIndex()].name)), format('{0}', variables('CDN')[copyIndex()].saname))]",
              "name": "service",
              "properties": {
                "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', variables('DeploymentURI')))]",
                "logs": [
                  {
                    "category": "CoreAnalytics",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Cdn/profiles/endpoints', toLower(format('{0}sacdn{1}', variables('DeploymentURI'), variables('CDNInfo')[copyIndex()].name)), format('{0}', variables('CDN')[copyIndex()].saname))]"
              ]
            },
            {
              "condition": "[and(variables('CDN')[copyIndex()].match, contains(variables('CDNInfo')[copyIndex()], 'hostname'))]",
              "copy": {
                "name": "DNSCNAME",
                "count": "[length(variables('CDNInfo'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}.{1}', variables('CDN')[copyIndex()].saname, parameters('Global').DomainNameExt)]",
              "subscriptionId": "[if(contains(parameters('Global'), 'DomainNameExtSubscriptionID'), parameters('Global').DomainNameExtSubscriptionID, subscription().subscriptionId)]",
              "resourceGroup": "[if(contains(parameters('Global'), 'DomainNameExtRG'), parameters('Global').DomainNameExtRG, variables('globalRGName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "hostname": {
                    "value": "[format('{0}', variables('CDN')[copyIndex()].saname)]"
                  },
                  "cname": {
                    "value": "[reference(resourceId('Microsoft.Cdn/profiles/endpoints', toLower(format('{0}sacdn{1}', variables('DeploymentURI'), variables('CDNInfo')[copyIndex()].name)), format('{0}', variables('CDN')[copyIndex()].saname)), '2020-09-01').hostName]"
                  },
                  "Global": {
                    "value": "[parameters('Global')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1318.3566",
                      "templateHash": "2861540136838094664"
                    }
                  },
                  "parameters": {
                    "hostname": {
                      "type": "string"
                    },
                    "cname": {
                      "type": "string"
                    },
                    "Global": {
                      "type": "object"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/dnsZones/CNAME",
                      "apiVersion": "2018-05-01",
                      "name": "[format('{0}/{1}', parameters('Global').DomainNameExt, parameters('hostname'))]",
                      "properties": {
                        "TTL": 3600,
                        "metadata": {},
                        "CNAMERecord": {
                          "cname": "[parameters('cname')]"
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Cdn/profiles/endpoints', toLower(format('{0}sacdn{1}', variables('DeploymentURI'), variables('CDNInfo')[copyIndex()].name)), format('{0}', variables('CDN')[copyIndex()].saname))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-SA', variables('Deployment')))]"
      ]
    },
    {
      "condition": "[bool(parameters('Stage').RSV)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('dp{0}-RSV', variables('Deployment'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "DeploymentID": {
            "value": "[parameters('DeploymentID')]"
          },
          "DeploymentInfo": {
            "value": "[parameters('DeploymentInfo')]"
          },
          "Environment": {
            "value": "[parameters('Environment')]"
          },
          "Extensions": {
            "value": "[parameters('Extensions')]"
          },
          "Global": {
            "value": "[parameters('Global')]"
          },
          "Prefix": {
            "value": "[parameters('Prefix')]"
          },
          "Stage": {
            "value": "[parameters('Stage')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "9234352238652705918"
            }
          },
          "parameters": {
            "Prefix": {
              "type": "string"
            },
            "Environment": {
              "type": "string",
              "defaultValue": "D",
              "allowedValues": [
                "I",
                "D",
                "T",
                "U",
                "P",
                "S",
                "G",
                "A"
              ]
            },
            "DeploymentID": {
              "type": "string",
              "defaultValue": "1",
              "allowedValues": [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9"
              ]
            },
            "Stage": {
              "type": "object"
            },
            "Extensions": {
              "type": "object"
            },
            "Global": {
              "type": "object"
            },
            "DeploymentInfo": {
              "type": "object"
            }
          },
          "variables": {
            "Deployment": "[format('{0}-{1}-{2}-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID'))]",
            "DeploymentURI": "[toLower(format('{0}{1}{2}{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID')))]",
            "RSVInfo": [
              {
                "Name": "Vault01",
                "skuName": "RS0",
                "skuTier": "Standard"
              }
            ]
          },
          "resources": [
            {
              "condition": "[bool(parameters('Stage').RSV)]",
              "copy": {
                "name": "RSV",
                "count": "[length(range(0, length(variables('RSVInfo'))))]"
              },
              "type": "Microsoft.RecoveryServices/vaults",
              "apiVersion": "2021-01-01",
              "name": "[format('{0}{1}', variables('DeploymentURI'), variables('RSVInfo')[range(0, length(variables('RSVInfo')))[copyIndex()]].Name)]",
              "location": "[resourceGroup().location]",
              "sku": {
                "name": "[variables('RSVInfo')[range(0, length(variables('RSVInfo')))[copyIndex()]].skuName]",
                "tier": "[variables('RSVInfo')[range(0, length(variables('RSVInfo')))[copyIndex()]].skuTier]"
              },
              "properties": {}
            },
            {
              "condition": "[bool(parameters('Stage').RSV)]",
              "copy": {
                "name": "RSVDiagnostics",
                "count": "[length(range(0, length(variables('RSVInfo'))))]"
              },
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2017-05-01-preview",
              "scope": "[format('Microsoft.RecoveryServices/vaults/{0}', format('{0}{1}', variables('DeploymentURI'), variables('RSVInfo')[range(0, length(variables('RSVInfo')))[range(0, length(variables('RSVInfo')))[copyIndex()]]].Name))]",
              "name": "service",
              "properties": {
                "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', variables('DeploymentURI')))]",
                "logs": [
                  {
                    "category": "AzureBackupReport",
                    "enabled": true,
                    "retentionPolicy": {
                      "days": 0,
                      "enabled": false
                    }
                  },
                  {
                    "category": "AzureSiteRecoveryJobs",
                    "enabled": true,
                    "retentionPolicy": {
                      "days": 0,
                      "enabled": false
                    }
                  },
                  {
                    "category": "AzureSiteRecoveryEvents",
                    "enabled": true,
                    "retentionPolicy": {
                      "days": 0,
                      "enabled": false
                    }
                  },
                  {
                    "category": "AzureSiteRecoveryReplicatedItems",
                    "enabled": true,
                    "retentionPolicy": {
                      "days": 0,
                      "enabled": false
                    }
                  },
                  {
                    "category": "AzureSiteRecoveryReplicationStats",
                    "enabled": true,
                    "retentionPolicy": {
                      "days": 0,
                      "enabled": false
                    }
                  },
                  {
                    "category": "AzureSiteRecoveryRecoveryPoints",
                    "enabled": true,
                    "retentionPolicy": {
                      "days": 0,
                      "enabled": false
                    }
                  },
                  {
                    "category": "AzureSiteRecoveryReplicationDataUploadRate",
                    "enabled": true,
                    "retentionPolicy": {
                      "days": 0,
                      "enabled": false
                    }
                  },
                  {
                    "category": "AzureSiteRecoveryProtectedDiskDataChurn",
                    "enabled": true,
                    "retentionPolicy": {
                      "days": 0,
                      "enabled": false
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.RecoveryServices/vaults', format('{0}{1}', variables('DeploymentURI'), variables('RSVInfo')[range(0, length(variables('RSVInfo')))[range(0, length(variables('RSVInfo')))[copyIndex()]]].Name))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-OMS', variables('Deployment')))]"
      ]
    },
    {
      "condition": "[bool(parameters('Stage').NATGW)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('dp{0}-NATGW', variables('Deployment'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "DeploymentID": {
            "value": "[parameters('DeploymentID')]"
          },
          "DeploymentInfo": {
            "value": "[parameters('DeploymentInfo')]"
          },
          "Environment": {
            "value": "[parameters('Environment')]"
          },
          "Extensions": {
            "value": "[parameters('Extensions')]"
          },
          "Global": {
            "value": "[parameters('Global')]"
          },
          "Prefix": {
            "value": "[parameters('Prefix')]"
          },
          "Stage": {
            "value": "[parameters('Stage')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "8895194801606929724"
            }
          },
          "parameters": {
            "Prefix": {
              "type": "string"
            },
            "Environment": {
              "type": "string",
              "defaultValue": "D",
              "allowedValues": [
                "I",
                "D",
                "T",
                "U",
                "P",
                "S",
                "G",
                "A"
              ]
            },
            "DeploymentID": {
              "type": "string",
              "defaultValue": "1",
              "allowedValues": [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9"
              ]
            },
            "Stage": {
              "type": "object"
            },
            "Extensions": {
              "type": "object"
            },
            "Global": {
              "type": "object"
            },
            "DeploymentInfo": {
              "type": "object"
            }
          },
          "variables": {
            "copy": [
              {
                "name": "NGW",
                "count": "[length(variables('NATGWInfo'))]",
                "input": {
                  "match": "[or(equals(parameters('Global').CN, '.'), contains(array(parameters('Global').CN), variables('NATGWInfo')[copyIndex('NGW')].Name))]"
                }
              }
            ],
            "Deployment": "[format('{0}-{1}-{2}-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID'))]",
            "DeploymentURI": "[toLower(format('{0}{1}{2}{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID')))]",
            "NATGWInfo": "[if(contains(parameters('DeploymentInfo'), 'NATGWInfo'), parameters('DeploymentInfo').NATGWInfo, createArray())]"
          },
          "resources": [
            {
              "condition": "[variables('NGW')[copyIndex()].match]",
              "copy": {
                "name": "FireWall",
                "count": "[length(variables('NATGWInfo'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dp{0}-NATGW-Deploy{1}', variables('Deployment'), variables('NATGWInfo')[copyIndex()].name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "Deployment": {
                    "value": "[variables('Deployment')]"
                  },
                  "DeploymentURI": {
                    "value": "[variables('DeploymentURI')]"
                  },
                  "NATGWInfo": {
                    "value": "[variables('NATGWInfo')[copyIndex()]]"
                  },
                  "Global": {
                    "value": "[parameters('Global')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1318.3566",
                      "templateHash": "12337881201097075638"
                    }
                  },
                  "parameters": {
                    "Deployment": {
                      "type": "string"
                    },
                    "DeploymentURI": {
                      "type": "string"
                    },
                    "NATGWInfo": {
                      "type": "object"
                    },
                    "Global": {
                      "type": "object"
                    },
                    "now": {
                      "type": "string",
                      "defaultValue": "[utcNow('F')]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/natGateways",
                      "apiVersion": "2021-02-01",
                      "name": "[format('{0}-ngw{1}', parameters('Deployment'), parameters('NATGWInfo').Name)]",
                      "location": "[resourceGroup().location]",
                      "sku": {
                        "name": "Standard"
                      },
                      "properties": {
                        "publicIpAddresses": [
                          {
                            "id": "[reference(resourceId('Microsoft.Resources/deployments', format('dp{0}-NATGW-publicIPDeploy{1}', parameters('Deployment'), parameters('NATGWInfo').Name))).outputs.PIPID.value[0]]"
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-NATGW-publicIPDeploy{1}', parameters('Deployment'), parameters('NATGWInfo').Name))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-NATGW-publicIPDeploy{1}', parameters('Deployment'), parameters('NATGWInfo').Name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[parameters('Deployment')]"
                          },
                          "DeploymentURI": {
                            "value": "[parameters('DeploymentURI')]"
                          },
                          "NICs": {
                            "value": "[array(parameters('NATGWInfo'))]"
                          },
                          "VM": {
                            "value": "[parameters('NATGWInfo')]"
                          },
                          "PIPprefix": {
                            "value": "ngw"
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "18109364379899578760"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "DeploymentURI": {
                              "type": "string"
                            },
                            "PIPprefix": {
                              "type": "string"
                            },
                            "NICs": {
                              "type": "array"
                            },
                            "VM": {
                              "type": "object"
                            },
                            "Global": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "condition": "[and(contains(parameters('NICs')[copyIndex()], 'PublicIP'), not(equals(parameters('NICs')[copyIndex()].PublicIP, null())))]",
                              "copy": {
                                "name": "PublicIP",
                                "count": "[length(parameters('NICs'))]"
                              },
                              "type": "Microsoft.Network/publicIPAddresses",
                              "apiVersion": "2021-02-01",
                              "name": "[format('{0}-{1}{2}-publicip{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1))]",
                              "location": "[resourceGroup().location]",
                              "sku": {
                                "name": "[if(contains(parameters('VM'), 'Zone'), 'Standard', 'Basic')]"
                              },
                              "properties": {
                                "publicIPAllocationMethod": "[parameters('NICs')[copyIndex()].PublicIP]",
                                "dnsSettings": {
                                  "domainNameLabel": "[toLower(format('{0}-{1}{2}-{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1)))]"
                                }
                              }
                            },
                            {
                              "condition": "[and(contains(parameters('NICs')[copyIndex()], 'PublicIP'), not(equals(parameters('NICs')[copyIndex()].PublicIP, null())))]",
                              "copy": {
                                "name": "PublicIPDiag",
                                "count": "[length(parameters('NICs'))]"
                              },
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2017-05-01-preview",
                              "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', format('{0}-{1}{2}-publicip{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1)))]",
                              "name": "service",
                              "properties": {
                                "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                                "logs": [
                                  {
                                    "category": "DDoSProtectionNotifications",
                                    "enabled": true
                                  }
                                ],
                                "metrics": [
                                  {
                                    "timeGrain": "PT5M",
                                    "enabled": true,
                                    "retentionPolicy": {
                                      "enabled": false,
                                      "days": 0
                                    }
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/publicIPAddresses', format('{0}-{1}{2}-publicip{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1)))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "PIPID": {
                              "type": "array",
                              "copy": {
                                "count": "[length(parameters('NICs'))]",
                                "input": "[if(and(contains(parameters('NICs')[copyIndex()], 'PublicIP'), not(equals(parameters('NICs')[copyIndex()].PublicIP, null()))), resourceId('Microsoft.Network/publicIPAddresses', format('{0}-{1}{2}-publicip{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1))), '')]"
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-OMS', variables('Deployment')))]"
      ]
    },
    {
      "condition": "[bool(parameters('Stage').NSG)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('dp{0}-NSG', variables('Deployment'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "DeploymentID": {
            "value": "[parameters('DeploymentID')]"
          },
          "DeploymentInfo": {
            "value": "[parameters('DeploymentInfo')]"
          },
          "Environment": {
            "value": "[parameters('Environment')]"
          },
          "Extensions": {
            "value": "[parameters('Extensions')]"
          },
          "Global": {
            "value": "[parameters('Global')]"
          },
          "Prefix": {
            "value": "[parameters('Prefix')]"
          },
          "Stage": {
            "value": "[parameters('Stage')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "16198967460570058780"
            }
          },
          "parameters": {
            "Prefix": {
              "type": "string"
            },
            "Environment": {
              "type": "string",
              "defaultValue": "D",
              "allowedValues": [
                "I",
                "D",
                "T",
                "U",
                "P",
                "S",
                "G",
                "A"
              ]
            },
            "DeploymentID": {
              "type": "string",
              "defaultValue": "1",
              "allowedValues": [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9"
              ]
            },
            "Stage": {
              "type": "object"
            },
            "Extensions": {
              "type": "object"
            },
            "Global": {
              "type": "object"
            },
            "DeploymentInfo": {
              "type": "object"
            }
          },
          "variables": {
            "copy": [
              {
                "name": "NSGInfo",
                "count": "[length(variables('subnetInfo'))]",
                "input": {
                  "match": "[or(equals(parameters('Global').CN, '.'), contains(array(parameters('Global').CN), variables('subnetInfo')[copyIndex('NSGInfo')].name))]",
                  "subnetNSGParam": "[if(contains(variables('subnetInfo')[copyIndex('NSGInfo')], 'securityRules'), variables('subnetInfo')[copyIndex('NSGInfo')].securityRules, createArray())]",
                  "subnetNSGDefault": "[if(contains(variables('NSGDefault'), variables('subnetInfo')[copyIndex('NSGInfo')].name), variables('NSGDefault')[variables('subnetInfo')[copyIndex('NSGInfo')].name], createArray())]"
                }
              }
            ],
            "Deployment": "[format('{0}-{1}-{2}-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID'))]",
            "DeploymentURI": "[toLower(format('{0}{1}{2}{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID')))]",
            "subnetInfo": "[if(contains(parameters('DeploymentInfo'), 'subnetInfo'), parameters('DeploymentInfo').subnetInfo, createArray())]",
            "NSGDefault": {
              "AzureBastionSubnet": [
                {
                  "name": "Inbound_Bastion_443",
                  "properties": {
                    "protocol": "*",
                    "sourcePortRange": "*",
                    "destinationPortRange": "443",
                    "sourceAddressPrefix": "Internet",
                    "destinationAddressPrefix": "*",
                    "access": "Allow",
                    "priority": 100,
                    "direction": "Inbound"
                  }
                },
                {
                  "name": "Inbound_Bastion_GatewayManager_443",
                  "properties": {
                    "protocol": "*",
                    "sourcePortRange": "*",
                    "sourceAddressPrefix": "GatewayManager",
                    "destinationPortRange": "443",
                    "destinationAddressPrefix": "*",
                    "access": "Allow",
                    "priority": 110,
                    "direction": "Inbound"
                  }
                },
                {
                  "name": "Inbound_Bastion_DataPlane",
                  "properties": {
                    "protocol": "*",
                    "sourcePortRange": "*",
                    "sourceAddressPrefix": "VirtualNetwork",
                    "destinationAddressPrefix": "VirtualNetwork",
                    "access": "Allow",
                    "priority": 120,
                    "direction": "Inbound",
                    "destinationPortRanges": [
                      "8080",
                      "5701"
                    ]
                  }
                },
                {
                  "name": "Inbound_Bastion_AzureLoadBalancer",
                  "properties": {
                    "protocol": "*",
                    "sourcePortRange": "*",
                    "sourceAddressPrefix": "AzureLoadBalancer",
                    "destinationPortRange": "443",
                    "destinationAddressPrefix": "*",
                    "access": "Allow",
                    "priority": 130,
                    "direction": "Inbound"
                  }
                },
                {
                  "name": "Outbound_Bastion_FE01_3389_22",
                  "properties": {
                    "protocol": "*",
                    "sourcePortRange": "*",
                    "sourceAddressPrefix": "*",
                    "access": "Allow",
                    "priority": 200,
                    "direction": "Outbound",
                    "destinationAddressPrefix": "VirtualNetwork",
                    "destinationPortRanges": [
                      "3389",
                      "22"
                    ]
                  }
                },
                {
                  "name": "Outbound_Bastion_AzureCloud_443",
                  "properties": {
                    "protocol": "TCP",
                    "sourcePortRange": "*",
                    "destinationPortRange": "443",
                    "sourceAddressPrefix": "*",
                    "destinationAddressPrefix": "AzureCloud",
                    "access": "Allow",
                    "priority": 210,
                    "direction": "Outbound"
                  }
                },
                {
                  "name": "Outbound_Bastion_DataPlane",
                  "properties": {
                    "protocol": "*",
                    "sourcePortRange": "*",
                    "sourceAddressPrefix": "VirtualNetwork",
                    "destinationAddressPrefix": "VirtualNetwork",
                    "access": "Allow",
                    "priority": 220,
                    "direction": "Outbound",
                    "destinationPortRanges": [
                      "8080",
                      "5701"
                    ]
                  }
                },
                {
                  "name": "Outbound_Bastion_Internet_80",
                  "properties": {
                    "protocol": "*",
                    "sourcePortRange": "*",
                    "destinationPortRange": "80",
                    "sourceAddressPrefix": "*",
                    "destinationAddressPrefix": "Internet",
                    "access": "Allow",
                    "priority": 230,
                    "direction": "Outbound"
                  }
                }
              ],
              "SNWAF01": [
                {
                  "name": "WAF_Default_Inbound",
                  "properties": {
                    "protocol": "Tcp",
                    "sourcePortRange": "*",
                    "destinationPortRange": "65200-65535",
                    "sourceAddressPrefix": "GatewayManager",
                    "destinationAddressPrefix": "*",
                    "access": "Allow",
                    "priority": 1000,
                    "direction": "Inbound",
                    "sourcePortRanges": [],
                    "destinationPortRanges": [],
                    "sourceAddressPrefixes": [],
                    "destinationAddressPrefixes": []
                  }
                },
                {
                  "name": "WAF_Web_Inbound",
                  "properties": {
                    "protocol": "Tcp",
                    "sourcePortRange": "*",
                    "sourceAddressPrefix": "Internet",
                    "destinationAddressPrefix": "VirtualNetwork",
                    "access": "Allow",
                    "priority": 1010,
                    "direction": "Inbound",
                    "sourcePortRanges": [],
                    "destinationPortRanges": [
                      "80",
                      "443"
                    ],
                    "sourceAddressPrefixes": [],
                    "destinationAddressPrefixes": []
                  }
                }
              ],
              "SNFE01": [],
              "SNBE01": [
                {
                  "name": "APIM_Client_Inbound_FD",
                  "properties": {
                    "protocol": "Tcp",
                    "sourcePortRange": "*",
                    "destinationPortRanges": [
                      "443",
                      "80"
                    ],
                    "sourceAddressPrefix": "Internet",
                    "destinationAddressPrefix": "VirtualNetwork",
                    "access": "Allow",
                    "priority": 1100,
                    "direction": "Inbound"
                  }
                },
                {
                  "name": "APIM_Management_Inbound",
                  "properties": {
                    "protocol": "Tcp",
                    "sourcePortRange": "*",
                    "destinationPortRange": "3443",
                    "sourceAddressPrefix": "ApiManagement",
                    "destinationAddressPrefix": "VirtualNetwork",
                    "access": "Allow",
                    "priority": 1120,
                    "direction": "Inbound"
                  }
                }
              ]
            }
          },
          "resources": [
            {
              "copy": {
                "name": "NSG",
                "count": "[length(variables('subnetInfo'))]"
              },
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}-nsg{1}', variables('Deployment'), toUpper(variables('subnetInfo')[copyIndex()].name))]",
              "location": "[resourceGroup().location]",
              "properties": {
                "securityRules": "[union(variables('NSGInfo')[copyIndex()].subnetNSGParam, variables('NSGInfo')[copyIndex()].subnetNSGDefault)]"
              }
            },
            {
              "copy": {
                "name": "NSGDiagnostics",
                "count": "[length(variables('subnetInfo'))]"
              },
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2017-05-01-preview",
              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', format('{0}-nsg{1}', variables('Deployment'), toUpper(variables('subnetInfo')[copyIndex()].name)))]",
              "name": "service",
              "properties": {
                "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', variables('DeploymentURI')))]",
                "logs": [
                  {
                    "category": "NetworkSecurityGroupEvent",
                    "enabled": true
                  },
                  {
                    "category": "NetworkSecurityGroupRuleCounter",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-nsg{1}', variables('Deployment'), toUpper(variables('subnetInfo')[copyIndex()].name)))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-OMS', variables('Deployment')))]"
      ]
    },
    {
      "condition": "[bool(parameters('Stage').NetworkWatcher)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('dp{0}-NetworkWatcher', variables('Deployment'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "DeploymentID": {
            "value": "[parameters('DeploymentID')]"
          },
          "DeploymentInfo": {
            "value": "[parameters('DeploymentInfo')]"
          },
          "Environment": {
            "value": "[parameters('Environment')]"
          },
          "Extensions": {
            "value": "[parameters('Extensions')]"
          },
          "Global": {
            "value": "[parameters('Global')]"
          },
          "Prefix": {
            "value": "[parameters('Prefix')]"
          },
          "Stage": {
            "value": "[parameters('Stage')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "5244982690958722351"
            }
          },
          "parameters": {
            "Prefix": {
              "type": "string"
            },
            "Environment": {
              "type": "string",
              "defaultValue": "D",
              "allowedValues": [
                "I",
                "D",
                "T",
                "U",
                "P",
                "S",
                "G",
                "A"
              ]
            },
            "DeploymentID": {
              "type": "string",
              "defaultValue": "1",
              "allowedValues": [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9"
              ]
            },
            "Stage": {
              "type": "object"
            },
            "Extensions": {
              "type": "object"
            },
            "Global": {
              "type": "object"
            },
            "DeploymentInfo": {
              "type": "object"
            }
          },
          "variables": {
            "Deployment": "[format('{0}-{1}-{2}-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID'))]",
            "networkWatcherInfo": "[if(contains(parameters('DeploymentInfo'), 'networkWatcherInfo'), parameters('DeploymentInfo').networkWatcherInfo, createArray())]"
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkWatchers",
              "apiVersion": "2019-11-01",
              "name": "[format('{0}-{1}', variables('Deployment'), variables('networkWatcherInfo').name)]",
              "location": "[resourceGroup().location]",
              "properties": {}
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-OMS', variables('Deployment')))]"
      ]
    },
    {
      "condition": "[bool(parameters('Stage').FlowLogs)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('dp{0}-FlowLogs', variables('Deployment'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "DeploymentID": {
            "value": "[parameters('DeploymentID')]"
          },
          "DeploymentInfo": {
            "value": "[parameters('DeploymentInfo')]"
          },
          "Environment": {
            "value": "[parameters('Environment')]"
          },
          "Extensions": {
            "value": "[parameters('Extensions')]"
          },
          "Global": {
            "value": "[parameters('Global')]"
          },
          "Prefix": {
            "value": "[parameters('Prefix')]"
          },
          "Stage": {
            "value": "[parameters('Stage')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "15459621858637389076"
            }
          },
          "parameters": {
            "Prefix": {
              "type": "string"
            },
            "Environment": {
              "type": "string",
              "defaultValue": "D",
              "allowedValues": [
                "I",
                "D",
                "T",
                "U",
                "P",
                "S",
                "G",
                "A"
              ]
            },
            "DeploymentID": {
              "type": "string",
              "defaultValue": "1",
              "allowedValues": [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9"
              ]
            },
            "Stage": {
              "type": "object"
            },
            "Extensions": {
              "type": "object"
            },
            "Global": {
              "type": "object"
            },
            "DeploymentInfo": {
              "type": "object"
            }
          },
          "variables": {
            "Deployment": "[format('{0}-{1}-{2}-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID'))]",
            "DeploymentURI": "[toLower(format('{0}{1}{2}{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID')))]",
            "HubRGJ": "[json(parameters('Global').hubRG)]",
            "NetworkWatcherRGJ": "[if(contains(parameters('Global'), 'networkWatcherRG'), json(parameters('Global').networkWatcherRG), json(parameters('Global').hubRG))]",
            "gh": {
              "watcherRGPrefix": "[if(contains(variables('NetworkWatcherRGJ'), 'Prefix'), variables('NetworkWatcherRGJ').Prefix, if(contains(variables('HubRGJ'), 'Prefix'), variables('HubRGJ').Prefix, parameters('Prefix')))]",
              "watcherRGOrgName": "[if(contains(variables('NetworkWatcherRGJ'), 'OrgName'), variables('NetworkWatcherRGJ').OrgName, if(contains(variables('HubRGJ'), 'OrgName'), variables('HubRGJ').OrgName, parameters('Global').OrgName))]",
              "watcherRGAppName": "[if(contains(variables('NetworkWatcherRGJ'), 'AppName'), variables('NetworkWatcherRGJ').AppName, if(contains(variables('HubRGJ'), 'AppName'), variables('HubRGJ').AppName, parameters('Global').AppName))]",
              "watcherRGRGName": "[if(contains(variables('NetworkWatcherRGJ'), 'name'), variables('NetworkWatcherRGJ').name, if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID'))))]"
            },
            "watcherRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').watcherRGPrefix, variables('gh').watcherRGOrgName, variables('gh').watcherRGAppName, variables('gh').watcherRGRGName)]",
            "watcherDeployment": "[format('{0}-{1}-{2}-{3}', variables('gh').watcherRGPrefix, variables('gh').watcherRGOrgName, variables('gh').watcherRGAppName, variables('gh').watcherRGRGName)]",
            "SADiagName": "[format('{0}sadiag', variables('DeploymentURI'))]",
            "retentionPolicydays": 29,
            "flowLogversion": 1,
            "AnalyticsInterval": 10,
            "SubnetInfo": "[if(contains(parameters('DeploymentInfo'), 'SubnetInfo'), parameters('DeploymentInfo').SubnetInfo, createArray())]"
          },
          "resources": [
            {
              "condition": "[and(contains(variables('SubnetInfo')[copyIndex()], 'NSG'), bool(variables('SubnetInfo')[copyIndex()].NSG))]",
              "copy": {
                "name": "FlowLogs",
                "count": "[length(variables('SubnetInfo'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-fl-{1}', variables('Deployment'), variables('SubnetInfo')[copyIndex()].Name)]",
              "resourceGroup": "[variables('watcherRGName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "NSGID": {
                    "value": "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-nsg{1}', variables('Deployment'), variables('SubnetInfo')[copyIndex()].Name))]"
                  },
                  "SADIAGID": {
                    "value": "[resourceId('Microsoft.Storage/storageAccounts', variables('SADiagName'))]"
                  },
                  "subNet": {
                    "value": "[variables('SubnetInfo')[copyIndex()]]"
                  },
                  "watcherDeployment": {
                    "value": "[variables('watcherDeployment')]"
                  },
                  "retentionPolicydays": {
                    "value": "[variables('retentionPolicydays')]"
                  },
                  "flowLogVersion": {
                    "value": "[variables('flowLogversion')]"
                  },
                  "flowLogName": {
                    "value": "[format('{0}-fl-{1}', variables('Deployment'), variables('SubnetInfo')[copyIndex()].Name)]"
                  },
                  "Analyticsinterval": {
                    "value": "[variables('AnalyticsInterval')]"
                  },
                  "logAnalyticsId": {
                    "value": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', variables('DeploymentURI')))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1318.3566",
                      "templateHash": "16600692315890182713"
                    }
                  },
                  "parameters": {
                    "NSGID": {
                      "type": "string"
                    },
                    "SADIAGID": {
                      "type": "string"
                    },
                    "subNet": {
                      "type": "object"
                    },
                    "watcherDeployment": {
                      "type": "string"
                    },
                    "retentionPolicydays": {
                      "type": "int"
                    },
                    "flowLogVersion": {
                      "type": "int"
                    },
                    "flowLogName": {
                      "type": "string"
                    },
                    "Analyticsinterval": {
                      "type": "int"
                    },
                    "logAnalyticsId": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "flowLogEnabled": "[and(contains(parameters('subNet'), 'FlowLogEnabled'), bool(parameters('subNet').FlowLogEnabled))]",
                    "FlowAnalyticsEnabled": "[and(contains(parameters('subNet'), 'FlowAnalyticsEnabled'), bool(parameters('subNet').FlowAnalyticsEnabled))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/networkWatchers/flowLogs",
                      "apiVersion": "2020-11-01",
                      "name": "[format('{0}/{1}', format('{0}-networkwatcher', parameters('watcherDeployment')), parameters('flowLogName'))]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "enabled": "[variables('flowLogEnabled')]",
                        "retentionPolicy": {
                          "days": "[parameters('retentionPolicydays')]",
                          "enabled": true
                        },
                        "storageId": "[parameters('SADIAGID')]",
                        "targetResourceId": "[parameters('NSGID')]",
                        "format": {
                          "type": "JSON",
                          "version": "[parameters('flowLogVersion')]"
                        },
                        "flowAnalyticsConfiguration": {
                          "networkWatcherFlowAnalyticsConfiguration": {
                            "enabled": "[variables('FlowAnalyticsEnabled')]",
                            "trafficAnalyticsInterval": "[parameters('Analyticsinterval')]",
                            "workspaceResourceId": "[parameters('logAnalyticsId')]"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-NetworkWatcher', variables('Deployment')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-NSG', variables('Deployment')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-OMS', variables('Deployment')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-SA', variables('Deployment')))]"
      ]
    },
    {
      "condition": "[bool(parameters('Stage').RT)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('dp{0}-RT', variables('Deployment'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "DeploymentID": {
            "value": "[parameters('DeploymentID')]"
          },
          "DeploymentInfo": {
            "value": "[parameters('DeploymentInfo')]"
          },
          "Environment": {
            "value": "[parameters('Environment')]"
          },
          "Extensions": {
            "value": "[parameters('Extensions')]"
          },
          "Global": {
            "value": "[parameters('Global')]"
          },
          "Prefix": {
            "value": "[parameters('Prefix')]"
          },
          "Stage": {
            "value": "[parameters('Stage')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "3843606737736730697"
            }
          },
          "parameters": {
            "Prefix": {
              "type": "string"
            },
            "Environment": {
              "type": "string",
              "defaultValue": "D",
              "allowedValues": [
                "I",
                "D",
                "T",
                "U",
                "P",
                "S",
                "G",
                "A"
              ]
            },
            "DeploymentID": {
              "type": "string",
              "defaultValue": "1",
              "allowedValues": [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9"
              ]
            },
            "Stage": {
              "type": "object"
            },
            "Extensions": {
              "type": "object"
            },
            "Global": {
              "type": "object"
            },
            "DeploymentInfo": {
              "type": "object"
            }
          },
          "variables": {
            "HubRGJ": "[json(parameters('Global').hubRG)]",
            "gh": {
              "hubRGPrefix": "[if(contains(variables('HubRGJ'), 'Prefix'), variables('HubRGJ').Prefix, parameters('Prefix'))]",
              "hubRGOrgName": "[if(contains(variables('HubRGJ'), 'OrgName'), variables('HubRGJ').OrgName, parameters('Global').OrgName)]",
              "hubRGAppName": "[if(contains(variables('HubRGJ'), 'AppName'), variables('HubRGJ').AppName, parameters('Global').AppName)]",
              "hubRGRGName": "[if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID'))))]"
            },
            "HubVNName": "[format('{0}-{1}-{2}-{3}-vn', variables('gh').hubRGPrefix, variables('gh').hubRGOrgName, variables('gh').hubRGAppName, variables('gh').hubRGRGName)]",
            "HubRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').hubRGPrefix, variables('gh').hubRGOrgName, variables('gh').hubRGAppName, variables('gh').hubRGRGName)]",
            "HubDeployment": "[format('{0}-{1}-{2}-{3}', variables('gh').hubRGPrefix, variables('gh').hubRGOrgName, variables('gh').hubRGAppName, variables('gh').hubRGRGName)]",
            "Domain": "[toUpper(split(parameters('Global').DomainName, '.')[0])]",
            "RTInfo": "[if(contains(parameters('DeploymentInfo'), 'RTInfo'), parameters('DeploymentInfo').RTInfo, createArray())]"
          },
          "resources": [
            {
              "copy": {
                "name": "RT",
                "count": "[length(variables('RTInfo'))]"
              },
              "type": "Microsoft.Network/routeTables",
              "apiVersion": "2018-11-01",
              "name": "[format('{0}{1}{2}', replace(variables('HubVNName'), 'vn', 'rt'), variables('Domain'), variables('RTInfo')[copyIndex()].Name)]",
              "location": "[resourceGroup().location]",
              "properties": {
                "copy": [
                  {
                    "name": "routes",
                    "count": "[length(variables('RTInfo')[copyIndex()].Routes)]",
                    "input": {
                      "name": "[format('{0}-{1}', parameters('Prefix'), variables('RTInfo')[copyIndex()].Routes[copyIndex('routes')].Name)]",
                      "properties": {
                        "addressPrefix": "[variables('RTInfo')[copyIndex()].Routes[copyIndex('routes')].addressPrefix]",
                        "nextHopType": "[variables('RTInfo')[copyIndex()].Routes[copyIndex('routes')].nextHopType]",
                        "nextHopIpAddress": "[if(contains(variables('RTInfo')[copyIndex()].Routes[copyIndex('routes')], 'nextHopFW'), reference(resourceId(variables('HubRGName'), 'Microsoft.Network/azureFirewalls', format('{0}-{1}', variables('HubDeployment'), variables('RTInfo')[copyIndex()].Routes[copyIndex('routes')].nextHopFW)), '2021-05-01').ipConfigurations[0].properties.privateIPAddress, variables('RTInfo')[copyIndex()].Routes[copyIndex('routes')].nextHopIpAddress)]"
                      }
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-OMS', variables('Deployment')))]"
      ]
    },
    {
      "condition": "[bool(parameters('Stage').VNET)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('dp{0}-VNET', variables('Deployment'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "DeploymentID": {
            "value": "[parameters('DeploymentID')]"
          },
          "DeploymentInfo": {
            "value": "[parameters('DeploymentInfo')]"
          },
          "Environment": {
            "value": "[parameters('Environment')]"
          },
          "Extensions": {
            "value": "[parameters('Extensions')]"
          },
          "Global": {
            "value": "[parameters('Global')]"
          },
          "Prefix": {
            "value": "[parameters('Prefix')]"
          },
          "Stage": {
            "value": "[parameters('Stage')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "7372588164617222409"
            }
          },
          "parameters": {
            "Prefix": {
              "type": "string"
            },
            "Environment": {
              "type": "string",
              "defaultValue": "D",
              "allowedValues": [
                "I",
                "D",
                "T",
                "U",
                "P",
                "S",
                "G",
                "A"
              ]
            },
            "DeploymentID": {
              "type": "string",
              "defaultValue": "1",
              "allowedValues": [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9"
              ]
            },
            "Stage": {
              "type": "object"
            },
            "Extensions": {
              "type": "object"
            },
            "Global": {
              "type": "object"
            },
            "DeploymentInfo": {
              "type": "object"
            }
          },
          "variables": {
            "copy": [
              {
                "name": "DNSServers",
                "count": "[length(variables('DNSServerList'))]",
                "input": "[if(lessOrEquals(length(variables('DNSServerList')[copyIndex('DNSServers')]), 3), format('{0}.{1}', variables('networkId'), variables('DNSServerList')[copyIndex('DNSServers')]), variables('DNSServerList')[copyIndex('DNSServers')])]"
              }
            ],
            "subscriptionId": "[subscription().subscriptionId]",
            "resourceGroupName": "[resourceGroup().name]",
            "Deployment": "[format('{0}-{1}-{2}-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID'))]",
            "DeploymentURI": "[toLower(format('{0}{1}{2}{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID')))]",
            "HubRGJ": "[json(parameters('Global').hubRG)]",
            "gh": {
              "hubRGPrefix": "[if(contains(variables('HubRGJ'), 'Prefix'), variables('HubRGJ').Prefix, parameters('Prefix'))]",
              "hubRGOrgName": "[if(contains(variables('HubRGJ'), 'OrgName'), variables('HubRGJ').OrgName, parameters('Global').OrgName)]",
              "hubRGAppName": "[if(contains(variables('HubRGJ'), 'AppName'), variables('HubRGJ').AppName, parameters('Global').AppName)]",
              "hubRGRGName": "[if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID'))))]"
            },
            "HubRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').hubRGPrefix, variables('gh').hubRGOrgName, variables('gh').hubRGAppName, variables('gh').hubRGRGName)]",
            "HubVNName": "[format('{0}-{1}-{2}-{3}-vn', variables('gh').hubRGPrefix, variables('gh').hubRGOrgName, variables('gh').hubRGAppName, variables('gh').hubRGRGName)]",
            "hubVNetName": "[if(contains(parameters('DeploymentInfo'), 'hubRegionPrefix'), replace(variables('HubVNName'), parameters('Prefix'), parameters('DeploymentInfo').hubRegionPrefix), variables('HubVNName'))]",
            "hubVNetResourceGroupName": "[if(contains(parameters('DeploymentInfo'), 'hubRegionPrefix'), replace(variables('HubRGName'), parameters('Prefix'), parameters('DeploymentInfo').hubRegionPrefix), variables('HubRGName'))]",
            "hubVNetSubscriptionID": "[if(contains(parameters('Global'), 'hubSubscriptionID'), parameters('Global').hubSubscriptionID, variables('subscriptionId'))]",
            "networkId": "[format('{0}{1}', parameters('Global').networkid[0], string(sub(parameters('Global').networkid[1], mul(2, int(parameters('DeploymentID'))))))]",
            "networkIdUpper": "[format('{0}{1}', parameters('Global').networkid[0], string(add(1, sub(parameters('Global').networkid[1], mul(2, int(parameters('DeploymentID')))))))]",
            "addressPrefixes": [
              "[format('{0}.0/23', variables('networkId'))]"
            ],
            "DNSServerList": "[if(contains(parameters('DeploymentInfo'), 'DNSServers'), parameters('DeploymentInfo').DNSServers, parameters('Global').DNSServers)]",
            "SubnetInfo": "[if(contains(parameters('DeploymentInfo'), 'SubnetInfo'), parameters('DeploymentInfo').SubnetInfo, createArray())]",
            "Domain": "[split(parameters('Global').DomainName, '.')[0]]",
            "RouteTableGlobal": {
              "id": "[resourceId(variables('HubRGName'), 'Microsoft.Network/routeTables/', format('{0}{1}{2}', replace(variables('HubVNName'), 'vn', 'rt'), variables('Domain'), parameters('Global').RTName))]"
            },
            "delegations": {
              "default": [],
              "Microsoft.Web/serverfarms": [
                {
                  "name": "delegation",
                  "properties": {
                    "serviceName": "Microsoft.Web/serverfarms"
                  }
                }
              ],
              "Microsoft.ContainerInstance/containerGroups": [
                {
                  "name": "delegation",
                  "properties": {
                    "serviceName": "Microsoft.ContainerInstance/containerGroups"
                  }
                }
              ],
              "Microsoft.Network/dnsResolvers": [
                {
                  "name": "delegation",
                  "properties": {
                    "serviceName": "Microsoft.Network/dnsResolvers"
                  }
                }
              ]
            },
            "serviceEndpoints": {
              "default": [],
              "Microsoft.Storage": [
                {
                  "service": "Microsoft.Storage",
                  "locations": [
                    "[resourceGroup().location]"
                  ]
                }
              ]
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2021-02-01",
              "name": "[format('{0}-vn', variables('Deployment'))]",
              "location": "[resourceGroup().location]",
              "properties": {
                "copy": [
                  {
                    "name": "subnets",
                    "count": "[length(variables('SubnetInfo'))]",
                    "input": {
                      "name": "[variables('SubnetInfo')[copyIndex('subnets')].name]",
                      "properties": {
                        "addressPrefix": "[format('{0}.{1}', if(equals(variables('SubnetInfo')[copyIndex('subnets')].name, 'snMT02'), variables('networkIdUpper'), variables('networkId')), variables('SubnetInfo')[copyIndex('subnets')].Prefix)]",
                        "networkSecurityGroup": "[if(not(and(contains(variables('SubnetInfo')[copyIndex('subnets')], 'NSG'), bool(variables('SubnetInfo')[copyIndex('subnets')].NSG))), null(), createObject('id', resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-nsg{1}', variables('Deployment'), variables('SubnetInfo')[copyIndex('subnets')].name))))]",
                        "natGateway": "[if(not(and(contains(variables('SubnetInfo')[copyIndex('subnets')], 'NGW'), bool(variables('SubnetInfo')[copyIndex('subnets')].NGW))), null(), createObject('id', resourceId('Microsoft.Network/natGateways', format('{0}-ngwNAT01', variables('Deployment')))))]",
                        "routeTable": "[if(and(contains(variables('SubnetInfo')[copyIndex('subnets')], 'Route'), bool(variables('SubnetInfo')[copyIndex('subnets')].Route)), variables('RouteTableGlobal'), null())]",
                        "privateEndpointNetworkPolicies": "Disabled",
                        "delegations": "[if(contains(variables('SubnetInfo')[copyIndex('subnets')], 'delegations'), variables('delegations')[variables('SubnetInfo')[copyIndex('subnets')].delegations], variables('delegations').default)]",
                        "serviceEndpoints": "[if(contains(variables('SubnetInfo')[copyIndex('subnets')], 'serviceEndpoints'), variables('serviceEndpoints')[variables('SubnetInfo')[copyIndex('subnets')].serviceEndpoints], variables('serviceEndpoints').default)]"
                      }
                    }
                  }
                ],
                "addressSpace": {
                  "addressPrefixes": "[variables('addressPrefixes')]"
                },
                "dhcpOptions": {
                  "dnsServers": "[array(variables('DNSServers'))]"
                }
              }
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2017-05-01-preview",
              "scope": "[format('Microsoft.Network/virtualNetworks/{0}', format('{0}-vn', variables('Deployment')))]",
              "name": "service",
              "properties": {
                "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', variables('DeploymentURI')))]",
                "logs": [
                  {
                    "category": "VMProtectionAlerts",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', format('{0}-vn', variables('Deployment')))]"
              ]
            },
            {
              "condition": "[bool(parameters('Stage').VNetPeering)]",
              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
              "apiVersion": "2017-10-01",
              "name": "[format('{0}/{1}', format('{0}-vn', variables('Deployment')), format('{0}-vn--{1}', variables('Deployment'), variables('hubVNetName')))]",
              "properties": {
                "allowVirtualNetworkAccess": true,
                "allowForwardedTraffic": true,
                "allowGatewayTransit": false,
                "useRemoteGateways": false,
                "remoteVirtualNetwork": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('hubVNetSubscriptionID'), variables('hubVNetResourceGroupName')), 'Microsoft.Network/virtualNetworks', variables('hubVNetName'))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', format('{0}-vn', variables('Deployment')))]"
              ]
            },
            {
              "condition": "[bool(parameters('Stage').VNetPeering)]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dpVNET-{0}--{1}-vn', variables('hubVNetName'), variables('Deployment'))]",
              "resourceGroup": "[variables('hubVNetResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "subscriptionID": {
                    "value": "[variables('subscriptionId')]"
                  },
                  "resourceGroupName": {
                    "value": "[variables('resourceGroupName')]"
                  },
                  "vNetName": {
                    "value": "[format('{0}-vn', variables('Deployment'))]"
                  },
                  "vNetNameHub": {
                    "value": "[variables('hubVNetName')]"
                  },
                  "peeringName": {
                    "value": "[format('{0}--{1}-vn', variables('hubVNetName'), variables('Deployment'))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1318.3566",
                      "templateHash": "8589426739546383330"
                    }
                  },
                  "parameters": {
                    "subscriptionID": {
                      "type": "string"
                    },
                    "resourceGroupName": {
                      "type": "string"
                    },
                    "vNetName": {
                      "type": "string"
                    },
                    "vNetNameHub": {
                      "type": "string"
                    },
                    "peeringName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                      "apiVersion": "2017-10-01",
                      "name": "[format('{0}/{1}', parameters('vNetNameHub'), parameters('peeringName'))]",
                      "properties": {
                        "allowVirtualNetworkAccess": true,
                        "allowForwardedTraffic": true,
                        "allowGatewayTransit": false,
                        "useRemoteGateways": false,
                        "remoteVirtualNetwork": {
                          "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionID'), parameters('resourceGroupName')), 'Microsoft.Network/virtualNetworks', parameters('vNetName'))]"
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', format('{0}-vn', variables('Deployment')))]"
              ]
            }
          ],
          "outputs": {
            "VNetID": {
              "type": "string",
              "value": "[variables('networkId')]"
            },
            "subnetIdArray": {
              "type": "array",
              "copy": {
                "count": "[length(variables('SubnetInfo'))]",
                "input": "[reference(resourceId('Microsoft.Network/virtualNetworks', format('{0}-vn', variables('Deployment')))).subnets[copyIndex()].id]"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-NATGW', variables('Deployment')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-NSG', variables('Deployment')))]"
      ]
    },
    {
      "condition": "[bool(parameters('Stage').KV)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('dp{0}-KV', variables('Deployment'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "DeploymentID": {
            "value": "[parameters('DeploymentID')]"
          },
          "DeploymentInfo": {
            "value": "[parameters('DeploymentInfo')]"
          },
          "Environment": {
            "value": "[parameters('Environment')]"
          },
          "Extensions": {
            "value": "[parameters('Extensions')]"
          },
          "Global": {
            "value": "[parameters('Global')]"
          },
          "Prefix": {
            "value": "[parameters('Prefix')]"
          },
          "Stage": {
            "value": "[parameters('Stage')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "2596246376095271907"
            }
          },
          "parameters": {
            "Prefix": {
              "type": "string"
            },
            "Environment": {
              "type": "string",
              "defaultValue": "D",
              "allowedValues": [
                "I",
                "D",
                "T",
                "U",
                "P",
                "S",
                "G",
                "A"
              ]
            },
            "DeploymentID": {
              "type": "string",
              "defaultValue": "1",
              "allowedValues": [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9"
              ]
            },
            "Stage": {
              "type": "object"
            },
            "Extensions": {
              "type": "object"
            },
            "Global": {
              "type": "object"
            },
            "DeploymentInfo": {
              "type": "object"
            }
          },
          "variables": {
            "copy": [
              {
                "name": "KVInfo",
                "count": "[length(variables('KeyVaultInfo'))]",
                "input": {
                  "match": "[or(equals(parameters('Global').CN, '.'), contains(array(parameters('Global').CN), variables('KeyVaultInfo')[copyIndex('KVInfo')].name))]"
                }
              }
            ],
            "Deployment": "[format('{0}-{1}-{2}-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID'))]",
            "DeploymentURI": "[toLower(format('{0}{1}{2}{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID')))]",
            "KeyVaultInfo": "[if(contains(parameters('DeploymentInfo'), 'KVInfo'), parameters('DeploymentInfo').KVInfo, createArray())]"
          },
          "resources": [
            {
              "condition": "[variables('KVInfo')[copyIndex()].match]",
              "copy": {
                "name": "KeyVaults",
                "count": "[length(variables('KeyVaultInfo'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dp{0}-KV-{1}', variables('Deployment'), variables('KeyVaultInfo')[copyIndex()].name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "Deployment": {
                    "value": "[variables('Deployment')]"
                  },
                  "DeploymentURI": {
                    "value": "[variables('DeploymentURI')]"
                  },
                  "KVInfo": {
                    "value": "[variables('KeyVaultInfo')[copyIndex()]]"
                  },
                  "Global": {
                    "value": "[parameters('Global')]"
                  },
                  "DeploymentID": {
                    "value": "[variables('Deployment')]"
                  },
                  "Environment": {
                    "value": "[parameters('Environment')]"
                  },
                  "Prefix": {
                    "value": "[parameters('Prefix')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1318.3566",
                      "templateHash": "14781607606521579641"
                    }
                  },
                  "parameters": {
                    "Deployment": {
                      "type": "string"
                    },
                    "DeploymentURI": {
                      "type": "string"
                    },
                    "KVInfo": {
                      "type": "object"
                    },
                    "Global": {
                      "type": "object"
                    },
                    "Prefix": {
                      "type": "string"
                    },
                    "Environment": {
                      "type": "string"
                    },
                    "DeploymentID": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "accessPolicies",
                        "count": "[length(range(0, if(not(contains(parameters('KVInfo'), 'accessPolicies')), 0, length(parameters('KVInfo').accessPolicies))))]",
                        "input": {
                          "tenantId": "[subscription().tenantId]",
                          "objectId": "[parameters('KVInfo').accessPolicies[range(0, if(not(contains(parameters('KVInfo'), 'accessPolicies')), 0, length(parameters('KVInfo').accessPolicies)))[copyIndex('accessPolicies')]].objectId]",
                          "permissions": "[variables('keyVaultPermissions')[parameters('KVInfo').accessPolicies[range(0, if(not(contains(parameters('KVInfo'), 'accessPolicies')), 0, length(parameters('KVInfo').accessPolicies)))[copyIndex('accessPolicies')]].Permissions]]"
                        }
                      },
                      {
                        "name": "ipRules",
                        "count": "[length(parameters('Global').IPAddressforRemoteAccess)]",
                        "input": {
                          "value": "[parameters('Global').IPAddressforRemoteAccess[copyIndex('ipRules')]]"
                        }
                      }
                    ],
                    "Defaults": {
                      "enabledForDeployment": true,
                      "enabledForDiskEncryption": true,
                      "enabledForTemplateDeployment": true
                    },
                    "HubRGJ": "[json(parameters('Global').hubRG)]",
                    "gh": {
                      "hubRGPrefix": "[if(contains(variables('HubRGJ'), 'Prefix'), variables('HubRGJ').Prefix, parameters('Prefix'))]",
                      "hubRGOrgName": "[if(contains(variables('HubRGJ'), 'OrgName'), variables('HubRGJ').OrgName, parameters('Global').OrgName)]",
                      "hubRGAppName": "[if(contains(variables('HubRGJ'), 'AppName'), variables('HubRGJ').AppName, parameters('Global').AppName)]",
                      "hubRGRGName": "[if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID'))))]"
                    },
                    "HubRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').hubRGPrefix, variables('gh').hubRGOrgName, variables('gh').hubRGAppName, variables('gh').hubRGRGName)]",
                    "keyVaultPermissions": {
                      "All": {
                        "keys": [
                          "Get",
                          "List",
                          "Update",
                          "Create",
                          "Import",
                          "Delete",
                          "Recover",
                          "Backup",
                          "Restore"
                        ],
                        "secrets": [
                          "Get",
                          "List",
                          "Set",
                          "Delete",
                          "Recover",
                          "Backup",
                          "Restore"
                        ],
                        "certificates": [
                          "Get",
                          "List",
                          "Update",
                          "Create",
                          "Import",
                          "Delete",
                          "Recover",
                          "Backup",
                          "Restore",
                          "ManageContacts",
                          "ManageIssuers",
                          "GetIssuers",
                          "ListIssuers",
                          "SetIssuers",
                          "DeleteIssuers"
                        ]
                      },
                      "SecretsGet": {
                        "keys": [],
                        "secrets": [
                          "Get"
                        ],
                        "certificates": []
                      },
                      "SecretsGetAndList": {
                        "keys": [],
                        "secrets": [
                          "Get",
                          "List"
                        ],
                        "certificates": []
                      }
                    },
                    "rolesInfo": "[if(contains(parameters('KVInfo'), 'rolesInfo'), parameters('KVInfo').rolesInfo, createArray())]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.KeyVault/vaults",
                      "apiVersion": "2019-09-01",
                      "name": "[format('{0}-kv{1}', parameters('Deployment'), parameters('KVInfo').Name)]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "tenantId": "[subscription().tenantId]",
                        "sku": {
                          "family": "A",
                          "name": "[parameters('KVInfo').skuName]"
                        },
                        "networkAcls": {
                          "bypass": "AzureServices",
                          "defaultAction": "[if(not(contains(parameters('KVInfo'), 'allNetworks')), 'Allow', if(bool(parameters('KVInfo').allNetworks), 'Allow', 'Deny'))]",
                          "ipRules": "[variables('ipRules')]"
                        },
                        "enabledForDeployment": "[variables('Defaults').enabledForDeployment]",
                        "enabledForDiskEncryption": "[variables('Defaults').enabledForDiskEncryption]",
                        "enabledForTemplateDeployment": "[variables('Defaults').enabledForTemplateDeployment]",
                        "enableSoftDelete": "[parameters('KVInfo').softDelete]",
                        "enablePurgeProtection": "[parameters('KVInfo').PurgeProtection]",
                        "enableRbacAuthorization": "[if(contains(parameters('KVInfo'), 'PurgeProtection'), parameters('KVInfo').PurgeProtection, false())]",
                        "accessPolicies": "[if(parameters('KVInfo').RbacAuthorization, createArray(), variables('accessPolicies'))]"
                      }
                    },
                    {
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2017-05-01-preview",
                      "scope": "[format('Microsoft.KeyVault/vaults/{0}', format('{0}-kv{1}', parameters('Deployment'), parameters('KVInfo').Name))]",
                      "name": "service",
                      "properties": {
                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                        "logs": [
                          {
                            "category": "AuditEvent",
                            "enabled": true
                          }
                        ],
                        "metrics": [
                          {
                            "timeGrain": "PT5M",
                            "enabled": true,
                            "retentionPolicy": {
                              "enabled": false,
                              "days": 0
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', format('{0}-kv{1}', parameters('Deployment'), parameters('KVInfo').Name))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "RBAC",
                        "count": "[length(variables('rolesInfo'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp-rbac-role-{0}-{1}', format('{0}-kv{1}', parameters('Deployment'), parameters('KVInfo').Name), variables('rolesInfo')[copyIndex()].name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "resourceId": {
                            "value": "[resourceId('Microsoft.KeyVault/vaults', format('{0}-kv{1}', parameters('Deployment'), parameters('KVInfo').Name))]"
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          },
                          "roleInfo": {
                            "value": "[variables('rolesInfo')[copyIndex()]]"
                          },
                          "Type": {
                            "value": "[if(contains(variables('rolesInfo')[copyIndex()], 'Type'), variables('rolesInfo')[copyIndex()].Type, 'lookup')]"
                          },
                          "deployment": {
                            "value": "[parameters('Deployment')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "18000982583333431838"
                            }
                          },
                          "parameters": {
                            "resourceId": {
                              "type": "string"
                            },
                            "Global": {
                              "type": "object"
                            },
                            "roleInfo": {
                              "type": "object"
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": ""
                            },
                            "Type": {
                              "type": "string"
                            },
                            "deployment": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "roleAssignment",
                                "count": "[length(parameters('roleInfo').RBAC)]",
                                "input": {
                                  "RoleName": "[parameters('roleInfo').RBAC[copyIndex('roleAssignment')].Name]",
                                  "RoleID": "[variables('rolesGroupsLookup')[parameters('roleInfo').RBAC[copyIndex('roleAssignment')].Name].Id]",
                                  "principalType": "[parameters('principalType')]",
                                  "GUID": "[guid(parameters('roleInfo').Name, parameters('roleInfo').RBAC[copyIndex('roleAssignment')].Name, parameters('resourceId'))]",
                                  "FriendlyName": "[format('user: {0} --> roleInfoName: {1} --> resourceId: {2}', parameters('roleInfo').Name, parameters('roleInfo').RBAC[copyIndex('roleAssignment')].Name, parameters('resourceId'))]"
                                }
                              }
                            ],
                            "objectIdLookup": "[json(parameters('Global').objectIdLookup)]",
                            "rolesGroupsLookup": "[json(parameters('Global').RolesGroupsLookup)]"
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "RBACRAResource",
                                "count": "[length(variables('roleAssignment'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[take(replace(format('dp-rbac-all-ra-{0}-{1}-{2}', last(split(parameters('resourceId'), '/')), parameters('roleInfo').name, copyIndex()), '@', '_'), 64)]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "resourceId": {
                                    "value": "[parameters('resourceId')]"
                                  },
                                  "description": {
                                    "value": "[parameters('roleInfo').name]"
                                  },
                                  "roledescription": {
                                    "value": "[variables('roleAssignment')[copyIndex()].RoleName]"
                                  },
                                  "name": {
                                    "value": "[variables('roleAssignment')[copyIndex()].GUID]"
                                  },
                                  "roleDefinitionId": {
                                    "value": "[variables('roleAssignment')[copyIndex()].RoleID]"
                                  },
                                  "principalId": {
                                    "value": "[if(equals(parameters('Type'), 'lookup'), variables('objectIdLookup')[parameters('roleInfo').name], reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-uai{1}', parameters('deployment'), parameters('roleInfo').name)), '2018-11-30').principalId)]"
                                  },
                                  "principalType": {
                                    "value": "[variables('roleAssignment')[copyIndex()].principalType]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.4.1318.3566",
                                      "templateHash": "15020166987174036705"
                                    }
                                  },
                                  "parameters": {
                                    "resourceId": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "roleDefinitionId": {
                                      "type": "string"
                                    },
                                    "principalId": {
                                      "type": "string"
                                    },
                                    "principalType": {
                                      "type": "string",
                                      "defaultValue": ""
                                    },
                                    "description": {
                                      "type": "string"
                                    },
                                    "roledescription": {
                                      "type": "string",
                                      "defaultValue": ""
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2021-04-01",
                                      "name": "[take(format('dp-RRA-{0}-{1}', parameters('description'), last(split(parameters('resourceId'), '/'))), 64)]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "expressionEvaluationOptions": {
                                          "scope": "Outer"
                                        },
                                        "template": "[json('{\r\n  \"$schema\": \"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#\",\r\n  \"contentVersion\": \"1.0.0.0\",\r\n  \"parameters\": {\r\n    \"scope\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"name\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"roleDefinitionId\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"principalId\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"principalType\": {\r\n      \"type\": \"string\"\r\n    }\r\n  },\r\n  \"resources\": [\r\n    {\r\n      \"type\": \"Microsoft.Authorization/roleAssignments\",\r\n      \"apiVersion\": \"2020-08-01-preview\",\r\n      \"scope\": \"[parameters(''scope'')]\",\r\n      \"name\": \"[parameters(''name'')]\",\r\n      \"properties\": {\r\n        \"roleDefinitionId\": \"[resourceId(''Microsoft.Authorization/roleDefinitions'', parameters(''roleDefinitionId''))]\",\r\n        \"principalId\": \"[parameters(''principalId'')]\",\r\n        \"principalType\": \"[parameters(''principalType'')]\"\r\n      }\r\n    }\r\n  ],\r\n  \"outputs\": {\r\n    \"roleAssignmentId\": {\r\n      \"type\": \"string\",\r\n      \"value\": \"[extensionResourceId(parameters(''scope''), ''Microsoft.Authorization/roleAssignments'', parameters(''name''))]\"\r\n    }\r\n  }\r\n}')]",
                                        "parameters": {
                                          "scope": {
                                            "value": "[parameters('resourceId')]"
                                          },
                                          "name": {
                                            "value": "[parameters('name')]"
                                          },
                                          "roleDefinitionId": {
                                            "value": "[parameters('roleDefinitionId')]"
                                          },
                                          "principalId": {
                                            "value": "[parameters('principalId')]"
                                          },
                                          "principalType": {
                                            "value": "[parameters('principalType')]"
                                          }
                                        }
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "resourceid": {
                                      "type": "string",
                                      "value": "[parameters('resourceId')]"
                                    },
                                    "roleAssignmentId": {
                                      "type": "string",
                                      "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('dp-RRA-{0}-{1}', parameters('description'), last(split(parameters('resourceId'), '/'))), 64))).outputs.roleAssignmentId.value]"
                                    }
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "RoleAssignments": {
                              "type": "array",
                              "value": "[variables('roleAssignment')]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', format('{0}-kv{1}', parameters('Deployment'), parameters('KVInfo').Name))]"
                      ]
                    },
                    {
                      "condition": "[contains(parameters('KVInfo'), 'privatelinkinfo')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-KV-privatelinkloop{1}', parameters('Deployment'), parameters('KVInfo').name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[parameters('Deployment')]"
                          },
                          "DeploymentURI": {
                            "value": "[parameters('DeploymentURI')]"
                          },
                          "PrivateLinkInfo": {
                            "value": "[parameters('KVInfo').privateLinkInfo]"
                          },
                          "providerType": {
                            "value": "Microsoft.KeyVault/vaults"
                          },
                          "resourceName": {
                            "value": "[format('{0}-kv{1}', parameters('Deployment'), parameters('KVInfo').Name)]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "1242957729837230630"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "DeploymentURI": {
                              "type": "string"
                            },
                            "PrivateLinkInfo": {
                              "type": "array"
                            },
                            "providerType": {
                              "type": "string"
                            },
                            "resourceName": {
                              "type": "string"
                            },
                            "resourceRG": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().name]"
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "privateLink",
                                "count": "[length(parameters('PrivateLinkInfo'))]",
                                "input": {
                                  "name": "[format('{0}-pl{1}', parameters('Deployment'), parameters('PrivateLinkInfo')[copyIndex('privateLink')].Subnet)]",
                                  "vNet": "[format('{0}-vn', parameters('Deployment'))]"
                                }
                              }
                            ]
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "subnetPrivateEndpoint",
                                "count": "[length(parameters('PrivateLinkInfo'))]"
                              },
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2019-11-01",
                              "name": "[format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet)]",
                              "location": "[resourceGroup().location]",
                              "properties": {
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet)]",
                                    "properties": {
                                      "privateLinkServiceId": "[resourceId(parameters('resourceRG'), parameters('providerType'), parameters('resourceName'))]",
                                      "groupIds": "[array(parameters('PrivateLinkInfo')[copyIndex()].groupID)]",
                                      "privateLinkServiceConnectionState": {
                                        "status": "Approved",
                                        "description": "Auto-Approved",
                                        "actionsRequired": "None"
                                      }
                                    }
                                  }
                                ],
                                "manualPrivateLinkServiceConnections": [],
                                "subnet": {
                                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('privateLink')[copyIndex()].vNet, parameters('PrivateLinkInfo')[copyIndex()].Subnet)]"
                                }
                              }
                            },
                            {
                              "copy": {
                                "name": "NICDiags",
                                "count": "[length(parameters('PrivateLinkInfo'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('dp-{0}-pl-{1}-{2}-diags', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet)]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "DeploymentURI": {
                                    "value": "[parameters('DeploymentURI')]"
                                  },
                                  "NICName": {
                                    "value": "[last(split(reference(resourceId('Microsoft.Network/privateEndpoints', format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet))).networkInterfaces[0].id, '/'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.4.1318.3566",
                                      "templateHash": "3372180053977311610"
                                    }
                                  },
                                  "parameters": {
                                    "DeploymentURI": {
                                      "type": "string"
                                    },
                                    "NICName": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', parameters('NICName'))]",
                                      "name": "service",
                                      "properties": {
                                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                                        "metrics": [
                                          {
                                            "timeGrain": "PT5M",
                                            "enabled": true,
                                            "retentionPolicy": {
                                              "enabled": false,
                                              "days": 0
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "NICID": {
                              "type": "array",
                              "copy": {
                                "count": "[length(parameters('PrivateLinkInfo'))]",
                                "input": "[reference(resourceId('Microsoft.Network/privateEndpoints', format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet))).networkInterfaces[0].id]"
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', format('{0}-kv{1}', parameters('Deployment'), parameters('KVInfo').Name))]"
                      ]
                    },
                    {
                      "condition": "[contains(parameters('KVInfo'), 'privatelinkinfo')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-KV-registerPrivateDNS{1}', parameters('Deployment'), parameters('KVInfo').name)]",
                      "resourceGroup": "[variables('HubRGName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "PrivateLinkInfo": {
                            "value": "[parameters('KVInfo').privateLinkInfo]"
                          },
                          "providerURL": {
                            "value": "azure.net"
                          },
                          "providerType": {
                            "value": "Microsoft.KeyVault/vaults"
                          },
                          "resourceName": {
                            "value": "[format('{0}-kv{1}', parameters('Deployment'), parameters('KVInfo').Name)]"
                          },
                          "Nics": {
                            "value": "[if(and(contains(parameters('KVInfo'), 'privatelinkinfo'), not(equals(length(parameters('KVInfo')), 0))), array(reference(resourceId('Microsoft.Resources/deployments', format('dp{0}-KV-privatelinkloop{1}', parameters('Deployment'), parameters('KVInfo').name)), '2020-10-01').outputs.NICID.value), array('na'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "9527034148045878947"
                            }
                          },
                          "parameters": {
                            "PrivateLinkInfo": {
                              "type": "array"
                            },
                            "resourceName": {
                              "type": "string"
                            },
                            "providerURL": {
                              "type": "string"
                            },
                            "providerType": {
                              "type": "string"
                            },
                            "Nics": {
                              "type": "array"
                            }
                          },
                          "variables": {
                            "DNSLookup": {
                              "Microsoft.AzureCosmosDB/databaseAccounts/SQL": "documents",
                              "Microsoft.AzureCosmosDB/databaseAccounts/MongoDB": "mongo.cosmos",
                              "Microsoft.AzureCosmosDB/databaseAccounts/Cassandra": "cassandra.cosmos",
                              "Microsoft.AzureCosmosDB/databaseAccounts/Gremlin": "gremlin.cosmos",
                              "Microsoft.AzureCosmosDB/databaseAccounts/Table": "table.cosmos",
                              "Microsoft.KeyVault/vaults": "vaultcore",
                              "Microsoft.DBforMySQL/servers": "mysql",
                              "Microsoft.DBforMariaDB/servers": "mariadb",
                              "Microsoft.AppConfiguration/configurationStores": "azconfig",
                              "Microsoft.ServiceBus/namespaces": "servicebus",
                              "Microsoft.Sql/servers": "database",
                              "Microsoft.Cache/redis": "redis.cache",
                              "Microsoft.Web/sites": "azurewebsites",
                              "Microsoft.Synapse/workspaces": "sql",
                              "Microsoft.ApiManagement/service": "azure-api"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "privateLinkDNS",
                                "count": "[length(parameters('PrivateLinkInfo'))]"
                              },
                              "type": "Microsoft.Network/privateDnsZones/A",
                              "apiVersion": "2020-06-01",
                              "name": "[format('privatelink.{0}.{1}/{2}', if(contains(variables('DNSLookup'), parameters('providerType')), variables('DNSLookup')[parameters('providerType')], parameters('PrivateLinkInfo')[copyIndex()].groupID), parameters('providerURL'), parameters('resourceName'))]",
                              "properties": {
                                "ttl": 3600,
                                "aRecords": [
                                  {
                                    "ipv4Address": "[reference(parameters('Nics')[copyIndex()], '2018-05-01').ipConfigurations[0].properties.privateIPAddress]"
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', format('{0}-kv{1}', parameters('Deployment'), parameters('KVInfo').Name))]",
                        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-KV-privatelinkloop{1}', parameters('Deployment'), parameters('KVInfo').name))]"
                      ]
                    }
                  ]
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-VNET', variables('Deployment')))]"
      ]
    },
    {
      "condition": "[bool(parameters('Stage').ACR)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('dp{0}-ACR', variables('Deployment'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "DeploymentID": {
            "value": "[parameters('DeploymentID')]"
          },
          "DeploymentInfo": {
            "value": "[parameters('DeploymentInfo')]"
          },
          "Environment": {
            "value": "[parameters('Environment')]"
          },
          "Extensions": {
            "value": "[parameters('Extensions')]"
          },
          "Global": {
            "value": "[parameters('Global')]"
          },
          "Prefix": {
            "value": "[parameters('Prefix')]"
          },
          "Stage": {
            "value": "[parameters('Stage')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "18420791146067224204"
            }
          },
          "parameters": {
            "Prefix": {
              "type": "string"
            },
            "Environment": {
              "type": "string",
              "defaultValue": "D",
              "allowedValues": [
                "I",
                "D",
                "T",
                "U",
                "P",
                "S",
                "G",
                "A"
              ]
            },
            "DeploymentID": {
              "type": "string",
              "defaultValue": "1",
              "allowedValues": [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9"
              ]
            },
            "Stage": {
              "type": "object"
            },
            "Extensions": {
              "type": "object"
            },
            "Global": {
              "type": "object"
            },
            "DeploymentInfo": {
              "type": "object"
            }
          },
          "variables": {
            "copy": [
              {
                "name": "ACRInfo",
                "count": "[length(variables('ContainerRegistry'))]",
                "input": {
                  "match": "[or(equals(parameters('Global').CN, '.'), contains(array(parameters('Global').CN), variables('ContainerRegistry')[copyIndex('ACRInfo')].name))]"
                }
              }
            ],
            "Deployment": "[format('{0}-{1}-{2}-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID'))]",
            "DeploymentURI": "[toLower(format('{0}{1}{2}{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID')))]",
            "Domain": "[split(parameters('Global').DomainName, '.')[0]]",
            "subscriptionId": "[subscription().subscriptionId]",
            "resourceGroupName": "[resourceGroup().name]",
            "SubnetInfo": "[parameters('DeploymentInfo').SubnetInfo]",
            "VnetID": "[resourceId('Microsoft.Network/virtualNetworks', format('{0}-vn', variables('Deployment')))]",
            "subnetResourceId": "[format('{0}/subnets/snMT01', variables('VnetID'))]",
            "ContainerRegistry": "[if(contains(parameters('DeploymentInfo'), 'ContainerRegistry'), parameters('DeploymentInfo').ContainerRegistry, createArray())]",
            "AppInsightsName": "[format('{0}AppInsights', variables('DeploymentURI'))]",
            "AppInsightsID": "[resourceId('microsoft.insights/components', variables('AppInsightsName'))]"
          },
          "resources": [
            {
              "condition": "[variables('ACRInfo')[copyIndex()].match]",
              "copy": {
                "name": "ACR",
                "count": "[length(variables('ContainerRegistry'))]"
              },
              "type": "Microsoft.ContainerRegistry/registries",
              "apiVersion": "2021-06-01-preview",
              "name": "[toLower(format('{0}registry{1}', variables('DeploymentURI'), variables('ContainerRegistry')[copyIndex()].Name))]",
              "location": "[resourceGroup().location]",
              "sku": {
                "name": "[variables('ContainerRegistry')[copyIndex()].SKU]"
              },
              "properties": {
                "adminUserEnabled": "[variables('ContainerRegistry')[copyIndex()].adminUserEnabled]",
                "dataEndpointEnabled": true,
                "zoneRedundancy": "[if(contains(variables('ContainerRegistry')[copyIndex()], 'NoZone'), if(bool(variables('ContainerRegistry')[copyIndex()].NoZone), 'Disabled', 'Enabled'), 'Enabled')]"
              }
            },
            {
              "condition": "[variables('ACRInfo')[copyIndex()].match]",
              "copy": {
                "name": "ACRDiagnostics",
                "count": "[length(variables('ContainerRegistry'))]"
              },
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2017-05-01-preview",
              "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', toLower(format('{0}registry{1}', variables('DeploymentURI'), variables('ContainerRegistry')[copyIndex()].Name)))]",
              "name": "service",
              "properties": {
                "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', variables('DeploymentURI')))]",
                "logs": [
                  {
                    "category": "ContainerRegistryRepositoryEvents",
                    "enabled": true
                  },
                  {
                    "category": "ContainerRegistryLoginEvents",
                    "enabled": true
                  }
                ],
                "metrics": [
                  {
                    "timeGrain": "PT5M",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": false,
                      "days": 0
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.ContainerRegistry/registries', toLower(format('{0}registry{1}', variables('DeploymentURI'), variables('ContainerRegistry')[copyIndex()].Name)))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-VNET', variables('Deployment')))]"
      ]
    },
    {
      "condition": "[and(contains(parameters('Stage'), 'BastionHost'), bool(parameters('Stage').BastionHost))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('dp{0}-BastionHost', variables('Deployment'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "DeploymentID": {
            "value": "[parameters('DeploymentID')]"
          },
          "DeploymentInfo": {
            "value": "[parameters('DeploymentInfo')]"
          },
          "Environment": {
            "value": "[parameters('Environment')]"
          },
          "Extensions": {
            "value": "[parameters('Extensions')]"
          },
          "Global": {
            "value": "[parameters('Global')]"
          },
          "Prefix": {
            "value": "[parameters('Prefix')]"
          },
          "Stage": {
            "value": "[parameters('Stage')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "5763081903159354473"
            }
          },
          "parameters": {
            "Prefix": {
              "type": "string"
            },
            "Environment": {
              "type": "string",
              "defaultValue": "D",
              "allowedValues": [
                "I",
                "D",
                "T",
                "U",
                "P",
                "S",
                "G",
                "A"
              ]
            },
            "DeploymentID": {
              "type": "string",
              "defaultValue": "1",
              "allowedValues": [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9"
              ]
            },
            "Stage": {
              "type": "object"
            },
            "Extensions": {
              "type": "object"
            },
            "Global": {
              "type": "object"
            },
            "DeploymentInfo": {
              "type": "object"
            }
          },
          "variables": {
            "Deployment": "[format('{0}-{1}-{2}-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID'))]",
            "DeploymentURI": "[toLower(format('{0}{1}{2}{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID')))]",
            "snAzureBastionSubnet": "AzureBastionSubnet",
            "bst": "[if(contains(parameters('DeploymentInfo'), 'BastionInfo'), parameters('DeploymentInfo').BastionInfo, createObject())]"
          },
          "resources": [
            {
              "condition": "[contains(variables('bst'), 'name')]",
              "type": "Microsoft.Network/bastionHosts",
              "apiVersion": "2021-05-01",
              "name": "[format('{0}-bst{1}', variables('Deployment'), variables('bst').name)]",
              "location": "[resourceGroup().location]",
              "sku": {
                "name": "[if(contains(variables('bst'), 'skuName'), variables('bst').skuName, 'Basic')]"
              },
              "properties": {
                "enableTunneling": "[if(contains(variables('bst'), 'enableTunneling'), bool(variables('bst').enableTunneling), false())]",
                "scaleUnits": "[if(contains(variables('bst'), 'scaleUnits'), variables('bst').scaleUnits, 2)]",
                "dnsName": "[toLower(format('{0}-{1}.bastion.azure.com', variables('Deployment'), variables('bst').name))]",
                "ipConfigurations": [
                  {
                    "name": "IpConf",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "publicIPAddress": {
                        "id": "[reference(resourceId('Microsoft.Resources/deployments', format('dp{0}-Bastion-publicIPDeploy{1}', variables('Deployment'), variables('bst').Name)), '2020-10-01').outputs.PIPID.value[0]]"
                      },
                      "subnet": {
                        "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', split(format('{0}-vn/{1}', variables('Deployment'), variables('snAzureBastionSubnet')), '/')[0], split(format('{0}-vn/{1}', variables('Deployment'), variables('snAzureBastionSubnet')), '/')[1])]"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('dp{0}-Bastion-publicIPDeploy{1}', variables('Deployment'), variables('bst').Name))]"
              ]
            },
            {
              "condition": "[contains(variables('bst'), 'name')]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2017-05-01-preview",
              "scope": "[format('Microsoft.Network/bastionHosts/{0}', format('{0}-bst{1}', variables('Deployment'), variables('bst').name))]",
              "name": "service",
              "properties": {
                "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', variables('DeploymentURI')))]",
                "logs": [
                  {
                    "category": "BastionAuditLogs",
                    "enabled": true
                  }
                ],
                "metrics": [
                  {
                    "timeGrain": "PT5M",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": false,
                      "days": 0
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/bastionHosts', format('{0}-bst{1}', variables('Deployment'), variables('bst').name))]"
              ]
            },
            {
              "condition": "[contains(variables('bst'), 'name')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dp{0}-Bastion-publicIPDeploy{1}', variables('Deployment'), variables('bst').Name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "Deployment": {
                    "value": "[variables('Deployment')]"
                  },
                  "DeploymentURI": {
                    "value": "[variables('DeploymentURI')]"
                  },
                  "NICs": {
                    "value": "[array(variables('bst'))]"
                  },
                  "VM": {
                    "value": "[variables('bst')]"
                  },
                  "PIPprefix": {
                    "value": "bst"
                  },
                  "Global": {
                    "value": "[parameters('Global')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1318.3566",
                      "templateHash": "18109364379899578760"
                    }
                  },
                  "parameters": {
                    "Deployment": {
                      "type": "string"
                    },
                    "DeploymentURI": {
                      "type": "string"
                    },
                    "PIPprefix": {
                      "type": "string"
                    },
                    "NICs": {
                      "type": "array"
                    },
                    "VM": {
                      "type": "object"
                    },
                    "Global": {
                      "type": "object"
                    }
                  },
                  "resources": [
                    {
                      "condition": "[and(contains(parameters('NICs')[copyIndex()], 'PublicIP'), not(equals(parameters('NICs')[copyIndex()].PublicIP, null())))]",
                      "copy": {
                        "name": "PublicIP",
                        "count": "[length(parameters('NICs'))]"
                      },
                      "type": "Microsoft.Network/publicIPAddresses",
                      "apiVersion": "2021-02-01",
                      "name": "[format('{0}-{1}{2}-publicip{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1))]",
                      "location": "[resourceGroup().location]",
                      "sku": {
                        "name": "[if(contains(parameters('VM'), 'Zone'), 'Standard', 'Basic')]"
                      },
                      "properties": {
                        "publicIPAllocationMethod": "[parameters('NICs')[copyIndex()].PublicIP]",
                        "dnsSettings": {
                          "domainNameLabel": "[toLower(format('{0}-{1}{2}-{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1)))]"
                        }
                      }
                    },
                    {
                      "condition": "[and(contains(parameters('NICs')[copyIndex()], 'PublicIP'), not(equals(parameters('NICs')[copyIndex()].PublicIP, null())))]",
                      "copy": {
                        "name": "PublicIPDiag",
                        "count": "[length(parameters('NICs'))]"
                      },
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2017-05-01-preview",
                      "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', format('{0}-{1}{2}-publicip{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1)))]",
                      "name": "service",
                      "properties": {
                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                        "logs": [
                          {
                            "category": "DDoSProtectionNotifications",
                            "enabled": true
                          }
                        ],
                        "metrics": [
                          {
                            "timeGrain": "PT5M",
                            "enabled": true,
                            "retentionPolicy": {
                              "enabled": false,
                              "days": 0
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/publicIPAddresses', format('{0}-{1}{2}-publicip{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1)))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "PIPID": {
                      "type": "array",
                      "copy": {
                        "count": "[length(parameters('NICs'))]",
                        "input": "[if(and(contains(parameters('NICs')[copyIndex()], 'PublicIP'), not(equals(parameters('NICs')[copyIndex()].PublicIP, null()))), resourceId('Microsoft.Network/publicIPAddresses', format('{0}-{1}{2}-publicip{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1))), '')]"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-VNET', variables('Deployment')))]"
      ]
    },
    {
      "condition": "[and(contains(parameters('Stage'), 'CloudShellRelay'), bool(parameters('Stage').CloudShellRelay))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('dp{0}-Relay', variables('Deployment'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "DeploymentID": {
            "value": "[parameters('DeploymentID')]"
          },
          "DeploymentInfo": {
            "value": "[parameters('DeploymentInfo')]"
          },
          "Environment": {
            "value": "[parameters('Environment')]"
          },
          "Extensions": {
            "value": "[parameters('Extensions')]"
          },
          "Global": {
            "value": "[parameters('Global')]"
          },
          "Prefix": {
            "value": "[parameters('Prefix')]"
          },
          "Stage": {
            "value": "[parameters('Stage')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "13587004283779692974"
            }
          },
          "parameters": {
            "Prefix": {
              "type": "string"
            },
            "Environment": {
              "type": "string",
              "defaultValue": "D",
              "allowedValues": [
                "I",
                "D",
                "T",
                "U",
                "P",
                "S",
                "G",
                "A"
              ]
            },
            "DeploymentID": {
              "type": "string",
              "defaultValue": "1",
              "allowedValues": [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9"
              ]
            },
            "Stage": {
              "type": "object"
            },
            "Extensions": {
              "type": "object"
            },
            "Global": {
              "type": "object"
            },
            "DeploymentInfo": {
              "type": "object"
            }
          },
          "variables": {
            "copy": [
              {
                "name": "azRelay",
                "count": "[length(range(0, length(variables('azRelayInfo'))))]",
                "input": {
                  "match": "[or(equals(parameters('Global').CN, '.'), contains(array(parameters('Global').CN), parameters('DeploymentInfo').frontDoorInfo[range(0, length(variables('azRelayInfo')))[copyIndex('azRelay')]].Name))]"
                }
              }
            ],
            "Deployment": "[format('{0}-{1}-{2}-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID'))]",
            "DeploymentURI": "[toLower(format('{0}{1}{2}{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID')))]",
            "HubRGJ": "[json(parameters('Global').hubRG)]",
            "gh": {
              "hubRGPrefix": "[if(contains(variables('HubRGJ'), 'Prefix'), variables('HubRGJ').Prefix, parameters('Prefix'))]",
              "hubRGOrgName": "[if(contains(variables('HubRGJ'), 'OrgName'), variables('HubRGJ').OrgName, parameters('Global').OrgName)]",
              "hubRGAppName": "[if(contains(variables('HubRGJ'), 'AppName'), variables('HubRGJ').AppName, parameters('Global').AppName)]",
              "hubRGRGName": "[if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID'))))]"
            },
            "HubRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').hubRGPrefix, variables('gh').hubRGOrgName, variables('gh').hubRGAppName, variables('gh').hubRGRGName)]",
            "azRelayInfo": "[if(contains(parameters('DeploymentInfo'), 'cloudshellRelayInfo'), parameters('DeploymentInfo').cloudshellRelayInfo, createArray())]"
          },
          "resources": [
            {
              "condition": "[variables('azRelay')[copyIndex()].match]",
              "copy": {
                "name": "RELAY",
                "count": "[length(variables('azRelayInfo'))]"
              },
              "type": "Microsoft.Relay/namespaces",
              "apiVersion": "2018-01-01-preview",
              "name": "[format('{0}-relay{1}', variables('Deployment'), variables('azRelayInfo')[copyIndex()].Name)]",
              "location": "[resourceGroup().location]",
              "sku": {
                "name": "Standard",
                "tier": "Standard"
              }
            },
            {
              "condition": "[variables('azRelay')[copyIndex()].match]",
              "copy": {
                "name": "networkProfile",
                "count": "[length(variables('azRelayInfo'))]"
              },
              "type": "Microsoft.Network/networkProfiles",
              "apiVersion": "2021-05-01",
              "name": "[format('networkProfile-{0}', variables('azRelayInfo')[copyIndex()].Name)]",
              "location": "[resourceGroup().location]",
              "properties": {
                "containerNetworkInterfaceConfigurations": [
                  {
                    "name": "[format('eth-{0}', variables('azRelayInfo')[copyIndex()].ContainerSubnet)]",
                    "properties": {
                      "ipConfigurations": [
                        {
                          "name": "[format('ipconfig-{0}', variables('azRelayInfo')[copyIndex()].ContainerSubnet)]",
                          "properties": {
                            "subnet": {
                              "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', format('{0}-vn', variables('Deployment')), variables('azRelayInfo')[copyIndex()].ContainerSubnet)]"
                            }
                          }
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "condition": "[and(variables('azRelay')[copyIndex()].match, contains(variables('azRelayInfo')[copyIndex()], 'privatelinkinfo'))]",
              "copy": {
                "name": "vnetPrivateLink",
                "count": "[length(variables('azRelayInfo'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dp{0}-privatelinkloop{1}', variables('Deployment'), variables('azRelayInfo')[copyIndex()].name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "Deployment": {
                    "value": "[variables('Deployment')]"
                  },
                  "DeploymentURI": {
                    "value": "[variables('DeploymentURI')]"
                  },
                  "PrivateLinkInfo": {
                    "value": "[variables('azRelayInfo')[copyIndex()].privateLinkInfo]"
                  },
                  "providerType": {
                    "value": "Microsoft.Relay/namespaces"
                  },
                  "resourceName": {
                    "value": "[format('{0}-relay{1}', variables('Deployment'), variables('azRelayInfo')[copyIndex()].Name)]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1318.3566",
                      "templateHash": "1242957729837230630"
                    }
                  },
                  "parameters": {
                    "Deployment": {
                      "type": "string"
                    },
                    "DeploymentURI": {
                      "type": "string"
                    },
                    "PrivateLinkInfo": {
                      "type": "array"
                    },
                    "providerType": {
                      "type": "string"
                    },
                    "resourceName": {
                      "type": "string"
                    },
                    "resourceRG": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().name]"
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "privateLink",
                        "count": "[length(parameters('PrivateLinkInfo'))]",
                        "input": {
                          "name": "[format('{0}-pl{1}', parameters('Deployment'), parameters('PrivateLinkInfo')[copyIndex('privateLink')].Subnet)]",
                          "vNet": "[format('{0}-vn', parameters('Deployment'))]"
                        }
                      }
                    ]
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "subnetPrivateEndpoint",
                        "count": "[length(parameters('PrivateLinkInfo'))]"
                      },
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2019-11-01",
                      "name": "[format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet)]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "privateLinkServiceConnections": [
                          {
                            "name": "[format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet)]",
                            "properties": {
                              "privateLinkServiceId": "[resourceId(parameters('resourceRG'), parameters('providerType'), parameters('resourceName'))]",
                              "groupIds": "[array(parameters('PrivateLinkInfo')[copyIndex()].groupID)]",
                              "privateLinkServiceConnectionState": {
                                "status": "Approved",
                                "description": "Auto-Approved",
                                "actionsRequired": "None"
                              }
                            }
                          }
                        ],
                        "manualPrivateLinkServiceConnections": [],
                        "subnet": {
                          "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('privateLink')[copyIndex()].vNet, parameters('PrivateLinkInfo')[copyIndex()].Subnet)]"
                        }
                      }
                    },
                    {
                      "copy": {
                        "name": "NICDiags",
                        "count": "[length(parameters('PrivateLinkInfo'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp-{0}-pl-{1}-{2}-diags', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "DeploymentURI": {
                            "value": "[parameters('DeploymentURI')]"
                          },
                          "NICName": {
                            "value": "[last(split(reference(resourceId('Microsoft.Network/privateEndpoints', format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet))).networkInterfaces[0].id, '/'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "3372180053977311610"
                            }
                          },
                          "parameters": {
                            "DeploymentURI": {
                              "type": "string"
                            },
                            "NICName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Network/networkInterfaces/{0}', parameters('NICName'))]",
                              "name": "service",
                              "properties": {
                                "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                                "metrics": [
                                  {
                                    "timeGrain": "PT5M",
                                    "enabled": true,
                                    "retentionPolicy": {
                                      "enabled": false,
                                      "days": 0
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "NICID": {
                      "type": "array",
                      "copy": {
                        "count": "[length(parameters('PrivateLinkInfo'))]",
                        "input": "[reference(resourceId('Microsoft.Network/privateEndpoints', format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet))).networkInterfaces[0].id]"
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Relay/namespaces', format('{0}-relay{1}', variables('Deployment'), variables('azRelayInfo')[copyIndex()].Name))]",
                "[resourceId('Microsoft.Relay/namespaces', format('{0}-relay{1}', variables('Deployment'), variables('azRelayInfo')[copyIndex()].Name))]"
              ]
            },
            {
              "condition": "[and(variables('azRelay')[copyIndex()].match, contains(variables('azRelayInfo')[copyIndex()], 'privatelinkinfo'))]",
              "copy": {
                "name": "RCprivateLinkDNS",
                "count": "[length(variables('azRelayInfo'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dp{0}-registerPrivateDNS{1}', variables('Deployment'), variables('azRelayInfo')[copyIndex()].name)]",
              "resourceGroup": "[variables('HubRGName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "PrivateLinkInfo": {
                    "value": "[variables('azRelayInfo')[copyIndex()].privateLinkInfo]"
                  },
                  "providerURL": {
                    "value": "windows.net"
                  },
                  "resourceName": {
                    "value": "[format('{0}-relay{1}', variables('Deployment'), variables('azRelayInfo')[copyIndex()].Name)]"
                  },
                  "providerType": {
                    "value": "Microsoft.Relay/namespaces"
                  },
                  "Nics": {
                    "value": "[if(contains(variables('azRelayInfo')[copyIndex()], 'privatelinkinfo'), array(reference(resourceId('Microsoft.Resources/deployments', format('dp{0}-privatelinkloop{1}', variables('Deployment'), variables('azRelayInfo')[copyIndex()].name)), '2020-10-01').outputs.NICID.value), array('na'))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1318.3566",
                      "templateHash": "9527034148045878947"
                    }
                  },
                  "parameters": {
                    "PrivateLinkInfo": {
                      "type": "array"
                    },
                    "resourceName": {
                      "type": "string"
                    },
                    "providerURL": {
                      "type": "string"
                    },
                    "providerType": {
                      "type": "string"
                    },
                    "Nics": {
                      "type": "array"
                    }
                  },
                  "variables": {
                    "DNSLookup": {
                      "Microsoft.AzureCosmosDB/databaseAccounts/SQL": "documents",
                      "Microsoft.AzureCosmosDB/databaseAccounts/MongoDB": "mongo.cosmos",
                      "Microsoft.AzureCosmosDB/databaseAccounts/Cassandra": "cassandra.cosmos",
                      "Microsoft.AzureCosmosDB/databaseAccounts/Gremlin": "gremlin.cosmos",
                      "Microsoft.AzureCosmosDB/databaseAccounts/Table": "table.cosmos",
                      "Microsoft.KeyVault/vaults": "vaultcore",
                      "Microsoft.DBforMySQL/servers": "mysql",
                      "Microsoft.DBforMariaDB/servers": "mariadb",
                      "Microsoft.AppConfiguration/configurationStores": "azconfig",
                      "Microsoft.ServiceBus/namespaces": "servicebus",
                      "Microsoft.Sql/servers": "database",
                      "Microsoft.Cache/redis": "redis.cache",
                      "Microsoft.Web/sites": "azurewebsites",
                      "Microsoft.Synapse/workspaces": "sql",
                      "Microsoft.ApiManagement/service": "azure-api"
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "privateLinkDNS",
                        "count": "[length(parameters('PrivateLinkInfo'))]"
                      },
                      "type": "Microsoft.Network/privateDnsZones/A",
                      "apiVersion": "2020-06-01",
                      "name": "[format('privatelink.{0}.{1}/{2}', if(contains(variables('DNSLookup'), parameters('providerType')), variables('DNSLookup')[parameters('providerType')], parameters('PrivateLinkInfo')[copyIndex()].groupID), parameters('providerURL'), parameters('resourceName'))]",
                      "properties": {
                        "ttl": 3600,
                        "aRecords": [
                          {
                            "ipv4Address": "[reference(parameters('Nics')[copyIndex()], '2018-05-01').ipConfigurations[0].properties.privateIPAddress]"
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Relay/namespaces', format('{0}-relay{1}', variables('Deployment'), variables('azRelayInfo')[copyIndex()].Name))]",
                "[resourceId('Microsoft.Relay/namespaces', format('{0}-relay{1}', variables('Deployment'), variables('azRelayInfo')[copyIndex()].Name))]",
                "[resourceId('Microsoft.Resources/deployments', format('dp{0}-privatelinkloop{1}', variables('Deployment'), variables('azRelayInfo')[copyIndex()].name))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-VNET', variables('Deployment')))]"
      ]
    },
    {
      "condition": "[bool(parameters('Stage').DNSPrivateZone)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('dp{0}-DNSPrivateZone', variables('Deployment'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "DeploymentID": {
            "value": "[parameters('DeploymentID')]"
          },
          "DeploymentInfo": {
            "value": "[parameters('DeploymentInfo')]"
          },
          "Environment": {
            "value": "[parameters('Environment')]"
          },
          "Extensions": {
            "value": "[parameters('Extensions')]"
          },
          "Global": {
            "value": "[parameters('Global')]"
          },
          "Prefix": {
            "value": "[parameters('Prefix')]"
          },
          "Stage": {
            "value": "[parameters('Stage')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "10726633436085584836"
            }
          },
          "parameters": {
            "Prefix": {
              "type": "string"
            },
            "Environment": {
              "type": "string",
              "defaultValue": "D",
              "allowedValues": [
                "I",
                "D",
                "T",
                "U",
                "P",
                "S",
                "G",
                "A"
              ]
            },
            "DeploymentID": {
              "type": "string",
              "defaultValue": "1",
              "allowedValues": [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9"
              ]
            },
            "Stage": {
              "type": "object"
            },
            "Extensions": {
              "type": "object"
            },
            "Global": {
              "type": "object"
            },
            "DeploymentInfo": {
              "type": "object"
            }
          },
          "variables": {
            "Deployment": "[format('{0}-{1}-{2}-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID'))]",
            "DNSPrivateZoneInfo": "[if(contains(parameters('DeploymentInfo'), 'DNSPrivateZoneInfo'), parameters('DeploymentInfo').DNSPrivateZoneInfo, createArray())]"
          },
          "resources": [
            {
              "copy": {
                "name": "DNSPrivateZone",
                "count": "[length(variables('DNSPrivateZoneInfo'))]"
              },
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[if(not(equals(length(variables('DNSPrivateZoneInfo')), 0)), variables('DNSPrivateZoneInfo')[copyIndex()].zone, 'na')]",
              "location": "global",
              "properties": {}
            },
            {
              "condition": "[and(bool(variables('DNSPrivateZoneInfo')[copyIndex()].linkDNS), bool(parameters('Stage').LinkPrivateDns))]",
              "copy": {
                "name": "DNSPrivateZoneVNETLink",
                "count": "[length(variables('DNSPrivateZoneInfo'))]"
              },
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', if(not(equals(length(variables('DNSPrivateZoneInfo')), 0)), variables('DNSPrivateZoneInfo')[copyIndex()].zone, 'na'), format('{0}-vn-{1}', variables('Deployment'), variables('DNSPrivateZoneInfo')[copyIndex()].zone))]",
              "location": "global",
              "properties": {
                "registrationEnabled": "[variables('DNSPrivateZoneInfo')[copyIndex()].Autoregistration]",
                "virtualNetwork": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks', format('{0}-vn', variables('Deployment')))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', if(not(equals(length(variables('DNSPrivateZoneInfo')), 0)), variables('DNSPrivateZoneInfo')[copyIndex()].zone, 'na'))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-VNET', variables('Deployment')))]"
      ]
    },
    {
      "condition": "[and(contains(parameters('Stage'), 'DNSPublicZone'), bool(parameters('Stage').DNSPublicZone))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('dp{0}-DNSPublicZone', variables('Deployment'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "DeploymentID": {
            "value": "[parameters('DeploymentID')]"
          },
          "DeploymentInfo": {
            "value": "[parameters('DeploymentInfo')]"
          },
          "Environment": {
            "value": "[parameters('Environment')]"
          },
          "Extensions": {
            "value": "[parameters('Extensions')]"
          },
          "Global": {
            "value": "[parameters('Global')]"
          },
          "Prefix": {
            "value": "[parameters('Prefix')]"
          },
          "Stage": {
            "value": "[parameters('Stage')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "14151163842568251844"
            }
          },
          "parameters": {
            "Prefix": {
              "type": "string"
            },
            "Environment": {
              "type": "string",
              "defaultValue": "D",
              "allowedValues": [
                "I",
                "D",
                "T",
                "U",
                "P",
                "S",
                "G",
                "A"
              ]
            },
            "DeploymentID": {
              "type": "string",
              "defaultValue": "1",
              "allowedValues": [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9"
              ]
            },
            "Stage": {
              "type": "object"
            },
            "Extensions": {
              "type": "object"
            },
            "Global": {
              "type": "object"
            },
            "DeploymentInfo": {
              "type": "object"
            }
          },
          "variables": {
            "copy": [
              {
                "name": "ZoneInfo",
                "count": "[length(variables('DNSPublicZoneInfo'))]",
                "input": {
                  "match": "[or(equals(parameters('Global').CN, '.'), contains(array(parameters('Global').CN), variables('DNSPublicZoneInfo')[copyIndex('ZoneInfo')]))]"
                }
              }
            ],
            "DNSPublicZoneInfo": "[if(contains(parameters('DeploymentInfo'), 'DNSPublicZoneInfo'), parameters('DeploymentInfo').DNSPublicZoneInfo, createArray())]"
          },
          "resources": [
            {
              "condition": "[variables('ZoneInfo')[copyIndex()].match]",
              "copy": {
                "name": "DNSPublicZone",
                "count": "[length(variables('DNSPublicZoneInfo'))]"
              },
              "type": "Microsoft.Network/dnsZones",
              "apiVersion": "2018-05-01",
              "name": "[if(not(equals(length(variables('DNSPublicZoneInfo')), 0)), variables('DNSPublicZoneInfo')[copyIndex()], 'na')]",
              "location": "global",
              "properties": {
                "zoneType": "Public"
              }
            }
          ]
        }
      }
    },
    {
      "condition": "[bool(parameters('Stage').ERGW)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('dp{0}ERGW', variables('Deployment'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "DeploymentID": {
            "value": "[parameters('DeploymentID')]"
          },
          "DeploymentInfo": {
            "value": "[parameters('DeploymentInfo')]"
          },
          "Environment": {
            "value": "[parameters('Environment')]"
          },
          "Extensions": {
            "value": "[parameters('Extensions')]"
          },
          "Global": {
            "value": "[parameters('Global')]"
          },
          "Prefix": {
            "value": "[parameters('Prefix')]"
          },
          "Stage": {
            "value": "[parameters('Stage')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "8338759583971707902"
            }
          },
          "parameters": {
            "Prefix": {
              "type": "string"
            },
            "Environment": {
              "type": "string",
              "defaultValue": "D",
              "allowedValues": [
                "I",
                "D",
                "T",
                "U",
                "P",
                "S",
                "G",
                "A"
              ]
            },
            "DeploymentID": {
              "type": "string",
              "defaultValue": "1",
              "allowedValues": [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9"
              ]
            },
            "Stage": {
              "type": "object"
            },
            "Extensions": {
              "type": "object"
            },
            "Global": {
              "type": "object"
            },
            "DeploymentInfo": {
              "type": "object"
            },
            "deploymentTime": {
              "type": "string",
              "defaultValue": "[utcNow()]"
            }
          },
          "variables": {
            "copy": [
              {
                "name": "GW",
                "count": "[length(variables('ERGWInfo'))]",
                "input": {
                  "match": "[or(equals(parameters('Global').CN, '.'), contains(array(parameters('Global').CN), variables('ERGWInfo')[copyIndex('GW')].Name))]"
                }
              }
            ],
            "Deployment": "[format('{0}-{1}{2}-{3}', parameters('Prefix'), parameters('Environment'), parameters('DeploymentID'), parameters('Global').AppName)]",
            "DeploymentURI": "[toLower(format('{0}{1}{2}{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID')))]",
            "GatewaySubnetName": "gatewaySubnet",
            "ERGWInfo": "[if(contains(parameters('DeploymentInfo'), 'ERGWInfo'), parameters('DeploymentInfo').ERGWInfo, createArray())]"
          },
          "resources": [
            {
              "condition": "[variables('GW')[copyIndex()].match]",
              "copy": {
                "name": "ERGWPublicIP",
                "count": "[length(variables('ERGWInfo'))]"
              },
              "type": "Microsoft.Network/publicIPAddresses",
              "apiVersion": "2021-02-01",
              "name": "[format('{0}-vn{1}-publicip1', variables('Deployment'), variables('ERGWInfo')[copyIndex()].Name)]",
              "location": "[resourceGroup().location]",
              "sku": {
                "name": "Standard"
              },
              "zones": [
                "1",
                "2",
                "3"
              ],
              "properties": {
                "publicIPAllocationMethod": "Static",
                "dnsSettings": {
                  "domainNameLabel": "[toLower(format('{0}-{1}', variables('Deployment'), variables('ERGWInfo')[copyIndex()].Name))]"
                }
              }
            },
            {
              "condition": "[variables('GW')[copyIndex()].match]",
              "copy": {
                "name": "ERGWPublicIPDiag",
                "count": "[length(variables('ERGWInfo'))]"
              },
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2017-05-01-preview",
              "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', format('{0}-vn{1}-publicip1', variables('Deployment'), variables('ERGWInfo')[copyIndex()].Name))]",
              "name": "service",
              "properties": {
                "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', variables('DeploymentURI')))]",
                "logs": [
                  {
                    "category": "DDoSProtectionNotifications",
                    "enabled": true
                  }
                ],
                "metrics": [
                  {
                    "timeGrain": "PT5M",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": false,
                      "days": 0
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', format('{0}-vn{1}-publicip1', variables('Deployment'), variables('ERGWInfo')[copyIndex()].Name))]"
              ]
            },
            {
              "condition": "[variables('GW')[copyIndex()].match]",
              "copy": {
                "name": "ERGW",
                "count": "[length(variables('ERGWInfo'))]"
              },
              "type": "Microsoft.Network/virtualNetworkGateways",
              "apiVersion": "2018-11-01",
              "name": "[format('{0}-vn{1}', variables('Deployment'), variables('ERGWInfo')[copyIndex()].Name)]",
              "location": "[resourceGroup().location]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "vnetGatewayConfig",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "subnet": {
                        "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', split(format('{0}-vn/{1}', variables('Deployment'), variables('GatewaySubnetName')), '/')[0], split(format('{0}-vn/{1}', variables('Deployment'), variables('GatewaySubnetName')), '/')[1])]"
                      },
                      "publicIPAddress": {
                        "id": "[resourceId('Microsoft.Network/publicIPAddresses', format('{0}-vn{1}-publicip1', variables('Deployment'), variables('ERGWInfo')[copyIndex()].Name))]"
                      }
                    }
                  }
                ],
                "sku": {
                  "name": "[variables('ERGWInfo')[copyIndex()].skuname]",
                  "tier": "[variables('ERGWInfo')[copyIndex()].skutier]",
                  "capacity": "[variables('ERGWInfo')[copyIndex()].skucapacity]"
                },
                "gatewayType": "[variables('ERGWInfo')[copyIndex()].gatewayType]",
                "vpnType": "[variables('ERGWInfo')[copyIndex()].vpnType]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', format('{0}-vn{1}-publicip1', variables('Deployment'), variables('ERGWInfo')[copyIndex()].Name))]"
              ]
            },
            {
              "condition": "[and(variables('ERGWInfo')[copyIndex()].ERConnectionOptions.EREnableConnection, variables('GW')[copyIndex()].match)]",
              "copy": {
                "name": "ERGWConnection",
                "count": "[length(variables('ERGWInfo'))]"
              },
              "type": "Microsoft.Network/connections",
              "apiVersion": "2018-11-01",
              "name": "[format('{0}-vn{1}-connection-{2}', variables('Deployment'), variables('ERGWInfo')[copyIndex()].Name, variables('ERGWInfo')[copyIndex()].ERConnectionOptions.Name)]",
              "location": "[resourceGroup().location]",
              "properties": {
                "virtualNetworkGateway1": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworkGateways', format('{0}-vn{1}', variables('Deployment'), variables('ERGWInfo')[copyIndex()].Name))]",
                  "properties": {}
                },
                "connectionType": "[variables('ERGWInfo')[copyIndex()].ERConnectionOptions.connectionType]",
                "routingWeight": 0,
                "enableBgp": false,
                "usePolicyBasedTrafficSelectors": false,
                "ipsecPolicies": [],
                "authorizationKey": "[if(contains(variables('ERGWInfo')[copyIndex()].ERConnectionOptions, 'ERAuthKey'), variables('ERGWInfo')[copyIndex()].ERConnectionOptions.ERAuthKey, json('null'))]",
                "peer": {
                  "id": "[variables('ERGWInfo')[copyIndex()].ERConnectionOptions.peerid]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworkGateways', format('{0}-vn{1}', variables('Deployment'), variables('ERGWInfo')[copyIndex()].Name))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-OMS', variables('Deployment')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-VNET', variables('Deployment')))]"
      ]
    },
    {
      "condition": "[bool(parameters('Stage').LB)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('dp{0}-LB', variables('Deployment'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "DeploymentID": {
            "value": "[parameters('DeploymentID')]"
          },
          "DeploymentInfo": {
            "value": "[parameters('DeploymentInfo')]"
          },
          "Environment": {
            "value": "[parameters('Environment')]"
          },
          "Extensions": {
            "value": "[parameters('Extensions')]"
          },
          "Global": {
            "value": "[parameters('Global')]"
          },
          "Prefix": {
            "value": "[parameters('Prefix')]"
          },
          "Stage": {
            "value": "[parameters('Stage')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "11283013050633055535"
            }
          },
          "parameters": {
            "Prefix": {
              "type": "string"
            },
            "Environment": {
              "type": "string",
              "defaultValue": "D",
              "allowedValues": [
                "I",
                "D",
                "T",
                "U",
                "P",
                "S",
                "G",
                "A"
              ]
            },
            "DeploymentID": {
              "type": "string",
              "defaultValue": "1",
              "allowedValues": [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9"
              ]
            },
            "Stage": {
              "type": "object"
            },
            "Extensions": {
              "type": "object"
            },
            "Global": {
              "type": "object"
            },
            "DeploymentInfo": {
              "type": "object"
            }
          },
          "variables": {
            "copy": [
              {
                "name": "LB",
                "count": "[length(variables('LBInfo'))]",
                "input": {
                  "match": "[or(equals(parameters('Global').CN, '.'), contains(array(parameters('Global').CN), variables('LBInfo')[copyIndex('LB')].Name))]"
                }
              }
            ],
            "Deployment": "[format('{0}-{1}-{2}-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID'))]",
            "DeploymentURI": "[toLower(format('{0}{1}{2}{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID')))]",
            "subscriptionId": "[subscription().subscriptionId]",
            "Domain": "[split(parameters('Global').DomainName, '.')[0]]",
            "resourceGroupName": "[resourceGroup().name]",
            "VNetID": "[resourceId(variables('subscriptionId'), variables('resourceGroupName'), 'Microsoft.Network/VirtualNetworks', format('{0}-vn', variables('Deployment')))]",
            "networkId": "[format('{0}{1}', parameters('Global').networkid[0], string(sub(parameters('Global').networkid[1], mul(2, int(parameters('DeploymentID'))))))]",
            "networkIdUpper": "[format('{0}{1}', parameters('Global').networkid[0], string(add(1, sub(parameters('Global').networkid[1], mul(2, int(parameters('DeploymentID')))))))]",
            "LBInfo": "[if(contains(parameters('DeploymentInfo'), 'LBInfo'), parameters('DeploymentInfo').LBInfo, createArray())]"
          },
          "resources": [
            {
              "condition": "[variables('LB')[copyIndex()].match]",
              "copy": {
                "name": "PublicIP",
                "count": "[length(variables('LBInfo'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dp{0}-LB-publicIPDeploy{1}', variables('Deployment'), variables('LBInfo')[copyIndex()].Name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "Deployment": {
                    "value": "[variables('Deployment')]"
                  },
                  "DeploymentURI": {
                    "value": "[variables('DeploymentURI')]"
                  },
                  "NICs": {
                    "value": "[variables('LBInfo')[copyIndex()].FrontEnd]"
                  },
                  "VM": {
                    "value": "[variables('LBInfo')[copyIndex()]]"
                  },
                  "PIPprefix": {
                    "value": "lb"
                  },
                  "Global": {
                    "value": "[parameters('Global')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1318.3566",
                      "templateHash": "18109364379899578760"
                    }
                  },
                  "parameters": {
                    "Deployment": {
                      "type": "string"
                    },
                    "DeploymentURI": {
                      "type": "string"
                    },
                    "PIPprefix": {
                      "type": "string"
                    },
                    "NICs": {
                      "type": "array"
                    },
                    "VM": {
                      "type": "object"
                    },
                    "Global": {
                      "type": "object"
                    }
                  },
                  "resources": [
                    {
                      "condition": "[and(contains(parameters('NICs')[copyIndex()], 'PublicIP'), not(equals(parameters('NICs')[copyIndex()].PublicIP, null())))]",
                      "copy": {
                        "name": "PublicIP",
                        "count": "[length(parameters('NICs'))]"
                      },
                      "type": "Microsoft.Network/publicIPAddresses",
                      "apiVersion": "2021-02-01",
                      "name": "[format('{0}-{1}{2}-publicip{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1))]",
                      "location": "[resourceGroup().location]",
                      "sku": {
                        "name": "[if(contains(parameters('VM'), 'Zone'), 'Standard', 'Basic')]"
                      },
                      "properties": {
                        "publicIPAllocationMethod": "[parameters('NICs')[copyIndex()].PublicIP]",
                        "dnsSettings": {
                          "domainNameLabel": "[toLower(format('{0}-{1}{2}-{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1)))]"
                        }
                      }
                    },
                    {
                      "condition": "[and(contains(parameters('NICs')[copyIndex()], 'PublicIP'), not(equals(parameters('NICs')[copyIndex()].PublicIP, null())))]",
                      "copy": {
                        "name": "PublicIPDiag",
                        "count": "[length(parameters('NICs'))]"
                      },
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2017-05-01-preview",
                      "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', format('{0}-{1}{2}-publicip{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1)))]",
                      "name": "service",
                      "properties": {
                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                        "logs": [
                          {
                            "category": "DDoSProtectionNotifications",
                            "enabled": true
                          }
                        ],
                        "metrics": [
                          {
                            "timeGrain": "PT5M",
                            "enabled": true,
                            "retentionPolicy": {
                              "enabled": false,
                              "days": 0
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/publicIPAddresses', format('{0}-{1}{2}-publicip{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1)))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "PIPID": {
                      "type": "array",
                      "copy": {
                        "count": "[length(parameters('NICs'))]",
                        "input": "[if(and(contains(parameters('NICs')[copyIndex()], 'PublicIP'), not(equals(parameters('NICs')[copyIndex()].PublicIP, null()))), resourceId('Microsoft.Network/publicIPAddresses', format('{0}-{1}{2}-publicip{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1))), '')]"
                      }
                    }
                  }
                }
              }
            },
            {
              "condition": "[variables('LB')[copyIndex()].match]",
              "copy": {
                "name": "LBs",
                "count": "[length(variables('LBInfo'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dp{0}-LB-Deploy{1}', variables('Deployment'), variables('LBInfo')[copyIndex()].Name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "Deployment": {
                    "value": "[variables('Deployment')]"
                  },
                  "DeploymentURI": {
                    "value": "[variables('DeploymentURI')]"
                  },
                  "DeploymentID": {
                    "value": "[parameters('DeploymentID')]"
                  },
                  "backEndPools": {
                    "value": "[if(contains(variables('LBInfo')[copyIndex()], 'BackEnd'), variables('LBInfo')[copyIndex()].BackEnd, json('[]'))]"
                  },
                  "NATRules": {
                    "value": "[if(contains(variables('LBInfo')[copyIndex()], 'NATRules'), variables('LBInfo')[copyIndex()].NATRules, json('[]'))]"
                  },
                  "NATPools": {
                    "value": "[if(contains(variables('LBInfo')[copyIndex()], 'NATPools'), variables('LBInfo')[copyIndex()].NATPools, json('[]'))]"
                  },
                  "outboundRules": {
                    "value": "[if(contains(variables('LBInfo')[copyIndex()], 'outboundRules'), variables('LBInfo')[copyIndex()].outboundRules, json('[]'))]"
                  },
                  "Services": {
                    "value": "[if(contains(variables('LBInfo')[copyIndex()], 'Services'), variables('LBInfo')[copyIndex()].Services, json('[]'))]"
                  },
                  "probes": {
                    "value": "[if(contains(variables('LBInfo')[copyIndex()], 'probes'), variables('LBInfo')[copyIndex()].probes, json('[]'))]"
                  },
                  "LB": {
                    "value": "[variables('LBInfo')[copyIndex()]]"
                  },
                  "Global": {
                    "value": "[parameters('Global')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1318.3566",
                      "templateHash": "2448424112101555952"
                    }
                  },
                  "parameters": {
                    "Deployment": {
                      "type": "string"
                    },
                    "DeploymentURI": {
                      "type": "string"
                    },
                    "DeploymentID": {
                      "type": "string"
                    },
                    "backEndPools": {
                      "type": "array",
                      "defaultValue": []
                    },
                    "NATRules": {
                      "type": "array",
                      "defaultValue": []
                    },
                    "NATPools": {
                      "type": "array",
                      "defaultValue": []
                    },
                    "outboundRules": {
                      "type": "array",
                      "defaultValue": []
                    },
                    "Services": {
                      "type": "array",
                      "defaultValue": []
                    },
                    "probes": {
                      "type": "array",
                      "defaultValue": []
                    },
                    "LB": {
                      "type": "object"
                    },
                    "Global": {
                      "type": "object"
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "frontendIPConfigurationsPrivate",
                        "count": "[length(parameters('LB').FrontEnd)]",
                        "input": {
                          "name": "[parameters('LB').FrontEnd[copyIndex('frontendIPConfigurationsPrivate')].LBFEName]",
                          "properties": {
                            "privateIPAllocationMethod": "Static",
                            "privateIPAddress": "[format('{0}.{1}', if(and(contains(parameters('LB').FrontEnd[copyIndex('frontendIPConfigurationsPrivate')], 'SNName'), equals(parameters('LB').FrontEnd[copyIndex('frontendIPConfigurationsPrivate')].SNName, 'MT02')), variables('networkIdUpper'), variables('networkId')), if(contains(parameters('LB').FrontEnd[copyIndex('frontendIPConfigurationsPrivate')], 'LBFEIP'), parameters('LB').FrontEnd[copyIndex('frontendIPConfigurationsPrivate')].LBFEIP, 'NA'))]",
                            "subnet": {
                              "id": "[format('{0}/subnets/sn{1}', resourceId('Microsoft.Network/virtualNetworks', format('{0}-vn', parameters('Deployment'))), if(contains(parameters('LB').FrontEnd[copyIndex('frontendIPConfigurationsPrivate')], 'SNName'), parameters('LB').FrontEnd[copyIndex('frontendIPConfigurationsPrivate')].SNName, 'NA'))]"
                            }
                          }
                        }
                      },
                      {
                        "name": "frontendIPConfigurationsPublic",
                        "count": "[length(parameters('LB').FrontEnd)]",
                        "input": {
                          "name": "[parameters('LB').FrontEnd[copyIndex('frontendIPConfigurationsPublic')].LBFEName]",
                          "properties": {
                            "publicIPAddress": {
                              "id": "[string(resourceId('Microsoft.Network/publicIPAddresses', format('{0}-publicip{1}', variables('lbname'), add(copyIndex('frontendIPConfigurationsPublic'), 1))))]"
                            }
                          }
                        }
                      },
                      {
                        "name": "backEndPoolsObject",
                        "count": "[length(parameters('backEndPools'))]",
                        "input": {
                          "name": "[parameters('backEndPools')[copyIndex('backEndPoolsObject')]]"
                        }
                      },
                      {
                        "name": "NATPoolsObject",
                        "count": "[length(parameters('NATPools'))]",
                        "input": {
                          "name": "[parameters('NATPools')[copyIndex('NATPoolsObject')].Name]",
                          "properties": {
                            "protocol": "[parameters('NATPools')[copyIndex('NATPoolsObject')].protocol]",
                            "frontendPortRangeStart": "[parameters('NATPools')[copyIndex('NATPoolsObject')].frontendPortRangeStart]",
                            "frontendPortRangeEnd": "[parameters('NATPools')[copyIndex('NATPoolsObject')].frontendPortRangeEnd]",
                            "backendPort": "[parameters('NATPools')[copyIndex('NATPoolsObject')].backendPort]",
                            "frontendIPConfiguration": {
                              "id": "[format('{0}/frontendIPConfigurations/{1}', resourceId('Microsoft.Network/loadBalancers/', variables('lbname')), parameters('NATPools')[copyIndex('NATPoolsObject')].LBFEName)]"
                            }
                          }
                        }
                      },
                      {
                        "name": "probesObject",
                        "count": "[length(parameters('probes'))]",
                        "input": {
                          "name": "[parameters('probes')[copyIndex('probesObject')].ProbeName]",
                          "properties": {
                            "protocol": "Tcp",
                            "port": "[parameters('probes')[copyIndex('probesObject')].LBBEProbePort]",
                            "intervalInSeconds": 5,
                            "numberOfProbes": 2
                          }
                        }
                      },
                      {
                        "name": "loadBalancingRules",
                        "count": "[length(parameters('Services'))]",
                        "input": {
                          "name": "[parameters('Services')[copyIndex('loadBalancingRules')].RuleName]",
                          "properties": {
                            "frontendIPConfiguration": {
                              "id": "[format('{0}/frontendIPConfigurations/{1}', resourceId('Microsoft.Network/loadBalancers/', variables('lbname')), parameters('Services')[copyIndex('loadBalancingRules')].LBFEName)]"
                            },
                            "backendAddressPool": {
                              "id": "[format('{0}/backendAddressPools/{1}', resourceId('Microsoft.Network/loadBalancers/', variables('lbname')), parameters('Services')[copyIndex('loadBalancingRules')].LBBEName)]"
                            },
                            "probe": {
                              "id": "[format('{0}/probes/{1}', resourceId('Microsoft.Network/loadBalancers/', variables('lbname')), parameters('Services')[copyIndex('loadBalancingRules')].ProbeName)]"
                            },
                            "protocol": "[if(contains(parameters('Services')[copyIndex('loadBalancingRules')], 'protocol'), parameters('Services')[copyIndex('loadBalancingRules')].Protocol, 'tcp')]",
                            "frontendPort": "[parameters('Services')[copyIndex('loadBalancingRules')].LBFEPort]",
                            "backendPort": "[parameters('Services')[copyIndex('loadBalancingRules')].LBBEPort]",
                            "enableFloatingIP": "[if(and(contains(parameters('Services')[copyIndex('loadBalancingRules')], 'DirectReturn'), equals(parameters('Services')[copyIndex('loadBalancingRules')].DirectReturn, bool('true'))), parameters('Services')[copyIndex('loadBalancingRules')].DirectReturn, bool('false'))]",
                            "loadDistribution": "[if(contains(parameters('Services')[copyIndex('loadBalancingRules')], 'Persistance'), parameters('Services')[copyIndex('loadBalancingRules')].Persistance, 'Default')]",
                            "disableOutboundSnat": false
                          }
                        }
                      },
                      {
                        "name": "outboundRulesObject",
                        "count": "[length(parameters('outboundRules'))]",
                        "input": {
                          "name": "[parameters('outboundRules')[copyIndex('outboundRulesObject')].LBFEName]",
                          "properties": {
                            "protocol": "[parameters('outboundRules')[copyIndex('outboundRulesObject')].protocol]",
                            "enableTcpReset": "[parameters('outboundRules')[copyIndex('outboundRulesObject')].enableTcpReset]",
                            "idleTimeoutInMinutes": "[parameters('outboundRules')[copyIndex('outboundRulesObject')].idleTimeoutInMinutes]",
                            "frontendIPConfigurations": [
                              {
                                "id": "[format('{0}/frontendIPConfigurations/{1}', resourceId('Microsoft.Network/loadBalancers/', variables('lbname')), parameters('outboundRules')[copyIndex('outboundRulesObject')].LBFEName)]"
                              }
                            ],
                            "backendAddressPool": {
                              "id": "[format('{0}/backendAddressPools/{1}', resourceId('Microsoft.Network/loadBalancers/', variables('lbname')), parameters('outboundRules')[copyIndex('outboundRulesObject')].LBFEName)]"
                            }
                          }
                        }
                      },
                      {
                        "name": "NATRulesObject",
                        "count": "[length(parameters('NATRules'))]",
                        "input": {
                          "name": "[parameters('NATRules')[copyIndex('NATRulesObject')].Name]",
                          "properties": {
                            "protocol": "[parameters('NATRules')[copyIndex('NATRulesObject')].protocol]",
                            "frontendPort": "[parameters('NATRules')[copyIndex('NATRulesObject')].frontendPort]",
                            "backendPort": "[parameters('NATRules')[copyIndex('NATRulesObject')].backendPort]",
                            "idleTimeoutInMinutes": "[parameters('NATRules')[copyIndex('NATRulesObject')].idleTimeoutInMinutes]",
                            "enableFloatingIP": "[parameters('NATRules')[copyIndex('NATRulesObject')].enableFloatingIP]",
                            "frontendIPConfiguration": {
                              "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', variables('lbname'), parameters('NATRules')[copyIndex('NATRulesObject')].LBFEName)]"
                            }
                          }
                        }
                      }
                    ],
                    "lbname": "[format('{0}-lb{1}', parameters('Deployment'), parameters('LB').Name)]",
                    "networkId": "[format('{0}{1}', parameters('Global').networkid[0], string(sub(parameters('Global').networkid[1], mul(2, int(parameters('DeploymentID'))))))]",
                    "networkIdUpper": "[format('{0}{1}', parameters('Global').networkid[0], string(add(1, sub(parameters('Global').networkid[1], mul(2, int(parameters('DeploymentID')))))))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/loadBalancers",
                      "apiVersion": "2021-02-01",
                      "name": "[variables('lbname')]",
                      "location": "[resourceGroup().location]",
                      "sku": "[if(not(contains(parameters('LB'), 'Sku')), null(), createObject('name', parameters('LB').Sku))]",
                      "properties": {
                        "backendAddressPools": "[variables('backEndPoolsObject')]",
                        "inboundNatPools": "[if(equals(length(parameters('NATPools')), 0), null(), variables('NATPoolsObject'))]",
                        "inboundNatRules": "[if(equals(length(parameters('NATRules')), 0), null(), variables('NATRulesObject'))]",
                        "outboundRules": "[variables('outboundRulesObject')]",
                        "loadBalancingRules": "[variables('loadBalancingRules')]",
                        "probes": "[variables('probesObject')]",
                        "frontendIPConfigurations": "[if(equals(parameters('LB').Type, 'Private'), variables('frontendIPConfigurationsPrivate'), variables('frontendIPConfigurationsPublic'))]"
                      }
                    },
                    {
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Network/loadBalancers/{0}', variables('lbname'))]",
                      "name": "service",
                      "properties": {
                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                        "logs": [
                          {
                            "category": "LoadBalancerAlertEvent",
                            "enabled": true
                          },
                          {
                            "category": "LoadBalancerProbeHealthStatus",
                            "enabled": true
                          }
                        ],
                        "metrics": [
                          {
                            "timeGrain": "PT5M",
                            "enabled": true,
                            "retentionPolicy": {
                              "enabled": false,
                              "days": 0
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/loadBalancers', variables('lbname'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "foo": {
                      "type": "array",
                      "value": "[parameters('NATRules')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "PublicIP"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-VNET', variables('Deployment')))]"
      ]
    },
    {
      "condition": "[or(bool(parameters('Stage').ADPrimary), and(contains(parameters('Stage'), 'CreateADPDC'), bool(parameters('Stage').CreateADPDC)))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('dp{0}-VNETDNSPublic', variables('Deployment'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "Deployment": {
            "value": "[variables('Deployment')]"
          },
          "DeploymentID": {
            "value": "[parameters('DeploymentID')]"
          },
          "Prefix": {
            "value": "[parameters('Prefix')]"
          },
          "DeploymentInfo": {
            "value": "[parameters('DeploymentInfo')]"
          },
          "Environment": {
            "value": "[parameters('Environment')]"
          },
          "DNSServers": {
            "value": [
              "[variables('DNSServers')[0]]",
              "[variables('AzureDNS')]"
            ]
          },
          "Global": {
            "value": "[parameters('Global')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "3160939652284819424"
            }
          },
          "parameters": {
            "Deployment": {
              "type": "string"
            },
            "DeploymentID": {
              "type": "string"
            },
            "DeploymentInfo": {
              "type": "object"
            },
            "DNSServers": {
              "type": "array"
            },
            "Global": {
              "type": "object"
            },
            "Prefix": {
              "type": "string"
            },
            "Environment": {
              "type": "string"
            }
          },
          "variables": {
            "HubRGJ": "[json(parameters('Global').hubRG)]",
            "gh": {
              "hubRGPrefix": "[if(contains(variables('HubRGJ'), 'Prefix'), variables('HubRGJ').Prefix, parameters('Prefix'))]",
              "hubRGOrgName": "[if(contains(variables('HubRGJ'), 'OrgName'), variables('HubRGJ').OrgName, parameters('Global').OrgName)]",
              "hubRGAppName": "[if(contains(variables('HubRGJ'), 'AppName'), variables('HubRGJ').AppName, parameters('Global').AppName)]",
              "hubRGRGName": "[if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID'))))]"
            },
            "HubRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').hubRGPrefix, variables('gh').hubRGOrgName, variables('gh').hubRGAppName, variables('gh').hubRGRGName)]",
            "HubVNName": "[format('{0}-{1}-{2}-{3}-vn', variables('gh').hubRGPrefix, variables('gh').hubRGOrgName, variables('gh').hubRGAppName, variables('gh').hubRGRGName)]",
            "networkId": "[format('{0}{1}', parameters('Global').networkid[0], string(sub(parameters('Global').networkid[1], mul(2, int(parameters('DeploymentID'))))))]",
            "networkIdUpper": "[format('{0}{1}', parameters('Global').networkid[0], string(add(1, sub(parameters('Global').networkid[1], mul(2, int(parameters('DeploymentID')))))))]",
            "addressPrefixes": [
              "[format('{0}.0/23', variables('networkId'))]"
            ],
            "SubnetInfo": "[if(contains(parameters('DeploymentInfo'), 'SubnetInfo'), parameters('DeploymentInfo').SubnetInfo, createArray())]",
            "Domain": "[split(parameters('Global').DomainName, '.')[0]]",
            "RouteTableGlobal": {
              "id": "[resourceId(variables('HubRGName'), 'Microsoft.Network/routeTables/', format('{0}{1}{2}', replace(variables('HubVNName'), 'vn', 'rt'), variables('Domain'), parameters('Global').RTName))]"
            },
            "delegations": {
              "default": [],
              "Microsoft.Web/serverfarms": [
                {
                  "name": "delegation",
                  "properties": {
                    "serviceName": "Microsoft.Web/serverfarms"
                  }
                }
              ],
              "Microsoft.ContainerInstance/containerGroups": [
                {
                  "name": "aciDelegation",
                  "properties": {
                    "serviceName": "Microsoft.ContainerInstance/containerGroups"
                  }
                }
              ]
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2021-02-01",
              "name": "[format('{0}-vn', parameters('Deployment'))]",
              "location": "[resourceGroup().location]",
              "properties": {
                "copy": [
                  {
                    "name": "subnets",
                    "count": "[length(variables('SubnetInfo'))]",
                    "input": {
                      "name": "[variables('SubnetInfo')[copyIndex('subnets')].name]",
                      "properties": {
                        "addressPrefix": "[format('{0}.{1}', if(equals(variables('SubnetInfo')[copyIndex('subnets')].name, 'snMT02'), variables('networkIdUpper'), variables('networkId')), variables('SubnetInfo')[copyIndex('subnets')].Prefix)]",
                        "networkSecurityGroup": "[if(not(and(contains(variables('SubnetInfo')[copyIndex('subnets')], 'NSG'), bool(variables('SubnetInfo')[copyIndex('subnets')].NSG))), null(), createObject('id', resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-nsg{1}', parameters('Deployment'), variables('SubnetInfo')[copyIndex('subnets')].name))))]",
                        "natGateway": "[if(not(and(contains(variables('SubnetInfo')[copyIndex('subnets')], 'NGW'), bool(variables('SubnetInfo')[copyIndex('subnets')].NGW))), null(), createObject('id', resourceId('Microsoft.Network/natGateways', format('{0}-ngwNAT01', parameters('Deployment')))))]",
                        "routeTable": "[if(and(contains(variables('SubnetInfo')[copyIndex('subnets')], 'Route'), bool(variables('SubnetInfo')[copyIndex('subnets')].Route)), variables('RouteTableGlobal'), null())]",
                        "privateEndpointNetworkPolicies": "Disabled",
                        "delegations": "[if(contains(variables('SubnetInfo')[copyIndex('subnets')], 'delegations'), variables('delegations')[variables('SubnetInfo')[copyIndex('subnets')].delegations], variables('delegations').default)]"
                      }
                    }
                  }
                ],
                "addressSpace": {
                  "addressPrefixes": "[variables('addressPrefixes')]"
                },
                "dhcpOptions": {
                  "dnsServers": "[array(parameters('DNSServers'))]"
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-OMS', variables('Deployment')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-SA', variables('Deployment')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-VNET', variables('Deployment')))]"
      ]
    },
    {
      "condition": "[and(contains(parameters('Stage'), 'CreateADPDC'), bool(parameters('Stage').CreateADPDC))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "CreateADPDC",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "DeploymentID": {
            "value": "[parameters('DeploymentID')]"
          },
          "DeploymentInfo": {
            "value": "[parameters('DeploymentInfo')]"
          },
          "Environment": {
            "value": "[parameters('Environment')]"
          },
          "Extensions": {
            "value": "[parameters('Extensions')]"
          },
          "Global": {
            "value": "[parameters('Global')]"
          },
          "Prefix": {
            "value": "[parameters('Prefix')]"
          },
          "Stage": {
            "value": "[parameters('Stage')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "13874993644946453761"
            }
          },
          "parameters": {
            "Prefix": {
              "type": "string"
            },
            "Environment": {
              "type": "string",
              "defaultValue": "D",
              "allowedValues": [
                "I",
                "D",
                "T",
                "U",
                "P",
                "S",
                "G",
                "A"
              ]
            },
            "DeploymentID": {
              "type": "string",
              "defaultValue": "1",
              "allowedValues": [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9"
              ]
            },
            "Stage": {
              "type": "object"
            },
            "Extensions": {
              "type": "object"
            },
            "Global": {
              "type": "object"
            },
            "DeploymentInfo": {
              "type": "object"
            }
          },
          "variables": {
            "copy": [
              {
                "name": "VMs",
                "count": "[length(variables('AppServers'))]",
                "input": {
                  "name": "[variables('AppServers')[copyIndex('VMs')].Name]",
                  "match": "[or(equals(parameters('Global').CN, '.'), contains(array(parameters('Global').CN), variables('AppServers')[copyIndex('VMs')].Name))]",
                  "Extensions": "[if(contains(variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType], 'RoleExtensions'), union(parameters('Extensions'), variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType].RoleExtensions), parameters('Extensions'))]",
                  "DataDisk": "[if(contains(variables('AppServers')[copyIndex('VMs')], 'DDRole'), variables('DataDiskInfo')[variables('AppServers')[copyIndex('VMs')].DDRole], null())]",
                  "vmHostName": "[toLower(format('{0}{1}{2}{3}{4}', parameters('Prefix'), parameters('Global').AppName, parameters('Environment'), parameters('DeploymentID'), variables('AppServers')[copyIndex('VMs')].Name))]",
                  "AppInfo": "[if(contains(variables('AppServers')[copyIndex('VMs')], 'AppInfo'), variables('AppServers')[copyIndex('VMs')].AppInfo, null())]",
                  "windowsConfiguration": {
                    "enableAutomaticUpdates": true,
                    "provisionVmAgent": true,
                    "patchSettings": {
                      "enableHotpatching": "[if(contains(variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType], 'HotPatch'), variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType].HotPatch, false())]",
                      "patchMode": "[if(contains(variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType], 'patchMode'), variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType].patchMode, 'AutomaticByOS')]"
                    }
                  },
                  "linuxConfiguration": {
                    "enableAutomaticUpdates": true,
                    "provisionVmAgent": true,
                    "patchSettings": {
                      "enableHotpatching": "[if(contains(variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType], 'HotPatch'), variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType].HotPatch, false())]",
                      "patchMode": "[if(contains(variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType], 'patchMode'), variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType].patchMode, 'AutomaticByOS')]"
                    }
                  }
                }
              }
            ],
            "Deployment": "[format('{0}-{1}-{2}-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID'))]",
            "computeGlobal": "[json('{\r\n  \"DataDiskInfo\": {\r\n    \"0GB\": {},\r\n    \"32GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            32\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GBSS\": {\r\n      \"DATASS\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GB-2\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ],\r\n          [\r\n            1,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"128GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            128\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"FIL64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"SOFS\": {\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            1,\r\n            32\r\n          ],\r\n          [\r\n            2,\r\n            32\r\n          ],\r\n          [\r\n            3,\r\n            32\r\n          ]\r\n        ],\r\n        \"FileSystem\": \"ReFS\",\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"SQL64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"LOGS\": {\r\n        \"DriveLetter\": \"G\",\r\n        \"caching\": \"None\",\r\n        \"LUNS\": [\r\n          [\r\n            8,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"TEMPDB\": {\r\n        \"DriveLetter\": \"H\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            12,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"BACKUP\": {\r\n        \"DriveLetter\": \"I\",\r\n        \"caching\": \"None\",\r\n        \"LUNS\": [\r\n          [\r\n            15,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    }\r\n  },\r\n  \"computeSizeLookupOptions\": {\r\n    \"API-P\": \"Standard_D4s_v3\",\r\n    \"API-D\": \"Standard_D4s_v3\",\r\n    \"API-S\": \"Standard_D2s_v3\",\r\n    \"SF-P\": \"Standard_D4s_v3\",\r\n    \"SF-D\": \"Standard_D2s_v3\",\r\n    \"SF-S\": \"Standard_D2s_v3\",\r\n    \"CTNR-P\": \"Standard_D4s_v3\",\r\n    \"CTNR-D\": \"Standard_D2s_v3\",\r\n    \"ADp-P\": \"Standard_D2s_v3\",\r\n    \"ADp-D\": \"Standard_A2m_v2\",\r\n    \"ADs-P\": \"Standard_D2s_v3\",\r\n    \"ADs-D\": \"Standard_A2m_v2\",\r\n    \"AAP-P\": \"Standard_D2s_v3\",\r\n    \"AAP-D\": \"Standard_D2s_v3\",\r\n    \"DNS-P\": \"Standard_D2s_v3\",\r\n    \"DNS-D\": \"Standard_D2s_v3\",\r\n    \"BUS-P\": \"Standard_DS2_v2\",\r\n    \"BUS-D\": \"Standard_DS2_v2\",\r\n    \"LIN-P\": \"Standard_DS2_v2\",\r\n    \"LIN-D\": \"Standard_DS2_v2\",\r\n    \"FIL-P\": \"Standard_D4s_v3\",\r\n    \"FIL-D\": \"Standard_D4s_v3\",\r\n    \"DFS-P\": \"Standard_D4s_v3\",\r\n    \"DFS-D\": \"Standard_D4s_v3\",\r\n    \"JMP-P\": \"Standard_D4s_v3\",\r\n    \"JMP-D\": \"Standard_D4s_v3\",\r\n    \"CLT-P\": \"Standard_D4s_v3\",\r\n    \"CLT-D\": \"Standard_D4s_v3\",\r\n    \"PXY-P\": \"Standard_D4s_v3\",\r\n    \"PXY-D\": \"Standard_D2s_v3\",\r\n    \"CLS01-D\": \"Standard_D4s_v3\",\r\n    \"CLS02-D\": \"Standard_D4s_v3\",\r\n    \"CLS01-P\": \"Standard_D4s_v3\",\r\n    \"CLS02-P\": \"Standard_D4s_v3\",\r\n    \"FW-P\": \"Standard_F4\",\r\n    \"FW-D\": \"Standard_F2\"\r\n  },\r\n  \"OSType\": {\r\n    \"Server2022SSIMG\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/b8f402aa-20f7-4888-b45c-3cf086dad9c3/resourceGroups/ACU1-BRW-AOA-RG-G1/providers/Microsoft.Compute/galleries/acu1brwaoag1gallery01/images/vmss2022\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SSIMG\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/b8f402aa-20f7-4888-b45c-3cf086dad9c3/resourceGroups/ACU1-BRW-AOA-RG-G1/providers/Microsoft.Compute/galleries/acu1brwaoag1gallery01/images/vmss2019webnetcore27\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"cbld10\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/27b750cd-ed43-42fd-9044-8d75e124ae55/resourceGroups/SBID-Build-Test/providers/Microsoft.Compute/galleries/cbldtest/images/cbld10-ext\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 1,\r\n        \"IaaSDiagnostics\": 1,\r\n        \"Antimalware\": 0,\r\n        \"DependencyAgent\": 1,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Win10O365\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsDesktop\",\r\n        \"offer\": \"office-365\",\r\n        \"sku\": \"rs5-evd-o365pp\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Client\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Win10\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsDesktop\",\r\n        \"offer\": \"Windows-10\",\r\n        \"sku\": \"21h1-pro-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Client\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"SQLServer2016\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftSQLServer\",\r\n        \"Offer\": \"SQL2016SP2-WS2016\",\r\n        \"sku\": \"Enterprise\",\r\n        \"version\": \"latest\"\r\n      },\r\n      // \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016Core\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-Server-Core\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016small\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016Coresmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-Server-Core-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019-gen2\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"windowsserver-gen2preview\",\r\n        \"sku\": \"2019-Datacenter-gen2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2022\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2022-Datacenter-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"_plan\": {\r\n        \"name\": \"windows-server-2022\",\r\n        \"publisher\": \"microsoftwindowsserver\",\r\n        \"product\": \"microsoftserveroperatingsystems-previews\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2022Containerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"datacenter-core-20h2-with-containers-smalldisk-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Core\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-Core\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019small\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-datacenter-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Coresmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-Server-Core-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Containerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019CoreContainerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-datacenter-core-with-containers-smalldisk-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016SS\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-with-Containers\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SSgs\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers-gs\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SS\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"NetScaler\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"citrix\",\r\n        \"Offer\": \"netscalervpx-120\",\r\n        \"Sku\": \"netscalerbyol\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"netscalerbyol\",\r\n        \"publisher\": \"citrix\",\r\n        \"product\": \"netscalervpx-120\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"MaxLoadBalancer\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"loadbalancer\",\r\n        \"offer\": \"loadbalancer-org-load-balancer-for-azure\",\r\n        \"sku\": \"max_load_balancer\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"max_load_balancer\",\r\n        \"publisher\": \"loadbalancer\",\r\n        \"product\": \"loadbalancer-org-load-balancer-for-azure\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortigate\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet_fortigate-vm_v5\",\r\n        \"sku\": \"fortinet_fg-vm\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"fortinet_fg-vm\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet_fortigate-vm_v5\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortigatepayg\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet_fortigate-vm_v5\",\r\n        \"sku\": \"fortinet_fg-vm_payg\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"fortinet_fg-vm_payg\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet_fortigate-vm_v5\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortimngr\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet-fortimanager\",\r\n        \"sku\": \"fortinet-fortimanager\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 3,\r\n      \"plan\": {\r\n        \"name\": \"fortinet-fortimanager\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet-fortimanager\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"UbuntuServer1904\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"canonical\",\r\n        \"offer\": \"UbuntuServer\",\r\n        \"sku\": \"19.04\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"Antimalware\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 1,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0\r\n      }\r\n    },\r\n    \"Bus-debian\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"credativ\",\r\n        \"offer\": \"Debian\",\r\n        \"sku\": \"8\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 1,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"PROXY-UBUNTU\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"Canonical\",\r\n        \"offer\": \"UbuntuServer\",\r\n        \"sku\": \"16.04-LTS\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"fileUris\": \"[concat(parameters(''global'')._artifactsLocation, ''/scripts/pxy.zip\",\r\n      \"commandToExecute\": \"[concat(''sudo apt-get update && sudo apt-get install unzip && unzip Proxy.zip && sudo bash -x haproxyvm-configure.sh '', '' -a '', ''ilbIPAddress'', '' -r '', ''ilbRabbitMqPort'', '' -m '', ''ilbRabbitMqMgmtPort'', '' -b '', ''dnsName'', ''.'', ''location'', ''.cloudapp.azure.com -p '', ''vmNamePrefix'', ''0 -s '', ''vmNamePrefix'', ''1'')]\",\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"CentOS75\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"OpenLogic\",\r\n        \"Offer\": \"CentOS\",\r\n        \"sku\": \"7.5\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"Antimalware\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    }\r\n  },\r\n  \"ladCfg\": {\r\n    \"diagnosticMonitorConfiguration\": {\r\n      \"eventVolume\": \"Medium\",\r\n      \"metrics\": {\r\n        \"metricAggregation\": [\r\n          {\r\n            \"scheduledTransferPeriod\": \"PT1H\"\r\n          },\r\n          {\r\n            \"scheduledTransferPeriod\": \"PT1M\"\r\n          }\r\n        ],\r\n        \"resourceId\": \"__VM_RESOURCE_ID__\"\r\n      },\r\n      \"performanceCounters\": {\r\n        \"performanceCounterConfiguration\": [\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk read guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readbytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/readbytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk writes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/writespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk transfer time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagetransfertime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagetransfertime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk transfers\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"transferspersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/transferspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk write guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writebytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/writebytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk read time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagereadtime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagereadtime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk write time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagewritetime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagewritetime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk total bytes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/bytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk reads\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readspersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/readspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk queue length\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagediskqueuelength\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagediskqueuelength\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network in guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytesreceived\",\r\n            \"counterSpecifier\": \"/builtin/network/bytesreceived\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network total bytes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytestotal\",\r\n            \"counterSpecifier\": \"/builtin/network/bytestotal\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network out guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytestransmitted\",\r\n            \"counterSpecifier\": \"/builtin/network/bytestransmitted\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network collisions\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totalcollisions\",\r\n            \"counterSpecifier\": \"/builtin/network/totalcollisions\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets received errors\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totalrxerrors\",\r\n            \"counterSpecifier\": \"/builtin/network/totalrxerrors\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets sent\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"packetstransmitted\",\r\n            \"counterSpecifier\": \"/builtin/network/packetstransmitted\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets received\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"packetsreceived\",\r\n            \"counterSpecifier\": \"/builtin/network/packetsreceived\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets sent errors\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totaltxerrors\",\r\n            \"counterSpecifier\": \"/builtin/network/totaltxerrors\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem transfers/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"transferspersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/transferspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % free space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentfreespace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentfreespace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % used space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusedspace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentusedspace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem used space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"usedspace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/usedspace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem read bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytesreadpersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/bytesreadpersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem free space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"freespace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/freespace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % free inodes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentfreeinodes\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentfreeinodes\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/bytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem reads/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readspersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/readspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem write bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"byteswrittenpersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/byteswrittenpersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem writes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writespersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/writespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % used inodes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusedinodes\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentusedinodes\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU IO wait time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentiowaittime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentiowaittime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU user time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusertime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentusertime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU nice time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentnicetime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentnicetime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU percentage guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentprocessortime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentprocessortime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU interrupt time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentinterrupttime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentinterrupttime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU idle time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentidletime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentidletime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU privileged time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentprivilegedtime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentprivilegedtime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"availablememory\",\r\n            \"counterSpecifier\": \"/builtin/memory/availablememory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap percent used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentusedswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentusedswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"usedmemory\",\r\n            \"counterSpecifier\": \"/builtin/memory/usedmemory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Page reads\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pagesreadpersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pagesreadpersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"availableswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/availableswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap percent available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentavailableswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentavailableswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Mem. percent available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentavailablememory\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentavailablememory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Pages\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pagespersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pagespersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"usedswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/usedswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory percentage\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentusedmemory\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentusedmemory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Page writes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pageswrittenpersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pageswrittenpersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          }\r\n        ]\r\n      },\r\n      \"syslogEvents\": {\r\n        \"syslogEventConfiguration\": {\r\n          \"LOG_AUTH\": \"LOG_DEBUG\",\r\n          \"LOG_AUTHPRIV\": \"LOG_DEBUG\",\r\n          \"LOG_CRON\": \"LOG_DEBUG\",\r\n          \"LOG_DAEMON\": \"LOG_DEBUG\",\r\n          \"LOG_FTP\": \"LOG_DEBUG\",\r\n          \"LOG_KERN\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL0\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL1\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL2\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL3\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL4\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL5\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL6\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL7\": \"LOG_DEBUG\",\r\n          \"LOG_LPR\": \"LOG_DEBUG\",\r\n          \"LOG_MAIL\": \"LOG_DEBUG\",\r\n          \"LOG_NEWS\": \"LOG_DEBUG\",\r\n          \"LOG_SYSLOG\": \"LOG_DEBUG\",\r\n          \"LOG_USER\": \"LOG_DEBUG\",\r\n          \"LOG_UUCP\": \"LOG_DEBUG\"\r\n        }\r\n      }\r\n    },\r\n    \"sampleRateInSeconds\": 15\r\n  },\r\n  \"WadCfg\": {\r\n    \"DiagnosticMonitorConfiguration\": {\r\n      \"overallQuotaInMB\": 10000,\r\n      \"DiagnosticInfrastructureLogs\": {\r\n        \"scheduledTransferLogLevelFilter\": \"Error\"\r\n      },\r\n      \"PerformanceCounters\": {\r\n        \"scheduledTransferPeriod\": \"PT1M\",\r\n        \"PerformanceCounterConfiguration\": []\r\n      },\r\n      \"WindowsEventLog\": {\r\n        \"scheduledTransferPeriod\": \"PT5M\",\r\n        \"DataSource\": [\r\n          {\r\n            \"name\": \"Application!*[System[(Level = 1 or Level = 2)]]\"\r\n          },\r\n          {\r\n            \"name\": \"Security!*[System[(Level = 1 or Level = 2)]\"\r\n          },\r\n          {\r\n            \"name\": \"System!*[System[(Level = 1 or Level = 2)]]\"\r\n          },\r\n          {\r\n            \"name\": \"Microsoft-Windows-DSC/Operational!*[System[(EventID=4249 or EventID=4097)]]\"\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}')]",
            "OSType": "[variables('computeGlobal').OSType]",
            "DataDiskInfo": "[variables('computeGlobal').DataDiskInfo]",
            "DeploymentName": "[if(contains(toLower(deployment().name), 'vmapp'), 'AppServers', replace(deployment().name, format('dp{0}-', variables('Deployment')), ''))]",
            "AppServers": "[parameters('DeploymentInfo').AppServers[variables('DeploymentName')]]",
            "HubKVJ": "[json(parameters('Global').hubKV)]",
            "HubRGJ": "[json(parameters('Global').hubRG)]",
            "gh": {
              "hubKVPrefix": "[if(contains(variables('HubKVJ'), 'Prefix'), variables('HubKVJ').Prefix, parameters('Prefix'))]",
              "hubKVOrgName": "[if(contains(variables('HubKVJ'), 'OrgName'), variables('HubKVJ').OrgName, parameters('Global').OrgName)]",
              "hubKVAppName": "[if(contains(variables('HubKVJ'), 'AppName'), variables('HubKVJ').AppName, parameters('Global').AppName)]",
              "hubKVRGName": "[if(contains(variables('HubKVJ'), 'RG'), variables('HubKVJ').RG, variables('HubRGJ').name)]"
            },
            "HubKVRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').hubKVPrefix, variables('gh').hubKVOrgName, variables('gh').hubKVAppName, variables('gh').hubKVRGName)]",
            "HubKVName": "[toLower(format('{0}-{1}-{2}-{3}-kv{4}', variables('gh').hubKVPrefix, variables('gh').hubKVOrgName, variables('gh').hubKVAppName, variables('gh').hubKVRGName, variables('HubKVJ').name))]"
          },
          "resources": [
            {
              "condition": "[variables('VMs')[copyIndex()].match]",
              "copy": {
                "name": "VM",
                "count": "[length(variables('AppServers'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dp{0}-VM-Deploy-{1}', variables('Deployment'), variables('AppServers')[copyIndex()].Name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "Prefix": {
                    "value": "[parameters('Prefix')]"
                  },
                  "DeploymentID": {
                    "value": "[parameters('DeploymentID')]"
                  },
                  "Environment": {
                    "value": "[parameters('Environment')]"
                  },
                  "AppServer": {
                    "value": "[variables('AppServers')[copyIndex()]]"
                  },
                  "VM": {
                    "value": "[variables('VMs')[copyIndex()]]"
                  },
                  "DeploymentName": {
                    "value": "[variables('DeploymentName')]"
                  },
                  "Global": {
                    "value": "[parameters('Global')]"
                  },
                  "vmAdminPassword": {
                    "reference": {
                      "keyVault": {
                        "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults', variables('HubKVName'))]"
                      },
                      "secretName": "localadmin"
                    }
                  },
                  "devOpsPat": {
                    "reference": {
                      "keyVault": {
                        "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults', variables('HubKVName'))]"
                      },
                      "secretName": "devOpsPat"
                    }
                  },
                  "sshPublic": {
                    "reference": {
                      "keyVault": {
                        "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults', variables('HubKVName'))]"
                      },
                      "secretName": "sshPublic"
                    }
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1318.3566",
                      "templateHash": "10183346640093717410"
                    }
                  },
                  "parameters": {
                    "Prefix": {
                      "type": "string"
                    },
                    "DeploymentID": {
                      "type": "string"
                    },
                    "Environment": {
                      "type": "string"
                    },
                    "VM": {
                      "type": "object"
                    },
                    "AppServer": {
                      "type": "object"
                    },
                    "Global": {
                      "type": "object"
                    },
                    "DeploymentName": {
                      "type": "string"
                    },
                    "vmAdminPassword": {
                      "type": "secureString"
                    },
                    "devOpsPat": {
                      "type": "secureString"
                    },
                    "sshPublic": {
                      "type": "secureString"
                    },
                    "saKey": {
                      "type": "secureString",
                      "defaultValue": "[newGuid()]"
                    },
                    "deploymentTime": {
                      "type": "string",
                      "defaultValue": "[utcNow()]"
                    }
                  },
                  "variables": {
                    "Deployment": "[format('{0}-{1}-{2}-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID'))]",
                    "DeploymentURI": "[toLower(format('{0}{1}{2}{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID')))]",
                    "computeGlobal": "[json('{\r\n  \"DataDiskInfo\": {\r\n    \"0GB\": {},\r\n    \"32GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            32\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GBSS\": {\r\n      \"DATASS\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GB-2\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ],\r\n          [\r\n            1,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"128GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            128\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"FIL64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"SOFS\": {\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            1,\r\n            32\r\n          ],\r\n          [\r\n            2,\r\n            32\r\n          ],\r\n          [\r\n            3,\r\n            32\r\n          ]\r\n        ],\r\n        \"FileSystem\": \"ReFS\",\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"SQL64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"LOGS\": {\r\n        \"DriveLetter\": \"G\",\r\n        \"caching\": \"None\",\r\n        \"LUNS\": [\r\n          [\r\n            8,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"TEMPDB\": {\r\n        \"DriveLetter\": \"H\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            12,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"BACKUP\": {\r\n        \"DriveLetter\": \"I\",\r\n        \"caching\": \"None\",\r\n        \"LUNS\": [\r\n          [\r\n            15,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    }\r\n  },\r\n  \"computeSizeLookupOptions\": {\r\n    \"API-P\": \"Standard_D4s_v3\",\r\n    \"API-D\": \"Standard_D4s_v3\",\r\n    \"API-S\": \"Standard_D2s_v3\",\r\n    \"SF-P\": \"Standard_D4s_v3\",\r\n    \"SF-D\": \"Standard_D2s_v3\",\r\n    \"SF-S\": \"Standard_D2s_v3\",\r\n    \"CTNR-P\": \"Standard_D4s_v3\",\r\n    \"CTNR-D\": \"Standard_D2s_v3\",\r\n    \"ADp-P\": \"Standard_D2s_v3\",\r\n    \"ADp-D\": \"Standard_A2m_v2\",\r\n    \"ADs-P\": \"Standard_D2s_v3\",\r\n    \"ADs-D\": \"Standard_A2m_v2\",\r\n    \"AAP-P\": \"Standard_D2s_v3\",\r\n    \"AAP-D\": \"Standard_D2s_v3\",\r\n    \"DNS-P\": \"Standard_D2s_v3\",\r\n    \"DNS-D\": \"Standard_D2s_v3\",\r\n    \"BUS-P\": \"Standard_DS2_v2\",\r\n    \"BUS-D\": \"Standard_DS2_v2\",\r\n    \"LIN-P\": \"Standard_DS2_v2\",\r\n    \"LIN-D\": \"Standard_DS2_v2\",\r\n    \"FIL-P\": \"Standard_D4s_v3\",\r\n    \"FIL-D\": \"Standard_D4s_v3\",\r\n    \"DFS-P\": \"Standard_D4s_v3\",\r\n    \"DFS-D\": \"Standard_D4s_v3\",\r\n    \"JMP-P\": \"Standard_D4s_v3\",\r\n    \"JMP-D\": \"Standard_D4s_v3\",\r\n    \"CLT-P\": \"Standard_D4s_v3\",\r\n    \"CLT-D\": \"Standard_D4s_v3\",\r\n    \"PXY-P\": \"Standard_D4s_v3\",\r\n    \"PXY-D\": \"Standard_D2s_v3\",\r\n    \"CLS01-D\": \"Standard_D4s_v3\",\r\n    \"CLS02-D\": \"Standard_D4s_v3\",\r\n    \"CLS01-P\": \"Standard_D4s_v3\",\r\n    \"CLS02-P\": \"Standard_D4s_v3\",\r\n    \"FW-P\": \"Standard_F4\",\r\n    \"FW-D\": \"Standard_F2\"\r\n  },\r\n  \"OSType\": {\r\n    \"Server2022SSIMG\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/b8f402aa-20f7-4888-b45c-3cf086dad9c3/resourceGroups/ACU1-BRW-AOA-RG-G1/providers/Microsoft.Compute/galleries/acu1brwaoag1gallery01/images/vmss2022\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SSIMG\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/b8f402aa-20f7-4888-b45c-3cf086dad9c3/resourceGroups/ACU1-BRW-AOA-RG-G1/providers/Microsoft.Compute/galleries/acu1brwaoag1gallery01/images/vmss2019webnetcore27\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"cbld10\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/27b750cd-ed43-42fd-9044-8d75e124ae55/resourceGroups/SBID-Build-Test/providers/Microsoft.Compute/galleries/cbldtest/images/cbld10-ext\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 1,\r\n        \"IaaSDiagnostics\": 1,\r\n        \"Antimalware\": 0,\r\n        \"DependencyAgent\": 1,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Win10O365\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsDesktop\",\r\n        \"offer\": \"office-365\",\r\n        \"sku\": \"rs5-evd-o365pp\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Client\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Win10\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsDesktop\",\r\n        \"offer\": \"Windows-10\",\r\n        \"sku\": \"21h1-pro-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Client\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"SQLServer2016\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftSQLServer\",\r\n        \"Offer\": \"SQL2016SP2-WS2016\",\r\n        \"sku\": \"Enterprise\",\r\n        \"version\": \"latest\"\r\n      },\r\n      // \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016Core\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-Server-Core\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016small\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016Coresmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-Server-Core-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019-gen2\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"windowsserver-gen2preview\",\r\n        \"sku\": \"2019-Datacenter-gen2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2022\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2022-Datacenter-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"_plan\": {\r\n        \"name\": \"windows-server-2022\",\r\n        \"publisher\": \"microsoftwindowsserver\",\r\n        \"product\": \"microsoftserveroperatingsystems-previews\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2022Containerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"datacenter-core-20h2-with-containers-smalldisk-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Core\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-Core\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019small\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-datacenter-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Coresmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-Server-Core-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Containerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019CoreContainerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-datacenter-core-with-containers-smalldisk-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016SS\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-with-Containers\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SSgs\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers-gs\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SS\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"NetScaler\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"citrix\",\r\n        \"Offer\": \"netscalervpx-120\",\r\n        \"Sku\": \"netscalerbyol\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"netscalerbyol\",\r\n        \"publisher\": \"citrix\",\r\n        \"product\": \"netscalervpx-120\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"MaxLoadBalancer\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"loadbalancer\",\r\n        \"offer\": \"loadbalancer-org-load-balancer-for-azure\",\r\n        \"sku\": \"max_load_balancer\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"max_load_balancer\",\r\n        \"publisher\": \"loadbalancer\",\r\n        \"product\": \"loadbalancer-org-load-balancer-for-azure\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortigate\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet_fortigate-vm_v5\",\r\n        \"sku\": \"fortinet_fg-vm\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"fortinet_fg-vm\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet_fortigate-vm_v5\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortigatepayg\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet_fortigate-vm_v5\",\r\n        \"sku\": \"fortinet_fg-vm_payg\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"fortinet_fg-vm_payg\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet_fortigate-vm_v5\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortimngr\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet-fortimanager\",\r\n        \"sku\": \"fortinet-fortimanager\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 3,\r\n      \"plan\": {\r\n        \"name\": \"fortinet-fortimanager\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet-fortimanager\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"UbuntuServer1904\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"canonical\",\r\n        \"offer\": \"UbuntuServer\",\r\n        \"sku\": \"19.04\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"Antimalware\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 1,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0\r\n      }\r\n    },\r\n    \"Bus-debian\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"credativ\",\r\n        \"offer\": \"Debian\",\r\n        \"sku\": \"8\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 1,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"PROXY-UBUNTU\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"Canonical\",\r\n        \"offer\": \"UbuntuServer\",\r\n        \"sku\": \"16.04-LTS\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"fileUris\": \"[concat(parameters(''global'')._artifactsLocation, ''/scripts/pxy.zip\",\r\n      \"commandToExecute\": \"[concat(''sudo apt-get update && sudo apt-get install unzip && unzip Proxy.zip && sudo bash -x haproxyvm-configure.sh '', '' -a '', ''ilbIPAddress'', '' -r '', ''ilbRabbitMqPort'', '' -m '', ''ilbRabbitMqMgmtPort'', '' -b '', ''dnsName'', ''.'', ''location'', ''.cloudapp.azure.com -p '', ''vmNamePrefix'', ''0 -s '', ''vmNamePrefix'', ''1'')]\",\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"CentOS75\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"OpenLogic\",\r\n        \"Offer\": \"CentOS\",\r\n        \"sku\": \"7.5\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"Antimalware\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    }\r\n  },\r\n  \"ladCfg\": {\r\n    \"diagnosticMonitorConfiguration\": {\r\n      \"eventVolume\": \"Medium\",\r\n      \"metrics\": {\r\n        \"metricAggregation\": [\r\n          {\r\n            \"scheduledTransferPeriod\": \"PT1H\"\r\n          },\r\n          {\r\n            \"scheduledTransferPeriod\": \"PT1M\"\r\n          }\r\n        ],\r\n        \"resourceId\": \"__VM_RESOURCE_ID__\"\r\n      },\r\n      \"performanceCounters\": {\r\n        \"performanceCounterConfiguration\": [\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk read guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readbytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/readbytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk writes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/writespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk transfer time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagetransfertime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagetransfertime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk transfers\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"transferspersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/transferspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk write guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writebytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/writebytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk read time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagereadtime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagereadtime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk write time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagewritetime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagewritetime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk total bytes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/bytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk reads\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readspersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/readspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk queue length\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagediskqueuelength\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagediskqueuelength\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network in guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytesreceived\",\r\n            \"counterSpecifier\": \"/builtin/network/bytesreceived\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network total bytes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytestotal\",\r\n            \"counterSpecifier\": \"/builtin/network/bytestotal\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network out guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytestransmitted\",\r\n            \"counterSpecifier\": \"/builtin/network/bytestransmitted\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network collisions\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totalcollisions\",\r\n            \"counterSpecifier\": \"/builtin/network/totalcollisions\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets received errors\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totalrxerrors\",\r\n            \"counterSpecifier\": \"/builtin/network/totalrxerrors\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets sent\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"packetstransmitted\",\r\n            \"counterSpecifier\": \"/builtin/network/packetstransmitted\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets received\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"packetsreceived\",\r\n            \"counterSpecifier\": \"/builtin/network/packetsreceived\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets sent errors\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totaltxerrors\",\r\n            \"counterSpecifier\": \"/builtin/network/totaltxerrors\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem transfers/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"transferspersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/transferspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % free space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentfreespace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentfreespace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % used space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusedspace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentusedspace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem used space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"usedspace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/usedspace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem read bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytesreadpersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/bytesreadpersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem free space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"freespace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/freespace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % free inodes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentfreeinodes\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentfreeinodes\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/bytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem reads/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readspersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/readspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem write bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"byteswrittenpersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/byteswrittenpersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem writes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writespersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/writespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % used inodes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusedinodes\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentusedinodes\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU IO wait time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentiowaittime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentiowaittime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU user time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusertime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentusertime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU nice time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentnicetime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentnicetime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU percentage guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentprocessortime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentprocessortime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU interrupt time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentinterrupttime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentinterrupttime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU idle time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentidletime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentidletime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU privileged time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentprivilegedtime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentprivilegedtime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"availablememory\",\r\n            \"counterSpecifier\": \"/builtin/memory/availablememory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap percent used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentusedswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentusedswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"usedmemory\",\r\n            \"counterSpecifier\": \"/builtin/memory/usedmemory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Page reads\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pagesreadpersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pagesreadpersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"availableswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/availableswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap percent available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentavailableswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentavailableswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Mem. percent available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentavailablememory\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentavailablememory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Pages\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pagespersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pagespersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"usedswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/usedswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory percentage\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentusedmemory\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentusedmemory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Page writes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pageswrittenpersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pageswrittenpersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          }\r\n        ]\r\n      },\r\n      \"syslogEvents\": {\r\n        \"syslogEventConfiguration\": {\r\n          \"LOG_AUTH\": \"LOG_DEBUG\",\r\n          \"LOG_AUTHPRIV\": \"LOG_DEBUG\",\r\n          \"LOG_CRON\": \"LOG_DEBUG\",\r\n          \"LOG_DAEMON\": \"LOG_DEBUG\",\r\n          \"LOG_FTP\": \"LOG_DEBUG\",\r\n          \"LOG_KERN\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL0\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL1\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL2\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL3\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL4\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL5\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL6\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL7\": \"LOG_DEBUG\",\r\n          \"LOG_LPR\": \"LOG_DEBUG\",\r\n          \"LOG_MAIL\": \"LOG_DEBUG\",\r\n          \"LOG_NEWS\": \"LOG_DEBUG\",\r\n          \"LOG_SYSLOG\": \"LOG_DEBUG\",\r\n          \"LOG_USER\": \"LOG_DEBUG\",\r\n          \"LOG_UUCP\": \"LOG_DEBUG\"\r\n        }\r\n      }\r\n    },\r\n    \"sampleRateInSeconds\": 15\r\n  },\r\n  \"WadCfg\": {\r\n    \"DiagnosticMonitorConfiguration\": {\r\n      \"overallQuotaInMB\": 10000,\r\n      \"DiagnosticInfrastructureLogs\": {\r\n        \"scheduledTransferLogLevelFilter\": \"Error\"\r\n      },\r\n      \"PerformanceCounters\": {\r\n        \"scheduledTransferPeriod\": \"PT1M\",\r\n        \"PerformanceCounterConfiguration\": []\r\n      },\r\n      \"WindowsEventLog\": {\r\n        \"scheduledTransferPeriod\": \"PT5M\",\r\n        \"DataSource\": [\r\n          {\r\n            \"name\": \"Application!*[System[(Level = 1 or Level = 2)]]\"\r\n          },\r\n          {\r\n            \"name\": \"Security!*[System[(Level = 1 or Level = 2)]\"\r\n          },\r\n          {\r\n            \"name\": \"System!*[System[(Level = 1 or Level = 2)]]\"\r\n          },\r\n          {\r\n            \"name\": \"Microsoft-Windows-DSC/Operational!*[System[(EventID=4249 or EventID=4097)]]\"\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}')]",
                    "OSType": "[variables('computeGlobal').OSType]",
                    "WadCfg": "[variables('computeGlobal').WadCfg]",
                    "ladCfg": "[variables('computeGlobal').ladCfg]",
                    "DataDiskInfo": "[variables('computeGlobal').DataDiskInfo]",
                    "computeSizeLookupOptions": "[variables('computeGlobal').computeSizeLookupOptions]",
                    "RGName": "[format('{0}-{1}-{2}-RG-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').AppName, parameters('Environment'), parameters('DeploymentID'))]",
                    "GlobalRGJ": "[json(parameters('Global').GlobalRG)]",
                    "GlobalSAJ": "[json(parameters('Global').GlobalSA)]",
                    "HubKVJ": "[json(parameters('Global').hubKV)]",
                    "HubRGJ": "[json(parameters('Global').hubRG)]",
                    "HubAAJ": "[json(parameters('Global').hubAA)]",
                    "regionLookup": "[json('{\r\n  \"francecentral\": {\r\n    \"displayname\": \"France Central\",\r\n    \"location\": \"francecentral\",\r\n    \"PREFIX\": \"AFC1\",\r\n    \"pairedRegion\": \"francesouth\"\r\n  },\r\n  \"southeastasia\": {\r\n    \"displayname\": \"Southeast Asia\",\r\n    \"location\": \"southeastasia\",\r\n    \"PREFIX\": \"ASA1\",\r\n    \"pairedRegion\": \"eastasia\"\r\n  },\r\n  \"southafricawest\": {\r\n    \"displayname\": \"South Africa West\",\r\n    \"location\": \"southafricawest\",\r\n    \"PREFIX\": \"ASAW\",\r\n    \"pairedRegion\": \"southafricanorth\"\r\n  },\r\n  \"eastus2\": {\r\n    \"displayname\": \"East US 2\",\r\n    \"location\": \"eastus2\",\r\n    \"PREFIX\": \"AEU2\",\r\n    \"pairedRegion\": \"centralus\"\r\n  },\r\n  \"eastus\": {\r\n    \"displayname\": \"East US\",\r\n    \"location\": \"eastus\",\r\n    \"PREFIX\": \"AEU1\",\r\n    \"pairedRegion\": \"westus\"\r\n  },\r\n  \"jioindiawest\": {\r\n    \"displayname\": \"Jio India West\",\r\n    \"location\": \"jioindiawest\",\r\n    \"PREFIX\": \"AJIW\",\r\n    \"pairedRegion\": \"jioindiacentral\"\r\n  },\r\n  \"westcentralus\": {\r\n    \"displayname\": \"West Central US\",\r\n    \"location\": \"westcentralus\",\r\n    \"PREFIX\": \"AWCU\",\r\n    \"pairedRegion\": \"westus2\"\r\n  },\r\n  \"koreacentral\": {\r\n    \"displayname\": \"Korea Central\",\r\n    \"location\": \"koreacentral\",\r\n    \"PREFIX\": \"AKC1\",\r\n    \"pairedRegion\": \"koreasouth\"\r\n  },\r\n  \"uaecentral\": {\r\n    \"displayname\": \"UAE Central\",\r\n    \"location\": \"uaecentral\",\r\n    \"PREFIX\": \"AUC1\",\r\n    \"pairedRegion\": \"uaenorth\"\r\n  },\r\n  \"westus\": {\r\n    \"displayname\": \"West US\",\r\n    \"location\": \"westus\",\r\n    \"PREFIX\": \"AWU1\",\r\n    \"pairedRegion\": \"eastus\"\r\n  },\r\n  \"southafricanorth\": {\r\n    \"displayname\": \"South Africa North\",\r\n    \"location\": \"southafricanorth\",\r\n    \"PREFIX\": \"ASAN\",\r\n    \"pairedRegion\": \"southafricawest\"\r\n  },\r\n  \"australiacentral2\": {\r\n    \"displayname\": \"Australia Central 2\",\r\n    \"location\": \"australiacentral2\",\r\n    \"PREFIX\": \"AAC2\",\r\n    \"pairedRegion\": \"australiacentral2\"\r\n  },\r\n  \"francesouth\": {\r\n    \"displayname\": \"France South\",\r\n    \"location\": \"francesouth\",\r\n    \"PREFIX\": \"AFS1\",\r\n    \"pairedRegion\": \"francecentral\"\r\n  },\r\n  \"ukwest\": {\r\n    \"displayname\": \"UK West\",\r\n    \"location\": \"ukwest\",\r\n    \"PREFIX\": \"AUW1\",\r\n    \"pairedRegion\": \"uksouth\"\r\n  },\r\n  \"southindia\": {\r\n    \"displayname\": \"South India\",\r\n    \"location\": \"southindia\",\r\n    \"PREFIX\": \"ASI1\",\r\n    \"pairedRegion\": \"centralindia\"\r\n  },\r\n  \"centralus\": {\r\n    \"displayname\": \"Central US\",\r\n    \"location\": \"centralus\",\r\n    \"PREFIX\": \"ACU1\",\r\n    \"pairedRegion\": \"eastus2\"\r\n  },\r\n  \"germanynorth\": {\r\n    \"displayname\": \"Germany North\",\r\n    \"location\": \"germanynorth\",\r\n    \"PREFIX\": \"AGN1\",\r\n    \"pairedRegion\": \"germanywestcentral\"\r\n  },\r\n  \"koreasouth\": {\r\n    \"displayname\": \"Korea South\",\r\n    \"location\": \"koreasouth\",\r\n    \"PREFIX\": \"AKS1\",\r\n    \"pairedRegion\": \"koreacentral\"\r\n  },\r\n  \"westindia\": {\r\n    \"displayname\": \"West India\",\r\n    \"location\": \"westindia\",\r\n    \"PREFIX\": \"AWI1\",\r\n    \"pairedRegion\": \"southindia\"\r\n  },\r\n  \"westus2\": {\r\n    \"displayname\": \"West US 2\",\r\n    \"location\": \"westus2\",\r\n    \"PREFIX\": \"AWU2\",\r\n    \"pairedRegion\": \"westcentralus\"\r\n  },\r\n  \"northcentralus\": {\r\n    \"displayname\": \"North Central US\",\r\n    \"location\": \"northcentralus\",\r\n    \"PREFIX\": \"ANCU\",\r\n    \"pairedRegion\": \"southcentralus\"\r\n  },\r\n  \"westeurope\": {\r\n    \"displayname\": \"West Europe\",\r\n    \"location\": \"westeurope\",\r\n    \"PREFIX\": \"AWEU\",\r\n    \"pairedRegion\": \"northeurope\"\r\n  },\r\n  \"canadacentral\": {\r\n    \"displayname\": \"Canada Central\",\r\n    \"location\": \"canadacentral\",\r\n    \"PREFIX\": \"ACC1\",\r\n    \"pairedRegion\": \"canadaeast\"\r\n  },\r\n  \"southcentralus\": {\r\n    \"displayname\": \"South Central US\",\r\n    \"location\": \"southcentralus\",\r\n    \"PREFIX\": \"ASCU\",\r\n    \"pairedRegion\": \"northcentralus\"\r\n  },\r\n  \"norwayeast\": {\r\n    \"displayname\": \"Norway East\",\r\n    \"location\": \"norwayeast\",\r\n    \"PREFIX\": \"ANE1\",\r\n    \"pairedRegion\": \"norwaywest\"\r\n  },\r\n  \"japanwest\": {\r\n    \"displayname\": \"Japan West\",\r\n    \"location\": \"japanwest\",\r\n    \"PREFIX\": \"AJW1\",\r\n    \"pairedRegion\": \"japaneast\"\r\n  },\r\n  \"norwaywest\": {\r\n    \"displayname\": \"Norway West\",\r\n    \"location\": \"norwaywest\",\r\n    \"PREFIX\": \"ANW1\",\r\n    \"pairedRegion\": \"norwayeast\"\r\n  },\r\n  \"jioindiacentral\": {\r\n    \"displayname\": \"Jio India Central\",\r\n    \"location\": \"jioindiacentral\",\r\n    \"PREFIX\": \"AJIC\",\r\n    \"pairedRegion\": \"jioindiawest\"\r\n  },\r\n  \"centralindia\": {\r\n    \"displayname\": \"Central India\",\r\n    \"location\": \"centralindia\",\r\n    \"PREFIX\": \"ACI1\",\r\n    \"pairedRegion\": \"southindia\"\r\n  },\r\n  \"westus3\": {\r\n    \"displayname\": \"West US 3\",\r\n    \"location\": \"westus3\",\r\n    \"PREFIX\": \"AWU3\",\r\n    \"pairedRegion\": \"eastus\"\r\n  },\r\n  \"brazilsouth\": {\r\n    \"displayname\": \"Brazil South\",\r\n    \"location\": \"brazilsouth\",\r\n    \"PREFIX\": \"ABS1\",\r\n    \"pairedRegion\": \"southcentralus\"\r\n  },\r\n  \"eastasia\": {\r\n    \"displayname\": \"East Asia\",\r\n    \"location\": \"eastasia\",\r\n    \"PREFIX\": \"AEA1\",\r\n    \"pairedRegion\": \"southeastasia\"\r\n  },\r\n  \"swedencentral\": {\r\n    \"displayname\": \"Sweden Central\",\r\n    \"location\": \"swedencentral\",\r\n    \"PREFIX\": \"ASC1\",\r\n    \"pairedRegion\": \"swedensouth\"\r\n  },\r\n  \"uksouth\": {\r\n    \"displayname\": \"UK South\",\r\n    \"location\": \"uksouth\",\r\n    \"PREFIX\": \"AUS1\",\r\n    \"pairedRegion\": \"ukwest\"\r\n  },\r\n  \"switzerlandnorth\": {\r\n    \"displayname\": \"Switzerland North\",\r\n    \"location\": \"switzerlandnorth\",\r\n    \"PREFIX\": \"ASN1\",\r\n    \"pairedRegion\": \"switzerlandwest\"\r\n  },\r\n  \"canadaeast\": {\r\n    \"displayname\": \"Canada East\",\r\n    \"location\": \"canadaeast\",\r\n    \"PREFIX\": \"ACE1\",\r\n    \"pairedRegion\": \"canadacentral\"\r\n  },\r\n  \"australiasoutheast\": {\r\n    \"displayname\": \"Australia Southeast\",\r\n    \"location\": \"australiasoutheast\",\r\n    \"PREFIX\": \"AAS1\",\r\n    \"pairedRegion\": \"australiaeast\"\r\n  },\r\n  \"northeurope\": {\r\n    \"displayname\": \"North Europe\",\r\n    \"location\": \"northeurope\",\r\n    \"PREFIX\": \"ANEU\",\r\n    \"pairedRegion\": \"westeurope\"\r\n  },\r\n  \"germanywestcentral\": {\r\n    \"displayname\": \"Germany West Central\",\r\n    \"location\": \"germanywestcentral\",\r\n    \"PREFIX\": \"AGWC\",\r\n    \"pairedRegion\": \"germanynorth\"\r\n  },\r\n  \"japaneast\": {\r\n    \"displayname\": \"Japan East\",\r\n    \"location\": \"japaneast\",\r\n    \"PREFIX\": \"AJE1\",\r\n    \"pairedRegion\": \"japanwest\"\r\n  },\r\n  \"uaenorth\": {\r\n    \"displayname\": \"UAE North\",\r\n    \"location\": \"uaenorth\",\r\n    \"PREFIX\": \"AUN1\",\r\n    \"pairedRegion\": \"uaecentral\"\r\n  },\r\n  \"australiaeast\": {\r\n    \"displayname\": \"Australia East\",\r\n    \"location\": \"australiaeast\",\r\n    \"PREFIX\": \"AAE1\",\r\n    \"pairedRegion\": \"australiasoutheast\"\r\n  },\r\n  \"switzerlandwest\": {\r\n    \"displayname\": \"Switzerland West\",\r\n    \"location\": \"switzerlandwest\",\r\n    \"PREFIX\": \"ASW1\",\r\n    \"pairedRegion\": \"switzerlandnorth\"\r\n  },\r\n  \"australiacentral\": {\r\n    \"displayname\": \"Australia Central\",\r\n    \"location\": \"australiacentral\",\r\n    \"PREFIX\": \"AAC1\",\r\n    \"pairedRegion\": \"australiacentral\"\r\n  },\r\n  \"brazilsoutheast\": {\r\n    \"displayname\": \"Brazil Southeast\",\r\n    \"location\": \"brazilsoutheast\",\r\n    \"PREFIX\": \"ABSE\",\r\n    \"pairedRegion\": \"brazilsouth\"\r\n  }\r\n}\r\n')]",
                    "primaryPrefix": "[variables('regionLookup')[parameters('Global').PrimaryLocation].prefix]",
                    "gh": {
                      "globalRGPrefix": "[if(contains(variables('GlobalRGJ'), 'Prefix'), variables('GlobalRGJ').Prefix, variables('primaryPrefix'))]",
                      "globalRGOrgName": "[if(contains(variables('GlobalRGJ'), 'OrgName'), variables('GlobalRGJ').OrgName, parameters('Global').OrgName)]",
                      "globalRGAppName": "[if(contains(variables('GlobalRGJ'), 'AppName'), variables('GlobalRGJ').AppName, parameters('Global').AppName)]",
                      "globalRGName": "[if(contains(variables('GlobalRGJ'), 'name'), variables('GlobalRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID')))]",
                      "globalSAPrefix": "[if(contains(variables('GlobalSAJ'), 'Prefix'), variables('GlobalSAJ').Prefix, variables('primaryPrefix'))]",
                      "globalSAOrgName": "[if(contains(variables('GlobalSAJ'), 'OrgName'), variables('GlobalSAJ').OrgName, parameters('Global').OrgName)]",
                      "globalSAAppName": "[if(contains(variables('GlobalSAJ'), 'AppName'), variables('GlobalSAJ').AppName, parameters('Global').AppName)]",
                      "globalSARGName": "[if(contains(variables('GlobalSAJ'), 'RG'), variables('GlobalSAJ').RG, if(contains(variables('GlobalRGJ'), 'name'), variables('GlobalRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID'))))]",
                      "hubRGPrefix": "[if(contains(variables('HubRGJ'), 'Prefix'), variables('HubRGJ').Prefix, parameters('Prefix'))]",
                      "hubRGOrgName": "[if(contains(variables('HubRGJ'), 'OrgName'), variables('HubRGJ').OrgName, parameters('Global').OrgName)]",
                      "hubRGAppName": "[if(contains(variables('HubRGJ'), 'AppName'), variables('HubRGJ').AppName, parameters('Global').AppName)]",
                      "hubRGRGName": "[if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID'))))]",
                      "hubKVPrefix": "[if(contains(variables('HubKVJ'), 'Prefix'), variables('HubKVJ').Prefix, parameters('Prefix'))]",
                      "hubKVOrgName": "[if(contains(variables('HubKVJ'), 'OrgName'), variables('HubKVJ').OrgName, parameters('Global').OrgName)]",
                      "hubKVAppName": "[if(contains(variables('HubKVJ'), 'AppName'), variables('HubKVJ').AppName, parameters('Global').AppName)]",
                      "hubKVRGName": "[if(contains(variables('HubKVJ'), 'RG'), variables('HubKVJ').RG, variables('HubRGJ').name)]",
                      "hubAAPrefix": "[if(contains(variables('HubAAJ'), 'Prefix'), variables('HubAAJ').Prefix, parameters('Prefix'))]",
                      "hubAAOrgName": "[if(contains(variables('HubAAJ'), 'OrgName'), variables('HubAAJ').OrgName, parameters('Global').OrgName)]",
                      "hubAAAppName": "[if(contains(variables('HubAAJ'), 'AppName'), variables('HubAAJ').AppName, parameters('Global').AppName)]",
                      "hubAARGName": "[if(contains(variables('HubAAJ'), 'RG'), variables('HubAAJ').RG, variables('HubRGJ').name)]"
                    },
                    "globalRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').globalRGPrefix, variables('gh').globalRGOrgName, variables('gh').globalRGAppName, variables('gh').globalRGName)]",
                    "HubRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').hubRGPrefix, variables('gh').hubRGOrgName, variables('gh').hubRGAppName, variables('gh').hubRGRGName)]",
                    "globalSAName": "[toLower(format('{0}{1}{2}{3}sa{4}', variables('gh').globalSAPrefix, variables('gh').globalSAOrgName, variables('gh').globalSAAppName, variables('gh').globalSARGName, variables('GlobalRGJ').name))]",
                    "HubKVRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').hubKVPrefix, variables('gh').hubKVOrgName, variables('gh').hubKVAppName, variables('gh').hubKVRGName)]",
                    "HubKVName": "[toLower(format('{0}-{1}-{2}-{3}-kv{4}', variables('gh').hubKVPrefix, variables('gh').hubKVOrgName, variables('gh').hubKVAppName, variables('gh').hubKVRGName, variables('HubKVJ').name))]",
                    "AAName": "[toLower(format('{0}{1}{2}{3}{4}', variables('gh').hubAAPrefix, variables('gh').hubAAOrgName, variables('gh').hubAAAppName, variables('gh').hubAARGName, variables('HubAAJ').name))]",
                    "EnvironmentLookup": {
                      "D": "Dev",
                      "T": "Test",
                      "I": "Int",
                      "U": "UAT",
                      "P": "PROD",
                      "S": "SBX"
                    },
                    "DSCConfigLookup": {
                      "AppServers": "AppServers",
                      "InitialDOP": "AppServers",
                      "WVDServers": "AppServers"
                    },
                    "AppServerSizeLookup": {
                      "D": "D",
                      "T": "D",
                      "I": "D",
                      "U": "D",
                      "P": "P",
                      "S": "D"
                    },
                    "RebootNodeLookup": {
                      "D": true,
                      "Q": true,
                      "T": true,
                      "U": true,
                      "P": false
                    },
                    "ConfigurationMode": {
                      "D": "ApplyAndAutoCorrect",
                      "Q": "ApplyAndAutoCorrect",
                      "T": "ApplyAndAutoCorrect",
                      "U": "ApplyAndAutoCorrect",
                      "P": "ApplyAndMonitor"
                    },
                    "DSCConfigurationModeFrequencyMins": 15,
                    "networkId": "[format('{0}{1}', parameters('Global').networkid[0], string(sub(parameters('Global').networkid[1], mul(2, int(parameters('DeploymentID'))))))]",
                    "storageAccountType": "[if(equals(parameters('Environment'), 'P'), if(contains(parameters('AppServer'), 'Zone'), 'Premium_LRS', 'Premium_ZRS'), if(contains(parameters('AppServer'), 'Zone'), 'StandardSSD_ZRS', 'StandardSSD_LRS'))]",
                    "SADiagName": "[format('{0}sadiag', variables('DeploymentURI'))]",
                    "saaccountiddiag": "[resourceId('Microsoft.Storage/storageAccounts/', variables('SADiagName'))]",
                    "saSQLBackupName": "[format('{0}sasqlbackup', variables('DeploymentURI'))]",
                    "MSILookup": {
                      "SQL": "Cluster",
                      "UTL": "DefaultKeyVault",
                      "FIL": "Cluster",
                      "OCR": "Storage",
                      "WVD": "WVD"
                    },
                    "userAssignedIdentities": {
                      "Cluster": {
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiKeyVaultSecretsGet', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperator', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperatorGlobal', variables('Deployment'))))]": {}
                      },
                      "Default": {
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiKeyVaultSecretsGet', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperatorGlobal', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperator', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountFileContributor', variables('Deployment'))))]": {}
                      },
                      "DefaultKeyVault": {
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperatorGlobal', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiKeyVaultSecretsGetApp', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiAzureServiceBusDataOwner', variables('Deployment'))))]": {}
                      },
                      "WVD": {
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperatorGlobal', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountFileContributor', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiWVDRegKeyReader', variables('Deployment'))))]": {}
                      },
                      "Storage": {
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountContributor', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperatorGlobal', variables('Deployment'))))]": {}
                      },
                      "None": {}
                    },
                    "ASNAME": "[if(contains(parameters('AppServer'), 'Zone'), 'usingZones', parameters('AppServer').ASNAME)]"
                  },
                  "resources": [
                    {
                      "condition": "[not(equals(variables('ASNAME'), 'usingZones'))]",
                      "type": "Microsoft.Compute/availabilitySets",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}-as{1}', variables('Deployment'), variables('ASNAME'))]",
                      "location": "[resourceGroup().location]",
                      "sku": {
                        "name": "Aligned"
                      },
                      "properties": {
                        "platformUpdateDomainCount": 5,
                        "platformFaultDomainCount": 3
                      }
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines",
                      "apiVersion": "2021-04-01",
                      "name": "[format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "location": "[resourceGroup().location]",
                      "identity": {
                        "type": "SystemAssigned, UserAssigned",
                        "userAssignedIdentities": "[if(contains(variables('MSILookup'), parameters('AppServer').ROLE), variables('userAssignedIdentities')[variables('MSILookup')[parameters('AppServer').ROLE]], variables('userAssignedIdentities').Default)]"
                      },
                      "tags": {
                        "Environment": "[variables('EnvironmentLookup')[parameters('Environment')]]",
                        "Zone": "[if(contains(parameters('AppServer'), 'Zone'), parameters('AppServer').Zone, 1)]"
                      },
                      "zones": "[if(contains(parameters('AppServer'), 'Zone'), array(parameters('AppServer').Zone), null())]",
                      "plan": "[if(contains(variables('OSType')[parameters('AppServer').OSType], 'plan'), variables('OSType')[parameters('AppServer').OSType].plan, null())]",
                      "properties": {
                        "licenseType": "[if(contains(variables('OSType')[parameters('AppServer').OSType], 'licenseType'), variables('OSType')[parameters('AppServer').OSType].licenseType, null())]",
                        "availabilitySet": "[if(contains(parameters('AppServer'), 'Zone'), null(), createObject('id', format('{0}', resourceId('Microsoft.Compute/availabilitySets', format('{0}-as{1}', variables('Deployment'), parameters('AppServer').ASName)))))]",
                        "hardwareProfile": {
                          "vmSize": "[variables('computeSizeLookupOptions')[format('{0}-{1}', parameters('AppServer').ROLE, variables('AppServerSizeLookup')[parameters('Environment')])]]"
                        },
                        "osProfile": {
                          "computerName": "[parameters('VM').vmHostName]",
                          "adminUsername": "[if(contains(parameters('AppServer'), 'AdminUser'), parameters('AppServer').AdminUser, parameters('Global').vmAdminUserName)]",
                          "adminPassword": "[parameters('vmAdminPassword')]",
                          "customData": "[if(contains(parameters('AppServer'), 'customData'), base64(replace(parameters('AppServer').customData, '{0}', format('{0}.', variables('networkId')))), null())]",
                          "secrets": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), createArray(createObject('sourceVault', createObject('id', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults', variables('HubKVName'))), 'vaultCertificates', createArray(createObject('certificateUrl', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults/secrets', variables('HubKVName'), parameters('Global').CertName), '2021-06-01-preview').secretUriWithVersion, 'certificateStore', 'My'), createObject('certificateUrl', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults/secrets', variables('HubKVName'), parameters('Global').CertName), '2021-06-01-preview').secretUriWithVersion, 'certificateStore', 'Root'), createObject('certificateUrl', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults/secrets', variables('HubKVName'), parameters('Global').CertName), '2021-06-01-preview').secretUriWithVersion, 'certificateStore', 'CA')))), null())]",
                          "windowsConfiguration": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), parameters('VM').windowsConfiguration, null())]",
                          "linuxConfiguration": "[if(not(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows')), parameters('VM').linuxConfiguration, null())]"
                        },
                        "storageProfile": {
                          "imageReference": "[variables('OSType')[parameters('AppServer').OSType].imageReference]",
                          "osDisk": {
                            "name": "[format('{0}-{1}-OSDisk', variables('Deployment'), parameters('AppServer').Name)]",
                            "caching": "ReadWrite",
                            "diskSizeGB": "[variables('OSType')[parameters('AppServer').OSType].OSDiskGB]",
                            "createOption": "FromImage",
                            "managedDisk": {
                              "storageAccountType": "[if(contains(parameters('AppServer'), 'OSstorageAccountType'), parameters('AppServer').OSstorageAccountType, variables('storageAccountType'))]"
                            }
                          },
                          "dataDisks": "[reference(resourceId('Microsoft.Resources/deployments', format('dp{0}-AppServer-diskLookup{1}', variables('Deployment'), parameters('AppServer').Name))).outputs.DATADisks.value]"
                        },
                        "networkProfile": {
                          "copy": [
                            {
                              "name": "networkInterfaces",
                              "count": "[length(parameters('AppServer').NICs)]",
                              "input": {
                                "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}{1}{2}{3}', variables('Deployment'), if(contains(parameters('AppServer').NICs[copyIndex('networkInterfaces')], 'LB'), '-niclb', if(contains(parameters('AppServer').NICs[copyIndex('networkInterfaces')], 'PLB'), '-nicplb', if(contains(parameters('AppServer').NICs[copyIndex('networkInterfaces')], 'SLB'), '-nicslb', '-nic'))), if(equals(copyIndex('networkInterfaces'), 0), '', add(copyIndex('networkInterfaces'), 1)), parameters('AppServer').Name))]",
                                "properties": {
                                  "primary": "[contains(parameters('AppServer').NICs[copyIndex('networkInterfaces')], 'Primary')]",
                                  "deleteOption": "Delete"
                                }
                              }
                            }
                          ]
                        },
                        "diagnosticsProfile": {
                          "bootDiagnostics": {
                            "enabled": true,
                            "storageUri": "[format('https://{0}.blob.{1}', variables('SADiagName'), environment().suffixes.storage)]"
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-AppServer-nicDeployLoop{1}', variables('Deployment'), parameters('AppServer').Name))]",
                        "[resourceId('Microsoft.Compute/availabilitySets', format('{0}-as{1}', variables('Deployment'), variables('ASNAME')))]",
                        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-AppServer-diskLookup{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, contains(parameters('AppServer'), 'shutdown'))]",
                      "type": "Microsoft.DevTestLab/schedules",
                      "apiVersion": "2018-09-15",
                      "name": "[format('shutdown-computevm-{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "dailyRecurrence": {
                          "time": "[parameters('AppServer').shutdown.time]"
                        },
                        "notificationSettings": {
                          "status": "[if(and(contains(parameters('AppServer').shutdown, 'notification'), bool(parameters('AppServer').shutdown.notification)), 'Enabled', 'Disabled')]",
                          "emailRecipient": "[replace(replace(replace(string(parameters('Global').alertRecipients), '\",\"', ';'), '[\"', ''), '\"]', '')]",
                          "notificationLocale": "en",
                          "timeInMinutes": 30
                        },
                        "status": "[if(or(not(contains(parameters('AppServer').shutdown, 'enabled')), and(contains(parameters('AppServer').shutdown, 'enabled'), bool(parameters('AppServer').shutdown.enabled))), 'Enabled', 'Disabled')]",
                        "targetResourceId": "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]",
                        "taskType": "ComputeVmShutdownTask",
                        "timeZoneId": "[parameters('Global').shutdownSchedulerTimeZone]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.CertMgmt))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'KVAppServerExtensionForWindows')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.Azure.KeyVault.Edp",
                        "type": "KeyVaultForWindows",
                        "typeHandlerVersion": "0.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "secretsManagementSettings": {
                            "pollingIntervalInS": 3600,
                            "certificateStoreName": "MY",
                            "certificateStoreLocation": "LOCAL_MACHINE",
                            "observedCertificates": [
                              "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults/secrets', variables('HubKVName'), parameters('Global').CertName), '2021-06-01-preview').secretUri]"
                            ]
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(parameters('VM').match, bool(parameters('VM').Extensions.AADLogin)), and(contains(parameters('AppServer'), 'ExcludeAADLogin'), not(equals(parameters('AppServer').ExcludeAADLogin, 1))))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'AADLogin')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'Microsoft.Azure.ActiveDirectory', 'Microsoft.Azure.ActiveDirectory.LinuxSSH')]",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'AADLoginForWindows', 'AADLoginForLinux')]",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.AzureDefender))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'AzureDefenderForServers')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.Azure.AzureDefenderForServers",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'MDE.Windows', 'MDE.Linux')]",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "azureResourceId": "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]",
                          "defenderForServersWorkspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', variables('DeploymentURI')))]",
                          "forceReOnboarding": false
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.GuestConfig))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'AzureGuestConfig')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.GuestConfiguration",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'ConfigurationForWindows', 'ConfigurationForLinux')]",
                        "typeHandlerVersion": "1.2",
                        "autoUpgradeMinorVersion": true,
                        "settings": {}
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(parameters('VM').match, bool(parameters('VM').Extensions.AdminCenter)), and(contains(parameters('AppServer'), 'ExcludeAdminCenter'), not(equals(parameters('AppServer').ExcludeAdminCenter, 1))))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'AdminCenter')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "publisher": "Microsoft.AdminCenter",
                        "type": "AdminCenter",
                        "typeHandlerVersion": "0.0",
                        "settings": {
                          "port": "6516",
                          "cspFrameAncestors": [
                            "https://portal.azure.com",
                            "https://*.hosting.portal.azure.net",
                            "https://localhost:1340"
                          ],
                          "corsOrigins": [
                            "https://portal.azure.com",
                            "https://waconazure.com"
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(parameters('VM').match, bool(parameters('VM').Extensions.DomainJoin)), not(and(contains(parameters('AppServer'), 'ExcludeDomainJoin'), bool(parameters('AppServer').ExcludeDomainJoin))))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'joindomain')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.Compute",
                        "type": "JsonADDomainExtension",
                        "typeHandlerVersion": "1.3",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "Name": "[parameters('Global').ADDomainName]",
                          "OUPath": "[if(contains(parameters('AppServer'), 'OUPath'), parameters('AppServer').OUPath, '')]",
                          "User": "[format('{0}@{1}', parameters('Global').vmAdminUserName, parameters('Global').ADDomainName)]",
                          "Restart": "true",
                          "Options": 3
                        },
                        "protectedSettings": {
                          "Password": "[parameters('vmAdminPassword')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(parameters('VM').match, bool(parameters('VM').Extensions.DSC)), equals(parameters('AppServer').Role, 'PULL'))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'Microsoft.Powershell.DSC.Pull')]",
                      "location": "[resourceGroup().location]",
                      "tags": {
                        "displayName": "Powershell.DSC.Pull"
                      },
                      "properties": {
                        "publisher": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'Microsoft.Powershell', 'Microsoft.OSTCExtensions')]",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'DSC', 'DSCForLinux')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '2.77', '2.0')]",
                        "autoUpgradeMinorVersion": true,
                        "protectedSettings": {
                          "Items": {
                            "registrationKeyPrivate": "[listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubRGName')), 'Microsoft.Automation/automationAccounts', variables('AAName')), '2020-01-13-preview').keys[0].Value]"
                          }
                        },
                        "settings": {
                          "advancedOptions": {
                            "forcePullAndApply": true
                          },
                          "Properties": [
                            {
                              "Name": "RegistrationKey",
                              "Value": {
                                "UserName": "PLACEHOLDER_DONOTUSE",
                                "Password": "PrivateSettingsRef:registrationKeyPrivate"
                              },
                              "TypeName": "System.Management.Automation.PSCredential"
                            },
                            {
                              "Name": "RegistrationUrl",
                              "Value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubRGName')), 'Microsoft.Automation/automationAccounts', variables('AAName')), '2020-01-13-preview').RegistrationUrl]",
                              "TypeName": "System.String"
                            },
                            {
                              "Name": "NodeConfigurationName",
                              "Value": "[format('{0}.{1}_{2}_{3}_{4}{5}', if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], 'AppServers'), parameters('Global').OrgName, parameters('Global').Appname, parameters('AppServer').ROLE, parameters('Environment'), parameters('DeploymentID'))]",
                              "TypeName": "System.String"
                            },
                            {
                              "Name": "ConfigurationMode",
                              "Value": "[variables('ConfigurationMode')[parameters('Environment')]]",
                              "TypeName": "System.String"
                            },
                            {
                              "Name": "RebootNodeIfNeeded",
                              "Value": "[variables('RebootNodeLookup')[parameters('Environment')]]",
                              "TypeName": "System.Boolean"
                            },
                            {
                              "Name": "ConfigurationModeFrequencyMins",
                              "Value": "[variables('DSCConfigurationModeFrequencyMins')]",
                              "TypeName": "System.Int32"
                            },
                            {
                              "Name": "RefreshFrequencyMins",
                              "Value": 30,
                              "TypeName": "System.Int32"
                            },
                            {
                              "Name": "ActionAfterReboot",
                              "Value": "ContinueConfiguration",
                              "TypeName": "System.String"
                            },
                            {
                              "Name": "AllowModuleOverwrite",
                              "Value": true,
                              "TypeName": "System.Boolean"
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'joindomain')]",
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(and(parameters('VM').match, and(contains(parameters('VM').Extensions, 'DSC2'), bool(parameters('VM').Extensions.DSC2))), not(equals(parameters('AppServer').Role, 'PULL'))), or(or(equals(parameters('DeploymentName'), 'ConfigSQLAO'), equals(parameters('DeploymentName'), 'CreateADPDC')), equals(parameters('DeploymentName'), 'CreateADBDC')))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'Microsoft.Powershell.DSC2')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'Microsoft.Powershell', 'Microsoft.OSTCExtensions')]",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'DSC', 'DSCForLinux')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '2.24', '2.0')]",
                        "autoUpgradeMinorVersion": true,
                        "forceUpdateTag": "[parameters('deploymentTime')]",
                        "settings": {
                          "wmfVersion": "latest",
                          "configuration": {
                            "url": "[format('{0}/ext-DSC/DSC-{1}.zip', parameters('Global')._artifactsLocation, if(contains(parameters('AppServer'), 'DSConfig'), parameters('AppServer').DSConfig, if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], parameters('DeploymentName'))))]",
                            "script": "[format('DSC-{0}.ps1', if(contains(parameters('AppServer'), 'DSConfig'), parameters('AppServer').DSConfig, if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], parameters('DeploymentName'))))]",
                            "function": "[if(contains(parameters('AppServer'), 'DSConfig'), parameters('AppServer').DSConfig, if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], parameters('DeploymentName')))]"
                          },
                          "configurationArguments": {
                            "DomainName": "[parameters('Global').ADDomainName]"
                          }
                        },
                        "protectedSettings": {
                          "configurationArguments": {
                            "AdminCreds": {
                              "UserName": "[parameters('Global').vmAdminUserName]",
                              "Password": "[parameters('vmAdminPassword')]"
                            },
                            "SQLServiceCreds": {
                              "UserName": "sqladmin",
                              "Password": "[parameters('vmAdminPassword')]"
                            },
                            "witnessStorageKey": {
                              "UserName": "sakey",
                              "Password": "[parameters('saKey')]"
                            }
                          },
                          "configurationUrlSasToken": "[parameters('Global')._artifactsLocationSasToken]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'joindomain')]",
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(and(parameters('VM').match, bool(parameters('VM').Extensions.DSC)), not(equals(parameters('AppServer').Role, 'PULL'))), not(or(or(equals(parameters('DeploymentName'), 'ConfigSQLAO'), equals(parameters('DeploymentName'), 'CreateADPDC')), equals(parameters('DeploymentName'), 'CreateADBDC'))))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'Microsoft.Powershell.DSC')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'Microsoft.Powershell', 'Microsoft.OSTCExtensions')]",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'DSC', 'DSCForLinux')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '2.24', '2.0')]",
                        "autoUpgradeMinorVersion": true,
                        "forceUpdateTag": "[parameters('deploymentTime')]",
                        "settings": {
                          "wmfVersion": "latest",
                          "configuration": {
                            "url": "[format('{0}/ext-DSC/DSC-{1}.zip', parameters('Global')._artifactsLocation, if(contains(parameters('AppServer'), 'DSConfig'), parameters('AppServer').DSConfig, if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], parameters('DeploymentName'))))]",
                            "script": "[format('DSC-{0}.ps1', if(contains(parameters('AppServer'), 'DSConfig'), parameters('AppServer').DSConfig, if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], parameters('DeploymentName'))))]",
                            "function": "[if(contains(parameters('AppServer'), 'DSConfig'), parameters('AppServer').DSConfig, if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], parameters('DeploymentName')))]"
                          },
                          "configurationArguments": {
                            "DomainName": "[parameters('Global').ADDomainName]",
                            "Thumbprint": "[parameters('Global').CertThumbprint]",
                            "storageAccountId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('globalRGName')), 'Microsoft.Storage/storageAccounts', variables('globalSAName'))]",
                            "deployment": "[variables('Deployment')]",
                            "networkid": "[format('{0}.', variables('networkId'))]",
                            "appInfo": "[if(contains(parameters('AppServer'), 'AppInfo'), string(parameters('VM').AppInfo), '')]",
                            "DataDiskInfo": "[string(parameters('VM').DataDisk)]",
                            "clientIDLocal": "[if(equals(format('{0}{1}', parameters('Environment'), parameters('DeploymentID')), 'G0'), '', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('RGName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-uaiStorageAccountOperator', variables('Deployment'))), '2018-11-30').clientId)]",
                            "clientIDGlobal": "[if(equals(format('{0}{1}', parameters('Environment'), parameters('DeploymentID')), 'G0'), '', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('RGName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-uaiStorageAccountFileContributor', variables('Deployment'))), '2018-11-30').clientId)]"
                          },
                          "configurationData": {
                            "url": "[format('{0}/ext-CD/{1}-ConfigurationData.psd1', parameters('Global')._artifactsLocation, parameters('AppServer').Role)]"
                          }
                        },
                        "protectedSettings": {
                          "configurationArguments": {
                            "AdminCreds": {
                              "UserName": "[parameters('Global').vmAdminUserName]",
                              "Password": "[parameters('vmAdminPassword')]"
                            },
                            "sshPublic": {
                              "UserName": "ssh",
                              "Password": "[parameters('sshPublic')]"
                            },
                            "devOpsPat": {
                              "UserName": "pat",
                              "Password": "[parameters('devOpsPat')]"
                            }
                          },
                          "configurationUrlSasToken": "[parameters('Global')._artifactsLocationSasToken]",
                          "configurationDataUrlSasToken": "[parameters('Global')._artifactsLocationSasToken]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'joindomain')]",
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.IaaSDiagnostics))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2020-12-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'vmDiagnostics')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Diagnostics",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'IaaSDiagnostics', 'LinuxDiagnostic')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '1.9', '3.0')]",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "WadCfg": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), variables('WadCfg'), null())]",
                          "ladCfg": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), null(), variables('ladCfg'))]",
                          "StorageAccount": "[variables('saaccountiddiag')]",
                          "StorageType": "TableAndBlob"
                        },
                        "protectedSettings": {
                          "storageAccountName": "[variables('saaccountiddiag')]",
                          "storageAccountKey": "[listKeys(variables('saaccountiddiag'), '2016-01-01').keys[0].value]",
                          "storageAccountEndPoint": "[format('https://{0}/', environment().suffixes.storage)]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.DependencyAgent))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2020-12-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'DependencyAgent')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'DependencyAgentWindows', 'DependencyAgentLinux')]",
                        "typeHandlerVersion": "9.5",
                        "autoUpgradeMinorVersion": true
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.AzureMonitorAgent))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2020-12-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), format('{0}', if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'AzureMonitorWindowsAgent', 'AzureMonitorLinuxAgent')))]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "publisher": "Microsoft.Azure.Monitor",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'AzureMonitorWindowsAgent', 'AzureMonitorLinuxAgent')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '1.0', '1.5')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.MonitoringAgent))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2020-12-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'MonitoringAgent')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.EnterpriseCloud.Monitoring",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'MicrosoftMonitoringAgent', 'OmsAgentForLinux')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '1.0', '1.4')]",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "workspaceId": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', variables('DeploymentURI'))), '2021-06-01').customerId]"
                        },
                        "protectedSettings": {
                          "workspaceKey": "[listKeys(resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', variables('DeploymentURI'))), '2021-06-01').primarySharedKey]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.GuestHealthAgent))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2020-12-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), format('{0}', if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'GuestHealthWindowsAgent', 'GuestHealthLinuxAgent')))]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "publisher": "Microsoft.Azure.Monitor.VirtualMachines.GuestHealth",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'GuestHealthWindowsAgent', 'GuestHealthLinuxAgent')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '1.0', '1.0')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Insights/dataCollectionRuleAssociations",
                      "apiVersion": "2019-11-01-preview",
                      "scope": "[format('Microsoft.Compute/virtualMachines/{0}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]",
                      "name": "[format('{0}vmInsights', variables('DeploymentURI'))]",
                      "properties": {
                        "description": "Association of data collection rule for AppServer Insights Health.",
                        "dataCollectionRuleId": "[resourceId('Microsoft.Insights/dataCollectionRules', format('{0}vmInsights', variables('DeploymentURI')))]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.chefClient))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'chefClient')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Chef.Bootstrap.WindowsAzure",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'ChefClient', 'LinuxChefClient')]",
                        "typeHandlerVersion": "1210.12",
                        "settings": {
                          "bootstrap_options": {
                            "chef_server_url": "[parameters('Global').chef_server_url]",
                            "validation_client_name": "[parameters('Global').chef_validation_client_name]"
                          },
                          "runlist": "recipe[mycookbook::default]"
                        },
                        "protectedSettings": {
                          "validation_key": "[parameters('Global').chef_validation_key]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(parameters('VM').match, equals(parameters('AppServer').role, 'SQL')), bool(parameters('VM').Extensions.SqlIaasExtension))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'SqlIaasExtension')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "type": "SqlIaaSAgent",
                        "publisher": "Microsoft.SqlServer.Management",
                        "typeHandlerVersion": "1.2",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "AutoTelemetrySettings": {
                            "Region": "[resourceGroup().location]"
                          },
                          "KeyVaultCredentialSettings": {
                            "Enable": true,
                            "CredentialName": "[parameters('Global').sqlCredentialName]"
                          }
                        },
                        "protectedSettings": {
                          "PrivateKeyVaultCredentialSettings": {
                            "AzureKeyVaultUrl": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults', variables('HubKVName')), '2021-06-01-preview').vaultUri]",
                            "StorageUrl": "[reference(resourceId('Microsoft.Storage/storageAccounts', if(equals(parameters('AppServer').Role, 'SQL'), variables('saSQLBackupName'), variables('SADiagName'))), '2015-06-15').primaryEndpoints.blob]",
                            "StorageAccessKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', if(equals(parameters('AppServer').Role, 'SQL'), variables('saSQLBackupName'), variables('SADiagName'))), '2016-01-01').keys[0].value]",
                            "Password": "[parameters('vmAdminPassword')]"
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(parameters('VM').match, equals(parameters('AppServer').role, 'SQL')), bool(parameters('VM').Extensions.BackupWindowsWorkloadSQL))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'AzureBackupWindowsWorkload')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "locale": "en-us",
                          "AppServerType": "microsoft.compute/virtualmachines"
                        },
                        "publisher": "Microsoft.Azure.RecoveryServices.WorkloadBackup",
                        "type": "AzureBackupWindowsWorkload",
                        "typeHandlerVersion": "1.1"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.Antimalware))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'IaaSAntimalware')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Security",
                        "type": "IaaSAntimalware",
                        "typeHandlerVersion": "1.5",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "Monitoring": "ON",
                          "StorageAccountName": "[variables('SADiagName')]",
                          "AntimalwareEnabled": true,
                          "RealtimeProtectionEnabled": "true",
                          "ScheduledScanSettings": {
                            "isEnabled": "true",
                            "day": "1",
                            "time": "720",
                            "scanType": "Full"
                          },
                          "Exclusions": {
                            "Extensions": "",
                            "Paths": "",
                            "Processes": ""
                          }
                        },
                        "protectedSettings": null
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-AppServer-publicIPDeploy{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[variables('Deployment')]"
                          },
                          "DeploymentURI": {
                            "value": "[variables('DeploymentURI')]"
                          },
                          "NICs": {
                            "value": "[parameters('AppServer').NICs]"
                          },
                          "VM": {
                            "value": "[parameters('AppServer')]"
                          },
                          "PIPprefix": {
                            "value": "AppServer"
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "18109364379899578760"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "DeploymentURI": {
                              "type": "string"
                            },
                            "PIPprefix": {
                              "type": "string"
                            },
                            "NICs": {
                              "type": "array"
                            },
                            "VM": {
                              "type": "object"
                            },
                            "Global": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "condition": "[and(contains(parameters('NICs')[copyIndex()], 'PublicIP'), not(equals(parameters('NICs')[copyIndex()].PublicIP, null())))]",
                              "copy": {
                                "name": "PublicIP",
                                "count": "[length(parameters('NICs'))]"
                              },
                              "type": "Microsoft.Network/publicIPAddresses",
                              "apiVersion": "2021-02-01",
                              "name": "[format('{0}-{1}{2}-publicip{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1))]",
                              "location": "[resourceGroup().location]",
                              "sku": {
                                "name": "[if(contains(parameters('VM'), 'Zone'), 'Standard', 'Basic')]"
                              },
                              "properties": {
                                "publicIPAllocationMethod": "[parameters('NICs')[copyIndex()].PublicIP]",
                                "dnsSettings": {
                                  "domainNameLabel": "[toLower(format('{0}-{1}{2}-{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1)))]"
                                }
                              }
                            },
                            {
                              "condition": "[and(contains(parameters('NICs')[copyIndex()], 'PublicIP'), not(equals(parameters('NICs')[copyIndex()].PublicIP, null())))]",
                              "copy": {
                                "name": "PublicIPDiag",
                                "count": "[length(parameters('NICs'))]"
                              },
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2017-05-01-preview",
                              "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', format('{0}-{1}{2}-publicip{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1)))]",
                              "name": "service",
                              "properties": {
                                "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                                "logs": [
                                  {
                                    "category": "DDoSProtectionNotifications",
                                    "enabled": true
                                  }
                                ],
                                "metrics": [
                                  {
                                    "timeGrain": "PT5M",
                                    "enabled": true,
                                    "retentionPolicy": {
                                      "enabled": false,
                                      "days": 0
                                    }
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/publicIPAddresses', format('{0}-{1}{2}-publicip{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1)))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "PIPID": {
                              "type": "array",
                              "copy": {
                                "count": "[length(parameters('NICs'))]",
                                "input": "[if(and(contains(parameters('NICs')[copyIndex()], 'PublicIP'), not(equals(parameters('NICs')[copyIndex()].PublicIP, null()))), resourceId('Microsoft.Network/publicIPAddresses', format('{0}-{1}{2}-publicip{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1))), '')]"
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-AppServer-JITNSG-{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[variables('Deployment')]"
                          },
                          "VM": {
                            "value": "[parameters('AppServer')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "16183288891198554910"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "VM": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/networkSecurityGroups",
                              "apiVersion": "2021-05-01",
                              "name": "[format('{0}-vm{1}-JITNSG', parameters('Deployment'), parameters('VM').Name)]",
                              "location": "[resourceGroup().location]"
                            }
                          ]
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-AppServer-nicDeployLoop{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[variables('Deployment')]"
                          },
                          "DeploymentURI": {
                            "value": "[variables('DeploymentURI')]"
                          },
                          "DeploymentID": {
                            "value": "[parameters('DeploymentID')]"
                          },
                          "NICs": {
                            "value": "[parameters('AppServer').NICs]"
                          },
                          "VM": {
                            "value": "[parameters('AppServer')]"
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "15680478958950286894"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "DeploymentURI": {
                              "type": "string"
                            },
                            "DeploymentID": {
                              "type": "string"
                            },
                            "NICs": {
                              "type": "array"
                            },
                            "VM": {
                              "type": "object"
                            },
                            "Global": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "NIC",
                                "count": "[length(parameters('NICs'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('dp{0}-nicDeploy{1}{2}', parameters('Deployment'), parameters('VM').Name, add(copyIndex(), 1))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "Deployment": {
                                    "value": "[parameters('Deployment')]"
                                  },
                                  "DeploymentURI": {
                                    "value": "[parameters('DeploymentURI')]"
                                  },
                                  "DeploymentID": {
                                    "value": "[parameters('DeploymentID')]"
                                  },
                                  "NIC": {
                                    "value": "[parameters('NICs')[copyIndex()]]"
                                  },
                                  "NICNumber": {
                                    "value": "[string(add(copyIndex(), 1))]"
                                  },
                                  "VM": {
                                    "value": "[parameters('VM')]"
                                  },
                                  "Global": {
                                    "value": "[parameters('Global')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.4.1318.3566",
                                      "templateHash": "13928916846586964615"
                                    }
                                  },
                                  "parameters": {
                                    "Deployment": {
                                      "type": "string"
                                    },
                                    "DeploymentURI": {
                                      "type": "string"
                                    },
                                    "DeploymentID": {
                                      "type": "string"
                                    },
                                    "NIC": {
                                      "type": "object"
                                    },
                                    "NICNumber": {
                                      "type": "string"
                                    },
                                    "VM": {
                                      "type": "object"
                                    },
                                    "Global": {
                                      "type": "object"
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "loadBalancerInboundNatRules",
                                        "count": "[length(variables('rules'))]",
                                        "input": {
                                          "id": "[format('{0}/providers/Microsoft.Network/loadBalancers/{1}-lb{2}/inboundNatRules/{3}', resourceGroup().id, parameters('Deployment'), if(contains(parameters('NIC'), 'PLB'), parameters('NIC').PLB, 'none'), if(contains(parameters('NIC'), 'NATRules'), variables('rules')[copyIndex('loadBalancerInboundNatRules')], 'none'))]"
                                        }
                                      }
                                    ],
                                    "networkId": "[format('{0}{1}', parameters('Global').networkid[0], string(sub(parameters('Global').networkid[1], mul(2, int(parameters('DeploymentID'))))))]",
                                    "networkIdUpper": "[format('{0}{1}', parameters('Global').networkid[0], string(add(1, sub(parameters('Global').networkid[1], mul(2, int(parameters('DeploymentID')))))))]",
                                    "VNetID": "[resourceId('Microsoft.Network/VirtualNetworks', format('{0}-vn', parameters('Deployment')))]",
                                    "subnetID": "[format('{0}/subnets/sn{1}', variables('VNetID'), parameters('NIC').Subnet)]",
                                    "acceleratedNetworking": "[if(contains(parameters('NIC'), 'FastNic'), true(), false())]",
                                    "NICSuffix": "[if(equals(parameters('NICNumber'), '1'), '', parameters('NICNumber'))]",
                                    "IPAllocation": "[if(contains(parameters('NIC'), 'StaticIP'), 'Static', 'Dynamic')]",
                                    "privateIPAddress": "[if(contains(parameters('NIC'), 'StaticIP'), format('{0}.{1}', if(equals(parameters('NIC').Subnet, 'MT02'), variables('networkIdUpper'), variables('networkId')), parameters('NIC').StaticIP), null())]",
                                    "publicIPAddress": "[if(not(contains(parameters('NIC'), 'PublicIP')), null(), createObject('id', resourceId('Microsoft.Network/publicIPAddresses', format('{0}-vm{1}-publicip{2}', parameters('Deployment'), parameters('VM').Name, parameters('NICNumber')))))]",
                                    "JITNSG": {
                                      "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-vm{1}-JITNSG', parameters('Deployment'), parameters('VM').Name))]"
                                    },
                                    "rules": "[if(contains(parameters('NIC'), 'NatRules'), parameters('NIC').NatRules, createArray())]"
                                  },
                                  "resources": [
                                    {
                                      "condition": "[not(or(or(or(contains(parameters('NIC'), 'LB'), contains(parameters('NIC'), 'PLB')), contains(parameters('NIC'), 'SLB')), contains(parameters('NIC'), 'ISLB')))]",
                                      "type": "Microsoft.Network/networkInterfaces",
                                      "apiVersion": "2021-02-01",
                                      "name": "[format('{0}-nic{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name)]",
                                      "location": "[resourceGroup().location]",
                                      "properties": {
                                        "enableAcceleratedNetworking": "[variables('acceleratedNetworking')]",
                                        "ipConfigurations": [
                                          {
                                            "name": "ipconfig1",
                                            "properties": {
                                              "publicIPAddress": "[if(contains(parameters('NIC'), 'PublicIP'), variables('publicIPAddress'), null())]",
                                              "privateIPAllocationMethod": "[variables('IPAllocation')]",
                                              "privateIPAddress": "[variables('privateIPAddress')]",
                                              "subnet": {
                                                "id": "[variables('subnetID')]"
                                              }
                                            }
                                          }
                                        ],
                                        "networkSecurityGroup": "[variables('JITNSG')]"
                                      }
                                    },
                                    {
                                      "condition": "[not(or(contains(parameters('NIC'), 'LB'), or(contains(parameters('NIC'), 'PLB'), or(contains(parameters('NIC'), 'SLB'), contains(parameters('NIC'), 'ISLB')))))]",
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', format('{0}-nic{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]",
                                      "name": "service",
                                      "properties": {
                                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                                        "metrics": [
                                          {
                                            "timeGrain": "PT5M",
                                            "enabled": true,
                                            "retentionPolicy": {
                                              "enabled": false,
                                              "days": 0
                                            }
                                          }
                                        ]
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nic{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]"
                                      ]
                                    },
                                    {
                                      "condition": "[contains(parameters('NIC'), 'PLB')]",
                                      "type": "Microsoft.Network/networkInterfaces",
                                      "apiVersion": "2021-02-01",
                                      "name": "[format('{0}-nicplb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name)]",
                                      "location": "[resourceGroup().location]",
                                      "properties": {
                                        "enableAcceleratedNetworking": "[variables('acceleratedNetworking')]",
                                        "ipConfigurations": [
                                          {
                                            "name": "ipconfig1",
                                            "properties": {
                                              "loadBalancerBackendAddressPools": [
                                                {
                                                  "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', format('{0}-lb{1}', parameters('Deployment'), parameters('NIC').PLB), parameters('NIC').PLB)]"
                                                }
                                              ],
                                              "loadBalancerInboundNatRules": "[if(contains(parameters('NIC'), 'NATRules'), variables('loadBalancerInboundNatRules'), null())]",
                                              "privateIPAllocationMethod": "[variables('IPAllocation')]",
                                              "privateIPAddress": "[variables('privateIPAddress')]",
                                              "subnet": {
                                                "id": "[variables('subnetID')]"
                                              }
                                            }
                                          }
                                        ],
                                        "networkSecurityGroup": "[variables('JITNSG')]"
                                      }
                                    },
                                    {
                                      "condition": "[contains(parameters('NIC'), 'PLB')]",
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', format('{0}-nicplb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]",
                                      "name": "service",
                                      "properties": {
                                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                                        "metrics": [
                                          {
                                            "timeGrain": "PT5M",
                                            "enabled": true,
                                            "retentionPolicy": {
                                              "enabled": false,
                                              "days": 0
                                            }
                                          }
                                        ]
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nicplb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]"
                                      ]
                                    },
                                    {
                                      "condition": "[contains(parameters('NIC'), 'LB')]",
                                      "type": "Microsoft.Network/networkInterfaces",
                                      "apiVersion": "2021-02-01",
                                      "name": "[format('{0}-niclb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name)]",
                                      "location": "[resourceGroup().location]",
                                      "properties": {
                                        "enableAcceleratedNetworking": "[variables('acceleratedNetworking')]",
                                        "ipConfigurations": [
                                          {
                                            "name": "ipconfig1",
                                            "properties": {
                                              "loadBalancerBackendAddressPools": [
                                                {
                                                  "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', format('{0}-ilb{1}', parameters('Deployment'), parameters('NIC').LB), parameters('NIC').LB)]"
                                                }
                                              ],
                                              "privateIPAllocationMethod": "[variables('IPAllocation')]",
                                              "privateIPAddress": "[variables('privateIPAddress')]",
                                              "subnet": {
                                                "id": "[variables('subnetID')]"
                                              }
                                            }
                                          }
                                        ],
                                        "networkSecurityGroup": "[variables('JITNSG')]"
                                      }
                                    },
                                    {
                                      "condition": "[contains(parameters('NIC'), 'LB')]",
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', format('{0}-niclb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]",
                                      "name": "service",
                                      "properties": {
                                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                                        "metrics": [
                                          {
                                            "timeGrain": "PT5M",
                                            "enabled": true,
                                            "retentionPolicy": {
                                              "enabled": false,
                                              "days": 0
                                            }
                                          }
                                        ]
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-niclb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]"
                                      ]
                                    },
                                    {
                                      "condition": "[contains(parameters('NIC'), 'SLB')]",
                                      "type": "Microsoft.Network/networkInterfaces",
                                      "apiVersion": "2021-02-01",
                                      "name": "[format('{0}-nicslb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name)]",
                                      "location": "[resourceGroup().location]",
                                      "properties": {
                                        "enableAcceleratedNetworking": "[variables('acceleratedNetworking')]",
                                        "ipConfigurations": [
                                          {
                                            "name": "ipconfig1",
                                            "properties": {
                                              "loadBalancerBackendAddressPools": [
                                                {
                                                  "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', format('{0}-lb{1}', parameters('Deployment'), parameters('NIC').SLB), parameters('NIC').SLB)]"
                                                }
                                              ],
                                              "privateIPAllocationMethod": "[variables('IPAllocation')]",
                                              "privateIPAddress": "[variables('privateIPAddress')]",
                                              "subnet": {
                                                "id": "[variables('subnetID')]"
                                              }
                                            }
                                          }
                                        ],
                                        "networkSecurityGroup": "[variables('JITNSG')]"
                                      }
                                    },
                                    {
                                      "condition": "[contains(parameters('NIC'), 'SLB')]",
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', format('{0}-nicslb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]",
                                      "name": "service",
                                      "properties": {
                                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                                        "metrics": [
                                          {
                                            "timeGrain": "PT5M",
                                            "enabled": true,
                                            "retentionPolicy": {
                                              "enabled": false,
                                              "days": 0
                                            }
                                          }
                                        ]
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nicslb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]"
                                      ]
                                    }
                                  ],
                                  "outputs": {
                                    "foo7": {
                                      "type": "array",
                                      "value": "[variables('loadBalancerInboundNatRules')]"
                                    },
                                    "foo": {
                                      "type": "object",
                                      "value": "[parameters('NIC')]"
                                    }
                                  }
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-AppServer-publicIPDeploy{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-AppServer-diskLookup{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[variables('Deployment')]"
                          },
                          "DeploymentID": {
                            "value": "[parameters('DeploymentID')]"
                          },
                          "Name": {
                            "value": "[parameters('AppServer').Name]"
                          },
                          "SOFS": {
                            "value": "[if(contains(variables('DataDiskInfo')[parameters('AppServer').DDRole], 'SOFS'), variables('DataDiskInfo')[parameters('AppServer').DDRole].SOFS, json('{\"1\":1}'))]"
                          },
                          "DATA": {
                            "value": "[if(contains(variables('DataDiskInfo')[parameters('AppServer').DDRole], 'DATA'), variables('DataDiskInfo')[parameters('AppServer').DDRole].DATA, json('{\"1\":1}'))]"
                          },
                          "LOGS": {
                            "value": "[if(contains(variables('DataDiskInfo')[parameters('AppServer').DDRole], 'LOGS'), variables('DataDiskInfo')[parameters('AppServer').DDRole].LOGS, json('{\"1\":1}'))]"
                          },
                          "TEMPDB": {
                            "value": "[if(contains(variables('DataDiskInfo')[parameters('AppServer').DDRole], 'TEMPDB'), variables('DataDiskInfo')[parameters('AppServer').DDRole].TEMPDB, json('{\"1\":1}'))]"
                          },
                          "BACKUP": {
                            "value": "[if(contains(variables('DataDiskInfo')[parameters('AppServer').DDRole], 'BACKUP'), variables('DataDiskInfo')[parameters('AppServer').DDRole].BACKUP, json('{\"1\":1}'))]"
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "13688646372196984293"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "DeploymentID": {
                              "type": "string"
                            },
                            "Name": {
                              "type": "string"
                            },
                            "DATA": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "DATASS": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "SOFS": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "LOGS": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "TEMPDB": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "BACKUP": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "DISKS": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "Global": {
                              "type": "object"
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "Data_var",
                                "count": "[length(range(0, if(contains(parameters('DATA'), '1'), 1, length(parameters('DATA').LUNS))))]",
                                "input": {
                                  "name": "[if(contains(parameters('DATA'), '1'), 1, format('{0}-{1}-DATA-DATA{2}', parameters('Deployment'), parameters('Name'), padLeft(parameters('DATA').LUNS[range(0, if(contains(parameters('DATA'), '1'), 1, length(parameters('DATA').LUNS)))[copyIndex('Data_var')]][0], 2, '0')))]",
                                  "lun": "[if(contains(parameters('DATA'), '1'), 1, int(parameters('DATA').LUNS[range(0, if(contains(parameters('DATA'), '1'), 1, length(parameters('DATA').LUNS)))[copyIndex('Data_var')]][0]))]",
                                  "caching": "[if(contains(parameters('DATA'), '1'), 1, parameters('DATA').caching)]",
                                  "diskSizeGB": "[if(contains(parameters('DATA'), '1'), 1, int(parameters('DATA').LUNS[range(0, if(contains(parameters('DATA'), '1'), 1, length(parameters('DATA').LUNS)))[copyIndex('Data_var')]][1]))]",
                                  "createOption": "[if(contains(parameters('DATA'), '1'), 1, if(equals(length(parameters('DATA').LUNS[range(0, if(contains(parameters('DATA'), '1'), 1, length(parameters('DATA').LUNS)))[copyIndex('Data_var')]]), 3), parameters('DATA').LUNS[range(0, if(contains(parameters('DATA'), '1'), 1, length(parameters('DATA').LUNS)))[copyIndex('Data_var')]][2], 'Empty'))]",
                                  "managedDisk": "[if(contains(parameters('DATA'), '1'), 1, if(contains(parameters('DATA'), 'saType'), json(format('{{\"storageAccountType\":\"{0}\"}}', parameters('DATA').saType)), json('null')))]"
                                }
                              },
                              {
                                "name": "Datass_var",
                                "count": "[length(range(0, if(contains(parameters('DATASS'), '1'), 1, length(parameters('DATASS').LUNS))))]",
                                "input": {
                                  "lun": "[if(contains(parameters('DATASS'), '1'), 1, int(parameters('DATASS').LUNS[range(0, if(contains(parameters('DATASS'), '1'), 1, length(parameters('DATASS').LUNS)))[copyIndex('Datass_var')]][0]))]",
                                  "caching": "[if(contains(parameters('DATASS'), '1'), 1, parameters('DATASS').caching)]",
                                  "diskSizeGB": "[if(contains(parameters('DATASS'), '1'), 1, int(parameters('DATASS').LUNS[range(0, if(contains(parameters('DATASS'), '1'), 1, length(parameters('DATASS').LUNS)))[copyIndex('Datass_var')]][1]))]",
                                  "createOption": "[if(contains(parameters('DATASS'), '1'), 1, if(equals(length(parameters('DATASS').LUNS[range(0, if(contains(parameters('DATASS'), '1'), 1, length(parameters('DATASS').LUNS)))[copyIndex('Datass_var')]]), 3), parameters('DATASS').LUNS[range(0, if(contains(parameters('DATASS'), '1'), 1, length(parameters('DATASS').LUNS)))[copyIndex('Datass_var')]][2], 'Empty'))]",
                                  "managedDisk": "[if(contains(parameters('DATASS'), '1'), 1, if(contains(parameters('DATASS'), 'saType'), json(format('{{\"storageAccountType\":\"{0}\"}}', parameters('DATASS').saType)), json('null')))]"
                                }
                              },
                              {
                                "name": "SOFS_var",
                                "count": "[length(range(0, if(contains(parameters('SOFS'), '1'), 1, length(parameters('SOFS').LUNS))))]",
                                "input": {
                                  "name": "[if(contains(parameters('SOFS'), '1'), 1, format('{0}-{1}-DATA-SOFS{2}', parameters('Deployment'), parameters('Name'), padLeft(parameters('SOFS').LUNS[range(0, if(contains(parameters('SOFS'), '1'), 1, length(parameters('SOFS').LUNS)))[copyIndex('SOFS_var')]][0], 2, '0')))]",
                                  "lun": "[if(contains(parameters('SOFS'), '1'), 1, int(parameters('SOFS').LUNS[range(0, if(contains(parameters('SOFS'), '1'), 1, length(parameters('SOFS').LUNS)))[copyIndex('SOFS_var')]][0]))]",
                                  "caching": "[if(contains(parameters('SOFS'), '1'), 1, parameters('SOFS').caching)]",
                                  "diskSizeGB": "[if(contains(parameters('SOFS'), '1'), 1, int(parameters('SOFS').LUNS[range(0, if(contains(parameters('SOFS'), '1'), 1, length(parameters('SOFS').LUNS)))[copyIndex('SOFS_var')]][1]))]",
                                  "createOption": "[if(contains(parameters('SOFS'), '1'), 1, if(equals(length(parameters('SOFS').LUNS[range(0, if(contains(parameters('SOFS'), '1'), 1, length(parameters('SOFS').LUNS)))[copyIndex('SOFS_var')]]), 3), parameters('SOFS').LUNS[range(0, if(contains(parameters('SOFS'), '1'), 1, length(parameters('SOFS').LUNS)))[copyIndex('SOFS_var')]][2], 'Empty'))]",
                                  "managedDisk": "[if(contains(parameters('SOFS'), '1'), 1, if(contains(parameters('SOFS'), 'saType'), json(format('{{\"storageAccountType\":\"{0}\"}}', parameters('SOFS').saType)), json('null')))]"
                                }
                              },
                              {
                                "name": "LOGS_var",
                                "count": "[length(range(0, if(contains(parameters('LOGS'), '1'), 1, length(parameters('LOGS').LUNS))))]",
                                "input": {
                                  "name": "[if(contains(parameters('LOGS'), '1'), 1, format('{0}-{1}-DATA-LOGS{2}', parameters('Deployment'), parameters('Name'), padLeft(parameters('LOGS').LUNS[range(0, if(contains(parameters('LOGS'), '1'), 1, length(parameters('LOGS').LUNS)))[copyIndex('LOGS_var')]][0], 2, '0')))]",
                                  "lun": "[if(contains(parameters('LOGS'), '1'), 1, int(parameters('LOGS').LUNS[range(0, if(contains(parameters('LOGS'), '1'), 1, length(parameters('LOGS').LUNS)))[copyIndex('LOGS_var')]][0]))]",
                                  "caching": "[if(contains(parameters('LOGS'), '1'), 1, parameters('LOGS').caching)]",
                                  "diskSizeGB": "[if(contains(parameters('LOGS'), '1'), 1, int(parameters('LOGS').LUNS[range(0, if(contains(parameters('LOGS'), '1'), 1, length(parameters('LOGS').LUNS)))[copyIndex('LOGS_var')]][1]))]",
                                  "createOption": "[if(contains(parameters('LOGS'), '1'), 1, if(equals(length(parameters('LOGS').LUNS[range(0, if(contains(parameters('LOGS'), '1'), 1, length(parameters('LOGS').LUNS)))[copyIndex('LOGS_var')]]), 3), parameters('LOGS').LUNS[range(0, if(contains(parameters('LOGS'), '1'), 1, length(parameters('LOGS').LUNS)))[copyIndex('LOGS_var')]][2], 'Empty'))]",
                                  "managedDisk": "[if(contains(parameters('LOGS'), '1'), 1, if(contains(parameters('LOGS'), 'saType'), json(format('{{\"storageAccountType\":\"{0}\"}}', parameters('LOGS').saType)), json('null')))]"
                                }
                              },
                              {
                                "name": "TEMPDB_var",
                                "count": "[length(range(0, if(contains(parameters('TEMPDB'), '1'), 1, length(parameters('TEMPDB').LUNS))))]",
                                "input": {
                                  "name": "[if(contains(parameters('TEMPDB'), '1'), 1, format('{0}-{1}-DATA-TEMPDB{2}', parameters('Deployment'), parameters('Name'), padLeft(parameters('TEMPDB').LUNS[range(0, if(contains(parameters('TEMPDB'), '1'), 1, length(parameters('TEMPDB').LUNS)))[copyIndex('TEMPDB_var')]][0], 2, '0')))]",
                                  "lun": "[if(contains(parameters('TEMPDB'), '1'), 1, int(parameters('TEMPDB').LUNS[range(0, if(contains(parameters('TEMPDB'), '1'), 1, length(parameters('TEMPDB').LUNS)))[copyIndex('TEMPDB_var')]][0]))]",
                                  "caching": "[if(contains(parameters('TEMPDB'), '1'), 1, parameters('TEMPDB').caching)]",
                                  "diskSizeGB": "[if(contains(parameters('TEMPDB'), '1'), 1, int(parameters('TEMPDB').LUNS[range(0, if(contains(parameters('TEMPDB'), '1'), 1, length(parameters('TEMPDB').LUNS)))[copyIndex('TEMPDB_var')]][1]))]",
                                  "createOption": "[if(contains(parameters('TEMPDB'), '1'), 1, if(equals(length(parameters('TEMPDB').LUNS[range(0, if(contains(parameters('TEMPDB'), '1'), 1, length(parameters('TEMPDB').LUNS)))[copyIndex('TEMPDB_var')]]), 3), parameters('TEMPDB').LUNS[range(0, if(contains(parameters('TEMPDB'), '1'), 1, length(parameters('TEMPDB').LUNS)))[copyIndex('TEMPDB_var')]][2], 'Empty'))]",
                                  "managedDisk": "[if(contains(parameters('TEMPDB'), '1'), 1, if(contains(parameters('TEMPDB'), 'saType'), json(format('{{\"storageAccountType\":\"{0}\"}}', parameters('TEMPDB').saType)), json('null')))]"
                                }
                              },
                              {
                                "name": "BACKUP_var",
                                "count": "[length(range(0, if(contains(parameters('BACKUP'), '1'), 1, length(parameters('BACKUP').LUNS))))]",
                                "input": {
                                  "name": "[if(contains(parameters('BACKUP'), '1'), 1, format('{0}-{1}-DATA-BACKUP{2}', parameters('Deployment'), parameters('Name'), padLeft(parameters('BACKUP').LUNS[range(0, if(contains(parameters('BACKUP'), '1'), 1, length(parameters('BACKUP').LUNS)))[copyIndex('BACKUP_var')]][0], 2, '0')))]",
                                  "lun": "[if(contains(parameters('BACKUP'), '1'), 1, int(parameters('BACKUP').LUNS[range(0, if(contains(parameters('BACKUP'), '1'), 1, length(parameters('BACKUP').LUNS)))[copyIndex('BACKUP_var')]][0]))]",
                                  "caching": "[if(contains(parameters('BACKUP'), '1'), 1, parameters('BACKUP').caching)]",
                                  "diskSizeGB": "[if(contains(parameters('BACKUP'), '1'), 1, int(parameters('BACKUP').LUNS[range(0, if(contains(parameters('BACKUP'), '1'), 1, length(parameters('BACKUP').LUNS)))[copyIndex('BACKUP_var')]][1]))]",
                                  "createOption": "[if(contains(parameters('BACKUP'), '1'), 1, if(equals(length(parameters('BACKUP').LUNS[range(0, if(contains(parameters('BACKUP'), '1'), 1, length(parameters('BACKUP').LUNS)))[copyIndex('BACKUP_var')]]), 3), parameters('BACKUP').LUNS[range(0, if(contains(parameters('BACKUP'), '1'), 1, length(parameters('BACKUP').LUNS)))[copyIndex('BACKUP_var')]][2], 'Empty'))]",
                                  "managedDisk": "[if(contains(parameters('BACKUP'), '1'), 1, if(contains(parameters('BACKUP'), 'saType'), json(format('{{\"storageAccountType\":\"{0}\"}}', parameters('BACKUP').saType)), json('null')))]"
                                }
                              }
                            ]
                          },
                          "resources": [],
                          "outputs": {
                            "SOFS": {
                              "type": "array",
                              "value": "[if(contains(parameters('SOFS'), '1'), array('no SOFS disks'), variables('SOFS_var'))]"
                            },
                            "DATA": {
                              "type": "array",
                              "value": "[if(contains(parameters('DATA'), '1'), array('no DATA disks'), variables('Data_var'))]"
                            },
                            "DATASS": {
                              "type": "array",
                              "value": "[if(contains(parameters('DATASS'), '1'), array('no DATA disks'), variables('Datass_var'))]"
                            },
                            "LOGS": {
                              "type": "array",
                              "value": "[if(contains(parameters('LOGS'), '1'), array('no LOGS disks'), variables('LOGS_var'))]"
                            },
                            "TEMPDB": {
                              "type": "array",
                              "value": "[if(contains(parameters('TEMPDB'), '1'), array('no TEMPDB disks'), variables('TEMPDB_var'))]"
                            },
                            "BACKUP": {
                              "type": "array",
                              "value": "[if(contains(parameters('BACKUP'), '1'), array('no BACKUP disks'), variables('BACKUP_var'))]"
                            },
                            "DATADisks": {
                              "type": "array",
                              "value": "[union(if(contains(parameters('SOFS'), '1'), createArray(), variables('SOFS_var')), if(contains(parameters('DATA'), '1'), createArray(), variables('Data_var')), if(contains(parameters('DATASS'), '1'), createArray(), variables('Datass_var')), if(contains(parameters('LOGS'), '1'), createArray(), variables('LOGS_var')), if(contains(parameters('TEMPDB'), '1'), createArray(), variables('TEMPDB_var')), if(contains(parameters('BACKUP'), '1'), createArray(), variables('BACKUP_var')))]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "condition": "[bool(parameters('AppServer').DeployJIT)]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-AppServer-JIT-{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[variables('Deployment')]"
                          },
                          "VM": {
                            "value": "[parameters('AppServer')]"
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          },
                          "DeploymentID": {
                            "value": "[parameters('DeploymentID')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "17671050488544287828"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "VM": {
                              "type": "object"
                            },
                            "Global": {
                              "type": "object"
                            },
                            "DeploymentID": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "ports",
                                "count": "[length(variables('portList'))]",
                                "input": {
                                  "number": "[variables('portList')[copyIndex('ports')]]",
                                  "protocol": "TCP",
                                  "allowedSourceAddressPrefixes": "[union(parameters('Global').IPAddressforRemoteAccess, variables('addressPrefixes'))]",
                                  "maxRequestAccessDuration": "PT3H"
                                }
                              }
                            ],
                            "portList": [
                              3389,
                              22,
                              5985,
                              5986
                            ],
                            "networkId": "[format('{0}{1}', parameters('Global').networkid[0], string(sub(parameters('Global').networkid[1], mul(2, int(parameters('DeploymentID'))))))]",
                            "addressPrefixes": [
                              "[format('{0}.0/23', variables('networkId'))]"
                            ]
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Security/locations/jitNetworkAccessPolicies",
                              "apiVersion": "2020-01-01",
                              "name": "[format('{0}/JIT_{1}', resourceGroup().location, format('{0}-vm{1}', parameters('Deployment'), parameters('VM').name))]",
                              "kind": "Basic",
                              "properties": {
                                "virtualMachines": [
                                  {
                                    "id": "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', parameters('Deployment'), parameters('VM').name))]",
                                    "ports": "[variables('ports')]"
                                  }
                                ],
                                "appendMode": true
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "Disks": {
                      "type": "array",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('dp{0}-AppServer-diskLookup{1}', variables('Deployment'), parameters('AppServer').Name))).outputs.DATADisks.value]"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-OMS', variables('Deployment')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-SA', variables('Deployment')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-VNETDNSPublic', variables('Deployment')))]"
      ]
    },
    {
      "condition": "[bool(parameters('Stage').ADPrimary)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "ADPrimary",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "DeploymentID": {
            "value": "[parameters('DeploymentID')]"
          },
          "DeploymentInfo": {
            "value": "[parameters('DeploymentInfo')]"
          },
          "Environment": {
            "value": "[parameters('Environment')]"
          },
          "Extensions": {
            "value": "[parameters('Extensions')]"
          },
          "Global": {
            "value": "[parameters('Global')]"
          },
          "Prefix": {
            "value": "[parameters('Prefix')]"
          },
          "Stage": {
            "value": "[parameters('Stage')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "13874993644946453761"
            }
          },
          "parameters": {
            "Prefix": {
              "type": "string"
            },
            "Environment": {
              "type": "string",
              "defaultValue": "D",
              "allowedValues": [
                "I",
                "D",
                "T",
                "U",
                "P",
                "S",
                "G",
                "A"
              ]
            },
            "DeploymentID": {
              "type": "string",
              "defaultValue": "1",
              "allowedValues": [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9"
              ]
            },
            "Stage": {
              "type": "object"
            },
            "Extensions": {
              "type": "object"
            },
            "Global": {
              "type": "object"
            },
            "DeploymentInfo": {
              "type": "object"
            }
          },
          "variables": {
            "copy": [
              {
                "name": "VMs",
                "count": "[length(variables('AppServers'))]",
                "input": {
                  "name": "[variables('AppServers')[copyIndex('VMs')].Name]",
                  "match": "[or(equals(parameters('Global').CN, '.'), contains(array(parameters('Global').CN), variables('AppServers')[copyIndex('VMs')].Name))]",
                  "Extensions": "[if(contains(variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType], 'RoleExtensions'), union(parameters('Extensions'), variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType].RoleExtensions), parameters('Extensions'))]",
                  "DataDisk": "[if(contains(variables('AppServers')[copyIndex('VMs')], 'DDRole'), variables('DataDiskInfo')[variables('AppServers')[copyIndex('VMs')].DDRole], null())]",
                  "vmHostName": "[toLower(format('{0}{1}{2}{3}{4}', parameters('Prefix'), parameters('Global').AppName, parameters('Environment'), parameters('DeploymentID'), variables('AppServers')[copyIndex('VMs')].Name))]",
                  "AppInfo": "[if(contains(variables('AppServers')[copyIndex('VMs')], 'AppInfo'), variables('AppServers')[copyIndex('VMs')].AppInfo, null())]",
                  "windowsConfiguration": {
                    "enableAutomaticUpdates": true,
                    "provisionVmAgent": true,
                    "patchSettings": {
                      "enableHotpatching": "[if(contains(variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType], 'HotPatch'), variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType].HotPatch, false())]",
                      "patchMode": "[if(contains(variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType], 'patchMode'), variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType].patchMode, 'AutomaticByOS')]"
                    }
                  },
                  "linuxConfiguration": {
                    "enableAutomaticUpdates": true,
                    "provisionVmAgent": true,
                    "patchSettings": {
                      "enableHotpatching": "[if(contains(variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType], 'HotPatch'), variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType].HotPatch, false())]",
                      "patchMode": "[if(contains(variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType], 'patchMode'), variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType].patchMode, 'AutomaticByOS')]"
                    }
                  }
                }
              }
            ],
            "Deployment": "[format('{0}-{1}-{2}-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID'))]",
            "computeGlobal": "[json('{\r\n  \"DataDiskInfo\": {\r\n    \"0GB\": {},\r\n    \"32GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            32\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GBSS\": {\r\n      \"DATASS\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GB-2\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ],\r\n          [\r\n            1,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"128GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            128\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"FIL64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"SOFS\": {\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            1,\r\n            32\r\n          ],\r\n          [\r\n            2,\r\n            32\r\n          ],\r\n          [\r\n            3,\r\n            32\r\n          ]\r\n        ],\r\n        \"FileSystem\": \"ReFS\",\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"SQL64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"LOGS\": {\r\n        \"DriveLetter\": \"G\",\r\n        \"caching\": \"None\",\r\n        \"LUNS\": [\r\n          [\r\n            8,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"TEMPDB\": {\r\n        \"DriveLetter\": \"H\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            12,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"BACKUP\": {\r\n        \"DriveLetter\": \"I\",\r\n        \"caching\": \"None\",\r\n        \"LUNS\": [\r\n          [\r\n            15,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    }\r\n  },\r\n  \"computeSizeLookupOptions\": {\r\n    \"API-P\": \"Standard_D4s_v3\",\r\n    \"API-D\": \"Standard_D4s_v3\",\r\n    \"API-S\": \"Standard_D2s_v3\",\r\n    \"SF-P\": \"Standard_D4s_v3\",\r\n    \"SF-D\": \"Standard_D2s_v3\",\r\n    \"SF-S\": \"Standard_D2s_v3\",\r\n    \"CTNR-P\": \"Standard_D4s_v3\",\r\n    \"CTNR-D\": \"Standard_D2s_v3\",\r\n    \"ADp-P\": \"Standard_D2s_v3\",\r\n    \"ADp-D\": \"Standard_A2m_v2\",\r\n    \"ADs-P\": \"Standard_D2s_v3\",\r\n    \"ADs-D\": \"Standard_A2m_v2\",\r\n    \"AAP-P\": \"Standard_D2s_v3\",\r\n    \"AAP-D\": \"Standard_D2s_v3\",\r\n    \"DNS-P\": \"Standard_D2s_v3\",\r\n    \"DNS-D\": \"Standard_D2s_v3\",\r\n    \"BUS-P\": \"Standard_DS2_v2\",\r\n    \"BUS-D\": \"Standard_DS2_v2\",\r\n    \"LIN-P\": \"Standard_DS2_v2\",\r\n    \"LIN-D\": \"Standard_DS2_v2\",\r\n    \"FIL-P\": \"Standard_D4s_v3\",\r\n    \"FIL-D\": \"Standard_D4s_v3\",\r\n    \"DFS-P\": \"Standard_D4s_v3\",\r\n    \"DFS-D\": \"Standard_D4s_v3\",\r\n    \"JMP-P\": \"Standard_D4s_v3\",\r\n    \"JMP-D\": \"Standard_D4s_v3\",\r\n    \"CLT-P\": \"Standard_D4s_v3\",\r\n    \"CLT-D\": \"Standard_D4s_v3\",\r\n    \"PXY-P\": \"Standard_D4s_v3\",\r\n    \"PXY-D\": \"Standard_D2s_v3\",\r\n    \"CLS01-D\": \"Standard_D4s_v3\",\r\n    \"CLS02-D\": \"Standard_D4s_v3\",\r\n    \"CLS01-P\": \"Standard_D4s_v3\",\r\n    \"CLS02-P\": \"Standard_D4s_v3\",\r\n    \"FW-P\": \"Standard_F4\",\r\n    \"FW-D\": \"Standard_F2\"\r\n  },\r\n  \"OSType\": {\r\n    \"Server2022SSIMG\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/b8f402aa-20f7-4888-b45c-3cf086dad9c3/resourceGroups/ACU1-BRW-AOA-RG-G1/providers/Microsoft.Compute/galleries/acu1brwaoag1gallery01/images/vmss2022\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SSIMG\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/b8f402aa-20f7-4888-b45c-3cf086dad9c3/resourceGroups/ACU1-BRW-AOA-RG-G1/providers/Microsoft.Compute/galleries/acu1brwaoag1gallery01/images/vmss2019webnetcore27\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"cbld10\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/27b750cd-ed43-42fd-9044-8d75e124ae55/resourceGroups/SBID-Build-Test/providers/Microsoft.Compute/galleries/cbldtest/images/cbld10-ext\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 1,\r\n        \"IaaSDiagnostics\": 1,\r\n        \"Antimalware\": 0,\r\n        \"DependencyAgent\": 1,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Win10O365\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsDesktop\",\r\n        \"offer\": \"office-365\",\r\n        \"sku\": \"rs5-evd-o365pp\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Client\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Win10\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsDesktop\",\r\n        \"offer\": \"Windows-10\",\r\n        \"sku\": \"21h1-pro-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Client\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"SQLServer2016\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftSQLServer\",\r\n        \"Offer\": \"SQL2016SP2-WS2016\",\r\n        \"sku\": \"Enterprise\",\r\n        \"version\": \"latest\"\r\n      },\r\n      // \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016Core\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-Server-Core\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016small\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016Coresmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-Server-Core-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019-gen2\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"windowsserver-gen2preview\",\r\n        \"sku\": \"2019-Datacenter-gen2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2022\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2022-Datacenter-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"_plan\": {\r\n        \"name\": \"windows-server-2022\",\r\n        \"publisher\": \"microsoftwindowsserver\",\r\n        \"product\": \"microsoftserveroperatingsystems-previews\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2022Containerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"datacenter-core-20h2-with-containers-smalldisk-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Core\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-Core\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019small\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-datacenter-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Coresmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-Server-Core-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Containerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019CoreContainerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-datacenter-core-with-containers-smalldisk-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016SS\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-with-Containers\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SSgs\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers-gs\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SS\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"NetScaler\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"citrix\",\r\n        \"Offer\": \"netscalervpx-120\",\r\n        \"Sku\": \"netscalerbyol\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"netscalerbyol\",\r\n        \"publisher\": \"citrix\",\r\n        \"product\": \"netscalervpx-120\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"MaxLoadBalancer\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"loadbalancer\",\r\n        \"offer\": \"loadbalancer-org-load-balancer-for-azure\",\r\n        \"sku\": \"max_load_balancer\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"max_load_balancer\",\r\n        \"publisher\": \"loadbalancer\",\r\n        \"product\": \"loadbalancer-org-load-balancer-for-azure\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortigate\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet_fortigate-vm_v5\",\r\n        \"sku\": \"fortinet_fg-vm\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"fortinet_fg-vm\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet_fortigate-vm_v5\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortigatepayg\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet_fortigate-vm_v5\",\r\n        \"sku\": \"fortinet_fg-vm_payg\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"fortinet_fg-vm_payg\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet_fortigate-vm_v5\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortimngr\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet-fortimanager\",\r\n        \"sku\": \"fortinet-fortimanager\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 3,\r\n      \"plan\": {\r\n        \"name\": \"fortinet-fortimanager\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet-fortimanager\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"UbuntuServer1904\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"canonical\",\r\n        \"offer\": \"UbuntuServer\",\r\n        \"sku\": \"19.04\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"Antimalware\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 1,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0\r\n      }\r\n    },\r\n    \"Bus-debian\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"credativ\",\r\n        \"offer\": \"Debian\",\r\n        \"sku\": \"8\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 1,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"PROXY-UBUNTU\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"Canonical\",\r\n        \"offer\": \"UbuntuServer\",\r\n        \"sku\": \"16.04-LTS\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"fileUris\": \"[concat(parameters(''global'')._artifactsLocation, ''/scripts/pxy.zip\",\r\n      \"commandToExecute\": \"[concat(''sudo apt-get update && sudo apt-get install unzip && unzip Proxy.zip && sudo bash -x haproxyvm-configure.sh '', '' -a '', ''ilbIPAddress'', '' -r '', ''ilbRabbitMqPort'', '' -m '', ''ilbRabbitMqMgmtPort'', '' -b '', ''dnsName'', ''.'', ''location'', ''.cloudapp.azure.com -p '', ''vmNamePrefix'', ''0 -s '', ''vmNamePrefix'', ''1'')]\",\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"CentOS75\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"OpenLogic\",\r\n        \"Offer\": \"CentOS\",\r\n        \"sku\": \"7.5\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"Antimalware\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    }\r\n  },\r\n  \"ladCfg\": {\r\n    \"diagnosticMonitorConfiguration\": {\r\n      \"eventVolume\": \"Medium\",\r\n      \"metrics\": {\r\n        \"metricAggregation\": [\r\n          {\r\n            \"scheduledTransferPeriod\": \"PT1H\"\r\n          },\r\n          {\r\n            \"scheduledTransferPeriod\": \"PT1M\"\r\n          }\r\n        ],\r\n        \"resourceId\": \"__VM_RESOURCE_ID__\"\r\n      },\r\n      \"performanceCounters\": {\r\n        \"performanceCounterConfiguration\": [\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk read guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readbytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/readbytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk writes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/writespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk transfer time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagetransfertime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagetransfertime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk transfers\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"transferspersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/transferspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk write guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writebytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/writebytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk read time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagereadtime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagereadtime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk write time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagewritetime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagewritetime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk total bytes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/bytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk reads\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readspersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/readspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk queue length\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagediskqueuelength\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagediskqueuelength\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network in guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytesreceived\",\r\n            \"counterSpecifier\": \"/builtin/network/bytesreceived\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network total bytes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytestotal\",\r\n            \"counterSpecifier\": \"/builtin/network/bytestotal\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network out guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytestransmitted\",\r\n            \"counterSpecifier\": \"/builtin/network/bytestransmitted\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network collisions\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totalcollisions\",\r\n            \"counterSpecifier\": \"/builtin/network/totalcollisions\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets received errors\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totalrxerrors\",\r\n            \"counterSpecifier\": \"/builtin/network/totalrxerrors\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets sent\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"packetstransmitted\",\r\n            \"counterSpecifier\": \"/builtin/network/packetstransmitted\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets received\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"packetsreceived\",\r\n            \"counterSpecifier\": \"/builtin/network/packetsreceived\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets sent errors\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totaltxerrors\",\r\n            \"counterSpecifier\": \"/builtin/network/totaltxerrors\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem transfers/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"transferspersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/transferspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % free space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentfreespace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentfreespace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % used space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusedspace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentusedspace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem used space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"usedspace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/usedspace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem read bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytesreadpersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/bytesreadpersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem free space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"freespace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/freespace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % free inodes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentfreeinodes\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentfreeinodes\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/bytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem reads/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readspersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/readspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem write bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"byteswrittenpersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/byteswrittenpersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem writes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writespersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/writespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % used inodes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusedinodes\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentusedinodes\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU IO wait time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentiowaittime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentiowaittime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU user time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusertime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentusertime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU nice time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentnicetime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentnicetime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU percentage guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentprocessortime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentprocessortime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU interrupt time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentinterrupttime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentinterrupttime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU idle time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentidletime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentidletime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU privileged time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentprivilegedtime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentprivilegedtime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"availablememory\",\r\n            \"counterSpecifier\": \"/builtin/memory/availablememory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap percent used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentusedswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentusedswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"usedmemory\",\r\n            \"counterSpecifier\": \"/builtin/memory/usedmemory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Page reads\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pagesreadpersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pagesreadpersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"availableswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/availableswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap percent available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentavailableswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentavailableswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Mem. percent available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentavailablememory\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentavailablememory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Pages\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pagespersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pagespersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"usedswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/usedswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory percentage\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentusedmemory\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentusedmemory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Page writes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pageswrittenpersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pageswrittenpersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          }\r\n        ]\r\n      },\r\n      \"syslogEvents\": {\r\n        \"syslogEventConfiguration\": {\r\n          \"LOG_AUTH\": \"LOG_DEBUG\",\r\n          \"LOG_AUTHPRIV\": \"LOG_DEBUG\",\r\n          \"LOG_CRON\": \"LOG_DEBUG\",\r\n          \"LOG_DAEMON\": \"LOG_DEBUG\",\r\n          \"LOG_FTP\": \"LOG_DEBUG\",\r\n          \"LOG_KERN\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL0\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL1\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL2\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL3\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL4\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL5\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL6\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL7\": \"LOG_DEBUG\",\r\n          \"LOG_LPR\": \"LOG_DEBUG\",\r\n          \"LOG_MAIL\": \"LOG_DEBUG\",\r\n          \"LOG_NEWS\": \"LOG_DEBUG\",\r\n          \"LOG_SYSLOG\": \"LOG_DEBUG\",\r\n          \"LOG_USER\": \"LOG_DEBUG\",\r\n          \"LOG_UUCP\": \"LOG_DEBUG\"\r\n        }\r\n      }\r\n    },\r\n    \"sampleRateInSeconds\": 15\r\n  },\r\n  \"WadCfg\": {\r\n    \"DiagnosticMonitorConfiguration\": {\r\n      \"overallQuotaInMB\": 10000,\r\n      \"DiagnosticInfrastructureLogs\": {\r\n        \"scheduledTransferLogLevelFilter\": \"Error\"\r\n      },\r\n      \"PerformanceCounters\": {\r\n        \"scheduledTransferPeriod\": \"PT1M\",\r\n        \"PerformanceCounterConfiguration\": []\r\n      },\r\n      \"WindowsEventLog\": {\r\n        \"scheduledTransferPeriod\": \"PT5M\",\r\n        \"DataSource\": [\r\n          {\r\n            \"name\": \"Application!*[System[(Level = 1 or Level = 2)]]\"\r\n          },\r\n          {\r\n            \"name\": \"Security!*[System[(Level = 1 or Level = 2)]\"\r\n          },\r\n          {\r\n            \"name\": \"System!*[System[(Level = 1 or Level = 2)]]\"\r\n          },\r\n          {\r\n            \"name\": \"Microsoft-Windows-DSC/Operational!*[System[(EventID=4249 or EventID=4097)]]\"\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}')]",
            "OSType": "[variables('computeGlobal').OSType]",
            "DataDiskInfo": "[variables('computeGlobal').DataDiskInfo]",
            "DeploymentName": "[if(contains(toLower(deployment().name), 'vmapp'), 'AppServers', replace(deployment().name, format('dp{0}-', variables('Deployment')), ''))]",
            "AppServers": "[parameters('DeploymentInfo').AppServers[variables('DeploymentName')]]",
            "HubKVJ": "[json(parameters('Global').hubKV)]",
            "HubRGJ": "[json(parameters('Global').hubRG)]",
            "gh": {
              "hubKVPrefix": "[if(contains(variables('HubKVJ'), 'Prefix'), variables('HubKVJ').Prefix, parameters('Prefix'))]",
              "hubKVOrgName": "[if(contains(variables('HubKVJ'), 'OrgName'), variables('HubKVJ').OrgName, parameters('Global').OrgName)]",
              "hubKVAppName": "[if(contains(variables('HubKVJ'), 'AppName'), variables('HubKVJ').AppName, parameters('Global').AppName)]",
              "hubKVRGName": "[if(contains(variables('HubKVJ'), 'RG'), variables('HubKVJ').RG, variables('HubRGJ').name)]"
            },
            "HubKVRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').hubKVPrefix, variables('gh').hubKVOrgName, variables('gh').hubKVAppName, variables('gh').hubKVRGName)]",
            "HubKVName": "[toLower(format('{0}-{1}-{2}-{3}-kv{4}', variables('gh').hubKVPrefix, variables('gh').hubKVOrgName, variables('gh').hubKVAppName, variables('gh').hubKVRGName, variables('HubKVJ').name))]"
          },
          "resources": [
            {
              "condition": "[variables('VMs')[copyIndex()].match]",
              "copy": {
                "name": "VM",
                "count": "[length(variables('AppServers'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dp{0}-VM-Deploy-{1}', variables('Deployment'), variables('AppServers')[copyIndex()].Name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "Prefix": {
                    "value": "[parameters('Prefix')]"
                  },
                  "DeploymentID": {
                    "value": "[parameters('DeploymentID')]"
                  },
                  "Environment": {
                    "value": "[parameters('Environment')]"
                  },
                  "AppServer": {
                    "value": "[variables('AppServers')[copyIndex()]]"
                  },
                  "VM": {
                    "value": "[variables('VMs')[copyIndex()]]"
                  },
                  "DeploymentName": {
                    "value": "[variables('DeploymentName')]"
                  },
                  "Global": {
                    "value": "[parameters('Global')]"
                  },
                  "vmAdminPassword": {
                    "reference": {
                      "keyVault": {
                        "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults', variables('HubKVName'))]"
                      },
                      "secretName": "localadmin"
                    }
                  },
                  "devOpsPat": {
                    "reference": {
                      "keyVault": {
                        "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults', variables('HubKVName'))]"
                      },
                      "secretName": "devOpsPat"
                    }
                  },
                  "sshPublic": {
                    "reference": {
                      "keyVault": {
                        "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults', variables('HubKVName'))]"
                      },
                      "secretName": "sshPublic"
                    }
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1318.3566",
                      "templateHash": "10183346640093717410"
                    }
                  },
                  "parameters": {
                    "Prefix": {
                      "type": "string"
                    },
                    "DeploymentID": {
                      "type": "string"
                    },
                    "Environment": {
                      "type": "string"
                    },
                    "VM": {
                      "type": "object"
                    },
                    "AppServer": {
                      "type": "object"
                    },
                    "Global": {
                      "type": "object"
                    },
                    "DeploymentName": {
                      "type": "string"
                    },
                    "vmAdminPassword": {
                      "type": "secureString"
                    },
                    "devOpsPat": {
                      "type": "secureString"
                    },
                    "sshPublic": {
                      "type": "secureString"
                    },
                    "saKey": {
                      "type": "secureString",
                      "defaultValue": "[newGuid()]"
                    },
                    "deploymentTime": {
                      "type": "string",
                      "defaultValue": "[utcNow()]"
                    }
                  },
                  "variables": {
                    "Deployment": "[format('{0}-{1}-{2}-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID'))]",
                    "DeploymentURI": "[toLower(format('{0}{1}{2}{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID')))]",
                    "computeGlobal": "[json('{\r\n  \"DataDiskInfo\": {\r\n    \"0GB\": {},\r\n    \"32GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            32\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GBSS\": {\r\n      \"DATASS\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GB-2\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ],\r\n          [\r\n            1,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"128GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            128\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"FIL64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"SOFS\": {\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            1,\r\n            32\r\n          ],\r\n          [\r\n            2,\r\n            32\r\n          ],\r\n          [\r\n            3,\r\n            32\r\n          ]\r\n        ],\r\n        \"FileSystem\": \"ReFS\",\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"SQL64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"LOGS\": {\r\n        \"DriveLetter\": \"G\",\r\n        \"caching\": \"None\",\r\n        \"LUNS\": [\r\n          [\r\n            8,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"TEMPDB\": {\r\n        \"DriveLetter\": \"H\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            12,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"BACKUP\": {\r\n        \"DriveLetter\": \"I\",\r\n        \"caching\": \"None\",\r\n        \"LUNS\": [\r\n          [\r\n            15,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    }\r\n  },\r\n  \"computeSizeLookupOptions\": {\r\n    \"API-P\": \"Standard_D4s_v3\",\r\n    \"API-D\": \"Standard_D4s_v3\",\r\n    \"API-S\": \"Standard_D2s_v3\",\r\n    \"SF-P\": \"Standard_D4s_v3\",\r\n    \"SF-D\": \"Standard_D2s_v3\",\r\n    \"SF-S\": \"Standard_D2s_v3\",\r\n    \"CTNR-P\": \"Standard_D4s_v3\",\r\n    \"CTNR-D\": \"Standard_D2s_v3\",\r\n    \"ADp-P\": \"Standard_D2s_v3\",\r\n    \"ADp-D\": \"Standard_A2m_v2\",\r\n    \"ADs-P\": \"Standard_D2s_v3\",\r\n    \"ADs-D\": \"Standard_A2m_v2\",\r\n    \"AAP-P\": \"Standard_D2s_v3\",\r\n    \"AAP-D\": \"Standard_D2s_v3\",\r\n    \"DNS-P\": \"Standard_D2s_v3\",\r\n    \"DNS-D\": \"Standard_D2s_v3\",\r\n    \"BUS-P\": \"Standard_DS2_v2\",\r\n    \"BUS-D\": \"Standard_DS2_v2\",\r\n    \"LIN-P\": \"Standard_DS2_v2\",\r\n    \"LIN-D\": \"Standard_DS2_v2\",\r\n    \"FIL-P\": \"Standard_D4s_v3\",\r\n    \"FIL-D\": \"Standard_D4s_v3\",\r\n    \"DFS-P\": \"Standard_D4s_v3\",\r\n    \"DFS-D\": \"Standard_D4s_v3\",\r\n    \"JMP-P\": \"Standard_D4s_v3\",\r\n    \"JMP-D\": \"Standard_D4s_v3\",\r\n    \"CLT-P\": \"Standard_D4s_v3\",\r\n    \"CLT-D\": \"Standard_D4s_v3\",\r\n    \"PXY-P\": \"Standard_D4s_v3\",\r\n    \"PXY-D\": \"Standard_D2s_v3\",\r\n    \"CLS01-D\": \"Standard_D4s_v3\",\r\n    \"CLS02-D\": \"Standard_D4s_v3\",\r\n    \"CLS01-P\": \"Standard_D4s_v3\",\r\n    \"CLS02-P\": \"Standard_D4s_v3\",\r\n    \"FW-P\": \"Standard_F4\",\r\n    \"FW-D\": \"Standard_F2\"\r\n  },\r\n  \"OSType\": {\r\n    \"Server2022SSIMG\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/b8f402aa-20f7-4888-b45c-3cf086dad9c3/resourceGroups/ACU1-BRW-AOA-RG-G1/providers/Microsoft.Compute/galleries/acu1brwaoag1gallery01/images/vmss2022\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SSIMG\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/b8f402aa-20f7-4888-b45c-3cf086dad9c3/resourceGroups/ACU1-BRW-AOA-RG-G1/providers/Microsoft.Compute/galleries/acu1brwaoag1gallery01/images/vmss2019webnetcore27\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"cbld10\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/27b750cd-ed43-42fd-9044-8d75e124ae55/resourceGroups/SBID-Build-Test/providers/Microsoft.Compute/galleries/cbldtest/images/cbld10-ext\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 1,\r\n        \"IaaSDiagnostics\": 1,\r\n        \"Antimalware\": 0,\r\n        \"DependencyAgent\": 1,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Win10O365\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsDesktop\",\r\n        \"offer\": \"office-365\",\r\n        \"sku\": \"rs5-evd-o365pp\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Client\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Win10\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsDesktop\",\r\n        \"offer\": \"Windows-10\",\r\n        \"sku\": \"21h1-pro-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Client\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"SQLServer2016\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftSQLServer\",\r\n        \"Offer\": \"SQL2016SP2-WS2016\",\r\n        \"sku\": \"Enterprise\",\r\n        \"version\": \"latest\"\r\n      },\r\n      // \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016Core\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-Server-Core\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016small\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016Coresmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-Server-Core-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019-gen2\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"windowsserver-gen2preview\",\r\n        \"sku\": \"2019-Datacenter-gen2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2022\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2022-Datacenter-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"_plan\": {\r\n        \"name\": \"windows-server-2022\",\r\n        \"publisher\": \"microsoftwindowsserver\",\r\n        \"product\": \"microsoftserveroperatingsystems-previews\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2022Containerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"datacenter-core-20h2-with-containers-smalldisk-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Core\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-Core\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019small\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-datacenter-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Coresmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-Server-Core-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Containerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019CoreContainerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-datacenter-core-with-containers-smalldisk-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016SS\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-with-Containers\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SSgs\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers-gs\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SS\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"NetScaler\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"citrix\",\r\n        \"Offer\": \"netscalervpx-120\",\r\n        \"Sku\": \"netscalerbyol\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"netscalerbyol\",\r\n        \"publisher\": \"citrix\",\r\n        \"product\": \"netscalervpx-120\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"MaxLoadBalancer\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"loadbalancer\",\r\n        \"offer\": \"loadbalancer-org-load-balancer-for-azure\",\r\n        \"sku\": \"max_load_balancer\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"max_load_balancer\",\r\n        \"publisher\": \"loadbalancer\",\r\n        \"product\": \"loadbalancer-org-load-balancer-for-azure\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortigate\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet_fortigate-vm_v5\",\r\n        \"sku\": \"fortinet_fg-vm\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"fortinet_fg-vm\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet_fortigate-vm_v5\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortigatepayg\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet_fortigate-vm_v5\",\r\n        \"sku\": \"fortinet_fg-vm_payg\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"fortinet_fg-vm_payg\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet_fortigate-vm_v5\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortimngr\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet-fortimanager\",\r\n        \"sku\": \"fortinet-fortimanager\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 3,\r\n      \"plan\": {\r\n        \"name\": \"fortinet-fortimanager\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet-fortimanager\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"UbuntuServer1904\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"canonical\",\r\n        \"offer\": \"UbuntuServer\",\r\n        \"sku\": \"19.04\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"Antimalware\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 1,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0\r\n      }\r\n    },\r\n    \"Bus-debian\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"credativ\",\r\n        \"offer\": \"Debian\",\r\n        \"sku\": \"8\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 1,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"PROXY-UBUNTU\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"Canonical\",\r\n        \"offer\": \"UbuntuServer\",\r\n        \"sku\": \"16.04-LTS\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"fileUris\": \"[concat(parameters(''global'')._artifactsLocation, ''/scripts/pxy.zip\",\r\n      \"commandToExecute\": \"[concat(''sudo apt-get update && sudo apt-get install unzip && unzip Proxy.zip && sudo bash -x haproxyvm-configure.sh '', '' -a '', ''ilbIPAddress'', '' -r '', ''ilbRabbitMqPort'', '' -m '', ''ilbRabbitMqMgmtPort'', '' -b '', ''dnsName'', ''.'', ''location'', ''.cloudapp.azure.com -p '', ''vmNamePrefix'', ''0 -s '', ''vmNamePrefix'', ''1'')]\",\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"CentOS75\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"OpenLogic\",\r\n        \"Offer\": \"CentOS\",\r\n        \"sku\": \"7.5\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"Antimalware\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    }\r\n  },\r\n  \"ladCfg\": {\r\n    \"diagnosticMonitorConfiguration\": {\r\n      \"eventVolume\": \"Medium\",\r\n      \"metrics\": {\r\n        \"metricAggregation\": [\r\n          {\r\n            \"scheduledTransferPeriod\": \"PT1H\"\r\n          },\r\n          {\r\n            \"scheduledTransferPeriod\": \"PT1M\"\r\n          }\r\n        ],\r\n        \"resourceId\": \"__VM_RESOURCE_ID__\"\r\n      },\r\n      \"performanceCounters\": {\r\n        \"performanceCounterConfiguration\": [\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk read guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readbytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/readbytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk writes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/writespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk transfer time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagetransfertime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagetransfertime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk transfers\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"transferspersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/transferspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk write guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writebytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/writebytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk read time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagereadtime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagereadtime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk write time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagewritetime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagewritetime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk total bytes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/bytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk reads\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readspersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/readspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk queue length\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagediskqueuelength\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagediskqueuelength\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network in guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytesreceived\",\r\n            \"counterSpecifier\": \"/builtin/network/bytesreceived\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network total bytes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytestotal\",\r\n            \"counterSpecifier\": \"/builtin/network/bytestotal\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network out guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytestransmitted\",\r\n            \"counterSpecifier\": \"/builtin/network/bytestransmitted\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network collisions\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totalcollisions\",\r\n            \"counterSpecifier\": \"/builtin/network/totalcollisions\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets received errors\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totalrxerrors\",\r\n            \"counterSpecifier\": \"/builtin/network/totalrxerrors\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets sent\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"packetstransmitted\",\r\n            \"counterSpecifier\": \"/builtin/network/packetstransmitted\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets received\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"packetsreceived\",\r\n            \"counterSpecifier\": \"/builtin/network/packetsreceived\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets sent errors\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totaltxerrors\",\r\n            \"counterSpecifier\": \"/builtin/network/totaltxerrors\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem transfers/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"transferspersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/transferspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % free space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentfreespace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentfreespace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % used space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusedspace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentusedspace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem used space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"usedspace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/usedspace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem read bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytesreadpersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/bytesreadpersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem free space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"freespace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/freespace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % free inodes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentfreeinodes\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentfreeinodes\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/bytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem reads/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readspersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/readspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem write bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"byteswrittenpersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/byteswrittenpersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem writes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writespersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/writespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % used inodes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusedinodes\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentusedinodes\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU IO wait time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentiowaittime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentiowaittime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU user time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusertime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentusertime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU nice time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentnicetime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentnicetime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU percentage guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentprocessortime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentprocessortime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU interrupt time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentinterrupttime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentinterrupttime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU idle time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentidletime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentidletime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU privileged time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentprivilegedtime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentprivilegedtime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"availablememory\",\r\n            \"counterSpecifier\": \"/builtin/memory/availablememory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap percent used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentusedswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentusedswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"usedmemory\",\r\n            \"counterSpecifier\": \"/builtin/memory/usedmemory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Page reads\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pagesreadpersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pagesreadpersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"availableswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/availableswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap percent available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentavailableswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentavailableswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Mem. percent available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentavailablememory\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentavailablememory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Pages\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pagespersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pagespersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"usedswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/usedswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory percentage\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentusedmemory\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentusedmemory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Page writes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pageswrittenpersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pageswrittenpersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          }\r\n        ]\r\n      },\r\n      \"syslogEvents\": {\r\n        \"syslogEventConfiguration\": {\r\n          \"LOG_AUTH\": \"LOG_DEBUG\",\r\n          \"LOG_AUTHPRIV\": \"LOG_DEBUG\",\r\n          \"LOG_CRON\": \"LOG_DEBUG\",\r\n          \"LOG_DAEMON\": \"LOG_DEBUG\",\r\n          \"LOG_FTP\": \"LOG_DEBUG\",\r\n          \"LOG_KERN\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL0\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL1\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL2\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL3\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL4\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL5\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL6\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL7\": \"LOG_DEBUG\",\r\n          \"LOG_LPR\": \"LOG_DEBUG\",\r\n          \"LOG_MAIL\": \"LOG_DEBUG\",\r\n          \"LOG_NEWS\": \"LOG_DEBUG\",\r\n          \"LOG_SYSLOG\": \"LOG_DEBUG\",\r\n          \"LOG_USER\": \"LOG_DEBUG\",\r\n          \"LOG_UUCP\": \"LOG_DEBUG\"\r\n        }\r\n      }\r\n    },\r\n    \"sampleRateInSeconds\": 15\r\n  },\r\n  \"WadCfg\": {\r\n    \"DiagnosticMonitorConfiguration\": {\r\n      \"overallQuotaInMB\": 10000,\r\n      \"DiagnosticInfrastructureLogs\": {\r\n        \"scheduledTransferLogLevelFilter\": \"Error\"\r\n      },\r\n      \"PerformanceCounters\": {\r\n        \"scheduledTransferPeriod\": \"PT1M\",\r\n        \"PerformanceCounterConfiguration\": []\r\n      },\r\n      \"WindowsEventLog\": {\r\n        \"scheduledTransferPeriod\": \"PT5M\",\r\n        \"DataSource\": [\r\n          {\r\n            \"name\": \"Application!*[System[(Level = 1 or Level = 2)]]\"\r\n          },\r\n          {\r\n            \"name\": \"Security!*[System[(Level = 1 or Level = 2)]\"\r\n          },\r\n          {\r\n            \"name\": \"System!*[System[(Level = 1 or Level = 2)]]\"\r\n          },\r\n          {\r\n            \"name\": \"Microsoft-Windows-DSC/Operational!*[System[(EventID=4249 or EventID=4097)]]\"\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}')]",
                    "OSType": "[variables('computeGlobal').OSType]",
                    "WadCfg": "[variables('computeGlobal').WadCfg]",
                    "ladCfg": "[variables('computeGlobal').ladCfg]",
                    "DataDiskInfo": "[variables('computeGlobal').DataDiskInfo]",
                    "computeSizeLookupOptions": "[variables('computeGlobal').computeSizeLookupOptions]",
                    "RGName": "[format('{0}-{1}-{2}-RG-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').AppName, parameters('Environment'), parameters('DeploymentID'))]",
                    "GlobalRGJ": "[json(parameters('Global').GlobalRG)]",
                    "GlobalSAJ": "[json(parameters('Global').GlobalSA)]",
                    "HubKVJ": "[json(parameters('Global').hubKV)]",
                    "HubRGJ": "[json(parameters('Global').hubRG)]",
                    "HubAAJ": "[json(parameters('Global').hubAA)]",
                    "regionLookup": "[json('{\r\n  \"francecentral\": {\r\n    \"displayname\": \"France Central\",\r\n    \"location\": \"francecentral\",\r\n    \"PREFIX\": \"AFC1\",\r\n    \"pairedRegion\": \"francesouth\"\r\n  },\r\n  \"southeastasia\": {\r\n    \"displayname\": \"Southeast Asia\",\r\n    \"location\": \"southeastasia\",\r\n    \"PREFIX\": \"ASA1\",\r\n    \"pairedRegion\": \"eastasia\"\r\n  },\r\n  \"southafricawest\": {\r\n    \"displayname\": \"South Africa West\",\r\n    \"location\": \"southafricawest\",\r\n    \"PREFIX\": \"ASAW\",\r\n    \"pairedRegion\": \"southafricanorth\"\r\n  },\r\n  \"eastus2\": {\r\n    \"displayname\": \"East US 2\",\r\n    \"location\": \"eastus2\",\r\n    \"PREFIX\": \"AEU2\",\r\n    \"pairedRegion\": \"centralus\"\r\n  },\r\n  \"eastus\": {\r\n    \"displayname\": \"East US\",\r\n    \"location\": \"eastus\",\r\n    \"PREFIX\": \"AEU1\",\r\n    \"pairedRegion\": \"westus\"\r\n  },\r\n  \"jioindiawest\": {\r\n    \"displayname\": \"Jio India West\",\r\n    \"location\": \"jioindiawest\",\r\n    \"PREFIX\": \"AJIW\",\r\n    \"pairedRegion\": \"jioindiacentral\"\r\n  },\r\n  \"westcentralus\": {\r\n    \"displayname\": \"West Central US\",\r\n    \"location\": \"westcentralus\",\r\n    \"PREFIX\": \"AWCU\",\r\n    \"pairedRegion\": \"westus2\"\r\n  },\r\n  \"koreacentral\": {\r\n    \"displayname\": \"Korea Central\",\r\n    \"location\": \"koreacentral\",\r\n    \"PREFIX\": \"AKC1\",\r\n    \"pairedRegion\": \"koreasouth\"\r\n  },\r\n  \"uaecentral\": {\r\n    \"displayname\": \"UAE Central\",\r\n    \"location\": \"uaecentral\",\r\n    \"PREFIX\": \"AUC1\",\r\n    \"pairedRegion\": \"uaenorth\"\r\n  },\r\n  \"westus\": {\r\n    \"displayname\": \"West US\",\r\n    \"location\": \"westus\",\r\n    \"PREFIX\": \"AWU1\",\r\n    \"pairedRegion\": \"eastus\"\r\n  },\r\n  \"southafricanorth\": {\r\n    \"displayname\": \"South Africa North\",\r\n    \"location\": \"southafricanorth\",\r\n    \"PREFIX\": \"ASAN\",\r\n    \"pairedRegion\": \"southafricawest\"\r\n  },\r\n  \"australiacentral2\": {\r\n    \"displayname\": \"Australia Central 2\",\r\n    \"location\": \"australiacentral2\",\r\n    \"PREFIX\": \"AAC2\",\r\n    \"pairedRegion\": \"australiacentral2\"\r\n  },\r\n  \"francesouth\": {\r\n    \"displayname\": \"France South\",\r\n    \"location\": \"francesouth\",\r\n    \"PREFIX\": \"AFS1\",\r\n    \"pairedRegion\": \"francecentral\"\r\n  },\r\n  \"ukwest\": {\r\n    \"displayname\": \"UK West\",\r\n    \"location\": \"ukwest\",\r\n    \"PREFIX\": \"AUW1\",\r\n    \"pairedRegion\": \"uksouth\"\r\n  },\r\n  \"southindia\": {\r\n    \"displayname\": \"South India\",\r\n    \"location\": \"southindia\",\r\n    \"PREFIX\": \"ASI1\",\r\n    \"pairedRegion\": \"centralindia\"\r\n  },\r\n  \"centralus\": {\r\n    \"displayname\": \"Central US\",\r\n    \"location\": \"centralus\",\r\n    \"PREFIX\": \"ACU1\",\r\n    \"pairedRegion\": \"eastus2\"\r\n  },\r\n  \"germanynorth\": {\r\n    \"displayname\": \"Germany North\",\r\n    \"location\": \"germanynorth\",\r\n    \"PREFIX\": \"AGN1\",\r\n    \"pairedRegion\": \"germanywestcentral\"\r\n  },\r\n  \"koreasouth\": {\r\n    \"displayname\": \"Korea South\",\r\n    \"location\": \"koreasouth\",\r\n    \"PREFIX\": \"AKS1\",\r\n    \"pairedRegion\": \"koreacentral\"\r\n  },\r\n  \"westindia\": {\r\n    \"displayname\": \"West India\",\r\n    \"location\": \"westindia\",\r\n    \"PREFIX\": \"AWI1\",\r\n    \"pairedRegion\": \"southindia\"\r\n  },\r\n  \"westus2\": {\r\n    \"displayname\": \"West US 2\",\r\n    \"location\": \"westus2\",\r\n    \"PREFIX\": \"AWU2\",\r\n    \"pairedRegion\": \"westcentralus\"\r\n  },\r\n  \"northcentralus\": {\r\n    \"displayname\": \"North Central US\",\r\n    \"location\": \"northcentralus\",\r\n    \"PREFIX\": \"ANCU\",\r\n    \"pairedRegion\": \"southcentralus\"\r\n  },\r\n  \"westeurope\": {\r\n    \"displayname\": \"West Europe\",\r\n    \"location\": \"westeurope\",\r\n    \"PREFIX\": \"AWEU\",\r\n    \"pairedRegion\": \"northeurope\"\r\n  },\r\n  \"canadacentral\": {\r\n    \"displayname\": \"Canada Central\",\r\n    \"location\": \"canadacentral\",\r\n    \"PREFIX\": \"ACC1\",\r\n    \"pairedRegion\": \"canadaeast\"\r\n  },\r\n  \"southcentralus\": {\r\n    \"displayname\": \"South Central US\",\r\n    \"location\": \"southcentralus\",\r\n    \"PREFIX\": \"ASCU\",\r\n    \"pairedRegion\": \"northcentralus\"\r\n  },\r\n  \"norwayeast\": {\r\n    \"displayname\": \"Norway East\",\r\n    \"location\": \"norwayeast\",\r\n    \"PREFIX\": \"ANE1\",\r\n    \"pairedRegion\": \"norwaywest\"\r\n  },\r\n  \"japanwest\": {\r\n    \"displayname\": \"Japan West\",\r\n    \"location\": \"japanwest\",\r\n    \"PREFIX\": \"AJW1\",\r\n    \"pairedRegion\": \"japaneast\"\r\n  },\r\n  \"norwaywest\": {\r\n    \"displayname\": \"Norway West\",\r\n    \"location\": \"norwaywest\",\r\n    \"PREFIX\": \"ANW1\",\r\n    \"pairedRegion\": \"norwayeast\"\r\n  },\r\n  \"jioindiacentral\": {\r\n    \"displayname\": \"Jio India Central\",\r\n    \"location\": \"jioindiacentral\",\r\n    \"PREFIX\": \"AJIC\",\r\n    \"pairedRegion\": \"jioindiawest\"\r\n  },\r\n  \"centralindia\": {\r\n    \"displayname\": \"Central India\",\r\n    \"location\": \"centralindia\",\r\n    \"PREFIX\": \"ACI1\",\r\n    \"pairedRegion\": \"southindia\"\r\n  },\r\n  \"westus3\": {\r\n    \"displayname\": \"West US 3\",\r\n    \"location\": \"westus3\",\r\n    \"PREFIX\": \"AWU3\",\r\n    \"pairedRegion\": \"eastus\"\r\n  },\r\n  \"brazilsouth\": {\r\n    \"displayname\": \"Brazil South\",\r\n    \"location\": \"brazilsouth\",\r\n    \"PREFIX\": \"ABS1\",\r\n    \"pairedRegion\": \"southcentralus\"\r\n  },\r\n  \"eastasia\": {\r\n    \"displayname\": \"East Asia\",\r\n    \"location\": \"eastasia\",\r\n    \"PREFIX\": \"AEA1\",\r\n    \"pairedRegion\": \"southeastasia\"\r\n  },\r\n  \"swedencentral\": {\r\n    \"displayname\": \"Sweden Central\",\r\n    \"location\": \"swedencentral\",\r\n    \"PREFIX\": \"ASC1\",\r\n    \"pairedRegion\": \"swedensouth\"\r\n  },\r\n  \"uksouth\": {\r\n    \"displayname\": \"UK South\",\r\n    \"location\": \"uksouth\",\r\n    \"PREFIX\": \"AUS1\",\r\n    \"pairedRegion\": \"ukwest\"\r\n  },\r\n  \"switzerlandnorth\": {\r\n    \"displayname\": \"Switzerland North\",\r\n    \"location\": \"switzerlandnorth\",\r\n    \"PREFIX\": \"ASN1\",\r\n    \"pairedRegion\": \"switzerlandwest\"\r\n  },\r\n  \"canadaeast\": {\r\n    \"displayname\": \"Canada East\",\r\n    \"location\": \"canadaeast\",\r\n    \"PREFIX\": \"ACE1\",\r\n    \"pairedRegion\": \"canadacentral\"\r\n  },\r\n  \"australiasoutheast\": {\r\n    \"displayname\": \"Australia Southeast\",\r\n    \"location\": \"australiasoutheast\",\r\n    \"PREFIX\": \"AAS1\",\r\n    \"pairedRegion\": \"australiaeast\"\r\n  },\r\n  \"northeurope\": {\r\n    \"displayname\": \"North Europe\",\r\n    \"location\": \"northeurope\",\r\n    \"PREFIX\": \"ANEU\",\r\n    \"pairedRegion\": \"westeurope\"\r\n  },\r\n  \"germanywestcentral\": {\r\n    \"displayname\": \"Germany West Central\",\r\n    \"location\": \"germanywestcentral\",\r\n    \"PREFIX\": \"AGWC\",\r\n    \"pairedRegion\": \"germanynorth\"\r\n  },\r\n  \"japaneast\": {\r\n    \"displayname\": \"Japan East\",\r\n    \"location\": \"japaneast\",\r\n    \"PREFIX\": \"AJE1\",\r\n    \"pairedRegion\": \"japanwest\"\r\n  },\r\n  \"uaenorth\": {\r\n    \"displayname\": \"UAE North\",\r\n    \"location\": \"uaenorth\",\r\n    \"PREFIX\": \"AUN1\",\r\n    \"pairedRegion\": \"uaecentral\"\r\n  },\r\n  \"australiaeast\": {\r\n    \"displayname\": \"Australia East\",\r\n    \"location\": \"australiaeast\",\r\n    \"PREFIX\": \"AAE1\",\r\n    \"pairedRegion\": \"australiasoutheast\"\r\n  },\r\n  \"switzerlandwest\": {\r\n    \"displayname\": \"Switzerland West\",\r\n    \"location\": \"switzerlandwest\",\r\n    \"PREFIX\": \"ASW1\",\r\n    \"pairedRegion\": \"switzerlandnorth\"\r\n  },\r\n  \"australiacentral\": {\r\n    \"displayname\": \"Australia Central\",\r\n    \"location\": \"australiacentral\",\r\n    \"PREFIX\": \"AAC1\",\r\n    \"pairedRegion\": \"australiacentral\"\r\n  },\r\n  \"brazilsoutheast\": {\r\n    \"displayname\": \"Brazil Southeast\",\r\n    \"location\": \"brazilsoutheast\",\r\n    \"PREFIX\": \"ABSE\",\r\n    \"pairedRegion\": \"brazilsouth\"\r\n  }\r\n}\r\n')]",
                    "primaryPrefix": "[variables('regionLookup')[parameters('Global').PrimaryLocation].prefix]",
                    "gh": {
                      "globalRGPrefix": "[if(contains(variables('GlobalRGJ'), 'Prefix'), variables('GlobalRGJ').Prefix, variables('primaryPrefix'))]",
                      "globalRGOrgName": "[if(contains(variables('GlobalRGJ'), 'OrgName'), variables('GlobalRGJ').OrgName, parameters('Global').OrgName)]",
                      "globalRGAppName": "[if(contains(variables('GlobalRGJ'), 'AppName'), variables('GlobalRGJ').AppName, parameters('Global').AppName)]",
                      "globalRGName": "[if(contains(variables('GlobalRGJ'), 'name'), variables('GlobalRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID')))]",
                      "globalSAPrefix": "[if(contains(variables('GlobalSAJ'), 'Prefix'), variables('GlobalSAJ').Prefix, variables('primaryPrefix'))]",
                      "globalSAOrgName": "[if(contains(variables('GlobalSAJ'), 'OrgName'), variables('GlobalSAJ').OrgName, parameters('Global').OrgName)]",
                      "globalSAAppName": "[if(contains(variables('GlobalSAJ'), 'AppName'), variables('GlobalSAJ').AppName, parameters('Global').AppName)]",
                      "globalSARGName": "[if(contains(variables('GlobalSAJ'), 'RG'), variables('GlobalSAJ').RG, if(contains(variables('GlobalRGJ'), 'name'), variables('GlobalRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID'))))]",
                      "hubRGPrefix": "[if(contains(variables('HubRGJ'), 'Prefix'), variables('HubRGJ').Prefix, parameters('Prefix'))]",
                      "hubRGOrgName": "[if(contains(variables('HubRGJ'), 'OrgName'), variables('HubRGJ').OrgName, parameters('Global').OrgName)]",
                      "hubRGAppName": "[if(contains(variables('HubRGJ'), 'AppName'), variables('HubRGJ').AppName, parameters('Global').AppName)]",
                      "hubRGRGName": "[if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID'))))]",
                      "hubKVPrefix": "[if(contains(variables('HubKVJ'), 'Prefix'), variables('HubKVJ').Prefix, parameters('Prefix'))]",
                      "hubKVOrgName": "[if(contains(variables('HubKVJ'), 'OrgName'), variables('HubKVJ').OrgName, parameters('Global').OrgName)]",
                      "hubKVAppName": "[if(contains(variables('HubKVJ'), 'AppName'), variables('HubKVJ').AppName, parameters('Global').AppName)]",
                      "hubKVRGName": "[if(contains(variables('HubKVJ'), 'RG'), variables('HubKVJ').RG, variables('HubRGJ').name)]",
                      "hubAAPrefix": "[if(contains(variables('HubAAJ'), 'Prefix'), variables('HubAAJ').Prefix, parameters('Prefix'))]",
                      "hubAAOrgName": "[if(contains(variables('HubAAJ'), 'OrgName'), variables('HubAAJ').OrgName, parameters('Global').OrgName)]",
                      "hubAAAppName": "[if(contains(variables('HubAAJ'), 'AppName'), variables('HubAAJ').AppName, parameters('Global').AppName)]",
                      "hubAARGName": "[if(contains(variables('HubAAJ'), 'RG'), variables('HubAAJ').RG, variables('HubRGJ').name)]"
                    },
                    "globalRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').globalRGPrefix, variables('gh').globalRGOrgName, variables('gh').globalRGAppName, variables('gh').globalRGName)]",
                    "HubRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').hubRGPrefix, variables('gh').hubRGOrgName, variables('gh').hubRGAppName, variables('gh').hubRGRGName)]",
                    "globalSAName": "[toLower(format('{0}{1}{2}{3}sa{4}', variables('gh').globalSAPrefix, variables('gh').globalSAOrgName, variables('gh').globalSAAppName, variables('gh').globalSARGName, variables('GlobalRGJ').name))]",
                    "HubKVRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').hubKVPrefix, variables('gh').hubKVOrgName, variables('gh').hubKVAppName, variables('gh').hubKVRGName)]",
                    "HubKVName": "[toLower(format('{0}-{1}-{2}-{3}-kv{4}', variables('gh').hubKVPrefix, variables('gh').hubKVOrgName, variables('gh').hubKVAppName, variables('gh').hubKVRGName, variables('HubKVJ').name))]",
                    "AAName": "[toLower(format('{0}{1}{2}{3}{4}', variables('gh').hubAAPrefix, variables('gh').hubAAOrgName, variables('gh').hubAAAppName, variables('gh').hubAARGName, variables('HubAAJ').name))]",
                    "EnvironmentLookup": {
                      "D": "Dev",
                      "T": "Test",
                      "I": "Int",
                      "U": "UAT",
                      "P": "PROD",
                      "S": "SBX"
                    },
                    "DSCConfigLookup": {
                      "AppServers": "AppServers",
                      "InitialDOP": "AppServers",
                      "WVDServers": "AppServers"
                    },
                    "AppServerSizeLookup": {
                      "D": "D",
                      "T": "D",
                      "I": "D",
                      "U": "D",
                      "P": "P",
                      "S": "D"
                    },
                    "RebootNodeLookup": {
                      "D": true,
                      "Q": true,
                      "T": true,
                      "U": true,
                      "P": false
                    },
                    "ConfigurationMode": {
                      "D": "ApplyAndAutoCorrect",
                      "Q": "ApplyAndAutoCorrect",
                      "T": "ApplyAndAutoCorrect",
                      "U": "ApplyAndAutoCorrect",
                      "P": "ApplyAndMonitor"
                    },
                    "DSCConfigurationModeFrequencyMins": 15,
                    "networkId": "[format('{0}{1}', parameters('Global').networkid[0], string(sub(parameters('Global').networkid[1], mul(2, int(parameters('DeploymentID'))))))]",
                    "storageAccountType": "[if(equals(parameters('Environment'), 'P'), if(contains(parameters('AppServer'), 'Zone'), 'Premium_LRS', 'Premium_ZRS'), if(contains(parameters('AppServer'), 'Zone'), 'StandardSSD_ZRS', 'StandardSSD_LRS'))]",
                    "SADiagName": "[format('{0}sadiag', variables('DeploymentURI'))]",
                    "saaccountiddiag": "[resourceId('Microsoft.Storage/storageAccounts/', variables('SADiagName'))]",
                    "saSQLBackupName": "[format('{0}sasqlbackup', variables('DeploymentURI'))]",
                    "MSILookup": {
                      "SQL": "Cluster",
                      "UTL": "DefaultKeyVault",
                      "FIL": "Cluster",
                      "OCR": "Storage",
                      "WVD": "WVD"
                    },
                    "userAssignedIdentities": {
                      "Cluster": {
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiKeyVaultSecretsGet', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperator', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperatorGlobal', variables('Deployment'))))]": {}
                      },
                      "Default": {
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiKeyVaultSecretsGet', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperatorGlobal', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperator', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountFileContributor', variables('Deployment'))))]": {}
                      },
                      "DefaultKeyVault": {
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperatorGlobal', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiKeyVaultSecretsGetApp', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiAzureServiceBusDataOwner', variables('Deployment'))))]": {}
                      },
                      "WVD": {
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperatorGlobal', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountFileContributor', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiWVDRegKeyReader', variables('Deployment'))))]": {}
                      },
                      "Storage": {
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountContributor', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperatorGlobal', variables('Deployment'))))]": {}
                      },
                      "None": {}
                    },
                    "ASNAME": "[if(contains(parameters('AppServer'), 'Zone'), 'usingZones', parameters('AppServer').ASNAME)]"
                  },
                  "resources": [
                    {
                      "condition": "[not(equals(variables('ASNAME'), 'usingZones'))]",
                      "type": "Microsoft.Compute/availabilitySets",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}-as{1}', variables('Deployment'), variables('ASNAME'))]",
                      "location": "[resourceGroup().location]",
                      "sku": {
                        "name": "Aligned"
                      },
                      "properties": {
                        "platformUpdateDomainCount": 5,
                        "platformFaultDomainCount": 3
                      }
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines",
                      "apiVersion": "2021-04-01",
                      "name": "[format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "location": "[resourceGroup().location]",
                      "identity": {
                        "type": "SystemAssigned, UserAssigned",
                        "userAssignedIdentities": "[if(contains(variables('MSILookup'), parameters('AppServer').ROLE), variables('userAssignedIdentities')[variables('MSILookup')[parameters('AppServer').ROLE]], variables('userAssignedIdentities').Default)]"
                      },
                      "tags": {
                        "Environment": "[variables('EnvironmentLookup')[parameters('Environment')]]",
                        "Zone": "[if(contains(parameters('AppServer'), 'Zone'), parameters('AppServer').Zone, 1)]"
                      },
                      "zones": "[if(contains(parameters('AppServer'), 'Zone'), array(parameters('AppServer').Zone), null())]",
                      "plan": "[if(contains(variables('OSType')[parameters('AppServer').OSType], 'plan'), variables('OSType')[parameters('AppServer').OSType].plan, null())]",
                      "properties": {
                        "licenseType": "[if(contains(variables('OSType')[parameters('AppServer').OSType], 'licenseType'), variables('OSType')[parameters('AppServer').OSType].licenseType, null())]",
                        "availabilitySet": "[if(contains(parameters('AppServer'), 'Zone'), null(), createObject('id', format('{0}', resourceId('Microsoft.Compute/availabilitySets', format('{0}-as{1}', variables('Deployment'), parameters('AppServer').ASName)))))]",
                        "hardwareProfile": {
                          "vmSize": "[variables('computeSizeLookupOptions')[format('{0}-{1}', parameters('AppServer').ROLE, variables('AppServerSizeLookup')[parameters('Environment')])]]"
                        },
                        "osProfile": {
                          "computerName": "[parameters('VM').vmHostName]",
                          "adminUsername": "[if(contains(parameters('AppServer'), 'AdminUser'), parameters('AppServer').AdminUser, parameters('Global').vmAdminUserName)]",
                          "adminPassword": "[parameters('vmAdminPassword')]",
                          "customData": "[if(contains(parameters('AppServer'), 'customData'), base64(replace(parameters('AppServer').customData, '{0}', format('{0}.', variables('networkId')))), null())]",
                          "secrets": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), createArray(createObject('sourceVault', createObject('id', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults', variables('HubKVName'))), 'vaultCertificates', createArray(createObject('certificateUrl', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults/secrets', variables('HubKVName'), parameters('Global').CertName), '2021-06-01-preview').secretUriWithVersion, 'certificateStore', 'My'), createObject('certificateUrl', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults/secrets', variables('HubKVName'), parameters('Global').CertName), '2021-06-01-preview').secretUriWithVersion, 'certificateStore', 'Root'), createObject('certificateUrl', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults/secrets', variables('HubKVName'), parameters('Global').CertName), '2021-06-01-preview').secretUriWithVersion, 'certificateStore', 'CA')))), null())]",
                          "windowsConfiguration": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), parameters('VM').windowsConfiguration, null())]",
                          "linuxConfiguration": "[if(not(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows')), parameters('VM').linuxConfiguration, null())]"
                        },
                        "storageProfile": {
                          "imageReference": "[variables('OSType')[parameters('AppServer').OSType].imageReference]",
                          "osDisk": {
                            "name": "[format('{0}-{1}-OSDisk', variables('Deployment'), parameters('AppServer').Name)]",
                            "caching": "ReadWrite",
                            "diskSizeGB": "[variables('OSType')[parameters('AppServer').OSType].OSDiskGB]",
                            "createOption": "FromImage",
                            "managedDisk": {
                              "storageAccountType": "[if(contains(parameters('AppServer'), 'OSstorageAccountType'), parameters('AppServer').OSstorageAccountType, variables('storageAccountType'))]"
                            }
                          },
                          "dataDisks": "[reference(resourceId('Microsoft.Resources/deployments', format('dp{0}-AppServer-diskLookup{1}', variables('Deployment'), parameters('AppServer').Name))).outputs.DATADisks.value]"
                        },
                        "networkProfile": {
                          "copy": [
                            {
                              "name": "networkInterfaces",
                              "count": "[length(parameters('AppServer').NICs)]",
                              "input": {
                                "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}{1}{2}{3}', variables('Deployment'), if(contains(parameters('AppServer').NICs[copyIndex('networkInterfaces')], 'LB'), '-niclb', if(contains(parameters('AppServer').NICs[copyIndex('networkInterfaces')], 'PLB'), '-nicplb', if(contains(parameters('AppServer').NICs[copyIndex('networkInterfaces')], 'SLB'), '-nicslb', '-nic'))), if(equals(copyIndex('networkInterfaces'), 0), '', add(copyIndex('networkInterfaces'), 1)), parameters('AppServer').Name))]",
                                "properties": {
                                  "primary": "[contains(parameters('AppServer').NICs[copyIndex('networkInterfaces')], 'Primary')]",
                                  "deleteOption": "Delete"
                                }
                              }
                            }
                          ]
                        },
                        "diagnosticsProfile": {
                          "bootDiagnostics": {
                            "enabled": true,
                            "storageUri": "[format('https://{0}.blob.{1}', variables('SADiagName'), environment().suffixes.storage)]"
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-AppServer-nicDeployLoop{1}', variables('Deployment'), parameters('AppServer').Name))]",
                        "[resourceId('Microsoft.Compute/availabilitySets', format('{0}-as{1}', variables('Deployment'), variables('ASNAME')))]",
                        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-AppServer-diskLookup{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, contains(parameters('AppServer'), 'shutdown'))]",
                      "type": "Microsoft.DevTestLab/schedules",
                      "apiVersion": "2018-09-15",
                      "name": "[format('shutdown-computevm-{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "dailyRecurrence": {
                          "time": "[parameters('AppServer').shutdown.time]"
                        },
                        "notificationSettings": {
                          "status": "[if(and(contains(parameters('AppServer').shutdown, 'notification'), bool(parameters('AppServer').shutdown.notification)), 'Enabled', 'Disabled')]",
                          "emailRecipient": "[replace(replace(replace(string(parameters('Global').alertRecipients), '\",\"', ';'), '[\"', ''), '\"]', '')]",
                          "notificationLocale": "en",
                          "timeInMinutes": 30
                        },
                        "status": "[if(or(not(contains(parameters('AppServer').shutdown, 'enabled')), and(contains(parameters('AppServer').shutdown, 'enabled'), bool(parameters('AppServer').shutdown.enabled))), 'Enabled', 'Disabled')]",
                        "targetResourceId": "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]",
                        "taskType": "ComputeVmShutdownTask",
                        "timeZoneId": "[parameters('Global').shutdownSchedulerTimeZone]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.CertMgmt))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'KVAppServerExtensionForWindows')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.Azure.KeyVault.Edp",
                        "type": "KeyVaultForWindows",
                        "typeHandlerVersion": "0.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "secretsManagementSettings": {
                            "pollingIntervalInS": 3600,
                            "certificateStoreName": "MY",
                            "certificateStoreLocation": "LOCAL_MACHINE",
                            "observedCertificates": [
                              "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults/secrets', variables('HubKVName'), parameters('Global').CertName), '2021-06-01-preview').secretUri]"
                            ]
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(parameters('VM').match, bool(parameters('VM').Extensions.AADLogin)), and(contains(parameters('AppServer'), 'ExcludeAADLogin'), not(equals(parameters('AppServer').ExcludeAADLogin, 1))))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'AADLogin')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'Microsoft.Azure.ActiveDirectory', 'Microsoft.Azure.ActiveDirectory.LinuxSSH')]",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'AADLoginForWindows', 'AADLoginForLinux')]",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.AzureDefender))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'AzureDefenderForServers')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.Azure.AzureDefenderForServers",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'MDE.Windows', 'MDE.Linux')]",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "azureResourceId": "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]",
                          "defenderForServersWorkspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', variables('DeploymentURI')))]",
                          "forceReOnboarding": false
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.GuestConfig))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'AzureGuestConfig')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.GuestConfiguration",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'ConfigurationForWindows', 'ConfigurationForLinux')]",
                        "typeHandlerVersion": "1.2",
                        "autoUpgradeMinorVersion": true,
                        "settings": {}
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(parameters('VM').match, bool(parameters('VM').Extensions.AdminCenter)), and(contains(parameters('AppServer'), 'ExcludeAdminCenter'), not(equals(parameters('AppServer').ExcludeAdminCenter, 1))))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'AdminCenter')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "publisher": "Microsoft.AdminCenter",
                        "type": "AdminCenter",
                        "typeHandlerVersion": "0.0",
                        "settings": {
                          "port": "6516",
                          "cspFrameAncestors": [
                            "https://portal.azure.com",
                            "https://*.hosting.portal.azure.net",
                            "https://localhost:1340"
                          ],
                          "corsOrigins": [
                            "https://portal.azure.com",
                            "https://waconazure.com"
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(parameters('VM').match, bool(parameters('VM').Extensions.DomainJoin)), not(and(contains(parameters('AppServer'), 'ExcludeDomainJoin'), bool(parameters('AppServer').ExcludeDomainJoin))))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'joindomain')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.Compute",
                        "type": "JsonADDomainExtension",
                        "typeHandlerVersion": "1.3",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "Name": "[parameters('Global').ADDomainName]",
                          "OUPath": "[if(contains(parameters('AppServer'), 'OUPath'), parameters('AppServer').OUPath, '')]",
                          "User": "[format('{0}@{1}', parameters('Global').vmAdminUserName, parameters('Global').ADDomainName)]",
                          "Restart": "true",
                          "Options": 3
                        },
                        "protectedSettings": {
                          "Password": "[parameters('vmAdminPassword')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(parameters('VM').match, bool(parameters('VM').Extensions.DSC)), equals(parameters('AppServer').Role, 'PULL'))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'Microsoft.Powershell.DSC.Pull')]",
                      "location": "[resourceGroup().location]",
                      "tags": {
                        "displayName": "Powershell.DSC.Pull"
                      },
                      "properties": {
                        "publisher": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'Microsoft.Powershell', 'Microsoft.OSTCExtensions')]",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'DSC', 'DSCForLinux')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '2.77', '2.0')]",
                        "autoUpgradeMinorVersion": true,
                        "protectedSettings": {
                          "Items": {
                            "registrationKeyPrivate": "[listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubRGName')), 'Microsoft.Automation/automationAccounts', variables('AAName')), '2020-01-13-preview').keys[0].Value]"
                          }
                        },
                        "settings": {
                          "advancedOptions": {
                            "forcePullAndApply": true
                          },
                          "Properties": [
                            {
                              "Name": "RegistrationKey",
                              "Value": {
                                "UserName": "PLACEHOLDER_DONOTUSE",
                                "Password": "PrivateSettingsRef:registrationKeyPrivate"
                              },
                              "TypeName": "System.Management.Automation.PSCredential"
                            },
                            {
                              "Name": "RegistrationUrl",
                              "Value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubRGName')), 'Microsoft.Automation/automationAccounts', variables('AAName')), '2020-01-13-preview').RegistrationUrl]",
                              "TypeName": "System.String"
                            },
                            {
                              "Name": "NodeConfigurationName",
                              "Value": "[format('{0}.{1}_{2}_{3}_{4}{5}', if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], 'AppServers'), parameters('Global').OrgName, parameters('Global').Appname, parameters('AppServer').ROLE, parameters('Environment'), parameters('DeploymentID'))]",
                              "TypeName": "System.String"
                            },
                            {
                              "Name": "ConfigurationMode",
                              "Value": "[variables('ConfigurationMode')[parameters('Environment')]]",
                              "TypeName": "System.String"
                            },
                            {
                              "Name": "RebootNodeIfNeeded",
                              "Value": "[variables('RebootNodeLookup')[parameters('Environment')]]",
                              "TypeName": "System.Boolean"
                            },
                            {
                              "Name": "ConfigurationModeFrequencyMins",
                              "Value": "[variables('DSCConfigurationModeFrequencyMins')]",
                              "TypeName": "System.Int32"
                            },
                            {
                              "Name": "RefreshFrequencyMins",
                              "Value": 30,
                              "TypeName": "System.Int32"
                            },
                            {
                              "Name": "ActionAfterReboot",
                              "Value": "ContinueConfiguration",
                              "TypeName": "System.String"
                            },
                            {
                              "Name": "AllowModuleOverwrite",
                              "Value": true,
                              "TypeName": "System.Boolean"
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'joindomain')]",
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(and(parameters('VM').match, and(contains(parameters('VM').Extensions, 'DSC2'), bool(parameters('VM').Extensions.DSC2))), not(equals(parameters('AppServer').Role, 'PULL'))), or(or(equals(parameters('DeploymentName'), 'ConfigSQLAO'), equals(parameters('DeploymentName'), 'CreateADPDC')), equals(parameters('DeploymentName'), 'CreateADBDC')))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'Microsoft.Powershell.DSC2')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'Microsoft.Powershell', 'Microsoft.OSTCExtensions')]",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'DSC', 'DSCForLinux')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '2.24', '2.0')]",
                        "autoUpgradeMinorVersion": true,
                        "forceUpdateTag": "[parameters('deploymentTime')]",
                        "settings": {
                          "wmfVersion": "latest",
                          "configuration": {
                            "url": "[format('{0}/ext-DSC/DSC-{1}.zip', parameters('Global')._artifactsLocation, if(contains(parameters('AppServer'), 'DSConfig'), parameters('AppServer').DSConfig, if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], parameters('DeploymentName'))))]",
                            "script": "[format('DSC-{0}.ps1', if(contains(parameters('AppServer'), 'DSConfig'), parameters('AppServer').DSConfig, if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], parameters('DeploymentName'))))]",
                            "function": "[if(contains(parameters('AppServer'), 'DSConfig'), parameters('AppServer').DSConfig, if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], parameters('DeploymentName')))]"
                          },
                          "configurationArguments": {
                            "DomainName": "[parameters('Global').ADDomainName]"
                          }
                        },
                        "protectedSettings": {
                          "configurationArguments": {
                            "AdminCreds": {
                              "UserName": "[parameters('Global').vmAdminUserName]",
                              "Password": "[parameters('vmAdminPassword')]"
                            },
                            "SQLServiceCreds": {
                              "UserName": "sqladmin",
                              "Password": "[parameters('vmAdminPassword')]"
                            },
                            "witnessStorageKey": {
                              "UserName": "sakey",
                              "Password": "[parameters('saKey')]"
                            }
                          },
                          "configurationUrlSasToken": "[parameters('Global')._artifactsLocationSasToken]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'joindomain')]",
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(and(parameters('VM').match, bool(parameters('VM').Extensions.DSC)), not(equals(parameters('AppServer').Role, 'PULL'))), not(or(or(equals(parameters('DeploymentName'), 'ConfigSQLAO'), equals(parameters('DeploymentName'), 'CreateADPDC')), equals(parameters('DeploymentName'), 'CreateADBDC'))))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'Microsoft.Powershell.DSC')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'Microsoft.Powershell', 'Microsoft.OSTCExtensions')]",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'DSC', 'DSCForLinux')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '2.24', '2.0')]",
                        "autoUpgradeMinorVersion": true,
                        "forceUpdateTag": "[parameters('deploymentTime')]",
                        "settings": {
                          "wmfVersion": "latest",
                          "configuration": {
                            "url": "[format('{0}/ext-DSC/DSC-{1}.zip', parameters('Global')._artifactsLocation, if(contains(parameters('AppServer'), 'DSConfig'), parameters('AppServer').DSConfig, if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], parameters('DeploymentName'))))]",
                            "script": "[format('DSC-{0}.ps1', if(contains(parameters('AppServer'), 'DSConfig'), parameters('AppServer').DSConfig, if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], parameters('DeploymentName'))))]",
                            "function": "[if(contains(parameters('AppServer'), 'DSConfig'), parameters('AppServer').DSConfig, if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], parameters('DeploymentName')))]"
                          },
                          "configurationArguments": {
                            "DomainName": "[parameters('Global').ADDomainName]",
                            "Thumbprint": "[parameters('Global').CertThumbprint]",
                            "storageAccountId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('globalRGName')), 'Microsoft.Storage/storageAccounts', variables('globalSAName'))]",
                            "deployment": "[variables('Deployment')]",
                            "networkid": "[format('{0}.', variables('networkId'))]",
                            "appInfo": "[if(contains(parameters('AppServer'), 'AppInfo'), string(parameters('VM').AppInfo), '')]",
                            "DataDiskInfo": "[string(parameters('VM').DataDisk)]",
                            "clientIDLocal": "[if(equals(format('{0}{1}', parameters('Environment'), parameters('DeploymentID')), 'G0'), '', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('RGName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-uaiStorageAccountOperator', variables('Deployment'))), '2018-11-30').clientId)]",
                            "clientIDGlobal": "[if(equals(format('{0}{1}', parameters('Environment'), parameters('DeploymentID')), 'G0'), '', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('RGName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-uaiStorageAccountFileContributor', variables('Deployment'))), '2018-11-30').clientId)]"
                          },
                          "configurationData": {
                            "url": "[format('{0}/ext-CD/{1}-ConfigurationData.psd1', parameters('Global')._artifactsLocation, parameters('AppServer').Role)]"
                          }
                        },
                        "protectedSettings": {
                          "configurationArguments": {
                            "AdminCreds": {
                              "UserName": "[parameters('Global').vmAdminUserName]",
                              "Password": "[parameters('vmAdminPassword')]"
                            },
                            "sshPublic": {
                              "UserName": "ssh",
                              "Password": "[parameters('sshPublic')]"
                            },
                            "devOpsPat": {
                              "UserName": "pat",
                              "Password": "[parameters('devOpsPat')]"
                            }
                          },
                          "configurationUrlSasToken": "[parameters('Global')._artifactsLocationSasToken]",
                          "configurationDataUrlSasToken": "[parameters('Global')._artifactsLocationSasToken]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'joindomain')]",
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.IaaSDiagnostics))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2020-12-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'vmDiagnostics')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Diagnostics",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'IaaSDiagnostics', 'LinuxDiagnostic')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '1.9', '3.0')]",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "WadCfg": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), variables('WadCfg'), null())]",
                          "ladCfg": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), null(), variables('ladCfg'))]",
                          "StorageAccount": "[variables('saaccountiddiag')]",
                          "StorageType": "TableAndBlob"
                        },
                        "protectedSettings": {
                          "storageAccountName": "[variables('saaccountiddiag')]",
                          "storageAccountKey": "[listKeys(variables('saaccountiddiag'), '2016-01-01').keys[0].value]",
                          "storageAccountEndPoint": "[format('https://{0}/', environment().suffixes.storage)]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.DependencyAgent))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2020-12-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'DependencyAgent')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'DependencyAgentWindows', 'DependencyAgentLinux')]",
                        "typeHandlerVersion": "9.5",
                        "autoUpgradeMinorVersion": true
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.AzureMonitorAgent))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2020-12-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), format('{0}', if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'AzureMonitorWindowsAgent', 'AzureMonitorLinuxAgent')))]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "publisher": "Microsoft.Azure.Monitor",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'AzureMonitorWindowsAgent', 'AzureMonitorLinuxAgent')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '1.0', '1.5')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.MonitoringAgent))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2020-12-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'MonitoringAgent')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.EnterpriseCloud.Monitoring",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'MicrosoftMonitoringAgent', 'OmsAgentForLinux')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '1.0', '1.4')]",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "workspaceId": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', variables('DeploymentURI'))), '2021-06-01').customerId]"
                        },
                        "protectedSettings": {
                          "workspaceKey": "[listKeys(resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', variables('DeploymentURI'))), '2021-06-01').primarySharedKey]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.GuestHealthAgent))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2020-12-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), format('{0}', if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'GuestHealthWindowsAgent', 'GuestHealthLinuxAgent')))]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "publisher": "Microsoft.Azure.Monitor.VirtualMachines.GuestHealth",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'GuestHealthWindowsAgent', 'GuestHealthLinuxAgent')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '1.0', '1.0')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Insights/dataCollectionRuleAssociations",
                      "apiVersion": "2019-11-01-preview",
                      "scope": "[format('Microsoft.Compute/virtualMachines/{0}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]",
                      "name": "[format('{0}vmInsights', variables('DeploymentURI'))]",
                      "properties": {
                        "description": "Association of data collection rule for AppServer Insights Health.",
                        "dataCollectionRuleId": "[resourceId('Microsoft.Insights/dataCollectionRules', format('{0}vmInsights', variables('DeploymentURI')))]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.chefClient))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'chefClient')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Chef.Bootstrap.WindowsAzure",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'ChefClient', 'LinuxChefClient')]",
                        "typeHandlerVersion": "1210.12",
                        "settings": {
                          "bootstrap_options": {
                            "chef_server_url": "[parameters('Global').chef_server_url]",
                            "validation_client_name": "[parameters('Global').chef_validation_client_name]"
                          },
                          "runlist": "recipe[mycookbook::default]"
                        },
                        "protectedSettings": {
                          "validation_key": "[parameters('Global').chef_validation_key]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(parameters('VM').match, equals(parameters('AppServer').role, 'SQL')), bool(parameters('VM').Extensions.SqlIaasExtension))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'SqlIaasExtension')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "type": "SqlIaaSAgent",
                        "publisher": "Microsoft.SqlServer.Management",
                        "typeHandlerVersion": "1.2",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "AutoTelemetrySettings": {
                            "Region": "[resourceGroup().location]"
                          },
                          "KeyVaultCredentialSettings": {
                            "Enable": true,
                            "CredentialName": "[parameters('Global').sqlCredentialName]"
                          }
                        },
                        "protectedSettings": {
                          "PrivateKeyVaultCredentialSettings": {
                            "AzureKeyVaultUrl": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults', variables('HubKVName')), '2021-06-01-preview').vaultUri]",
                            "StorageUrl": "[reference(resourceId('Microsoft.Storage/storageAccounts', if(equals(parameters('AppServer').Role, 'SQL'), variables('saSQLBackupName'), variables('SADiagName'))), '2015-06-15').primaryEndpoints.blob]",
                            "StorageAccessKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', if(equals(parameters('AppServer').Role, 'SQL'), variables('saSQLBackupName'), variables('SADiagName'))), '2016-01-01').keys[0].value]",
                            "Password": "[parameters('vmAdminPassword')]"
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(parameters('VM').match, equals(parameters('AppServer').role, 'SQL')), bool(parameters('VM').Extensions.BackupWindowsWorkloadSQL))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'AzureBackupWindowsWorkload')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "locale": "en-us",
                          "AppServerType": "microsoft.compute/virtualmachines"
                        },
                        "publisher": "Microsoft.Azure.RecoveryServices.WorkloadBackup",
                        "type": "AzureBackupWindowsWorkload",
                        "typeHandlerVersion": "1.1"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.Antimalware))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'IaaSAntimalware')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Security",
                        "type": "IaaSAntimalware",
                        "typeHandlerVersion": "1.5",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "Monitoring": "ON",
                          "StorageAccountName": "[variables('SADiagName')]",
                          "AntimalwareEnabled": true,
                          "RealtimeProtectionEnabled": "true",
                          "ScheduledScanSettings": {
                            "isEnabled": "true",
                            "day": "1",
                            "time": "720",
                            "scanType": "Full"
                          },
                          "Exclusions": {
                            "Extensions": "",
                            "Paths": "",
                            "Processes": ""
                          }
                        },
                        "protectedSettings": null
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-AppServer-publicIPDeploy{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[variables('Deployment')]"
                          },
                          "DeploymentURI": {
                            "value": "[variables('DeploymentURI')]"
                          },
                          "NICs": {
                            "value": "[parameters('AppServer').NICs]"
                          },
                          "VM": {
                            "value": "[parameters('AppServer')]"
                          },
                          "PIPprefix": {
                            "value": "AppServer"
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "18109364379899578760"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "DeploymentURI": {
                              "type": "string"
                            },
                            "PIPprefix": {
                              "type": "string"
                            },
                            "NICs": {
                              "type": "array"
                            },
                            "VM": {
                              "type": "object"
                            },
                            "Global": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "condition": "[and(contains(parameters('NICs')[copyIndex()], 'PublicIP'), not(equals(parameters('NICs')[copyIndex()].PublicIP, null())))]",
                              "copy": {
                                "name": "PublicIP",
                                "count": "[length(parameters('NICs'))]"
                              },
                              "type": "Microsoft.Network/publicIPAddresses",
                              "apiVersion": "2021-02-01",
                              "name": "[format('{0}-{1}{2}-publicip{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1))]",
                              "location": "[resourceGroup().location]",
                              "sku": {
                                "name": "[if(contains(parameters('VM'), 'Zone'), 'Standard', 'Basic')]"
                              },
                              "properties": {
                                "publicIPAllocationMethod": "[parameters('NICs')[copyIndex()].PublicIP]",
                                "dnsSettings": {
                                  "domainNameLabel": "[toLower(format('{0}-{1}{2}-{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1)))]"
                                }
                              }
                            },
                            {
                              "condition": "[and(contains(parameters('NICs')[copyIndex()], 'PublicIP'), not(equals(parameters('NICs')[copyIndex()].PublicIP, null())))]",
                              "copy": {
                                "name": "PublicIPDiag",
                                "count": "[length(parameters('NICs'))]"
                              },
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2017-05-01-preview",
                              "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', format('{0}-{1}{2}-publicip{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1)))]",
                              "name": "service",
                              "properties": {
                                "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                                "logs": [
                                  {
                                    "category": "DDoSProtectionNotifications",
                                    "enabled": true
                                  }
                                ],
                                "metrics": [
                                  {
                                    "timeGrain": "PT5M",
                                    "enabled": true,
                                    "retentionPolicy": {
                                      "enabled": false,
                                      "days": 0
                                    }
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/publicIPAddresses', format('{0}-{1}{2}-publicip{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1)))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "PIPID": {
                              "type": "array",
                              "copy": {
                                "count": "[length(parameters('NICs'))]",
                                "input": "[if(and(contains(parameters('NICs')[copyIndex()], 'PublicIP'), not(equals(parameters('NICs')[copyIndex()].PublicIP, null()))), resourceId('Microsoft.Network/publicIPAddresses', format('{0}-{1}{2}-publicip{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1))), '')]"
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-AppServer-JITNSG-{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[variables('Deployment')]"
                          },
                          "VM": {
                            "value": "[parameters('AppServer')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "16183288891198554910"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "VM": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/networkSecurityGroups",
                              "apiVersion": "2021-05-01",
                              "name": "[format('{0}-vm{1}-JITNSG', parameters('Deployment'), parameters('VM').Name)]",
                              "location": "[resourceGroup().location]"
                            }
                          ]
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-AppServer-nicDeployLoop{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[variables('Deployment')]"
                          },
                          "DeploymentURI": {
                            "value": "[variables('DeploymentURI')]"
                          },
                          "DeploymentID": {
                            "value": "[parameters('DeploymentID')]"
                          },
                          "NICs": {
                            "value": "[parameters('AppServer').NICs]"
                          },
                          "VM": {
                            "value": "[parameters('AppServer')]"
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "15680478958950286894"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "DeploymentURI": {
                              "type": "string"
                            },
                            "DeploymentID": {
                              "type": "string"
                            },
                            "NICs": {
                              "type": "array"
                            },
                            "VM": {
                              "type": "object"
                            },
                            "Global": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "NIC",
                                "count": "[length(parameters('NICs'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('dp{0}-nicDeploy{1}{2}', parameters('Deployment'), parameters('VM').Name, add(copyIndex(), 1))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "Deployment": {
                                    "value": "[parameters('Deployment')]"
                                  },
                                  "DeploymentURI": {
                                    "value": "[parameters('DeploymentURI')]"
                                  },
                                  "DeploymentID": {
                                    "value": "[parameters('DeploymentID')]"
                                  },
                                  "NIC": {
                                    "value": "[parameters('NICs')[copyIndex()]]"
                                  },
                                  "NICNumber": {
                                    "value": "[string(add(copyIndex(), 1))]"
                                  },
                                  "VM": {
                                    "value": "[parameters('VM')]"
                                  },
                                  "Global": {
                                    "value": "[parameters('Global')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.4.1318.3566",
                                      "templateHash": "13928916846586964615"
                                    }
                                  },
                                  "parameters": {
                                    "Deployment": {
                                      "type": "string"
                                    },
                                    "DeploymentURI": {
                                      "type": "string"
                                    },
                                    "DeploymentID": {
                                      "type": "string"
                                    },
                                    "NIC": {
                                      "type": "object"
                                    },
                                    "NICNumber": {
                                      "type": "string"
                                    },
                                    "VM": {
                                      "type": "object"
                                    },
                                    "Global": {
                                      "type": "object"
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "loadBalancerInboundNatRules",
                                        "count": "[length(variables('rules'))]",
                                        "input": {
                                          "id": "[format('{0}/providers/Microsoft.Network/loadBalancers/{1}-lb{2}/inboundNatRules/{3}', resourceGroup().id, parameters('Deployment'), if(contains(parameters('NIC'), 'PLB'), parameters('NIC').PLB, 'none'), if(contains(parameters('NIC'), 'NATRules'), variables('rules')[copyIndex('loadBalancerInboundNatRules')], 'none'))]"
                                        }
                                      }
                                    ],
                                    "networkId": "[format('{0}{1}', parameters('Global').networkid[0], string(sub(parameters('Global').networkid[1], mul(2, int(parameters('DeploymentID'))))))]",
                                    "networkIdUpper": "[format('{0}{1}', parameters('Global').networkid[0], string(add(1, sub(parameters('Global').networkid[1], mul(2, int(parameters('DeploymentID')))))))]",
                                    "VNetID": "[resourceId('Microsoft.Network/VirtualNetworks', format('{0}-vn', parameters('Deployment')))]",
                                    "subnetID": "[format('{0}/subnets/sn{1}', variables('VNetID'), parameters('NIC').Subnet)]",
                                    "acceleratedNetworking": "[if(contains(parameters('NIC'), 'FastNic'), true(), false())]",
                                    "NICSuffix": "[if(equals(parameters('NICNumber'), '1'), '', parameters('NICNumber'))]",
                                    "IPAllocation": "[if(contains(parameters('NIC'), 'StaticIP'), 'Static', 'Dynamic')]",
                                    "privateIPAddress": "[if(contains(parameters('NIC'), 'StaticIP'), format('{0}.{1}', if(equals(parameters('NIC').Subnet, 'MT02'), variables('networkIdUpper'), variables('networkId')), parameters('NIC').StaticIP), null())]",
                                    "publicIPAddress": "[if(not(contains(parameters('NIC'), 'PublicIP')), null(), createObject('id', resourceId('Microsoft.Network/publicIPAddresses', format('{0}-vm{1}-publicip{2}', parameters('Deployment'), parameters('VM').Name, parameters('NICNumber')))))]",
                                    "JITNSG": {
                                      "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-vm{1}-JITNSG', parameters('Deployment'), parameters('VM').Name))]"
                                    },
                                    "rules": "[if(contains(parameters('NIC'), 'NatRules'), parameters('NIC').NatRules, createArray())]"
                                  },
                                  "resources": [
                                    {
                                      "condition": "[not(or(or(or(contains(parameters('NIC'), 'LB'), contains(parameters('NIC'), 'PLB')), contains(parameters('NIC'), 'SLB')), contains(parameters('NIC'), 'ISLB')))]",
                                      "type": "Microsoft.Network/networkInterfaces",
                                      "apiVersion": "2021-02-01",
                                      "name": "[format('{0}-nic{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name)]",
                                      "location": "[resourceGroup().location]",
                                      "properties": {
                                        "enableAcceleratedNetworking": "[variables('acceleratedNetworking')]",
                                        "ipConfigurations": [
                                          {
                                            "name": "ipconfig1",
                                            "properties": {
                                              "publicIPAddress": "[if(contains(parameters('NIC'), 'PublicIP'), variables('publicIPAddress'), null())]",
                                              "privateIPAllocationMethod": "[variables('IPAllocation')]",
                                              "privateIPAddress": "[variables('privateIPAddress')]",
                                              "subnet": {
                                                "id": "[variables('subnetID')]"
                                              }
                                            }
                                          }
                                        ],
                                        "networkSecurityGroup": "[variables('JITNSG')]"
                                      }
                                    },
                                    {
                                      "condition": "[not(or(contains(parameters('NIC'), 'LB'), or(contains(parameters('NIC'), 'PLB'), or(contains(parameters('NIC'), 'SLB'), contains(parameters('NIC'), 'ISLB')))))]",
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', format('{0}-nic{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]",
                                      "name": "service",
                                      "properties": {
                                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                                        "metrics": [
                                          {
                                            "timeGrain": "PT5M",
                                            "enabled": true,
                                            "retentionPolicy": {
                                              "enabled": false,
                                              "days": 0
                                            }
                                          }
                                        ]
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nic{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]"
                                      ]
                                    },
                                    {
                                      "condition": "[contains(parameters('NIC'), 'PLB')]",
                                      "type": "Microsoft.Network/networkInterfaces",
                                      "apiVersion": "2021-02-01",
                                      "name": "[format('{0}-nicplb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name)]",
                                      "location": "[resourceGroup().location]",
                                      "properties": {
                                        "enableAcceleratedNetworking": "[variables('acceleratedNetworking')]",
                                        "ipConfigurations": [
                                          {
                                            "name": "ipconfig1",
                                            "properties": {
                                              "loadBalancerBackendAddressPools": [
                                                {
                                                  "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', format('{0}-lb{1}', parameters('Deployment'), parameters('NIC').PLB), parameters('NIC').PLB)]"
                                                }
                                              ],
                                              "loadBalancerInboundNatRules": "[if(contains(parameters('NIC'), 'NATRules'), variables('loadBalancerInboundNatRules'), null())]",
                                              "privateIPAllocationMethod": "[variables('IPAllocation')]",
                                              "privateIPAddress": "[variables('privateIPAddress')]",
                                              "subnet": {
                                                "id": "[variables('subnetID')]"
                                              }
                                            }
                                          }
                                        ],
                                        "networkSecurityGroup": "[variables('JITNSG')]"
                                      }
                                    },
                                    {
                                      "condition": "[contains(parameters('NIC'), 'PLB')]",
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', format('{0}-nicplb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]",
                                      "name": "service",
                                      "properties": {
                                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                                        "metrics": [
                                          {
                                            "timeGrain": "PT5M",
                                            "enabled": true,
                                            "retentionPolicy": {
                                              "enabled": false,
                                              "days": 0
                                            }
                                          }
                                        ]
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nicplb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]"
                                      ]
                                    },
                                    {
                                      "condition": "[contains(parameters('NIC'), 'LB')]",
                                      "type": "Microsoft.Network/networkInterfaces",
                                      "apiVersion": "2021-02-01",
                                      "name": "[format('{0}-niclb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name)]",
                                      "location": "[resourceGroup().location]",
                                      "properties": {
                                        "enableAcceleratedNetworking": "[variables('acceleratedNetworking')]",
                                        "ipConfigurations": [
                                          {
                                            "name": "ipconfig1",
                                            "properties": {
                                              "loadBalancerBackendAddressPools": [
                                                {
                                                  "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', format('{0}-ilb{1}', parameters('Deployment'), parameters('NIC').LB), parameters('NIC').LB)]"
                                                }
                                              ],
                                              "privateIPAllocationMethod": "[variables('IPAllocation')]",
                                              "privateIPAddress": "[variables('privateIPAddress')]",
                                              "subnet": {
                                                "id": "[variables('subnetID')]"
                                              }
                                            }
                                          }
                                        ],
                                        "networkSecurityGroup": "[variables('JITNSG')]"
                                      }
                                    },
                                    {
                                      "condition": "[contains(parameters('NIC'), 'LB')]",
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', format('{0}-niclb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]",
                                      "name": "service",
                                      "properties": {
                                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                                        "metrics": [
                                          {
                                            "timeGrain": "PT5M",
                                            "enabled": true,
                                            "retentionPolicy": {
                                              "enabled": false,
                                              "days": 0
                                            }
                                          }
                                        ]
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-niclb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]"
                                      ]
                                    },
                                    {
                                      "condition": "[contains(parameters('NIC'), 'SLB')]",
                                      "type": "Microsoft.Network/networkInterfaces",
                                      "apiVersion": "2021-02-01",
                                      "name": "[format('{0}-nicslb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name)]",
                                      "location": "[resourceGroup().location]",
                                      "properties": {
                                        "enableAcceleratedNetworking": "[variables('acceleratedNetworking')]",
                                        "ipConfigurations": [
                                          {
                                            "name": "ipconfig1",
                                            "properties": {
                                              "loadBalancerBackendAddressPools": [
                                                {
                                                  "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', format('{0}-lb{1}', parameters('Deployment'), parameters('NIC').SLB), parameters('NIC').SLB)]"
                                                }
                                              ],
                                              "privateIPAllocationMethod": "[variables('IPAllocation')]",
                                              "privateIPAddress": "[variables('privateIPAddress')]",
                                              "subnet": {
                                                "id": "[variables('subnetID')]"
                                              }
                                            }
                                          }
                                        ],
                                        "networkSecurityGroup": "[variables('JITNSG')]"
                                      }
                                    },
                                    {
                                      "condition": "[contains(parameters('NIC'), 'SLB')]",
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', format('{0}-nicslb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]",
                                      "name": "service",
                                      "properties": {
                                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                                        "metrics": [
                                          {
                                            "timeGrain": "PT5M",
                                            "enabled": true,
                                            "retentionPolicy": {
                                              "enabled": false,
                                              "days": 0
                                            }
                                          }
                                        ]
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nicslb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]"
                                      ]
                                    }
                                  ],
                                  "outputs": {
                                    "foo7": {
                                      "type": "array",
                                      "value": "[variables('loadBalancerInboundNatRules')]"
                                    },
                                    "foo": {
                                      "type": "object",
                                      "value": "[parameters('NIC')]"
                                    }
                                  }
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-AppServer-publicIPDeploy{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-AppServer-diskLookup{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[variables('Deployment')]"
                          },
                          "DeploymentID": {
                            "value": "[parameters('DeploymentID')]"
                          },
                          "Name": {
                            "value": "[parameters('AppServer').Name]"
                          },
                          "SOFS": {
                            "value": "[if(contains(variables('DataDiskInfo')[parameters('AppServer').DDRole], 'SOFS'), variables('DataDiskInfo')[parameters('AppServer').DDRole].SOFS, json('{\"1\":1}'))]"
                          },
                          "DATA": {
                            "value": "[if(contains(variables('DataDiskInfo')[parameters('AppServer').DDRole], 'DATA'), variables('DataDiskInfo')[parameters('AppServer').DDRole].DATA, json('{\"1\":1}'))]"
                          },
                          "LOGS": {
                            "value": "[if(contains(variables('DataDiskInfo')[parameters('AppServer').DDRole], 'LOGS'), variables('DataDiskInfo')[parameters('AppServer').DDRole].LOGS, json('{\"1\":1}'))]"
                          },
                          "TEMPDB": {
                            "value": "[if(contains(variables('DataDiskInfo')[parameters('AppServer').DDRole], 'TEMPDB'), variables('DataDiskInfo')[parameters('AppServer').DDRole].TEMPDB, json('{\"1\":1}'))]"
                          },
                          "BACKUP": {
                            "value": "[if(contains(variables('DataDiskInfo')[parameters('AppServer').DDRole], 'BACKUP'), variables('DataDiskInfo')[parameters('AppServer').DDRole].BACKUP, json('{\"1\":1}'))]"
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "13688646372196984293"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "DeploymentID": {
                              "type": "string"
                            },
                            "Name": {
                              "type": "string"
                            },
                            "DATA": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "DATASS": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "SOFS": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "LOGS": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "TEMPDB": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "BACKUP": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "DISKS": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "Global": {
                              "type": "object"
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "Data_var",
                                "count": "[length(range(0, if(contains(parameters('DATA'), '1'), 1, length(parameters('DATA').LUNS))))]",
                                "input": {
                                  "name": "[if(contains(parameters('DATA'), '1'), 1, format('{0}-{1}-DATA-DATA{2}', parameters('Deployment'), parameters('Name'), padLeft(parameters('DATA').LUNS[range(0, if(contains(parameters('DATA'), '1'), 1, length(parameters('DATA').LUNS)))[copyIndex('Data_var')]][0], 2, '0')))]",
                                  "lun": "[if(contains(parameters('DATA'), '1'), 1, int(parameters('DATA').LUNS[range(0, if(contains(parameters('DATA'), '1'), 1, length(parameters('DATA').LUNS)))[copyIndex('Data_var')]][0]))]",
                                  "caching": "[if(contains(parameters('DATA'), '1'), 1, parameters('DATA').caching)]",
                                  "diskSizeGB": "[if(contains(parameters('DATA'), '1'), 1, int(parameters('DATA').LUNS[range(0, if(contains(parameters('DATA'), '1'), 1, length(parameters('DATA').LUNS)))[copyIndex('Data_var')]][1]))]",
                                  "createOption": "[if(contains(parameters('DATA'), '1'), 1, if(equals(length(parameters('DATA').LUNS[range(0, if(contains(parameters('DATA'), '1'), 1, length(parameters('DATA').LUNS)))[copyIndex('Data_var')]]), 3), parameters('DATA').LUNS[range(0, if(contains(parameters('DATA'), '1'), 1, length(parameters('DATA').LUNS)))[copyIndex('Data_var')]][2], 'Empty'))]",
                                  "managedDisk": "[if(contains(parameters('DATA'), '1'), 1, if(contains(parameters('DATA'), 'saType'), json(format('{{\"storageAccountType\":\"{0}\"}}', parameters('DATA').saType)), json('null')))]"
                                }
                              },
                              {
                                "name": "Datass_var",
                                "count": "[length(range(0, if(contains(parameters('DATASS'), '1'), 1, length(parameters('DATASS').LUNS))))]",
                                "input": {
                                  "lun": "[if(contains(parameters('DATASS'), '1'), 1, int(parameters('DATASS').LUNS[range(0, if(contains(parameters('DATASS'), '1'), 1, length(parameters('DATASS').LUNS)))[copyIndex('Datass_var')]][0]))]",
                                  "caching": "[if(contains(parameters('DATASS'), '1'), 1, parameters('DATASS').caching)]",
                                  "diskSizeGB": "[if(contains(parameters('DATASS'), '1'), 1, int(parameters('DATASS').LUNS[range(0, if(contains(parameters('DATASS'), '1'), 1, length(parameters('DATASS').LUNS)))[copyIndex('Datass_var')]][1]))]",
                                  "createOption": "[if(contains(parameters('DATASS'), '1'), 1, if(equals(length(parameters('DATASS').LUNS[range(0, if(contains(parameters('DATASS'), '1'), 1, length(parameters('DATASS').LUNS)))[copyIndex('Datass_var')]]), 3), parameters('DATASS').LUNS[range(0, if(contains(parameters('DATASS'), '1'), 1, length(parameters('DATASS').LUNS)))[copyIndex('Datass_var')]][2], 'Empty'))]",
                                  "managedDisk": "[if(contains(parameters('DATASS'), '1'), 1, if(contains(parameters('DATASS'), 'saType'), json(format('{{\"storageAccountType\":\"{0}\"}}', parameters('DATASS').saType)), json('null')))]"
                                }
                              },
                              {
                                "name": "SOFS_var",
                                "count": "[length(range(0, if(contains(parameters('SOFS'), '1'), 1, length(parameters('SOFS').LUNS))))]",
                                "input": {
                                  "name": "[if(contains(parameters('SOFS'), '1'), 1, format('{0}-{1}-DATA-SOFS{2}', parameters('Deployment'), parameters('Name'), padLeft(parameters('SOFS').LUNS[range(0, if(contains(parameters('SOFS'), '1'), 1, length(parameters('SOFS').LUNS)))[copyIndex('SOFS_var')]][0], 2, '0')))]",
                                  "lun": "[if(contains(parameters('SOFS'), '1'), 1, int(parameters('SOFS').LUNS[range(0, if(contains(parameters('SOFS'), '1'), 1, length(parameters('SOFS').LUNS)))[copyIndex('SOFS_var')]][0]))]",
                                  "caching": "[if(contains(parameters('SOFS'), '1'), 1, parameters('SOFS').caching)]",
                                  "diskSizeGB": "[if(contains(parameters('SOFS'), '1'), 1, int(parameters('SOFS').LUNS[range(0, if(contains(parameters('SOFS'), '1'), 1, length(parameters('SOFS').LUNS)))[copyIndex('SOFS_var')]][1]))]",
                                  "createOption": "[if(contains(parameters('SOFS'), '1'), 1, if(equals(length(parameters('SOFS').LUNS[range(0, if(contains(parameters('SOFS'), '1'), 1, length(parameters('SOFS').LUNS)))[copyIndex('SOFS_var')]]), 3), parameters('SOFS').LUNS[range(0, if(contains(parameters('SOFS'), '1'), 1, length(parameters('SOFS').LUNS)))[copyIndex('SOFS_var')]][2], 'Empty'))]",
                                  "managedDisk": "[if(contains(parameters('SOFS'), '1'), 1, if(contains(parameters('SOFS'), 'saType'), json(format('{{\"storageAccountType\":\"{0}\"}}', parameters('SOFS').saType)), json('null')))]"
                                }
                              },
                              {
                                "name": "LOGS_var",
                                "count": "[length(range(0, if(contains(parameters('LOGS'), '1'), 1, length(parameters('LOGS').LUNS))))]",
                                "input": {
                                  "name": "[if(contains(parameters('LOGS'), '1'), 1, format('{0}-{1}-DATA-LOGS{2}', parameters('Deployment'), parameters('Name'), padLeft(parameters('LOGS').LUNS[range(0, if(contains(parameters('LOGS'), '1'), 1, length(parameters('LOGS').LUNS)))[copyIndex('LOGS_var')]][0], 2, '0')))]",
                                  "lun": "[if(contains(parameters('LOGS'), '1'), 1, int(parameters('LOGS').LUNS[range(0, if(contains(parameters('LOGS'), '1'), 1, length(parameters('LOGS').LUNS)))[copyIndex('LOGS_var')]][0]))]",
                                  "caching": "[if(contains(parameters('LOGS'), '1'), 1, parameters('LOGS').caching)]",
                                  "diskSizeGB": "[if(contains(parameters('LOGS'), '1'), 1, int(parameters('LOGS').LUNS[range(0, if(contains(parameters('LOGS'), '1'), 1, length(parameters('LOGS').LUNS)))[copyIndex('LOGS_var')]][1]))]",
                                  "createOption": "[if(contains(parameters('LOGS'), '1'), 1, if(equals(length(parameters('LOGS').LUNS[range(0, if(contains(parameters('LOGS'), '1'), 1, length(parameters('LOGS').LUNS)))[copyIndex('LOGS_var')]]), 3), parameters('LOGS').LUNS[range(0, if(contains(parameters('LOGS'), '1'), 1, length(parameters('LOGS').LUNS)))[copyIndex('LOGS_var')]][2], 'Empty'))]",
                                  "managedDisk": "[if(contains(parameters('LOGS'), '1'), 1, if(contains(parameters('LOGS'), 'saType'), json(format('{{\"storageAccountType\":\"{0}\"}}', parameters('LOGS').saType)), json('null')))]"
                                }
                              },
                              {
                                "name": "TEMPDB_var",
                                "count": "[length(range(0, if(contains(parameters('TEMPDB'), '1'), 1, length(parameters('TEMPDB').LUNS))))]",
                                "input": {
                                  "name": "[if(contains(parameters('TEMPDB'), '1'), 1, format('{0}-{1}-DATA-TEMPDB{2}', parameters('Deployment'), parameters('Name'), padLeft(parameters('TEMPDB').LUNS[range(0, if(contains(parameters('TEMPDB'), '1'), 1, length(parameters('TEMPDB').LUNS)))[copyIndex('TEMPDB_var')]][0], 2, '0')))]",
                                  "lun": "[if(contains(parameters('TEMPDB'), '1'), 1, int(parameters('TEMPDB').LUNS[range(0, if(contains(parameters('TEMPDB'), '1'), 1, length(parameters('TEMPDB').LUNS)))[copyIndex('TEMPDB_var')]][0]))]",
                                  "caching": "[if(contains(parameters('TEMPDB'), '1'), 1, parameters('TEMPDB').caching)]",
                                  "diskSizeGB": "[if(contains(parameters('TEMPDB'), '1'), 1, int(parameters('TEMPDB').LUNS[range(0, if(contains(parameters('TEMPDB'), '1'), 1, length(parameters('TEMPDB').LUNS)))[copyIndex('TEMPDB_var')]][1]))]",
                                  "createOption": "[if(contains(parameters('TEMPDB'), '1'), 1, if(equals(length(parameters('TEMPDB').LUNS[range(0, if(contains(parameters('TEMPDB'), '1'), 1, length(parameters('TEMPDB').LUNS)))[copyIndex('TEMPDB_var')]]), 3), parameters('TEMPDB').LUNS[range(0, if(contains(parameters('TEMPDB'), '1'), 1, length(parameters('TEMPDB').LUNS)))[copyIndex('TEMPDB_var')]][2], 'Empty'))]",
                                  "managedDisk": "[if(contains(parameters('TEMPDB'), '1'), 1, if(contains(parameters('TEMPDB'), 'saType'), json(format('{{\"storageAccountType\":\"{0}\"}}', parameters('TEMPDB').saType)), json('null')))]"
                                }
                              },
                              {
                                "name": "BACKUP_var",
                                "count": "[length(range(0, if(contains(parameters('BACKUP'), '1'), 1, length(parameters('BACKUP').LUNS))))]",
                                "input": {
                                  "name": "[if(contains(parameters('BACKUP'), '1'), 1, format('{0}-{1}-DATA-BACKUP{2}', parameters('Deployment'), parameters('Name'), padLeft(parameters('BACKUP').LUNS[range(0, if(contains(parameters('BACKUP'), '1'), 1, length(parameters('BACKUP').LUNS)))[copyIndex('BACKUP_var')]][0], 2, '0')))]",
                                  "lun": "[if(contains(parameters('BACKUP'), '1'), 1, int(parameters('BACKUP').LUNS[range(0, if(contains(parameters('BACKUP'), '1'), 1, length(parameters('BACKUP').LUNS)))[copyIndex('BACKUP_var')]][0]))]",
                                  "caching": "[if(contains(parameters('BACKUP'), '1'), 1, parameters('BACKUP').caching)]",
                                  "diskSizeGB": "[if(contains(parameters('BACKUP'), '1'), 1, int(parameters('BACKUP').LUNS[range(0, if(contains(parameters('BACKUP'), '1'), 1, length(parameters('BACKUP').LUNS)))[copyIndex('BACKUP_var')]][1]))]",
                                  "createOption": "[if(contains(parameters('BACKUP'), '1'), 1, if(equals(length(parameters('BACKUP').LUNS[range(0, if(contains(parameters('BACKUP'), '1'), 1, length(parameters('BACKUP').LUNS)))[copyIndex('BACKUP_var')]]), 3), parameters('BACKUP').LUNS[range(0, if(contains(parameters('BACKUP'), '1'), 1, length(parameters('BACKUP').LUNS)))[copyIndex('BACKUP_var')]][2], 'Empty'))]",
                                  "managedDisk": "[if(contains(parameters('BACKUP'), '1'), 1, if(contains(parameters('BACKUP'), 'saType'), json(format('{{\"storageAccountType\":\"{0}\"}}', parameters('BACKUP').saType)), json('null')))]"
                                }
                              }
                            ]
                          },
                          "resources": [],
                          "outputs": {
                            "SOFS": {
                              "type": "array",
                              "value": "[if(contains(parameters('SOFS'), '1'), array('no SOFS disks'), variables('SOFS_var'))]"
                            },
                            "DATA": {
                              "type": "array",
                              "value": "[if(contains(parameters('DATA'), '1'), array('no DATA disks'), variables('Data_var'))]"
                            },
                            "DATASS": {
                              "type": "array",
                              "value": "[if(contains(parameters('DATASS'), '1'), array('no DATA disks'), variables('Datass_var'))]"
                            },
                            "LOGS": {
                              "type": "array",
                              "value": "[if(contains(parameters('LOGS'), '1'), array('no LOGS disks'), variables('LOGS_var'))]"
                            },
                            "TEMPDB": {
                              "type": "array",
                              "value": "[if(contains(parameters('TEMPDB'), '1'), array('no TEMPDB disks'), variables('TEMPDB_var'))]"
                            },
                            "BACKUP": {
                              "type": "array",
                              "value": "[if(contains(parameters('BACKUP'), '1'), array('no BACKUP disks'), variables('BACKUP_var'))]"
                            },
                            "DATADisks": {
                              "type": "array",
                              "value": "[union(if(contains(parameters('SOFS'), '1'), createArray(), variables('SOFS_var')), if(contains(parameters('DATA'), '1'), createArray(), variables('Data_var')), if(contains(parameters('DATASS'), '1'), createArray(), variables('Datass_var')), if(contains(parameters('LOGS'), '1'), createArray(), variables('LOGS_var')), if(contains(parameters('TEMPDB'), '1'), createArray(), variables('TEMPDB_var')), if(contains(parameters('BACKUP'), '1'), createArray(), variables('BACKUP_var')))]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "condition": "[bool(parameters('AppServer').DeployJIT)]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-AppServer-JIT-{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[variables('Deployment')]"
                          },
                          "VM": {
                            "value": "[parameters('AppServer')]"
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          },
                          "DeploymentID": {
                            "value": "[parameters('DeploymentID')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "17671050488544287828"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "VM": {
                              "type": "object"
                            },
                            "Global": {
                              "type": "object"
                            },
                            "DeploymentID": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "ports",
                                "count": "[length(variables('portList'))]",
                                "input": {
                                  "number": "[variables('portList')[copyIndex('ports')]]",
                                  "protocol": "TCP",
                                  "allowedSourceAddressPrefixes": "[union(parameters('Global').IPAddressforRemoteAccess, variables('addressPrefixes'))]",
                                  "maxRequestAccessDuration": "PT3H"
                                }
                              }
                            ],
                            "portList": [
                              3389,
                              22,
                              5985,
                              5986
                            ],
                            "networkId": "[format('{0}{1}', parameters('Global').networkid[0], string(sub(parameters('Global').networkid[1], mul(2, int(parameters('DeploymentID'))))))]",
                            "addressPrefixes": [
                              "[format('{0}.0/23', variables('networkId'))]"
                            ]
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Security/locations/jitNetworkAccessPolicies",
                              "apiVersion": "2020-01-01",
                              "name": "[format('{0}/JIT_{1}', resourceGroup().location, format('{0}-vm{1}', parameters('Deployment'), parameters('VM').name))]",
                              "kind": "Basic",
                              "properties": {
                                "virtualMachines": [
                                  {
                                    "id": "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', parameters('Deployment'), parameters('VM').name))]",
                                    "ports": "[variables('ports')]"
                                  }
                                ],
                                "appendMode": true
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "Disks": {
                      "type": "array",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('dp{0}-AppServer-diskLookup{1}', variables('Deployment'), parameters('AppServer').Name))).outputs.DATADisks.value]"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-OMS', variables('Deployment')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-SA', variables('Deployment')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-VNETDNSPublic', variables('Deployment')))]"
      ]
    },
    {
      "condition": "[or(bool(parameters('Stage').ADPrimary), and(contains(parameters('Stage'), 'CreateADPDC'), bool(parameters('Stage').CreateADPDC)))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('dp{0}-VNETDNSDC1', variables('Deployment'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "Deployment": {
            "value": "[variables('Deployment')]"
          },
          "DeploymentID": {
            "value": "[parameters('DeploymentID')]"
          },
          "Prefix": {
            "value": "[parameters('Prefix')]"
          },
          "DeploymentInfo": {
            "value": "[parameters('DeploymentInfo')]"
          },
          "Environment": {
            "value": "[parameters('Environment')]"
          },
          "DNSServers": {
            "value": [
              "[variables('DNSServers')[0]]"
            ]
          },
          "Global": {
            "value": "[parameters('Global')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "3160939652284819424"
            }
          },
          "parameters": {
            "Deployment": {
              "type": "string"
            },
            "DeploymentID": {
              "type": "string"
            },
            "DeploymentInfo": {
              "type": "object"
            },
            "DNSServers": {
              "type": "array"
            },
            "Global": {
              "type": "object"
            },
            "Prefix": {
              "type": "string"
            },
            "Environment": {
              "type": "string"
            }
          },
          "variables": {
            "HubRGJ": "[json(parameters('Global').hubRG)]",
            "gh": {
              "hubRGPrefix": "[if(contains(variables('HubRGJ'), 'Prefix'), variables('HubRGJ').Prefix, parameters('Prefix'))]",
              "hubRGOrgName": "[if(contains(variables('HubRGJ'), 'OrgName'), variables('HubRGJ').OrgName, parameters('Global').OrgName)]",
              "hubRGAppName": "[if(contains(variables('HubRGJ'), 'AppName'), variables('HubRGJ').AppName, parameters('Global').AppName)]",
              "hubRGRGName": "[if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID'))))]"
            },
            "HubRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').hubRGPrefix, variables('gh').hubRGOrgName, variables('gh').hubRGAppName, variables('gh').hubRGRGName)]",
            "HubVNName": "[format('{0}-{1}-{2}-{3}-vn', variables('gh').hubRGPrefix, variables('gh').hubRGOrgName, variables('gh').hubRGAppName, variables('gh').hubRGRGName)]",
            "networkId": "[format('{0}{1}', parameters('Global').networkid[0], string(sub(parameters('Global').networkid[1], mul(2, int(parameters('DeploymentID'))))))]",
            "networkIdUpper": "[format('{0}{1}', parameters('Global').networkid[0], string(add(1, sub(parameters('Global').networkid[1], mul(2, int(parameters('DeploymentID')))))))]",
            "addressPrefixes": [
              "[format('{0}.0/23', variables('networkId'))]"
            ],
            "SubnetInfo": "[if(contains(parameters('DeploymentInfo'), 'SubnetInfo'), parameters('DeploymentInfo').SubnetInfo, createArray())]",
            "Domain": "[split(parameters('Global').DomainName, '.')[0]]",
            "RouteTableGlobal": {
              "id": "[resourceId(variables('HubRGName'), 'Microsoft.Network/routeTables/', format('{0}{1}{2}', replace(variables('HubVNName'), 'vn', 'rt'), variables('Domain'), parameters('Global').RTName))]"
            },
            "delegations": {
              "default": [],
              "Microsoft.Web/serverfarms": [
                {
                  "name": "delegation",
                  "properties": {
                    "serviceName": "Microsoft.Web/serverfarms"
                  }
                }
              ],
              "Microsoft.ContainerInstance/containerGroups": [
                {
                  "name": "aciDelegation",
                  "properties": {
                    "serviceName": "Microsoft.ContainerInstance/containerGroups"
                  }
                }
              ]
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2021-02-01",
              "name": "[format('{0}-vn', parameters('Deployment'))]",
              "location": "[resourceGroup().location]",
              "properties": {
                "copy": [
                  {
                    "name": "subnets",
                    "count": "[length(variables('SubnetInfo'))]",
                    "input": {
                      "name": "[variables('SubnetInfo')[copyIndex('subnets')].name]",
                      "properties": {
                        "addressPrefix": "[format('{0}.{1}', if(equals(variables('SubnetInfo')[copyIndex('subnets')].name, 'snMT02'), variables('networkIdUpper'), variables('networkId')), variables('SubnetInfo')[copyIndex('subnets')].Prefix)]",
                        "networkSecurityGroup": "[if(not(and(contains(variables('SubnetInfo')[copyIndex('subnets')], 'NSG'), bool(variables('SubnetInfo')[copyIndex('subnets')].NSG))), null(), createObject('id', resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-nsg{1}', parameters('Deployment'), variables('SubnetInfo')[copyIndex('subnets')].name))))]",
                        "natGateway": "[if(not(and(contains(variables('SubnetInfo')[copyIndex('subnets')], 'NGW'), bool(variables('SubnetInfo')[copyIndex('subnets')].NGW))), null(), createObject('id', resourceId('Microsoft.Network/natGateways', format('{0}-ngwNAT01', parameters('Deployment')))))]",
                        "routeTable": "[if(and(contains(variables('SubnetInfo')[copyIndex('subnets')], 'Route'), bool(variables('SubnetInfo')[copyIndex('subnets')].Route)), variables('RouteTableGlobal'), null())]",
                        "privateEndpointNetworkPolicies": "Disabled",
                        "delegations": "[if(contains(variables('SubnetInfo')[copyIndex('subnets')], 'delegations'), variables('delegations')[variables('SubnetInfo')[copyIndex('subnets')].delegations], variables('delegations').default)]"
                      }
                    }
                  }
                ],
                "addressSpace": {
                  "addressPrefixes": "[variables('addressPrefixes')]"
                },
                "dhcpOptions": {
                  "dnsServers": "[array(parameters('DNSServers'))]"
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'ADPrimary')]",
        "[resourceId('Microsoft.Resources/deployments', 'CreateADPDC')]"
      ]
    },
    {
      "condition": "[and(contains(parameters('Stage'), 'CreateADBDC'), bool(parameters('Stage').CreateADBDC))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "CreateADBDC",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "DeploymentID": {
            "value": "[parameters('DeploymentID')]"
          },
          "DeploymentInfo": {
            "value": "[parameters('DeploymentInfo')]"
          },
          "Environment": {
            "value": "[parameters('Environment')]"
          },
          "Extensions": {
            "value": "[parameters('Extensions')]"
          },
          "Global": {
            "value": "[parameters('Global')]"
          },
          "Prefix": {
            "value": "[parameters('Prefix')]"
          },
          "Stage": {
            "value": "[parameters('Stage')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "13874993644946453761"
            }
          },
          "parameters": {
            "Prefix": {
              "type": "string"
            },
            "Environment": {
              "type": "string",
              "defaultValue": "D",
              "allowedValues": [
                "I",
                "D",
                "T",
                "U",
                "P",
                "S",
                "G",
                "A"
              ]
            },
            "DeploymentID": {
              "type": "string",
              "defaultValue": "1",
              "allowedValues": [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9"
              ]
            },
            "Stage": {
              "type": "object"
            },
            "Extensions": {
              "type": "object"
            },
            "Global": {
              "type": "object"
            },
            "DeploymentInfo": {
              "type": "object"
            }
          },
          "variables": {
            "copy": [
              {
                "name": "VMs",
                "count": "[length(variables('AppServers'))]",
                "input": {
                  "name": "[variables('AppServers')[copyIndex('VMs')].Name]",
                  "match": "[or(equals(parameters('Global').CN, '.'), contains(array(parameters('Global').CN), variables('AppServers')[copyIndex('VMs')].Name))]",
                  "Extensions": "[if(contains(variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType], 'RoleExtensions'), union(parameters('Extensions'), variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType].RoleExtensions), parameters('Extensions'))]",
                  "DataDisk": "[if(contains(variables('AppServers')[copyIndex('VMs')], 'DDRole'), variables('DataDiskInfo')[variables('AppServers')[copyIndex('VMs')].DDRole], null())]",
                  "vmHostName": "[toLower(format('{0}{1}{2}{3}{4}', parameters('Prefix'), parameters('Global').AppName, parameters('Environment'), parameters('DeploymentID'), variables('AppServers')[copyIndex('VMs')].Name))]",
                  "AppInfo": "[if(contains(variables('AppServers')[copyIndex('VMs')], 'AppInfo'), variables('AppServers')[copyIndex('VMs')].AppInfo, null())]",
                  "windowsConfiguration": {
                    "enableAutomaticUpdates": true,
                    "provisionVmAgent": true,
                    "patchSettings": {
                      "enableHotpatching": "[if(contains(variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType], 'HotPatch'), variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType].HotPatch, false())]",
                      "patchMode": "[if(contains(variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType], 'patchMode'), variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType].patchMode, 'AutomaticByOS')]"
                    }
                  },
                  "linuxConfiguration": {
                    "enableAutomaticUpdates": true,
                    "provisionVmAgent": true,
                    "patchSettings": {
                      "enableHotpatching": "[if(contains(variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType], 'HotPatch'), variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType].HotPatch, false())]",
                      "patchMode": "[if(contains(variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType], 'patchMode'), variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType].patchMode, 'AutomaticByOS')]"
                    }
                  }
                }
              }
            ],
            "Deployment": "[format('{0}-{1}-{2}-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID'))]",
            "computeGlobal": "[json('{\r\n  \"DataDiskInfo\": {\r\n    \"0GB\": {},\r\n    \"32GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            32\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GBSS\": {\r\n      \"DATASS\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GB-2\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ],\r\n          [\r\n            1,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"128GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            128\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"FIL64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"SOFS\": {\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            1,\r\n            32\r\n          ],\r\n          [\r\n            2,\r\n            32\r\n          ],\r\n          [\r\n            3,\r\n            32\r\n          ]\r\n        ],\r\n        \"FileSystem\": \"ReFS\",\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"SQL64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"LOGS\": {\r\n        \"DriveLetter\": \"G\",\r\n        \"caching\": \"None\",\r\n        \"LUNS\": [\r\n          [\r\n            8,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"TEMPDB\": {\r\n        \"DriveLetter\": \"H\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            12,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"BACKUP\": {\r\n        \"DriveLetter\": \"I\",\r\n        \"caching\": \"None\",\r\n        \"LUNS\": [\r\n          [\r\n            15,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    }\r\n  },\r\n  \"computeSizeLookupOptions\": {\r\n    \"API-P\": \"Standard_D4s_v3\",\r\n    \"API-D\": \"Standard_D4s_v3\",\r\n    \"API-S\": \"Standard_D2s_v3\",\r\n    \"SF-P\": \"Standard_D4s_v3\",\r\n    \"SF-D\": \"Standard_D2s_v3\",\r\n    \"SF-S\": \"Standard_D2s_v3\",\r\n    \"CTNR-P\": \"Standard_D4s_v3\",\r\n    \"CTNR-D\": \"Standard_D2s_v3\",\r\n    \"ADp-P\": \"Standard_D2s_v3\",\r\n    \"ADp-D\": \"Standard_A2m_v2\",\r\n    \"ADs-P\": \"Standard_D2s_v3\",\r\n    \"ADs-D\": \"Standard_A2m_v2\",\r\n    \"AAP-P\": \"Standard_D2s_v3\",\r\n    \"AAP-D\": \"Standard_D2s_v3\",\r\n    \"DNS-P\": \"Standard_D2s_v3\",\r\n    \"DNS-D\": \"Standard_D2s_v3\",\r\n    \"BUS-P\": \"Standard_DS2_v2\",\r\n    \"BUS-D\": \"Standard_DS2_v2\",\r\n    \"LIN-P\": \"Standard_DS2_v2\",\r\n    \"LIN-D\": \"Standard_DS2_v2\",\r\n    \"FIL-P\": \"Standard_D4s_v3\",\r\n    \"FIL-D\": \"Standard_D4s_v3\",\r\n    \"DFS-P\": \"Standard_D4s_v3\",\r\n    \"DFS-D\": \"Standard_D4s_v3\",\r\n    \"JMP-P\": \"Standard_D4s_v3\",\r\n    \"JMP-D\": \"Standard_D4s_v3\",\r\n    \"CLT-P\": \"Standard_D4s_v3\",\r\n    \"CLT-D\": \"Standard_D4s_v3\",\r\n    \"PXY-P\": \"Standard_D4s_v3\",\r\n    \"PXY-D\": \"Standard_D2s_v3\",\r\n    \"CLS01-D\": \"Standard_D4s_v3\",\r\n    \"CLS02-D\": \"Standard_D4s_v3\",\r\n    \"CLS01-P\": \"Standard_D4s_v3\",\r\n    \"CLS02-P\": \"Standard_D4s_v3\",\r\n    \"FW-P\": \"Standard_F4\",\r\n    \"FW-D\": \"Standard_F2\"\r\n  },\r\n  \"OSType\": {\r\n    \"Server2022SSIMG\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/b8f402aa-20f7-4888-b45c-3cf086dad9c3/resourceGroups/ACU1-BRW-AOA-RG-G1/providers/Microsoft.Compute/galleries/acu1brwaoag1gallery01/images/vmss2022\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SSIMG\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/b8f402aa-20f7-4888-b45c-3cf086dad9c3/resourceGroups/ACU1-BRW-AOA-RG-G1/providers/Microsoft.Compute/galleries/acu1brwaoag1gallery01/images/vmss2019webnetcore27\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"cbld10\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/27b750cd-ed43-42fd-9044-8d75e124ae55/resourceGroups/SBID-Build-Test/providers/Microsoft.Compute/galleries/cbldtest/images/cbld10-ext\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 1,\r\n        \"IaaSDiagnostics\": 1,\r\n        \"Antimalware\": 0,\r\n        \"DependencyAgent\": 1,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Win10O365\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsDesktop\",\r\n        \"offer\": \"office-365\",\r\n        \"sku\": \"rs5-evd-o365pp\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Client\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Win10\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsDesktop\",\r\n        \"offer\": \"Windows-10\",\r\n        \"sku\": \"21h1-pro-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Client\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"SQLServer2016\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftSQLServer\",\r\n        \"Offer\": \"SQL2016SP2-WS2016\",\r\n        \"sku\": \"Enterprise\",\r\n        \"version\": \"latest\"\r\n      },\r\n      // \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016Core\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-Server-Core\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016small\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016Coresmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-Server-Core-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019-gen2\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"windowsserver-gen2preview\",\r\n        \"sku\": \"2019-Datacenter-gen2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2022\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2022-Datacenter-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"_plan\": {\r\n        \"name\": \"windows-server-2022\",\r\n        \"publisher\": \"microsoftwindowsserver\",\r\n        \"product\": \"microsoftserveroperatingsystems-previews\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2022Containerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"datacenter-core-20h2-with-containers-smalldisk-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Core\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-Core\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019small\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-datacenter-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Coresmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-Server-Core-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Containerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019CoreContainerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-datacenter-core-with-containers-smalldisk-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016SS\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-with-Containers\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SSgs\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers-gs\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SS\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"NetScaler\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"citrix\",\r\n        \"Offer\": \"netscalervpx-120\",\r\n        \"Sku\": \"netscalerbyol\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"netscalerbyol\",\r\n        \"publisher\": \"citrix\",\r\n        \"product\": \"netscalervpx-120\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"MaxLoadBalancer\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"loadbalancer\",\r\n        \"offer\": \"loadbalancer-org-load-balancer-for-azure\",\r\n        \"sku\": \"max_load_balancer\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"max_load_balancer\",\r\n        \"publisher\": \"loadbalancer\",\r\n        \"product\": \"loadbalancer-org-load-balancer-for-azure\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortigate\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet_fortigate-vm_v5\",\r\n        \"sku\": \"fortinet_fg-vm\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"fortinet_fg-vm\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet_fortigate-vm_v5\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortigatepayg\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet_fortigate-vm_v5\",\r\n        \"sku\": \"fortinet_fg-vm_payg\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"fortinet_fg-vm_payg\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet_fortigate-vm_v5\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortimngr\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet-fortimanager\",\r\n        \"sku\": \"fortinet-fortimanager\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 3,\r\n      \"plan\": {\r\n        \"name\": \"fortinet-fortimanager\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet-fortimanager\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"UbuntuServer1904\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"canonical\",\r\n        \"offer\": \"UbuntuServer\",\r\n        \"sku\": \"19.04\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"Antimalware\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 1,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0\r\n      }\r\n    },\r\n    \"Bus-debian\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"credativ\",\r\n        \"offer\": \"Debian\",\r\n        \"sku\": \"8\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 1,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"PROXY-UBUNTU\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"Canonical\",\r\n        \"offer\": \"UbuntuServer\",\r\n        \"sku\": \"16.04-LTS\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"fileUris\": \"[concat(parameters(''global'')._artifactsLocation, ''/scripts/pxy.zip\",\r\n      \"commandToExecute\": \"[concat(''sudo apt-get update && sudo apt-get install unzip && unzip Proxy.zip && sudo bash -x haproxyvm-configure.sh '', '' -a '', ''ilbIPAddress'', '' -r '', ''ilbRabbitMqPort'', '' -m '', ''ilbRabbitMqMgmtPort'', '' -b '', ''dnsName'', ''.'', ''location'', ''.cloudapp.azure.com -p '', ''vmNamePrefix'', ''0 -s '', ''vmNamePrefix'', ''1'')]\",\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"CentOS75\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"OpenLogic\",\r\n        \"Offer\": \"CentOS\",\r\n        \"sku\": \"7.5\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"Antimalware\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    }\r\n  },\r\n  \"ladCfg\": {\r\n    \"diagnosticMonitorConfiguration\": {\r\n      \"eventVolume\": \"Medium\",\r\n      \"metrics\": {\r\n        \"metricAggregation\": [\r\n          {\r\n            \"scheduledTransferPeriod\": \"PT1H\"\r\n          },\r\n          {\r\n            \"scheduledTransferPeriod\": \"PT1M\"\r\n          }\r\n        ],\r\n        \"resourceId\": \"__VM_RESOURCE_ID__\"\r\n      },\r\n      \"performanceCounters\": {\r\n        \"performanceCounterConfiguration\": [\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk read guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readbytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/readbytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk writes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/writespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk transfer time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagetransfertime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagetransfertime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk transfers\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"transferspersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/transferspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk write guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writebytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/writebytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk read time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagereadtime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagereadtime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk write time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagewritetime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagewritetime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk total bytes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/bytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk reads\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readspersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/readspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk queue length\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagediskqueuelength\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagediskqueuelength\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network in guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytesreceived\",\r\n            \"counterSpecifier\": \"/builtin/network/bytesreceived\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network total bytes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytestotal\",\r\n            \"counterSpecifier\": \"/builtin/network/bytestotal\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network out guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytestransmitted\",\r\n            \"counterSpecifier\": \"/builtin/network/bytestransmitted\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network collisions\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totalcollisions\",\r\n            \"counterSpecifier\": \"/builtin/network/totalcollisions\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets received errors\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totalrxerrors\",\r\n            \"counterSpecifier\": \"/builtin/network/totalrxerrors\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets sent\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"packetstransmitted\",\r\n            \"counterSpecifier\": \"/builtin/network/packetstransmitted\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets received\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"packetsreceived\",\r\n            \"counterSpecifier\": \"/builtin/network/packetsreceived\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets sent errors\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totaltxerrors\",\r\n            \"counterSpecifier\": \"/builtin/network/totaltxerrors\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem transfers/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"transferspersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/transferspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % free space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentfreespace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentfreespace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % used space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusedspace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentusedspace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem used space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"usedspace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/usedspace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem read bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytesreadpersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/bytesreadpersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem free space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"freespace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/freespace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % free inodes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentfreeinodes\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentfreeinodes\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/bytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem reads/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readspersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/readspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem write bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"byteswrittenpersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/byteswrittenpersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem writes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writespersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/writespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % used inodes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusedinodes\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentusedinodes\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU IO wait time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentiowaittime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentiowaittime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU user time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusertime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentusertime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU nice time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentnicetime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentnicetime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU percentage guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentprocessortime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentprocessortime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU interrupt time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentinterrupttime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentinterrupttime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU idle time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentidletime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentidletime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU privileged time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentprivilegedtime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentprivilegedtime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"availablememory\",\r\n            \"counterSpecifier\": \"/builtin/memory/availablememory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap percent used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentusedswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentusedswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"usedmemory\",\r\n            \"counterSpecifier\": \"/builtin/memory/usedmemory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Page reads\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pagesreadpersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pagesreadpersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"availableswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/availableswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap percent available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentavailableswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentavailableswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Mem. percent available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentavailablememory\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentavailablememory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Pages\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pagespersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pagespersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"usedswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/usedswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory percentage\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentusedmemory\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentusedmemory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Page writes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pageswrittenpersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pageswrittenpersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          }\r\n        ]\r\n      },\r\n      \"syslogEvents\": {\r\n        \"syslogEventConfiguration\": {\r\n          \"LOG_AUTH\": \"LOG_DEBUG\",\r\n          \"LOG_AUTHPRIV\": \"LOG_DEBUG\",\r\n          \"LOG_CRON\": \"LOG_DEBUG\",\r\n          \"LOG_DAEMON\": \"LOG_DEBUG\",\r\n          \"LOG_FTP\": \"LOG_DEBUG\",\r\n          \"LOG_KERN\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL0\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL1\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL2\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL3\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL4\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL5\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL6\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL7\": \"LOG_DEBUG\",\r\n          \"LOG_LPR\": \"LOG_DEBUG\",\r\n          \"LOG_MAIL\": \"LOG_DEBUG\",\r\n          \"LOG_NEWS\": \"LOG_DEBUG\",\r\n          \"LOG_SYSLOG\": \"LOG_DEBUG\",\r\n          \"LOG_USER\": \"LOG_DEBUG\",\r\n          \"LOG_UUCP\": \"LOG_DEBUG\"\r\n        }\r\n      }\r\n    },\r\n    \"sampleRateInSeconds\": 15\r\n  },\r\n  \"WadCfg\": {\r\n    \"DiagnosticMonitorConfiguration\": {\r\n      \"overallQuotaInMB\": 10000,\r\n      \"DiagnosticInfrastructureLogs\": {\r\n        \"scheduledTransferLogLevelFilter\": \"Error\"\r\n      },\r\n      \"PerformanceCounters\": {\r\n        \"scheduledTransferPeriod\": \"PT1M\",\r\n        \"PerformanceCounterConfiguration\": []\r\n      },\r\n      \"WindowsEventLog\": {\r\n        \"scheduledTransferPeriod\": \"PT5M\",\r\n        \"DataSource\": [\r\n          {\r\n            \"name\": \"Application!*[System[(Level = 1 or Level = 2)]]\"\r\n          },\r\n          {\r\n            \"name\": \"Security!*[System[(Level = 1 or Level = 2)]\"\r\n          },\r\n          {\r\n            \"name\": \"System!*[System[(Level = 1 or Level = 2)]]\"\r\n          },\r\n          {\r\n            \"name\": \"Microsoft-Windows-DSC/Operational!*[System[(EventID=4249 or EventID=4097)]]\"\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}')]",
            "OSType": "[variables('computeGlobal').OSType]",
            "DataDiskInfo": "[variables('computeGlobal').DataDiskInfo]",
            "DeploymentName": "[if(contains(toLower(deployment().name), 'vmapp'), 'AppServers', replace(deployment().name, format('dp{0}-', variables('Deployment')), ''))]",
            "AppServers": "[parameters('DeploymentInfo').AppServers[variables('DeploymentName')]]",
            "HubKVJ": "[json(parameters('Global').hubKV)]",
            "HubRGJ": "[json(parameters('Global').hubRG)]",
            "gh": {
              "hubKVPrefix": "[if(contains(variables('HubKVJ'), 'Prefix'), variables('HubKVJ').Prefix, parameters('Prefix'))]",
              "hubKVOrgName": "[if(contains(variables('HubKVJ'), 'OrgName'), variables('HubKVJ').OrgName, parameters('Global').OrgName)]",
              "hubKVAppName": "[if(contains(variables('HubKVJ'), 'AppName'), variables('HubKVJ').AppName, parameters('Global').AppName)]",
              "hubKVRGName": "[if(contains(variables('HubKVJ'), 'RG'), variables('HubKVJ').RG, variables('HubRGJ').name)]"
            },
            "HubKVRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').hubKVPrefix, variables('gh').hubKVOrgName, variables('gh').hubKVAppName, variables('gh').hubKVRGName)]",
            "HubKVName": "[toLower(format('{0}-{1}-{2}-{3}-kv{4}', variables('gh').hubKVPrefix, variables('gh').hubKVOrgName, variables('gh').hubKVAppName, variables('gh').hubKVRGName, variables('HubKVJ').name))]"
          },
          "resources": [
            {
              "condition": "[variables('VMs')[copyIndex()].match]",
              "copy": {
                "name": "VM",
                "count": "[length(variables('AppServers'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dp{0}-VM-Deploy-{1}', variables('Deployment'), variables('AppServers')[copyIndex()].Name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "Prefix": {
                    "value": "[parameters('Prefix')]"
                  },
                  "DeploymentID": {
                    "value": "[parameters('DeploymentID')]"
                  },
                  "Environment": {
                    "value": "[parameters('Environment')]"
                  },
                  "AppServer": {
                    "value": "[variables('AppServers')[copyIndex()]]"
                  },
                  "VM": {
                    "value": "[variables('VMs')[copyIndex()]]"
                  },
                  "DeploymentName": {
                    "value": "[variables('DeploymentName')]"
                  },
                  "Global": {
                    "value": "[parameters('Global')]"
                  },
                  "vmAdminPassword": {
                    "reference": {
                      "keyVault": {
                        "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults', variables('HubKVName'))]"
                      },
                      "secretName": "localadmin"
                    }
                  },
                  "devOpsPat": {
                    "reference": {
                      "keyVault": {
                        "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults', variables('HubKVName'))]"
                      },
                      "secretName": "devOpsPat"
                    }
                  },
                  "sshPublic": {
                    "reference": {
                      "keyVault": {
                        "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults', variables('HubKVName'))]"
                      },
                      "secretName": "sshPublic"
                    }
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1318.3566",
                      "templateHash": "10183346640093717410"
                    }
                  },
                  "parameters": {
                    "Prefix": {
                      "type": "string"
                    },
                    "DeploymentID": {
                      "type": "string"
                    },
                    "Environment": {
                      "type": "string"
                    },
                    "VM": {
                      "type": "object"
                    },
                    "AppServer": {
                      "type": "object"
                    },
                    "Global": {
                      "type": "object"
                    },
                    "DeploymentName": {
                      "type": "string"
                    },
                    "vmAdminPassword": {
                      "type": "secureString"
                    },
                    "devOpsPat": {
                      "type": "secureString"
                    },
                    "sshPublic": {
                      "type": "secureString"
                    },
                    "saKey": {
                      "type": "secureString",
                      "defaultValue": "[newGuid()]"
                    },
                    "deploymentTime": {
                      "type": "string",
                      "defaultValue": "[utcNow()]"
                    }
                  },
                  "variables": {
                    "Deployment": "[format('{0}-{1}-{2}-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID'))]",
                    "DeploymentURI": "[toLower(format('{0}{1}{2}{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID')))]",
                    "computeGlobal": "[json('{\r\n  \"DataDiskInfo\": {\r\n    \"0GB\": {},\r\n    \"32GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            32\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GBSS\": {\r\n      \"DATASS\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GB-2\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ],\r\n          [\r\n            1,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"128GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            128\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"FIL64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"SOFS\": {\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            1,\r\n            32\r\n          ],\r\n          [\r\n            2,\r\n            32\r\n          ],\r\n          [\r\n            3,\r\n            32\r\n          ]\r\n        ],\r\n        \"FileSystem\": \"ReFS\",\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"SQL64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"LOGS\": {\r\n        \"DriveLetter\": \"G\",\r\n        \"caching\": \"None\",\r\n        \"LUNS\": [\r\n          [\r\n            8,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"TEMPDB\": {\r\n        \"DriveLetter\": \"H\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            12,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"BACKUP\": {\r\n        \"DriveLetter\": \"I\",\r\n        \"caching\": \"None\",\r\n        \"LUNS\": [\r\n          [\r\n            15,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    }\r\n  },\r\n  \"computeSizeLookupOptions\": {\r\n    \"API-P\": \"Standard_D4s_v3\",\r\n    \"API-D\": \"Standard_D4s_v3\",\r\n    \"API-S\": \"Standard_D2s_v3\",\r\n    \"SF-P\": \"Standard_D4s_v3\",\r\n    \"SF-D\": \"Standard_D2s_v3\",\r\n    \"SF-S\": \"Standard_D2s_v3\",\r\n    \"CTNR-P\": \"Standard_D4s_v3\",\r\n    \"CTNR-D\": \"Standard_D2s_v3\",\r\n    \"ADp-P\": \"Standard_D2s_v3\",\r\n    \"ADp-D\": \"Standard_A2m_v2\",\r\n    \"ADs-P\": \"Standard_D2s_v3\",\r\n    \"ADs-D\": \"Standard_A2m_v2\",\r\n    \"AAP-P\": \"Standard_D2s_v3\",\r\n    \"AAP-D\": \"Standard_D2s_v3\",\r\n    \"DNS-P\": \"Standard_D2s_v3\",\r\n    \"DNS-D\": \"Standard_D2s_v3\",\r\n    \"BUS-P\": \"Standard_DS2_v2\",\r\n    \"BUS-D\": \"Standard_DS2_v2\",\r\n    \"LIN-P\": \"Standard_DS2_v2\",\r\n    \"LIN-D\": \"Standard_DS2_v2\",\r\n    \"FIL-P\": \"Standard_D4s_v3\",\r\n    \"FIL-D\": \"Standard_D4s_v3\",\r\n    \"DFS-P\": \"Standard_D4s_v3\",\r\n    \"DFS-D\": \"Standard_D4s_v3\",\r\n    \"JMP-P\": \"Standard_D4s_v3\",\r\n    \"JMP-D\": \"Standard_D4s_v3\",\r\n    \"CLT-P\": \"Standard_D4s_v3\",\r\n    \"CLT-D\": \"Standard_D4s_v3\",\r\n    \"PXY-P\": \"Standard_D4s_v3\",\r\n    \"PXY-D\": \"Standard_D2s_v3\",\r\n    \"CLS01-D\": \"Standard_D4s_v3\",\r\n    \"CLS02-D\": \"Standard_D4s_v3\",\r\n    \"CLS01-P\": \"Standard_D4s_v3\",\r\n    \"CLS02-P\": \"Standard_D4s_v3\",\r\n    \"FW-P\": \"Standard_F4\",\r\n    \"FW-D\": \"Standard_F2\"\r\n  },\r\n  \"OSType\": {\r\n    \"Server2022SSIMG\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/b8f402aa-20f7-4888-b45c-3cf086dad9c3/resourceGroups/ACU1-BRW-AOA-RG-G1/providers/Microsoft.Compute/galleries/acu1brwaoag1gallery01/images/vmss2022\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SSIMG\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/b8f402aa-20f7-4888-b45c-3cf086dad9c3/resourceGroups/ACU1-BRW-AOA-RG-G1/providers/Microsoft.Compute/galleries/acu1brwaoag1gallery01/images/vmss2019webnetcore27\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"cbld10\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/27b750cd-ed43-42fd-9044-8d75e124ae55/resourceGroups/SBID-Build-Test/providers/Microsoft.Compute/galleries/cbldtest/images/cbld10-ext\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 1,\r\n        \"IaaSDiagnostics\": 1,\r\n        \"Antimalware\": 0,\r\n        \"DependencyAgent\": 1,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Win10O365\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsDesktop\",\r\n        \"offer\": \"office-365\",\r\n        \"sku\": \"rs5-evd-o365pp\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Client\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Win10\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsDesktop\",\r\n        \"offer\": \"Windows-10\",\r\n        \"sku\": \"21h1-pro-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Client\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"SQLServer2016\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftSQLServer\",\r\n        \"Offer\": \"SQL2016SP2-WS2016\",\r\n        \"sku\": \"Enterprise\",\r\n        \"version\": \"latest\"\r\n      },\r\n      // \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016Core\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-Server-Core\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016small\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016Coresmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-Server-Core-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019-gen2\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"windowsserver-gen2preview\",\r\n        \"sku\": \"2019-Datacenter-gen2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2022\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2022-Datacenter-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"_plan\": {\r\n        \"name\": \"windows-server-2022\",\r\n        \"publisher\": \"microsoftwindowsserver\",\r\n        \"product\": \"microsoftserveroperatingsystems-previews\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2022Containerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"datacenter-core-20h2-with-containers-smalldisk-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Core\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-Core\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019small\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-datacenter-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Coresmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-Server-Core-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Containerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019CoreContainerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-datacenter-core-with-containers-smalldisk-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016SS\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-with-Containers\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SSgs\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers-gs\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SS\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"NetScaler\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"citrix\",\r\n        \"Offer\": \"netscalervpx-120\",\r\n        \"Sku\": \"netscalerbyol\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"netscalerbyol\",\r\n        \"publisher\": \"citrix\",\r\n        \"product\": \"netscalervpx-120\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"MaxLoadBalancer\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"loadbalancer\",\r\n        \"offer\": \"loadbalancer-org-load-balancer-for-azure\",\r\n        \"sku\": \"max_load_balancer\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"max_load_balancer\",\r\n        \"publisher\": \"loadbalancer\",\r\n        \"product\": \"loadbalancer-org-load-balancer-for-azure\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortigate\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet_fortigate-vm_v5\",\r\n        \"sku\": \"fortinet_fg-vm\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"fortinet_fg-vm\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet_fortigate-vm_v5\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortigatepayg\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet_fortigate-vm_v5\",\r\n        \"sku\": \"fortinet_fg-vm_payg\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"fortinet_fg-vm_payg\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet_fortigate-vm_v5\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortimngr\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet-fortimanager\",\r\n        \"sku\": \"fortinet-fortimanager\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 3,\r\n      \"plan\": {\r\n        \"name\": \"fortinet-fortimanager\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet-fortimanager\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"UbuntuServer1904\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"canonical\",\r\n        \"offer\": \"UbuntuServer\",\r\n        \"sku\": \"19.04\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"Antimalware\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 1,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0\r\n      }\r\n    },\r\n    \"Bus-debian\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"credativ\",\r\n        \"offer\": \"Debian\",\r\n        \"sku\": \"8\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 1,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"PROXY-UBUNTU\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"Canonical\",\r\n        \"offer\": \"UbuntuServer\",\r\n        \"sku\": \"16.04-LTS\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"fileUris\": \"[concat(parameters(''global'')._artifactsLocation, ''/scripts/pxy.zip\",\r\n      \"commandToExecute\": \"[concat(''sudo apt-get update && sudo apt-get install unzip && unzip Proxy.zip && sudo bash -x haproxyvm-configure.sh '', '' -a '', ''ilbIPAddress'', '' -r '', ''ilbRabbitMqPort'', '' -m '', ''ilbRabbitMqMgmtPort'', '' -b '', ''dnsName'', ''.'', ''location'', ''.cloudapp.azure.com -p '', ''vmNamePrefix'', ''0 -s '', ''vmNamePrefix'', ''1'')]\",\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"CentOS75\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"OpenLogic\",\r\n        \"Offer\": \"CentOS\",\r\n        \"sku\": \"7.5\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"Antimalware\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    }\r\n  },\r\n  \"ladCfg\": {\r\n    \"diagnosticMonitorConfiguration\": {\r\n      \"eventVolume\": \"Medium\",\r\n      \"metrics\": {\r\n        \"metricAggregation\": [\r\n          {\r\n            \"scheduledTransferPeriod\": \"PT1H\"\r\n          },\r\n          {\r\n            \"scheduledTransferPeriod\": \"PT1M\"\r\n          }\r\n        ],\r\n        \"resourceId\": \"__VM_RESOURCE_ID__\"\r\n      },\r\n      \"performanceCounters\": {\r\n        \"performanceCounterConfiguration\": [\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk read guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readbytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/readbytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk writes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/writespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk transfer time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagetransfertime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagetransfertime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk transfers\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"transferspersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/transferspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk write guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writebytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/writebytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk read time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagereadtime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagereadtime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk write time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagewritetime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagewritetime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk total bytes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/bytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk reads\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readspersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/readspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk queue length\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagediskqueuelength\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagediskqueuelength\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network in guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytesreceived\",\r\n            \"counterSpecifier\": \"/builtin/network/bytesreceived\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network total bytes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytestotal\",\r\n            \"counterSpecifier\": \"/builtin/network/bytestotal\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network out guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytestransmitted\",\r\n            \"counterSpecifier\": \"/builtin/network/bytestransmitted\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network collisions\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totalcollisions\",\r\n            \"counterSpecifier\": \"/builtin/network/totalcollisions\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets received errors\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totalrxerrors\",\r\n            \"counterSpecifier\": \"/builtin/network/totalrxerrors\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets sent\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"packetstransmitted\",\r\n            \"counterSpecifier\": \"/builtin/network/packetstransmitted\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets received\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"packetsreceived\",\r\n            \"counterSpecifier\": \"/builtin/network/packetsreceived\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets sent errors\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totaltxerrors\",\r\n            \"counterSpecifier\": \"/builtin/network/totaltxerrors\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem transfers/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"transferspersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/transferspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % free space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentfreespace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentfreespace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % used space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusedspace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentusedspace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem used space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"usedspace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/usedspace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem read bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytesreadpersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/bytesreadpersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem free space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"freespace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/freespace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % free inodes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentfreeinodes\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentfreeinodes\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/bytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem reads/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readspersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/readspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem write bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"byteswrittenpersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/byteswrittenpersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem writes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writespersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/writespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % used inodes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusedinodes\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentusedinodes\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU IO wait time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentiowaittime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentiowaittime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU user time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusertime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentusertime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU nice time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentnicetime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentnicetime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU percentage guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentprocessortime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentprocessortime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU interrupt time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentinterrupttime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentinterrupttime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU idle time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentidletime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentidletime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU privileged time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentprivilegedtime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentprivilegedtime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"availablememory\",\r\n            \"counterSpecifier\": \"/builtin/memory/availablememory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap percent used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentusedswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentusedswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"usedmemory\",\r\n            \"counterSpecifier\": \"/builtin/memory/usedmemory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Page reads\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pagesreadpersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pagesreadpersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"availableswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/availableswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap percent available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentavailableswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentavailableswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Mem. percent available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentavailablememory\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentavailablememory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Pages\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pagespersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pagespersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"usedswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/usedswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory percentage\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentusedmemory\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentusedmemory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Page writes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pageswrittenpersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pageswrittenpersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          }\r\n        ]\r\n      },\r\n      \"syslogEvents\": {\r\n        \"syslogEventConfiguration\": {\r\n          \"LOG_AUTH\": \"LOG_DEBUG\",\r\n          \"LOG_AUTHPRIV\": \"LOG_DEBUG\",\r\n          \"LOG_CRON\": \"LOG_DEBUG\",\r\n          \"LOG_DAEMON\": \"LOG_DEBUG\",\r\n          \"LOG_FTP\": \"LOG_DEBUG\",\r\n          \"LOG_KERN\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL0\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL1\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL2\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL3\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL4\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL5\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL6\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL7\": \"LOG_DEBUG\",\r\n          \"LOG_LPR\": \"LOG_DEBUG\",\r\n          \"LOG_MAIL\": \"LOG_DEBUG\",\r\n          \"LOG_NEWS\": \"LOG_DEBUG\",\r\n          \"LOG_SYSLOG\": \"LOG_DEBUG\",\r\n          \"LOG_USER\": \"LOG_DEBUG\",\r\n          \"LOG_UUCP\": \"LOG_DEBUG\"\r\n        }\r\n      }\r\n    },\r\n    \"sampleRateInSeconds\": 15\r\n  },\r\n  \"WadCfg\": {\r\n    \"DiagnosticMonitorConfiguration\": {\r\n      \"overallQuotaInMB\": 10000,\r\n      \"DiagnosticInfrastructureLogs\": {\r\n        \"scheduledTransferLogLevelFilter\": \"Error\"\r\n      },\r\n      \"PerformanceCounters\": {\r\n        \"scheduledTransferPeriod\": \"PT1M\",\r\n        \"PerformanceCounterConfiguration\": []\r\n      },\r\n      \"WindowsEventLog\": {\r\n        \"scheduledTransferPeriod\": \"PT5M\",\r\n        \"DataSource\": [\r\n          {\r\n            \"name\": \"Application!*[System[(Level = 1 or Level = 2)]]\"\r\n          },\r\n          {\r\n            \"name\": \"Security!*[System[(Level = 1 or Level = 2)]\"\r\n          },\r\n          {\r\n            \"name\": \"System!*[System[(Level = 1 or Level = 2)]]\"\r\n          },\r\n          {\r\n            \"name\": \"Microsoft-Windows-DSC/Operational!*[System[(EventID=4249 or EventID=4097)]]\"\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}')]",
                    "OSType": "[variables('computeGlobal').OSType]",
                    "WadCfg": "[variables('computeGlobal').WadCfg]",
                    "ladCfg": "[variables('computeGlobal').ladCfg]",
                    "DataDiskInfo": "[variables('computeGlobal').DataDiskInfo]",
                    "computeSizeLookupOptions": "[variables('computeGlobal').computeSizeLookupOptions]",
                    "RGName": "[format('{0}-{1}-{2}-RG-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').AppName, parameters('Environment'), parameters('DeploymentID'))]",
                    "GlobalRGJ": "[json(parameters('Global').GlobalRG)]",
                    "GlobalSAJ": "[json(parameters('Global').GlobalSA)]",
                    "HubKVJ": "[json(parameters('Global').hubKV)]",
                    "HubRGJ": "[json(parameters('Global').hubRG)]",
                    "HubAAJ": "[json(parameters('Global').hubAA)]",
                    "regionLookup": "[json('{\r\n  \"francecentral\": {\r\n    \"displayname\": \"France Central\",\r\n    \"location\": \"francecentral\",\r\n    \"PREFIX\": \"AFC1\",\r\n    \"pairedRegion\": \"francesouth\"\r\n  },\r\n  \"southeastasia\": {\r\n    \"displayname\": \"Southeast Asia\",\r\n    \"location\": \"southeastasia\",\r\n    \"PREFIX\": \"ASA1\",\r\n    \"pairedRegion\": \"eastasia\"\r\n  },\r\n  \"southafricawest\": {\r\n    \"displayname\": \"South Africa West\",\r\n    \"location\": \"southafricawest\",\r\n    \"PREFIX\": \"ASAW\",\r\n    \"pairedRegion\": \"southafricanorth\"\r\n  },\r\n  \"eastus2\": {\r\n    \"displayname\": \"East US 2\",\r\n    \"location\": \"eastus2\",\r\n    \"PREFIX\": \"AEU2\",\r\n    \"pairedRegion\": \"centralus\"\r\n  },\r\n  \"eastus\": {\r\n    \"displayname\": \"East US\",\r\n    \"location\": \"eastus\",\r\n    \"PREFIX\": \"AEU1\",\r\n    \"pairedRegion\": \"westus\"\r\n  },\r\n  \"jioindiawest\": {\r\n    \"displayname\": \"Jio India West\",\r\n    \"location\": \"jioindiawest\",\r\n    \"PREFIX\": \"AJIW\",\r\n    \"pairedRegion\": \"jioindiacentral\"\r\n  },\r\n  \"westcentralus\": {\r\n    \"displayname\": \"West Central US\",\r\n    \"location\": \"westcentralus\",\r\n    \"PREFIX\": \"AWCU\",\r\n    \"pairedRegion\": \"westus2\"\r\n  },\r\n  \"koreacentral\": {\r\n    \"displayname\": \"Korea Central\",\r\n    \"location\": \"koreacentral\",\r\n    \"PREFIX\": \"AKC1\",\r\n    \"pairedRegion\": \"koreasouth\"\r\n  },\r\n  \"uaecentral\": {\r\n    \"displayname\": \"UAE Central\",\r\n    \"location\": \"uaecentral\",\r\n    \"PREFIX\": \"AUC1\",\r\n    \"pairedRegion\": \"uaenorth\"\r\n  },\r\n  \"westus\": {\r\n    \"displayname\": \"West US\",\r\n    \"location\": \"westus\",\r\n    \"PREFIX\": \"AWU1\",\r\n    \"pairedRegion\": \"eastus\"\r\n  },\r\n  \"southafricanorth\": {\r\n    \"displayname\": \"South Africa North\",\r\n    \"location\": \"southafricanorth\",\r\n    \"PREFIX\": \"ASAN\",\r\n    \"pairedRegion\": \"southafricawest\"\r\n  },\r\n  \"australiacentral2\": {\r\n    \"displayname\": \"Australia Central 2\",\r\n    \"location\": \"australiacentral2\",\r\n    \"PREFIX\": \"AAC2\",\r\n    \"pairedRegion\": \"australiacentral2\"\r\n  },\r\n  \"francesouth\": {\r\n    \"displayname\": \"France South\",\r\n    \"location\": \"francesouth\",\r\n    \"PREFIX\": \"AFS1\",\r\n    \"pairedRegion\": \"francecentral\"\r\n  },\r\n  \"ukwest\": {\r\n    \"displayname\": \"UK West\",\r\n    \"location\": \"ukwest\",\r\n    \"PREFIX\": \"AUW1\",\r\n    \"pairedRegion\": \"uksouth\"\r\n  },\r\n  \"southindia\": {\r\n    \"displayname\": \"South India\",\r\n    \"location\": \"southindia\",\r\n    \"PREFIX\": \"ASI1\",\r\n    \"pairedRegion\": \"centralindia\"\r\n  },\r\n  \"centralus\": {\r\n    \"displayname\": \"Central US\",\r\n    \"location\": \"centralus\",\r\n    \"PREFIX\": \"ACU1\",\r\n    \"pairedRegion\": \"eastus2\"\r\n  },\r\n  \"germanynorth\": {\r\n    \"displayname\": \"Germany North\",\r\n    \"location\": \"germanynorth\",\r\n    \"PREFIX\": \"AGN1\",\r\n    \"pairedRegion\": \"germanywestcentral\"\r\n  },\r\n  \"koreasouth\": {\r\n    \"displayname\": \"Korea South\",\r\n    \"location\": \"koreasouth\",\r\n    \"PREFIX\": \"AKS1\",\r\n    \"pairedRegion\": \"koreacentral\"\r\n  },\r\n  \"westindia\": {\r\n    \"displayname\": \"West India\",\r\n    \"location\": \"westindia\",\r\n    \"PREFIX\": \"AWI1\",\r\n    \"pairedRegion\": \"southindia\"\r\n  },\r\n  \"westus2\": {\r\n    \"displayname\": \"West US 2\",\r\n    \"location\": \"westus2\",\r\n    \"PREFIX\": \"AWU2\",\r\n    \"pairedRegion\": \"westcentralus\"\r\n  },\r\n  \"northcentralus\": {\r\n    \"displayname\": \"North Central US\",\r\n    \"location\": \"northcentralus\",\r\n    \"PREFIX\": \"ANCU\",\r\n    \"pairedRegion\": \"southcentralus\"\r\n  },\r\n  \"westeurope\": {\r\n    \"displayname\": \"West Europe\",\r\n    \"location\": \"westeurope\",\r\n    \"PREFIX\": \"AWEU\",\r\n    \"pairedRegion\": \"northeurope\"\r\n  },\r\n  \"canadacentral\": {\r\n    \"displayname\": \"Canada Central\",\r\n    \"location\": \"canadacentral\",\r\n    \"PREFIX\": \"ACC1\",\r\n    \"pairedRegion\": \"canadaeast\"\r\n  },\r\n  \"southcentralus\": {\r\n    \"displayname\": \"South Central US\",\r\n    \"location\": \"southcentralus\",\r\n    \"PREFIX\": \"ASCU\",\r\n    \"pairedRegion\": \"northcentralus\"\r\n  },\r\n  \"norwayeast\": {\r\n    \"displayname\": \"Norway East\",\r\n    \"location\": \"norwayeast\",\r\n    \"PREFIX\": \"ANE1\",\r\n    \"pairedRegion\": \"norwaywest\"\r\n  },\r\n  \"japanwest\": {\r\n    \"displayname\": \"Japan West\",\r\n    \"location\": \"japanwest\",\r\n    \"PREFIX\": \"AJW1\",\r\n    \"pairedRegion\": \"japaneast\"\r\n  },\r\n  \"norwaywest\": {\r\n    \"displayname\": \"Norway West\",\r\n    \"location\": \"norwaywest\",\r\n    \"PREFIX\": \"ANW1\",\r\n    \"pairedRegion\": \"norwayeast\"\r\n  },\r\n  \"jioindiacentral\": {\r\n    \"displayname\": \"Jio India Central\",\r\n    \"location\": \"jioindiacentral\",\r\n    \"PREFIX\": \"AJIC\",\r\n    \"pairedRegion\": \"jioindiawest\"\r\n  },\r\n  \"centralindia\": {\r\n    \"displayname\": \"Central India\",\r\n    \"location\": \"centralindia\",\r\n    \"PREFIX\": \"ACI1\",\r\n    \"pairedRegion\": \"southindia\"\r\n  },\r\n  \"westus3\": {\r\n    \"displayname\": \"West US 3\",\r\n    \"location\": \"westus3\",\r\n    \"PREFIX\": \"AWU3\",\r\n    \"pairedRegion\": \"eastus\"\r\n  },\r\n  \"brazilsouth\": {\r\n    \"displayname\": \"Brazil South\",\r\n    \"location\": \"brazilsouth\",\r\n    \"PREFIX\": \"ABS1\",\r\n    \"pairedRegion\": \"southcentralus\"\r\n  },\r\n  \"eastasia\": {\r\n    \"displayname\": \"East Asia\",\r\n    \"location\": \"eastasia\",\r\n    \"PREFIX\": \"AEA1\",\r\n    \"pairedRegion\": \"southeastasia\"\r\n  },\r\n  \"swedencentral\": {\r\n    \"displayname\": \"Sweden Central\",\r\n    \"location\": \"swedencentral\",\r\n    \"PREFIX\": \"ASC1\",\r\n    \"pairedRegion\": \"swedensouth\"\r\n  },\r\n  \"uksouth\": {\r\n    \"displayname\": \"UK South\",\r\n    \"location\": \"uksouth\",\r\n    \"PREFIX\": \"AUS1\",\r\n    \"pairedRegion\": \"ukwest\"\r\n  },\r\n  \"switzerlandnorth\": {\r\n    \"displayname\": \"Switzerland North\",\r\n    \"location\": \"switzerlandnorth\",\r\n    \"PREFIX\": \"ASN1\",\r\n    \"pairedRegion\": \"switzerlandwest\"\r\n  },\r\n  \"canadaeast\": {\r\n    \"displayname\": \"Canada East\",\r\n    \"location\": \"canadaeast\",\r\n    \"PREFIX\": \"ACE1\",\r\n    \"pairedRegion\": \"canadacentral\"\r\n  },\r\n  \"australiasoutheast\": {\r\n    \"displayname\": \"Australia Southeast\",\r\n    \"location\": \"australiasoutheast\",\r\n    \"PREFIX\": \"AAS1\",\r\n    \"pairedRegion\": \"australiaeast\"\r\n  },\r\n  \"northeurope\": {\r\n    \"displayname\": \"North Europe\",\r\n    \"location\": \"northeurope\",\r\n    \"PREFIX\": \"ANEU\",\r\n    \"pairedRegion\": \"westeurope\"\r\n  },\r\n  \"germanywestcentral\": {\r\n    \"displayname\": \"Germany West Central\",\r\n    \"location\": \"germanywestcentral\",\r\n    \"PREFIX\": \"AGWC\",\r\n    \"pairedRegion\": \"germanynorth\"\r\n  },\r\n  \"japaneast\": {\r\n    \"displayname\": \"Japan East\",\r\n    \"location\": \"japaneast\",\r\n    \"PREFIX\": \"AJE1\",\r\n    \"pairedRegion\": \"japanwest\"\r\n  },\r\n  \"uaenorth\": {\r\n    \"displayname\": \"UAE North\",\r\n    \"location\": \"uaenorth\",\r\n    \"PREFIX\": \"AUN1\",\r\n    \"pairedRegion\": \"uaecentral\"\r\n  },\r\n  \"australiaeast\": {\r\n    \"displayname\": \"Australia East\",\r\n    \"location\": \"australiaeast\",\r\n    \"PREFIX\": \"AAE1\",\r\n    \"pairedRegion\": \"australiasoutheast\"\r\n  },\r\n  \"switzerlandwest\": {\r\n    \"displayname\": \"Switzerland West\",\r\n    \"location\": \"switzerlandwest\",\r\n    \"PREFIX\": \"ASW1\",\r\n    \"pairedRegion\": \"switzerlandnorth\"\r\n  },\r\n  \"australiacentral\": {\r\n    \"displayname\": \"Australia Central\",\r\n    \"location\": \"australiacentral\",\r\n    \"PREFIX\": \"AAC1\",\r\n    \"pairedRegion\": \"australiacentral\"\r\n  },\r\n  \"brazilsoutheast\": {\r\n    \"displayname\": \"Brazil Southeast\",\r\n    \"location\": \"brazilsoutheast\",\r\n    \"PREFIX\": \"ABSE\",\r\n    \"pairedRegion\": \"brazilsouth\"\r\n  }\r\n}\r\n')]",
                    "primaryPrefix": "[variables('regionLookup')[parameters('Global').PrimaryLocation].prefix]",
                    "gh": {
                      "globalRGPrefix": "[if(contains(variables('GlobalRGJ'), 'Prefix'), variables('GlobalRGJ').Prefix, variables('primaryPrefix'))]",
                      "globalRGOrgName": "[if(contains(variables('GlobalRGJ'), 'OrgName'), variables('GlobalRGJ').OrgName, parameters('Global').OrgName)]",
                      "globalRGAppName": "[if(contains(variables('GlobalRGJ'), 'AppName'), variables('GlobalRGJ').AppName, parameters('Global').AppName)]",
                      "globalRGName": "[if(contains(variables('GlobalRGJ'), 'name'), variables('GlobalRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID')))]",
                      "globalSAPrefix": "[if(contains(variables('GlobalSAJ'), 'Prefix'), variables('GlobalSAJ').Prefix, variables('primaryPrefix'))]",
                      "globalSAOrgName": "[if(contains(variables('GlobalSAJ'), 'OrgName'), variables('GlobalSAJ').OrgName, parameters('Global').OrgName)]",
                      "globalSAAppName": "[if(contains(variables('GlobalSAJ'), 'AppName'), variables('GlobalSAJ').AppName, parameters('Global').AppName)]",
                      "globalSARGName": "[if(contains(variables('GlobalSAJ'), 'RG'), variables('GlobalSAJ').RG, if(contains(variables('GlobalRGJ'), 'name'), variables('GlobalRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID'))))]",
                      "hubRGPrefix": "[if(contains(variables('HubRGJ'), 'Prefix'), variables('HubRGJ').Prefix, parameters('Prefix'))]",
                      "hubRGOrgName": "[if(contains(variables('HubRGJ'), 'OrgName'), variables('HubRGJ').OrgName, parameters('Global').OrgName)]",
                      "hubRGAppName": "[if(contains(variables('HubRGJ'), 'AppName'), variables('HubRGJ').AppName, parameters('Global').AppName)]",
                      "hubRGRGName": "[if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID'))))]",
                      "hubKVPrefix": "[if(contains(variables('HubKVJ'), 'Prefix'), variables('HubKVJ').Prefix, parameters('Prefix'))]",
                      "hubKVOrgName": "[if(contains(variables('HubKVJ'), 'OrgName'), variables('HubKVJ').OrgName, parameters('Global').OrgName)]",
                      "hubKVAppName": "[if(contains(variables('HubKVJ'), 'AppName'), variables('HubKVJ').AppName, parameters('Global').AppName)]",
                      "hubKVRGName": "[if(contains(variables('HubKVJ'), 'RG'), variables('HubKVJ').RG, variables('HubRGJ').name)]",
                      "hubAAPrefix": "[if(contains(variables('HubAAJ'), 'Prefix'), variables('HubAAJ').Prefix, parameters('Prefix'))]",
                      "hubAAOrgName": "[if(contains(variables('HubAAJ'), 'OrgName'), variables('HubAAJ').OrgName, parameters('Global').OrgName)]",
                      "hubAAAppName": "[if(contains(variables('HubAAJ'), 'AppName'), variables('HubAAJ').AppName, parameters('Global').AppName)]",
                      "hubAARGName": "[if(contains(variables('HubAAJ'), 'RG'), variables('HubAAJ').RG, variables('HubRGJ').name)]"
                    },
                    "globalRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').globalRGPrefix, variables('gh').globalRGOrgName, variables('gh').globalRGAppName, variables('gh').globalRGName)]",
                    "HubRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').hubRGPrefix, variables('gh').hubRGOrgName, variables('gh').hubRGAppName, variables('gh').hubRGRGName)]",
                    "globalSAName": "[toLower(format('{0}{1}{2}{3}sa{4}', variables('gh').globalSAPrefix, variables('gh').globalSAOrgName, variables('gh').globalSAAppName, variables('gh').globalSARGName, variables('GlobalRGJ').name))]",
                    "HubKVRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').hubKVPrefix, variables('gh').hubKVOrgName, variables('gh').hubKVAppName, variables('gh').hubKVRGName)]",
                    "HubKVName": "[toLower(format('{0}-{1}-{2}-{3}-kv{4}', variables('gh').hubKVPrefix, variables('gh').hubKVOrgName, variables('gh').hubKVAppName, variables('gh').hubKVRGName, variables('HubKVJ').name))]",
                    "AAName": "[toLower(format('{0}{1}{2}{3}{4}', variables('gh').hubAAPrefix, variables('gh').hubAAOrgName, variables('gh').hubAAAppName, variables('gh').hubAARGName, variables('HubAAJ').name))]",
                    "EnvironmentLookup": {
                      "D": "Dev",
                      "T": "Test",
                      "I": "Int",
                      "U": "UAT",
                      "P": "PROD",
                      "S": "SBX"
                    },
                    "DSCConfigLookup": {
                      "AppServers": "AppServers",
                      "InitialDOP": "AppServers",
                      "WVDServers": "AppServers"
                    },
                    "AppServerSizeLookup": {
                      "D": "D",
                      "T": "D",
                      "I": "D",
                      "U": "D",
                      "P": "P",
                      "S": "D"
                    },
                    "RebootNodeLookup": {
                      "D": true,
                      "Q": true,
                      "T": true,
                      "U": true,
                      "P": false
                    },
                    "ConfigurationMode": {
                      "D": "ApplyAndAutoCorrect",
                      "Q": "ApplyAndAutoCorrect",
                      "T": "ApplyAndAutoCorrect",
                      "U": "ApplyAndAutoCorrect",
                      "P": "ApplyAndMonitor"
                    },
                    "DSCConfigurationModeFrequencyMins": 15,
                    "networkId": "[format('{0}{1}', parameters('Global').networkid[0], string(sub(parameters('Global').networkid[1], mul(2, int(parameters('DeploymentID'))))))]",
                    "storageAccountType": "[if(equals(parameters('Environment'), 'P'), if(contains(parameters('AppServer'), 'Zone'), 'Premium_LRS', 'Premium_ZRS'), if(contains(parameters('AppServer'), 'Zone'), 'StandardSSD_ZRS', 'StandardSSD_LRS'))]",
                    "SADiagName": "[format('{0}sadiag', variables('DeploymentURI'))]",
                    "saaccountiddiag": "[resourceId('Microsoft.Storage/storageAccounts/', variables('SADiagName'))]",
                    "saSQLBackupName": "[format('{0}sasqlbackup', variables('DeploymentURI'))]",
                    "MSILookup": {
                      "SQL": "Cluster",
                      "UTL": "DefaultKeyVault",
                      "FIL": "Cluster",
                      "OCR": "Storage",
                      "WVD": "WVD"
                    },
                    "userAssignedIdentities": {
                      "Cluster": {
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiKeyVaultSecretsGet', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperator', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperatorGlobal', variables('Deployment'))))]": {}
                      },
                      "Default": {
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiKeyVaultSecretsGet', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperatorGlobal', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperator', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountFileContributor', variables('Deployment'))))]": {}
                      },
                      "DefaultKeyVault": {
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperatorGlobal', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiKeyVaultSecretsGetApp', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiAzureServiceBusDataOwner', variables('Deployment'))))]": {}
                      },
                      "WVD": {
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperatorGlobal', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountFileContributor', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiWVDRegKeyReader', variables('Deployment'))))]": {}
                      },
                      "Storage": {
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountContributor', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperatorGlobal', variables('Deployment'))))]": {}
                      },
                      "None": {}
                    },
                    "ASNAME": "[if(contains(parameters('AppServer'), 'Zone'), 'usingZones', parameters('AppServer').ASNAME)]"
                  },
                  "resources": [
                    {
                      "condition": "[not(equals(variables('ASNAME'), 'usingZones'))]",
                      "type": "Microsoft.Compute/availabilitySets",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}-as{1}', variables('Deployment'), variables('ASNAME'))]",
                      "location": "[resourceGroup().location]",
                      "sku": {
                        "name": "Aligned"
                      },
                      "properties": {
                        "platformUpdateDomainCount": 5,
                        "platformFaultDomainCount": 3
                      }
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines",
                      "apiVersion": "2021-04-01",
                      "name": "[format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "location": "[resourceGroup().location]",
                      "identity": {
                        "type": "SystemAssigned, UserAssigned",
                        "userAssignedIdentities": "[if(contains(variables('MSILookup'), parameters('AppServer').ROLE), variables('userAssignedIdentities')[variables('MSILookup')[parameters('AppServer').ROLE]], variables('userAssignedIdentities').Default)]"
                      },
                      "tags": {
                        "Environment": "[variables('EnvironmentLookup')[parameters('Environment')]]",
                        "Zone": "[if(contains(parameters('AppServer'), 'Zone'), parameters('AppServer').Zone, 1)]"
                      },
                      "zones": "[if(contains(parameters('AppServer'), 'Zone'), array(parameters('AppServer').Zone), null())]",
                      "plan": "[if(contains(variables('OSType')[parameters('AppServer').OSType], 'plan'), variables('OSType')[parameters('AppServer').OSType].plan, null())]",
                      "properties": {
                        "licenseType": "[if(contains(variables('OSType')[parameters('AppServer').OSType], 'licenseType'), variables('OSType')[parameters('AppServer').OSType].licenseType, null())]",
                        "availabilitySet": "[if(contains(parameters('AppServer'), 'Zone'), null(), createObject('id', format('{0}', resourceId('Microsoft.Compute/availabilitySets', format('{0}-as{1}', variables('Deployment'), parameters('AppServer').ASName)))))]",
                        "hardwareProfile": {
                          "vmSize": "[variables('computeSizeLookupOptions')[format('{0}-{1}', parameters('AppServer').ROLE, variables('AppServerSizeLookup')[parameters('Environment')])]]"
                        },
                        "osProfile": {
                          "computerName": "[parameters('VM').vmHostName]",
                          "adminUsername": "[if(contains(parameters('AppServer'), 'AdminUser'), parameters('AppServer').AdminUser, parameters('Global').vmAdminUserName)]",
                          "adminPassword": "[parameters('vmAdminPassword')]",
                          "customData": "[if(contains(parameters('AppServer'), 'customData'), base64(replace(parameters('AppServer').customData, '{0}', format('{0}.', variables('networkId')))), null())]",
                          "secrets": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), createArray(createObject('sourceVault', createObject('id', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults', variables('HubKVName'))), 'vaultCertificates', createArray(createObject('certificateUrl', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults/secrets', variables('HubKVName'), parameters('Global').CertName), '2021-06-01-preview').secretUriWithVersion, 'certificateStore', 'My'), createObject('certificateUrl', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults/secrets', variables('HubKVName'), parameters('Global').CertName), '2021-06-01-preview').secretUriWithVersion, 'certificateStore', 'Root'), createObject('certificateUrl', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults/secrets', variables('HubKVName'), parameters('Global').CertName), '2021-06-01-preview').secretUriWithVersion, 'certificateStore', 'CA')))), null())]",
                          "windowsConfiguration": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), parameters('VM').windowsConfiguration, null())]",
                          "linuxConfiguration": "[if(not(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows')), parameters('VM').linuxConfiguration, null())]"
                        },
                        "storageProfile": {
                          "imageReference": "[variables('OSType')[parameters('AppServer').OSType].imageReference]",
                          "osDisk": {
                            "name": "[format('{0}-{1}-OSDisk', variables('Deployment'), parameters('AppServer').Name)]",
                            "caching": "ReadWrite",
                            "diskSizeGB": "[variables('OSType')[parameters('AppServer').OSType].OSDiskGB]",
                            "createOption": "FromImage",
                            "managedDisk": {
                              "storageAccountType": "[if(contains(parameters('AppServer'), 'OSstorageAccountType'), parameters('AppServer').OSstorageAccountType, variables('storageAccountType'))]"
                            }
                          },
                          "dataDisks": "[reference(resourceId('Microsoft.Resources/deployments', format('dp{0}-AppServer-diskLookup{1}', variables('Deployment'), parameters('AppServer').Name))).outputs.DATADisks.value]"
                        },
                        "networkProfile": {
                          "copy": [
                            {
                              "name": "networkInterfaces",
                              "count": "[length(parameters('AppServer').NICs)]",
                              "input": {
                                "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}{1}{2}{3}', variables('Deployment'), if(contains(parameters('AppServer').NICs[copyIndex('networkInterfaces')], 'LB'), '-niclb', if(contains(parameters('AppServer').NICs[copyIndex('networkInterfaces')], 'PLB'), '-nicplb', if(contains(parameters('AppServer').NICs[copyIndex('networkInterfaces')], 'SLB'), '-nicslb', '-nic'))), if(equals(copyIndex('networkInterfaces'), 0), '', add(copyIndex('networkInterfaces'), 1)), parameters('AppServer').Name))]",
                                "properties": {
                                  "primary": "[contains(parameters('AppServer').NICs[copyIndex('networkInterfaces')], 'Primary')]",
                                  "deleteOption": "Delete"
                                }
                              }
                            }
                          ]
                        },
                        "diagnosticsProfile": {
                          "bootDiagnostics": {
                            "enabled": true,
                            "storageUri": "[format('https://{0}.blob.{1}', variables('SADiagName'), environment().suffixes.storage)]"
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-AppServer-nicDeployLoop{1}', variables('Deployment'), parameters('AppServer').Name))]",
                        "[resourceId('Microsoft.Compute/availabilitySets', format('{0}-as{1}', variables('Deployment'), variables('ASNAME')))]",
                        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-AppServer-diskLookup{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, contains(parameters('AppServer'), 'shutdown'))]",
                      "type": "Microsoft.DevTestLab/schedules",
                      "apiVersion": "2018-09-15",
                      "name": "[format('shutdown-computevm-{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "dailyRecurrence": {
                          "time": "[parameters('AppServer').shutdown.time]"
                        },
                        "notificationSettings": {
                          "status": "[if(and(contains(parameters('AppServer').shutdown, 'notification'), bool(parameters('AppServer').shutdown.notification)), 'Enabled', 'Disabled')]",
                          "emailRecipient": "[replace(replace(replace(string(parameters('Global').alertRecipients), '\",\"', ';'), '[\"', ''), '\"]', '')]",
                          "notificationLocale": "en",
                          "timeInMinutes": 30
                        },
                        "status": "[if(or(not(contains(parameters('AppServer').shutdown, 'enabled')), and(contains(parameters('AppServer').shutdown, 'enabled'), bool(parameters('AppServer').shutdown.enabled))), 'Enabled', 'Disabled')]",
                        "targetResourceId": "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]",
                        "taskType": "ComputeVmShutdownTask",
                        "timeZoneId": "[parameters('Global').shutdownSchedulerTimeZone]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.CertMgmt))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'KVAppServerExtensionForWindows')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.Azure.KeyVault.Edp",
                        "type": "KeyVaultForWindows",
                        "typeHandlerVersion": "0.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "secretsManagementSettings": {
                            "pollingIntervalInS": 3600,
                            "certificateStoreName": "MY",
                            "certificateStoreLocation": "LOCAL_MACHINE",
                            "observedCertificates": [
                              "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults/secrets', variables('HubKVName'), parameters('Global').CertName), '2021-06-01-preview').secretUri]"
                            ]
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(parameters('VM').match, bool(parameters('VM').Extensions.AADLogin)), and(contains(parameters('AppServer'), 'ExcludeAADLogin'), not(equals(parameters('AppServer').ExcludeAADLogin, 1))))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'AADLogin')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'Microsoft.Azure.ActiveDirectory', 'Microsoft.Azure.ActiveDirectory.LinuxSSH')]",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'AADLoginForWindows', 'AADLoginForLinux')]",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.AzureDefender))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'AzureDefenderForServers')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.Azure.AzureDefenderForServers",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'MDE.Windows', 'MDE.Linux')]",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "azureResourceId": "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]",
                          "defenderForServersWorkspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', variables('DeploymentURI')))]",
                          "forceReOnboarding": false
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.GuestConfig))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'AzureGuestConfig')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.GuestConfiguration",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'ConfigurationForWindows', 'ConfigurationForLinux')]",
                        "typeHandlerVersion": "1.2",
                        "autoUpgradeMinorVersion": true,
                        "settings": {}
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(parameters('VM').match, bool(parameters('VM').Extensions.AdminCenter)), and(contains(parameters('AppServer'), 'ExcludeAdminCenter'), not(equals(parameters('AppServer').ExcludeAdminCenter, 1))))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'AdminCenter')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "publisher": "Microsoft.AdminCenter",
                        "type": "AdminCenter",
                        "typeHandlerVersion": "0.0",
                        "settings": {
                          "port": "6516",
                          "cspFrameAncestors": [
                            "https://portal.azure.com",
                            "https://*.hosting.portal.azure.net",
                            "https://localhost:1340"
                          ],
                          "corsOrigins": [
                            "https://portal.azure.com",
                            "https://waconazure.com"
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(parameters('VM').match, bool(parameters('VM').Extensions.DomainJoin)), not(and(contains(parameters('AppServer'), 'ExcludeDomainJoin'), bool(parameters('AppServer').ExcludeDomainJoin))))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'joindomain')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.Compute",
                        "type": "JsonADDomainExtension",
                        "typeHandlerVersion": "1.3",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "Name": "[parameters('Global').ADDomainName]",
                          "OUPath": "[if(contains(parameters('AppServer'), 'OUPath'), parameters('AppServer').OUPath, '')]",
                          "User": "[format('{0}@{1}', parameters('Global').vmAdminUserName, parameters('Global').ADDomainName)]",
                          "Restart": "true",
                          "Options": 3
                        },
                        "protectedSettings": {
                          "Password": "[parameters('vmAdminPassword')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(parameters('VM').match, bool(parameters('VM').Extensions.DSC)), equals(parameters('AppServer').Role, 'PULL'))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'Microsoft.Powershell.DSC.Pull')]",
                      "location": "[resourceGroup().location]",
                      "tags": {
                        "displayName": "Powershell.DSC.Pull"
                      },
                      "properties": {
                        "publisher": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'Microsoft.Powershell', 'Microsoft.OSTCExtensions')]",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'DSC', 'DSCForLinux')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '2.77', '2.0')]",
                        "autoUpgradeMinorVersion": true,
                        "protectedSettings": {
                          "Items": {
                            "registrationKeyPrivate": "[listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubRGName')), 'Microsoft.Automation/automationAccounts', variables('AAName')), '2020-01-13-preview').keys[0].Value]"
                          }
                        },
                        "settings": {
                          "advancedOptions": {
                            "forcePullAndApply": true
                          },
                          "Properties": [
                            {
                              "Name": "RegistrationKey",
                              "Value": {
                                "UserName": "PLACEHOLDER_DONOTUSE",
                                "Password": "PrivateSettingsRef:registrationKeyPrivate"
                              },
                              "TypeName": "System.Management.Automation.PSCredential"
                            },
                            {
                              "Name": "RegistrationUrl",
                              "Value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubRGName')), 'Microsoft.Automation/automationAccounts', variables('AAName')), '2020-01-13-preview').RegistrationUrl]",
                              "TypeName": "System.String"
                            },
                            {
                              "Name": "NodeConfigurationName",
                              "Value": "[format('{0}.{1}_{2}_{3}_{4}{5}', if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], 'AppServers'), parameters('Global').OrgName, parameters('Global').Appname, parameters('AppServer').ROLE, parameters('Environment'), parameters('DeploymentID'))]",
                              "TypeName": "System.String"
                            },
                            {
                              "Name": "ConfigurationMode",
                              "Value": "[variables('ConfigurationMode')[parameters('Environment')]]",
                              "TypeName": "System.String"
                            },
                            {
                              "Name": "RebootNodeIfNeeded",
                              "Value": "[variables('RebootNodeLookup')[parameters('Environment')]]",
                              "TypeName": "System.Boolean"
                            },
                            {
                              "Name": "ConfigurationModeFrequencyMins",
                              "Value": "[variables('DSCConfigurationModeFrequencyMins')]",
                              "TypeName": "System.Int32"
                            },
                            {
                              "Name": "RefreshFrequencyMins",
                              "Value": 30,
                              "TypeName": "System.Int32"
                            },
                            {
                              "Name": "ActionAfterReboot",
                              "Value": "ContinueConfiguration",
                              "TypeName": "System.String"
                            },
                            {
                              "Name": "AllowModuleOverwrite",
                              "Value": true,
                              "TypeName": "System.Boolean"
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'joindomain')]",
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(and(parameters('VM').match, and(contains(parameters('VM').Extensions, 'DSC2'), bool(parameters('VM').Extensions.DSC2))), not(equals(parameters('AppServer').Role, 'PULL'))), or(or(equals(parameters('DeploymentName'), 'ConfigSQLAO'), equals(parameters('DeploymentName'), 'CreateADPDC')), equals(parameters('DeploymentName'), 'CreateADBDC')))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'Microsoft.Powershell.DSC2')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'Microsoft.Powershell', 'Microsoft.OSTCExtensions')]",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'DSC', 'DSCForLinux')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '2.24', '2.0')]",
                        "autoUpgradeMinorVersion": true,
                        "forceUpdateTag": "[parameters('deploymentTime')]",
                        "settings": {
                          "wmfVersion": "latest",
                          "configuration": {
                            "url": "[format('{0}/ext-DSC/DSC-{1}.zip', parameters('Global')._artifactsLocation, if(contains(parameters('AppServer'), 'DSConfig'), parameters('AppServer').DSConfig, if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], parameters('DeploymentName'))))]",
                            "script": "[format('DSC-{0}.ps1', if(contains(parameters('AppServer'), 'DSConfig'), parameters('AppServer').DSConfig, if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], parameters('DeploymentName'))))]",
                            "function": "[if(contains(parameters('AppServer'), 'DSConfig'), parameters('AppServer').DSConfig, if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], parameters('DeploymentName')))]"
                          },
                          "configurationArguments": {
                            "DomainName": "[parameters('Global').ADDomainName]"
                          }
                        },
                        "protectedSettings": {
                          "configurationArguments": {
                            "AdminCreds": {
                              "UserName": "[parameters('Global').vmAdminUserName]",
                              "Password": "[parameters('vmAdminPassword')]"
                            },
                            "SQLServiceCreds": {
                              "UserName": "sqladmin",
                              "Password": "[parameters('vmAdminPassword')]"
                            },
                            "witnessStorageKey": {
                              "UserName": "sakey",
                              "Password": "[parameters('saKey')]"
                            }
                          },
                          "configurationUrlSasToken": "[parameters('Global')._artifactsLocationSasToken]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'joindomain')]",
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(and(parameters('VM').match, bool(parameters('VM').Extensions.DSC)), not(equals(parameters('AppServer').Role, 'PULL'))), not(or(or(equals(parameters('DeploymentName'), 'ConfigSQLAO'), equals(parameters('DeploymentName'), 'CreateADPDC')), equals(parameters('DeploymentName'), 'CreateADBDC'))))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'Microsoft.Powershell.DSC')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'Microsoft.Powershell', 'Microsoft.OSTCExtensions')]",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'DSC', 'DSCForLinux')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '2.24', '2.0')]",
                        "autoUpgradeMinorVersion": true,
                        "forceUpdateTag": "[parameters('deploymentTime')]",
                        "settings": {
                          "wmfVersion": "latest",
                          "configuration": {
                            "url": "[format('{0}/ext-DSC/DSC-{1}.zip', parameters('Global')._artifactsLocation, if(contains(parameters('AppServer'), 'DSConfig'), parameters('AppServer').DSConfig, if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], parameters('DeploymentName'))))]",
                            "script": "[format('DSC-{0}.ps1', if(contains(parameters('AppServer'), 'DSConfig'), parameters('AppServer').DSConfig, if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], parameters('DeploymentName'))))]",
                            "function": "[if(contains(parameters('AppServer'), 'DSConfig'), parameters('AppServer').DSConfig, if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], parameters('DeploymentName')))]"
                          },
                          "configurationArguments": {
                            "DomainName": "[parameters('Global').ADDomainName]",
                            "Thumbprint": "[parameters('Global').CertThumbprint]",
                            "storageAccountId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('globalRGName')), 'Microsoft.Storage/storageAccounts', variables('globalSAName'))]",
                            "deployment": "[variables('Deployment')]",
                            "networkid": "[format('{0}.', variables('networkId'))]",
                            "appInfo": "[if(contains(parameters('AppServer'), 'AppInfo'), string(parameters('VM').AppInfo), '')]",
                            "DataDiskInfo": "[string(parameters('VM').DataDisk)]",
                            "clientIDLocal": "[if(equals(format('{0}{1}', parameters('Environment'), parameters('DeploymentID')), 'G0'), '', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('RGName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-uaiStorageAccountOperator', variables('Deployment'))), '2018-11-30').clientId)]",
                            "clientIDGlobal": "[if(equals(format('{0}{1}', parameters('Environment'), parameters('DeploymentID')), 'G0'), '', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('RGName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-uaiStorageAccountFileContributor', variables('Deployment'))), '2018-11-30').clientId)]"
                          },
                          "configurationData": {
                            "url": "[format('{0}/ext-CD/{1}-ConfigurationData.psd1', parameters('Global')._artifactsLocation, parameters('AppServer').Role)]"
                          }
                        },
                        "protectedSettings": {
                          "configurationArguments": {
                            "AdminCreds": {
                              "UserName": "[parameters('Global').vmAdminUserName]",
                              "Password": "[parameters('vmAdminPassword')]"
                            },
                            "sshPublic": {
                              "UserName": "ssh",
                              "Password": "[parameters('sshPublic')]"
                            },
                            "devOpsPat": {
                              "UserName": "pat",
                              "Password": "[parameters('devOpsPat')]"
                            }
                          },
                          "configurationUrlSasToken": "[parameters('Global')._artifactsLocationSasToken]",
                          "configurationDataUrlSasToken": "[parameters('Global')._artifactsLocationSasToken]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'joindomain')]",
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.IaaSDiagnostics))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2020-12-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'vmDiagnostics')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Diagnostics",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'IaaSDiagnostics', 'LinuxDiagnostic')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '1.9', '3.0')]",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "WadCfg": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), variables('WadCfg'), null())]",
                          "ladCfg": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), null(), variables('ladCfg'))]",
                          "StorageAccount": "[variables('saaccountiddiag')]",
                          "StorageType": "TableAndBlob"
                        },
                        "protectedSettings": {
                          "storageAccountName": "[variables('saaccountiddiag')]",
                          "storageAccountKey": "[listKeys(variables('saaccountiddiag'), '2016-01-01').keys[0].value]",
                          "storageAccountEndPoint": "[format('https://{0}/', environment().suffixes.storage)]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.DependencyAgent))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2020-12-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'DependencyAgent')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'DependencyAgentWindows', 'DependencyAgentLinux')]",
                        "typeHandlerVersion": "9.5",
                        "autoUpgradeMinorVersion": true
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.AzureMonitorAgent))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2020-12-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), format('{0}', if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'AzureMonitorWindowsAgent', 'AzureMonitorLinuxAgent')))]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "publisher": "Microsoft.Azure.Monitor",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'AzureMonitorWindowsAgent', 'AzureMonitorLinuxAgent')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '1.0', '1.5')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.MonitoringAgent))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2020-12-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'MonitoringAgent')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.EnterpriseCloud.Monitoring",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'MicrosoftMonitoringAgent', 'OmsAgentForLinux')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '1.0', '1.4')]",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "workspaceId": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', variables('DeploymentURI'))), '2021-06-01').customerId]"
                        },
                        "protectedSettings": {
                          "workspaceKey": "[listKeys(resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', variables('DeploymentURI'))), '2021-06-01').primarySharedKey]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.GuestHealthAgent))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2020-12-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), format('{0}', if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'GuestHealthWindowsAgent', 'GuestHealthLinuxAgent')))]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "publisher": "Microsoft.Azure.Monitor.VirtualMachines.GuestHealth",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'GuestHealthWindowsAgent', 'GuestHealthLinuxAgent')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '1.0', '1.0')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Insights/dataCollectionRuleAssociations",
                      "apiVersion": "2019-11-01-preview",
                      "scope": "[format('Microsoft.Compute/virtualMachines/{0}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]",
                      "name": "[format('{0}vmInsights', variables('DeploymentURI'))]",
                      "properties": {
                        "description": "Association of data collection rule for AppServer Insights Health.",
                        "dataCollectionRuleId": "[resourceId('Microsoft.Insights/dataCollectionRules', format('{0}vmInsights', variables('DeploymentURI')))]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.chefClient))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'chefClient')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Chef.Bootstrap.WindowsAzure",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'ChefClient', 'LinuxChefClient')]",
                        "typeHandlerVersion": "1210.12",
                        "settings": {
                          "bootstrap_options": {
                            "chef_server_url": "[parameters('Global').chef_server_url]",
                            "validation_client_name": "[parameters('Global').chef_validation_client_name]"
                          },
                          "runlist": "recipe[mycookbook::default]"
                        },
                        "protectedSettings": {
                          "validation_key": "[parameters('Global').chef_validation_key]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(parameters('VM').match, equals(parameters('AppServer').role, 'SQL')), bool(parameters('VM').Extensions.SqlIaasExtension))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'SqlIaasExtension')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "type": "SqlIaaSAgent",
                        "publisher": "Microsoft.SqlServer.Management",
                        "typeHandlerVersion": "1.2",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "AutoTelemetrySettings": {
                            "Region": "[resourceGroup().location]"
                          },
                          "KeyVaultCredentialSettings": {
                            "Enable": true,
                            "CredentialName": "[parameters('Global').sqlCredentialName]"
                          }
                        },
                        "protectedSettings": {
                          "PrivateKeyVaultCredentialSettings": {
                            "AzureKeyVaultUrl": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults', variables('HubKVName')), '2021-06-01-preview').vaultUri]",
                            "StorageUrl": "[reference(resourceId('Microsoft.Storage/storageAccounts', if(equals(parameters('AppServer').Role, 'SQL'), variables('saSQLBackupName'), variables('SADiagName'))), '2015-06-15').primaryEndpoints.blob]",
                            "StorageAccessKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', if(equals(parameters('AppServer').Role, 'SQL'), variables('saSQLBackupName'), variables('SADiagName'))), '2016-01-01').keys[0].value]",
                            "Password": "[parameters('vmAdminPassword')]"
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(parameters('VM').match, equals(parameters('AppServer').role, 'SQL')), bool(parameters('VM').Extensions.BackupWindowsWorkloadSQL))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'AzureBackupWindowsWorkload')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "locale": "en-us",
                          "AppServerType": "microsoft.compute/virtualmachines"
                        },
                        "publisher": "Microsoft.Azure.RecoveryServices.WorkloadBackup",
                        "type": "AzureBackupWindowsWorkload",
                        "typeHandlerVersion": "1.1"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.Antimalware))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'IaaSAntimalware')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Security",
                        "type": "IaaSAntimalware",
                        "typeHandlerVersion": "1.5",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "Monitoring": "ON",
                          "StorageAccountName": "[variables('SADiagName')]",
                          "AntimalwareEnabled": true,
                          "RealtimeProtectionEnabled": "true",
                          "ScheduledScanSettings": {
                            "isEnabled": "true",
                            "day": "1",
                            "time": "720",
                            "scanType": "Full"
                          },
                          "Exclusions": {
                            "Extensions": "",
                            "Paths": "",
                            "Processes": ""
                          }
                        },
                        "protectedSettings": null
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-AppServer-publicIPDeploy{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[variables('Deployment')]"
                          },
                          "DeploymentURI": {
                            "value": "[variables('DeploymentURI')]"
                          },
                          "NICs": {
                            "value": "[parameters('AppServer').NICs]"
                          },
                          "VM": {
                            "value": "[parameters('AppServer')]"
                          },
                          "PIPprefix": {
                            "value": "AppServer"
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "18109364379899578760"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "DeploymentURI": {
                              "type": "string"
                            },
                            "PIPprefix": {
                              "type": "string"
                            },
                            "NICs": {
                              "type": "array"
                            },
                            "VM": {
                              "type": "object"
                            },
                            "Global": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "condition": "[and(contains(parameters('NICs')[copyIndex()], 'PublicIP'), not(equals(parameters('NICs')[copyIndex()].PublicIP, null())))]",
                              "copy": {
                                "name": "PublicIP",
                                "count": "[length(parameters('NICs'))]"
                              },
                              "type": "Microsoft.Network/publicIPAddresses",
                              "apiVersion": "2021-02-01",
                              "name": "[format('{0}-{1}{2}-publicip{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1))]",
                              "location": "[resourceGroup().location]",
                              "sku": {
                                "name": "[if(contains(parameters('VM'), 'Zone'), 'Standard', 'Basic')]"
                              },
                              "properties": {
                                "publicIPAllocationMethod": "[parameters('NICs')[copyIndex()].PublicIP]",
                                "dnsSettings": {
                                  "domainNameLabel": "[toLower(format('{0}-{1}{2}-{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1)))]"
                                }
                              }
                            },
                            {
                              "condition": "[and(contains(parameters('NICs')[copyIndex()], 'PublicIP'), not(equals(parameters('NICs')[copyIndex()].PublicIP, null())))]",
                              "copy": {
                                "name": "PublicIPDiag",
                                "count": "[length(parameters('NICs'))]"
                              },
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2017-05-01-preview",
                              "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', format('{0}-{1}{2}-publicip{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1)))]",
                              "name": "service",
                              "properties": {
                                "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                                "logs": [
                                  {
                                    "category": "DDoSProtectionNotifications",
                                    "enabled": true
                                  }
                                ],
                                "metrics": [
                                  {
                                    "timeGrain": "PT5M",
                                    "enabled": true,
                                    "retentionPolicy": {
                                      "enabled": false,
                                      "days": 0
                                    }
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/publicIPAddresses', format('{0}-{1}{2}-publicip{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1)))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "PIPID": {
                              "type": "array",
                              "copy": {
                                "count": "[length(parameters('NICs'))]",
                                "input": "[if(and(contains(parameters('NICs')[copyIndex()], 'PublicIP'), not(equals(parameters('NICs')[copyIndex()].PublicIP, null()))), resourceId('Microsoft.Network/publicIPAddresses', format('{0}-{1}{2}-publicip{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1))), '')]"
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-AppServer-JITNSG-{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[variables('Deployment')]"
                          },
                          "VM": {
                            "value": "[parameters('AppServer')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "16183288891198554910"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "VM": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/networkSecurityGroups",
                              "apiVersion": "2021-05-01",
                              "name": "[format('{0}-vm{1}-JITNSG', parameters('Deployment'), parameters('VM').Name)]",
                              "location": "[resourceGroup().location]"
                            }
                          ]
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-AppServer-nicDeployLoop{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[variables('Deployment')]"
                          },
                          "DeploymentURI": {
                            "value": "[variables('DeploymentURI')]"
                          },
                          "DeploymentID": {
                            "value": "[parameters('DeploymentID')]"
                          },
                          "NICs": {
                            "value": "[parameters('AppServer').NICs]"
                          },
                          "VM": {
                            "value": "[parameters('AppServer')]"
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "15680478958950286894"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "DeploymentURI": {
                              "type": "string"
                            },
                            "DeploymentID": {
                              "type": "string"
                            },
                            "NICs": {
                              "type": "array"
                            },
                            "VM": {
                              "type": "object"
                            },
                            "Global": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "NIC",
                                "count": "[length(parameters('NICs'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('dp{0}-nicDeploy{1}{2}', parameters('Deployment'), parameters('VM').Name, add(copyIndex(), 1))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "Deployment": {
                                    "value": "[parameters('Deployment')]"
                                  },
                                  "DeploymentURI": {
                                    "value": "[parameters('DeploymentURI')]"
                                  },
                                  "DeploymentID": {
                                    "value": "[parameters('DeploymentID')]"
                                  },
                                  "NIC": {
                                    "value": "[parameters('NICs')[copyIndex()]]"
                                  },
                                  "NICNumber": {
                                    "value": "[string(add(copyIndex(), 1))]"
                                  },
                                  "VM": {
                                    "value": "[parameters('VM')]"
                                  },
                                  "Global": {
                                    "value": "[parameters('Global')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.4.1318.3566",
                                      "templateHash": "13928916846586964615"
                                    }
                                  },
                                  "parameters": {
                                    "Deployment": {
                                      "type": "string"
                                    },
                                    "DeploymentURI": {
                                      "type": "string"
                                    },
                                    "DeploymentID": {
                                      "type": "string"
                                    },
                                    "NIC": {
                                      "type": "object"
                                    },
                                    "NICNumber": {
                                      "type": "string"
                                    },
                                    "VM": {
                                      "type": "object"
                                    },
                                    "Global": {
                                      "type": "object"
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "loadBalancerInboundNatRules",
                                        "count": "[length(variables('rules'))]",
                                        "input": {
                                          "id": "[format('{0}/providers/Microsoft.Network/loadBalancers/{1}-lb{2}/inboundNatRules/{3}', resourceGroup().id, parameters('Deployment'), if(contains(parameters('NIC'), 'PLB'), parameters('NIC').PLB, 'none'), if(contains(parameters('NIC'), 'NATRules'), variables('rules')[copyIndex('loadBalancerInboundNatRules')], 'none'))]"
                                        }
                                      }
                                    ],
                                    "networkId": "[format('{0}{1}', parameters('Global').networkid[0], string(sub(parameters('Global').networkid[1], mul(2, int(parameters('DeploymentID'))))))]",
                                    "networkIdUpper": "[format('{0}{1}', parameters('Global').networkid[0], string(add(1, sub(parameters('Global').networkid[1], mul(2, int(parameters('DeploymentID')))))))]",
                                    "VNetID": "[resourceId('Microsoft.Network/VirtualNetworks', format('{0}-vn', parameters('Deployment')))]",
                                    "subnetID": "[format('{0}/subnets/sn{1}', variables('VNetID'), parameters('NIC').Subnet)]",
                                    "acceleratedNetworking": "[if(contains(parameters('NIC'), 'FastNic'), true(), false())]",
                                    "NICSuffix": "[if(equals(parameters('NICNumber'), '1'), '', parameters('NICNumber'))]",
                                    "IPAllocation": "[if(contains(parameters('NIC'), 'StaticIP'), 'Static', 'Dynamic')]",
                                    "privateIPAddress": "[if(contains(parameters('NIC'), 'StaticIP'), format('{0}.{1}', if(equals(parameters('NIC').Subnet, 'MT02'), variables('networkIdUpper'), variables('networkId')), parameters('NIC').StaticIP), null())]",
                                    "publicIPAddress": "[if(not(contains(parameters('NIC'), 'PublicIP')), null(), createObject('id', resourceId('Microsoft.Network/publicIPAddresses', format('{0}-vm{1}-publicip{2}', parameters('Deployment'), parameters('VM').Name, parameters('NICNumber')))))]",
                                    "JITNSG": {
                                      "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-vm{1}-JITNSG', parameters('Deployment'), parameters('VM').Name))]"
                                    },
                                    "rules": "[if(contains(parameters('NIC'), 'NatRules'), parameters('NIC').NatRules, createArray())]"
                                  },
                                  "resources": [
                                    {
                                      "condition": "[not(or(or(or(contains(parameters('NIC'), 'LB'), contains(parameters('NIC'), 'PLB')), contains(parameters('NIC'), 'SLB')), contains(parameters('NIC'), 'ISLB')))]",
                                      "type": "Microsoft.Network/networkInterfaces",
                                      "apiVersion": "2021-02-01",
                                      "name": "[format('{0}-nic{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name)]",
                                      "location": "[resourceGroup().location]",
                                      "properties": {
                                        "enableAcceleratedNetworking": "[variables('acceleratedNetworking')]",
                                        "ipConfigurations": [
                                          {
                                            "name": "ipconfig1",
                                            "properties": {
                                              "publicIPAddress": "[if(contains(parameters('NIC'), 'PublicIP'), variables('publicIPAddress'), null())]",
                                              "privateIPAllocationMethod": "[variables('IPAllocation')]",
                                              "privateIPAddress": "[variables('privateIPAddress')]",
                                              "subnet": {
                                                "id": "[variables('subnetID')]"
                                              }
                                            }
                                          }
                                        ],
                                        "networkSecurityGroup": "[variables('JITNSG')]"
                                      }
                                    },
                                    {
                                      "condition": "[not(or(contains(parameters('NIC'), 'LB'), or(contains(parameters('NIC'), 'PLB'), or(contains(parameters('NIC'), 'SLB'), contains(parameters('NIC'), 'ISLB')))))]",
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', format('{0}-nic{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]",
                                      "name": "service",
                                      "properties": {
                                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                                        "metrics": [
                                          {
                                            "timeGrain": "PT5M",
                                            "enabled": true,
                                            "retentionPolicy": {
                                              "enabled": false,
                                              "days": 0
                                            }
                                          }
                                        ]
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nic{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]"
                                      ]
                                    },
                                    {
                                      "condition": "[contains(parameters('NIC'), 'PLB')]",
                                      "type": "Microsoft.Network/networkInterfaces",
                                      "apiVersion": "2021-02-01",
                                      "name": "[format('{0}-nicplb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name)]",
                                      "location": "[resourceGroup().location]",
                                      "properties": {
                                        "enableAcceleratedNetworking": "[variables('acceleratedNetworking')]",
                                        "ipConfigurations": [
                                          {
                                            "name": "ipconfig1",
                                            "properties": {
                                              "loadBalancerBackendAddressPools": [
                                                {
                                                  "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', format('{0}-lb{1}', parameters('Deployment'), parameters('NIC').PLB), parameters('NIC').PLB)]"
                                                }
                                              ],
                                              "loadBalancerInboundNatRules": "[if(contains(parameters('NIC'), 'NATRules'), variables('loadBalancerInboundNatRules'), null())]",
                                              "privateIPAllocationMethod": "[variables('IPAllocation')]",
                                              "privateIPAddress": "[variables('privateIPAddress')]",
                                              "subnet": {
                                                "id": "[variables('subnetID')]"
                                              }
                                            }
                                          }
                                        ],
                                        "networkSecurityGroup": "[variables('JITNSG')]"
                                      }
                                    },
                                    {
                                      "condition": "[contains(parameters('NIC'), 'PLB')]",
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', format('{0}-nicplb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]",
                                      "name": "service",
                                      "properties": {
                                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                                        "metrics": [
                                          {
                                            "timeGrain": "PT5M",
                                            "enabled": true,
                                            "retentionPolicy": {
                                              "enabled": false,
                                              "days": 0
                                            }
                                          }
                                        ]
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nicplb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]"
                                      ]
                                    },
                                    {
                                      "condition": "[contains(parameters('NIC'), 'LB')]",
                                      "type": "Microsoft.Network/networkInterfaces",
                                      "apiVersion": "2021-02-01",
                                      "name": "[format('{0}-niclb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name)]",
                                      "location": "[resourceGroup().location]",
                                      "properties": {
                                        "enableAcceleratedNetworking": "[variables('acceleratedNetworking')]",
                                        "ipConfigurations": [
                                          {
                                            "name": "ipconfig1",
                                            "properties": {
                                              "loadBalancerBackendAddressPools": [
                                                {
                                                  "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', format('{0}-ilb{1}', parameters('Deployment'), parameters('NIC').LB), parameters('NIC').LB)]"
                                                }
                                              ],
                                              "privateIPAllocationMethod": "[variables('IPAllocation')]",
                                              "privateIPAddress": "[variables('privateIPAddress')]",
                                              "subnet": {
                                                "id": "[variables('subnetID')]"
                                              }
                                            }
                                          }
                                        ],
                                        "networkSecurityGroup": "[variables('JITNSG')]"
                                      }
                                    },
                                    {
                                      "condition": "[contains(parameters('NIC'), 'LB')]",
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', format('{0}-niclb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]",
                                      "name": "service",
                                      "properties": {
                                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                                        "metrics": [
                                          {
                                            "timeGrain": "PT5M",
                                            "enabled": true,
                                            "retentionPolicy": {
                                              "enabled": false,
                                              "days": 0
                                            }
                                          }
                                        ]
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-niclb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]"
                                      ]
                                    },
                                    {
                                      "condition": "[contains(parameters('NIC'), 'SLB')]",
                                      "type": "Microsoft.Network/networkInterfaces",
                                      "apiVersion": "2021-02-01",
                                      "name": "[format('{0}-nicslb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name)]",
                                      "location": "[resourceGroup().location]",
                                      "properties": {
                                        "enableAcceleratedNetworking": "[variables('acceleratedNetworking')]",
                                        "ipConfigurations": [
                                          {
                                            "name": "ipconfig1",
                                            "properties": {
                                              "loadBalancerBackendAddressPools": [
                                                {
                                                  "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', format('{0}-lb{1}', parameters('Deployment'), parameters('NIC').SLB), parameters('NIC').SLB)]"
                                                }
                                              ],
                                              "privateIPAllocationMethod": "[variables('IPAllocation')]",
                                              "privateIPAddress": "[variables('privateIPAddress')]",
                                              "subnet": {
                                                "id": "[variables('subnetID')]"
                                              }
                                            }
                                          }
                                        ],
                                        "networkSecurityGroup": "[variables('JITNSG')]"
                                      }
                                    },
                                    {
                                      "condition": "[contains(parameters('NIC'), 'SLB')]",
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', format('{0}-nicslb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]",
                                      "name": "service",
                                      "properties": {
                                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                                        "metrics": [
                                          {
                                            "timeGrain": "PT5M",
                                            "enabled": true,
                                            "retentionPolicy": {
                                              "enabled": false,
                                              "days": 0
                                            }
                                          }
                                        ]
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nicslb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]"
                                      ]
                                    }
                                  ],
                                  "outputs": {
                                    "foo7": {
                                      "type": "array",
                                      "value": "[variables('loadBalancerInboundNatRules')]"
                                    },
                                    "foo": {
                                      "type": "object",
                                      "value": "[parameters('NIC')]"
                                    }
                                  }
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-AppServer-publicIPDeploy{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-AppServer-diskLookup{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[variables('Deployment')]"
                          },
                          "DeploymentID": {
                            "value": "[parameters('DeploymentID')]"
                          },
                          "Name": {
                            "value": "[parameters('AppServer').Name]"
                          },
                          "SOFS": {
                            "value": "[if(contains(variables('DataDiskInfo')[parameters('AppServer').DDRole], 'SOFS'), variables('DataDiskInfo')[parameters('AppServer').DDRole].SOFS, json('{\"1\":1}'))]"
                          },
                          "DATA": {
                            "value": "[if(contains(variables('DataDiskInfo')[parameters('AppServer').DDRole], 'DATA'), variables('DataDiskInfo')[parameters('AppServer').DDRole].DATA, json('{\"1\":1}'))]"
                          },
                          "LOGS": {
                            "value": "[if(contains(variables('DataDiskInfo')[parameters('AppServer').DDRole], 'LOGS'), variables('DataDiskInfo')[parameters('AppServer').DDRole].LOGS, json('{\"1\":1}'))]"
                          },
                          "TEMPDB": {
                            "value": "[if(contains(variables('DataDiskInfo')[parameters('AppServer').DDRole], 'TEMPDB'), variables('DataDiskInfo')[parameters('AppServer').DDRole].TEMPDB, json('{\"1\":1}'))]"
                          },
                          "BACKUP": {
                            "value": "[if(contains(variables('DataDiskInfo')[parameters('AppServer').DDRole], 'BACKUP'), variables('DataDiskInfo')[parameters('AppServer').DDRole].BACKUP, json('{\"1\":1}'))]"
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "13688646372196984293"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "DeploymentID": {
                              "type": "string"
                            },
                            "Name": {
                              "type": "string"
                            },
                            "DATA": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "DATASS": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "SOFS": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "LOGS": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "TEMPDB": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "BACKUP": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "DISKS": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "Global": {
                              "type": "object"
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "Data_var",
                                "count": "[length(range(0, if(contains(parameters('DATA'), '1'), 1, length(parameters('DATA').LUNS))))]",
                                "input": {
                                  "name": "[if(contains(parameters('DATA'), '1'), 1, format('{0}-{1}-DATA-DATA{2}', parameters('Deployment'), parameters('Name'), padLeft(parameters('DATA').LUNS[range(0, if(contains(parameters('DATA'), '1'), 1, length(parameters('DATA').LUNS)))[copyIndex('Data_var')]][0], 2, '0')))]",
                                  "lun": "[if(contains(parameters('DATA'), '1'), 1, int(parameters('DATA').LUNS[range(0, if(contains(parameters('DATA'), '1'), 1, length(parameters('DATA').LUNS)))[copyIndex('Data_var')]][0]))]",
                                  "caching": "[if(contains(parameters('DATA'), '1'), 1, parameters('DATA').caching)]",
                                  "diskSizeGB": "[if(contains(parameters('DATA'), '1'), 1, int(parameters('DATA').LUNS[range(0, if(contains(parameters('DATA'), '1'), 1, length(parameters('DATA').LUNS)))[copyIndex('Data_var')]][1]))]",
                                  "createOption": "[if(contains(parameters('DATA'), '1'), 1, if(equals(length(parameters('DATA').LUNS[range(0, if(contains(parameters('DATA'), '1'), 1, length(parameters('DATA').LUNS)))[copyIndex('Data_var')]]), 3), parameters('DATA').LUNS[range(0, if(contains(parameters('DATA'), '1'), 1, length(parameters('DATA').LUNS)))[copyIndex('Data_var')]][2], 'Empty'))]",
                                  "managedDisk": "[if(contains(parameters('DATA'), '1'), 1, if(contains(parameters('DATA'), 'saType'), json(format('{{\"storageAccountType\":\"{0}\"}}', parameters('DATA').saType)), json('null')))]"
                                }
                              },
                              {
                                "name": "Datass_var",
                                "count": "[length(range(0, if(contains(parameters('DATASS'), '1'), 1, length(parameters('DATASS').LUNS))))]",
                                "input": {
                                  "lun": "[if(contains(parameters('DATASS'), '1'), 1, int(parameters('DATASS').LUNS[range(0, if(contains(parameters('DATASS'), '1'), 1, length(parameters('DATASS').LUNS)))[copyIndex('Datass_var')]][0]))]",
                                  "caching": "[if(contains(parameters('DATASS'), '1'), 1, parameters('DATASS').caching)]",
                                  "diskSizeGB": "[if(contains(parameters('DATASS'), '1'), 1, int(parameters('DATASS').LUNS[range(0, if(contains(parameters('DATASS'), '1'), 1, length(parameters('DATASS').LUNS)))[copyIndex('Datass_var')]][1]))]",
                                  "createOption": "[if(contains(parameters('DATASS'), '1'), 1, if(equals(length(parameters('DATASS').LUNS[range(0, if(contains(parameters('DATASS'), '1'), 1, length(parameters('DATASS').LUNS)))[copyIndex('Datass_var')]]), 3), parameters('DATASS').LUNS[range(0, if(contains(parameters('DATASS'), '1'), 1, length(parameters('DATASS').LUNS)))[copyIndex('Datass_var')]][2], 'Empty'))]",
                                  "managedDisk": "[if(contains(parameters('DATASS'), '1'), 1, if(contains(parameters('DATASS'), 'saType'), json(format('{{\"storageAccountType\":\"{0}\"}}', parameters('DATASS').saType)), json('null')))]"
                                }
                              },
                              {
                                "name": "SOFS_var",
                                "count": "[length(range(0, if(contains(parameters('SOFS'), '1'), 1, length(parameters('SOFS').LUNS))))]",
                                "input": {
                                  "name": "[if(contains(parameters('SOFS'), '1'), 1, format('{0}-{1}-DATA-SOFS{2}', parameters('Deployment'), parameters('Name'), padLeft(parameters('SOFS').LUNS[range(0, if(contains(parameters('SOFS'), '1'), 1, length(parameters('SOFS').LUNS)))[copyIndex('SOFS_var')]][0], 2, '0')))]",
                                  "lun": "[if(contains(parameters('SOFS'), '1'), 1, int(parameters('SOFS').LUNS[range(0, if(contains(parameters('SOFS'), '1'), 1, length(parameters('SOFS').LUNS)))[copyIndex('SOFS_var')]][0]))]",
                                  "caching": "[if(contains(parameters('SOFS'), '1'), 1, parameters('SOFS').caching)]",
                                  "diskSizeGB": "[if(contains(parameters('SOFS'), '1'), 1, int(parameters('SOFS').LUNS[range(0, if(contains(parameters('SOFS'), '1'), 1, length(parameters('SOFS').LUNS)))[copyIndex('SOFS_var')]][1]))]",
                                  "createOption": "[if(contains(parameters('SOFS'), '1'), 1, if(equals(length(parameters('SOFS').LUNS[range(0, if(contains(parameters('SOFS'), '1'), 1, length(parameters('SOFS').LUNS)))[copyIndex('SOFS_var')]]), 3), parameters('SOFS').LUNS[range(0, if(contains(parameters('SOFS'), '1'), 1, length(parameters('SOFS').LUNS)))[copyIndex('SOFS_var')]][2], 'Empty'))]",
                                  "managedDisk": "[if(contains(parameters('SOFS'), '1'), 1, if(contains(parameters('SOFS'), 'saType'), json(format('{{\"storageAccountType\":\"{0}\"}}', parameters('SOFS').saType)), json('null')))]"
                                }
                              },
                              {
                                "name": "LOGS_var",
                                "count": "[length(range(0, if(contains(parameters('LOGS'), '1'), 1, length(parameters('LOGS').LUNS))))]",
                                "input": {
                                  "name": "[if(contains(parameters('LOGS'), '1'), 1, format('{0}-{1}-DATA-LOGS{2}', parameters('Deployment'), parameters('Name'), padLeft(parameters('LOGS').LUNS[range(0, if(contains(parameters('LOGS'), '1'), 1, length(parameters('LOGS').LUNS)))[copyIndex('LOGS_var')]][0], 2, '0')))]",
                                  "lun": "[if(contains(parameters('LOGS'), '1'), 1, int(parameters('LOGS').LUNS[range(0, if(contains(parameters('LOGS'), '1'), 1, length(parameters('LOGS').LUNS)))[copyIndex('LOGS_var')]][0]))]",
                                  "caching": "[if(contains(parameters('LOGS'), '1'), 1, parameters('LOGS').caching)]",
                                  "diskSizeGB": "[if(contains(parameters('LOGS'), '1'), 1, int(parameters('LOGS').LUNS[range(0, if(contains(parameters('LOGS'), '1'), 1, length(parameters('LOGS').LUNS)))[copyIndex('LOGS_var')]][1]))]",
                                  "createOption": "[if(contains(parameters('LOGS'), '1'), 1, if(equals(length(parameters('LOGS').LUNS[range(0, if(contains(parameters('LOGS'), '1'), 1, length(parameters('LOGS').LUNS)))[copyIndex('LOGS_var')]]), 3), parameters('LOGS').LUNS[range(0, if(contains(parameters('LOGS'), '1'), 1, length(parameters('LOGS').LUNS)))[copyIndex('LOGS_var')]][2], 'Empty'))]",
                                  "managedDisk": "[if(contains(parameters('LOGS'), '1'), 1, if(contains(parameters('LOGS'), 'saType'), json(format('{{\"storageAccountType\":\"{0}\"}}', parameters('LOGS').saType)), json('null')))]"
                                }
                              },
                              {
                                "name": "TEMPDB_var",
                                "count": "[length(range(0, if(contains(parameters('TEMPDB'), '1'), 1, length(parameters('TEMPDB').LUNS))))]",
                                "input": {
                                  "name": "[if(contains(parameters('TEMPDB'), '1'), 1, format('{0}-{1}-DATA-TEMPDB{2}', parameters('Deployment'), parameters('Name'), padLeft(parameters('TEMPDB').LUNS[range(0, if(contains(parameters('TEMPDB'), '1'), 1, length(parameters('TEMPDB').LUNS)))[copyIndex('TEMPDB_var')]][0], 2, '0')))]",
                                  "lun": "[if(contains(parameters('TEMPDB'), '1'), 1, int(parameters('TEMPDB').LUNS[range(0, if(contains(parameters('TEMPDB'), '1'), 1, length(parameters('TEMPDB').LUNS)))[copyIndex('TEMPDB_var')]][0]))]",
                                  "caching": "[if(contains(parameters('TEMPDB'), '1'), 1, parameters('TEMPDB').caching)]",
                                  "diskSizeGB": "[if(contains(parameters('TEMPDB'), '1'), 1, int(parameters('TEMPDB').LUNS[range(0, if(contains(parameters('TEMPDB'), '1'), 1, length(parameters('TEMPDB').LUNS)))[copyIndex('TEMPDB_var')]][1]))]",
                                  "createOption": "[if(contains(parameters('TEMPDB'), '1'), 1, if(equals(length(parameters('TEMPDB').LUNS[range(0, if(contains(parameters('TEMPDB'), '1'), 1, length(parameters('TEMPDB').LUNS)))[copyIndex('TEMPDB_var')]]), 3), parameters('TEMPDB').LUNS[range(0, if(contains(parameters('TEMPDB'), '1'), 1, length(parameters('TEMPDB').LUNS)))[copyIndex('TEMPDB_var')]][2], 'Empty'))]",
                                  "managedDisk": "[if(contains(parameters('TEMPDB'), '1'), 1, if(contains(parameters('TEMPDB'), 'saType'), json(format('{{\"storageAccountType\":\"{0}\"}}', parameters('TEMPDB').saType)), json('null')))]"
                                }
                              },
                              {
                                "name": "BACKUP_var",
                                "count": "[length(range(0, if(contains(parameters('BACKUP'), '1'), 1, length(parameters('BACKUP').LUNS))))]",
                                "input": {
                                  "name": "[if(contains(parameters('BACKUP'), '1'), 1, format('{0}-{1}-DATA-BACKUP{2}', parameters('Deployment'), parameters('Name'), padLeft(parameters('BACKUP').LUNS[range(0, if(contains(parameters('BACKUP'), '1'), 1, length(parameters('BACKUP').LUNS)))[copyIndex('BACKUP_var')]][0], 2, '0')))]",
                                  "lun": "[if(contains(parameters('BACKUP'), '1'), 1, int(parameters('BACKUP').LUNS[range(0, if(contains(parameters('BACKUP'), '1'), 1, length(parameters('BACKUP').LUNS)))[copyIndex('BACKUP_var')]][0]))]",
                                  "caching": "[if(contains(parameters('BACKUP'), '1'), 1, parameters('BACKUP').caching)]",
                                  "diskSizeGB": "[if(contains(parameters('BACKUP'), '1'), 1, int(parameters('BACKUP').LUNS[range(0, if(contains(parameters('BACKUP'), '1'), 1, length(parameters('BACKUP').LUNS)))[copyIndex('BACKUP_var')]][1]))]",
                                  "createOption": "[if(contains(parameters('BACKUP'), '1'), 1, if(equals(length(parameters('BACKUP').LUNS[range(0, if(contains(parameters('BACKUP'), '1'), 1, length(parameters('BACKUP').LUNS)))[copyIndex('BACKUP_var')]]), 3), parameters('BACKUP').LUNS[range(0, if(contains(parameters('BACKUP'), '1'), 1, length(parameters('BACKUP').LUNS)))[copyIndex('BACKUP_var')]][2], 'Empty'))]",
                                  "managedDisk": "[if(contains(parameters('BACKUP'), '1'), 1, if(contains(parameters('BACKUP'), 'saType'), json(format('{{\"storageAccountType\":\"{0}\"}}', parameters('BACKUP').saType)), json('null')))]"
                                }
                              }
                            ]
                          },
                          "resources": [],
                          "outputs": {
                            "SOFS": {
                              "type": "array",
                              "value": "[if(contains(parameters('SOFS'), '1'), array('no SOFS disks'), variables('SOFS_var'))]"
                            },
                            "DATA": {
                              "type": "array",
                              "value": "[if(contains(parameters('DATA'), '1'), array('no DATA disks'), variables('Data_var'))]"
                            },
                            "DATASS": {
                              "type": "array",
                              "value": "[if(contains(parameters('DATASS'), '1'), array('no DATA disks'), variables('Datass_var'))]"
                            },
                            "LOGS": {
                              "type": "array",
                              "value": "[if(contains(parameters('LOGS'), '1'), array('no LOGS disks'), variables('LOGS_var'))]"
                            },
                            "TEMPDB": {
                              "type": "array",
                              "value": "[if(contains(parameters('TEMPDB'), '1'), array('no TEMPDB disks'), variables('TEMPDB_var'))]"
                            },
                            "BACKUP": {
                              "type": "array",
                              "value": "[if(contains(parameters('BACKUP'), '1'), array('no BACKUP disks'), variables('BACKUP_var'))]"
                            },
                            "DATADisks": {
                              "type": "array",
                              "value": "[union(if(contains(parameters('SOFS'), '1'), createArray(), variables('SOFS_var')), if(contains(parameters('DATA'), '1'), createArray(), variables('Data_var')), if(contains(parameters('DATASS'), '1'), createArray(), variables('Datass_var')), if(contains(parameters('LOGS'), '1'), createArray(), variables('LOGS_var')), if(contains(parameters('TEMPDB'), '1'), createArray(), variables('TEMPDB_var')), if(contains(parameters('BACKUP'), '1'), createArray(), variables('BACKUP_var')))]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "condition": "[bool(parameters('AppServer').DeployJIT)]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-AppServer-JIT-{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[variables('Deployment')]"
                          },
                          "VM": {
                            "value": "[parameters('AppServer')]"
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          },
                          "DeploymentID": {
                            "value": "[parameters('DeploymentID')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "17671050488544287828"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "VM": {
                              "type": "object"
                            },
                            "Global": {
                              "type": "object"
                            },
                            "DeploymentID": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "ports",
                                "count": "[length(variables('portList'))]",
                                "input": {
                                  "number": "[variables('portList')[copyIndex('ports')]]",
                                  "protocol": "TCP",
                                  "allowedSourceAddressPrefixes": "[union(parameters('Global').IPAddressforRemoteAccess, variables('addressPrefixes'))]",
                                  "maxRequestAccessDuration": "PT3H"
                                }
                              }
                            ],
                            "portList": [
                              3389,
                              22,
                              5985,
                              5986
                            ],
                            "networkId": "[format('{0}{1}', parameters('Global').networkid[0], string(sub(parameters('Global').networkid[1], mul(2, int(parameters('DeploymentID'))))))]",
                            "addressPrefixes": [
                              "[format('{0}.0/23', variables('networkId'))]"
                            ]
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Security/locations/jitNetworkAccessPolicies",
                              "apiVersion": "2020-01-01",
                              "name": "[format('{0}/JIT_{1}', resourceGroup().location, format('{0}-vm{1}', parameters('Deployment'), parameters('VM').name))]",
                              "kind": "Basic",
                              "properties": {
                                "virtualMachines": [
                                  {
                                    "id": "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', parameters('Deployment'), parameters('VM').name))]",
                                    "ports": "[variables('ports')]"
                                  }
                                ],
                                "appendMode": true
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "Disks": {
                      "type": "array",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('dp{0}-AppServer-diskLookup{1}', variables('Deployment'), parameters('AppServer').Name))).outputs.DATADisks.value]"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-OMS', variables('Deployment')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-SA', variables('Deployment')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-VNETDNSDC1', variables('Deployment')))]"
      ]
    },
    {
      "condition": "[bool(parameters('Stage').ADSecondary)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "ADSecondary",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "DeploymentID": {
            "value": "[parameters('DeploymentID')]"
          },
          "DeploymentInfo": {
            "value": "[parameters('DeploymentInfo')]"
          },
          "Environment": {
            "value": "[parameters('Environment')]"
          },
          "Extensions": {
            "value": "[parameters('Extensions')]"
          },
          "Global": {
            "value": "[parameters('Global')]"
          },
          "Prefix": {
            "value": "[parameters('Prefix')]"
          },
          "Stage": {
            "value": "[parameters('Stage')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "13874993644946453761"
            }
          },
          "parameters": {
            "Prefix": {
              "type": "string"
            },
            "Environment": {
              "type": "string",
              "defaultValue": "D",
              "allowedValues": [
                "I",
                "D",
                "T",
                "U",
                "P",
                "S",
                "G",
                "A"
              ]
            },
            "DeploymentID": {
              "type": "string",
              "defaultValue": "1",
              "allowedValues": [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9"
              ]
            },
            "Stage": {
              "type": "object"
            },
            "Extensions": {
              "type": "object"
            },
            "Global": {
              "type": "object"
            },
            "DeploymentInfo": {
              "type": "object"
            }
          },
          "variables": {
            "copy": [
              {
                "name": "VMs",
                "count": "[length(variables('AppServers'))]",
                "input": {
                  "name": "[variables('AppServers')[copyIndex('VMs')].Name]",
                  "match": "[or(equals(parameters('Global').CN, '.'), contains(array(parameters('Global').CN), variables('AppServers')[copyIndex('VMs')].Name))]",
                  "Extensions": "[if(contains(variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType], 'RoleExtensions'), union(parameters('Extensions'), variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType].RoleExtensions), parameters('Extensions'))]",
                  "DataDisk": "[if(contains(variables('AppServers')[copyIndex('VMs')], 'DDRole'), variables('DataDiskInfo')[variables('AppServers')[copyIndex('VMs')].DDRole], null())]",
                  "vmHostName": "[toLower(format('{0}{1}{2}{3}{4}', parameters('Prefix'), parameters('Global').AppName, parameters('Environment'), parameters('DeploymentID'), variables('AppServers')[copyIndex('VMs')].Name))]",
                  "AppInfo": "[if(contains(variables('AppServers')[copyIndex('VMs')], 'AppInfo'), variables('AppServers')[copyIndex('VMs')].AppInfo, null())]",
                  "windowsConfiguration": {
                    "enableAutomaticUpdates": true,
                    "provisionVmAgent": true,
                    "patchSettings": {
                      "enableHotpatching": "[if(contains(variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType], 'HotPatch'), variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType].HotPatch, false())]",
                      "patchMode": "[if(contains(variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType], 'patchMode'), variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType].patchMode, 'AutomaticByOS')]"
                    }
                  },
                  "linuxConfiguration": {
                    "enableAutomaticUpdates": true,
                    "provisionVmAgent": true,
                    "patchSettings": {
                      "enableHotpatching": "[if(contains(variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType], 'HotPatch'), variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType].HotPatch, false())]",
                      "patchMode": "[if(contains(variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType], 'patchMode'), variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType].patchMode, 'AutomaticByOS')]"
                    }
                  }
                }
              }
            ],
            "Deployment": "[format('{0}-{1}-{2}-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID'))]",
            "computeGlobal": "[json('{\r\n  \"DataDiskInfo\": {\r\n    \"0GB\": {},\r\n    \"32GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            32\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GBSS\": {\r\n      \"DATASS\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GB-2\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ],\r\n          [\r\n            1,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"128GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            128\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"FIL64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"SOFS\": {\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            1,\r\n            32\r\n          ],\r\n          [\r\n            2,\r\n            32\r\n          ],\r\n          [\r\n            3,\r\n            32\r\n          ]\r\n        ],\r\n        \"FileSystem\": \"ReFS\",\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"SQL64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"LOGS\": {\r\n        \"DriveLetter\": \"G\",\r\n        \"caching\": \"None\",\r\n        \"LUNS\": [\r\n          [\r\n            8,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"TEMPDB\": {\r\n        \"DriveLetter\": \"H\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            12,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"BACKUP\": {\r\n        \"DriveLetter\": \"I\",\r\n        \"caching\": \"None\",\r\n        \"LUNS\": [\r\n          [\r\n            15,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    }\r\n  },\r\n  \"computeSizeLookupOptions\": {\r\n    \"API-P\": \"Standard_D4s_v3\",\r\n    \"API-D\": \"Standard_D4s_v3\",\r\n    \"API-S\": \"Standard_D2s_v3\",\r\n    \"SF-P\": \"Standard_D4s_v3\",\r\n    \"SF-D\": \"Standard_D2s_v3\",\r\n    \"SF-S\": \"Standard_D2s_v3\",\r\n    \"CTNR-P\": \"Standard_D4s_v3\",\r\n    \"CTNR-D\": \"Standard_D2s_v3\",\r\n    \"ADp-P\": \"Standard_D2s_v3\",\r\n    \"ADp-D\": \"Standard_A2m_v2\",\r\n    \"ADs-P\": \"Standard_D2s_v3\",\r\n    \"ADs-D\": \"Standard_A2m_v2\",\r\n    \"AAP-P\": \"Standard_D2s_v3\",\r\n    \"AAP-D\": \"Standard_D2s_v3\",\r\n    \"DNS-P\": \"Standard_D2s_v3\",\r\n    \"DNS-D\": \"Standard_D2s_v3\",\r\n    \"BUS-P\": \"Standard_DS2_v2\",\r\n    \"BUS-D\": \"Standard_DS2_v2\",\r\n    \"LIN-P\": \"Standard_DS2_v2\",\r\n    \"LIN-D\": \"Standard_DS2_v2\",\r\n    \"FIL-P\": \"Standard_D4s_v3\",\r\n    \"FIL-D\": \"Standard_D4s_v3\",\r\n    \"DFS-P\": \"Standard_D4s_v3\",\r\n    \"DFS-D\": \"Standard_D4s_v3\",\r\n    \"JMP-P\": \"Standard_D4s_v3\",\r\n    \"JMP-D\": \"Standard_D4s_v3\",\r\n    \"CLT-P\": \"Standard_D4s_v3\",\r\n    \"CLT-D\": \"Standard_D4s_v3\",\r\n    \"PXY-P\": \"Standard_D4s_v3\",\r\n    \"PXY-D\": \"Standard_D2s_v3\",\r\n    \"CLS01-D\": \"Standard_D4s_v3\",\r\n    \"CLS02-D\": \"Standard_D4s_v3\",\r\n    \"CLS01-P\": \"Standard_D4s_v3\",\r\n    \"CLS02-P\": \"Standard_D4s_v3\",\r\n    \"FW-P\": \"Standard_F4\",\r\n    \"FW-D\": \"Standard_F2\"\r\n  },\r\n  \"OSType\": {\r\n    \"Server2022SSIMG\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/b8f402aa-20f7-4888-b45c-3cf086dad9c3/resourceGroups/ACU1-BRW-AOA-RG-G1/providers/Microsoft.Compute/galleries/acu1brwaoag1gallery01/images/vmss2022\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SSIMG\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/b8f402aa-20f7-4888-b45c-3cf086dad9c3/resourceGroups/ACU1-BRW-AOA-RG-G1/providers/Microsoft.Compute/galleries/acu1brwaoag1gallery01/images/vmss2019webnetcore27\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"cbld10\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/27b750cd-ed43-42fd-9044-8d75e124ae55/resourceGroups/SBID-Build-Test/providers/Microsoft.Compute/galleries/cbldtest/images/cbld10-ext\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 1,\r\n        \"IaaSDiagnostics\": 1,\r\n        \"Antimalware\": 0,\r\n        \"DependencyAgent\": 1,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Win10O365\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsDesktop\",\r\n        \"offer\": \"office-365\",\r\n        \"sku\": \"rs5-evd-o365pp\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Client\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Win10\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsDesktop\",\r\n        \"offer\": \"Windows-10\",\r\n        \"sku\": \"21h1-pro-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Client\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"SQLServer2016\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftSQLServer\",\r\n        \"Offer\": \"SQL2016SP2-WS2016\",\r\n        \"sku\": \"Enterprise\",\r\n        \"version\": \"latest\"\r\n      },\r\n      // \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016Core\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-Server-Core\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016small\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016Coresmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-Server-Core-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019-gen2\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"windowsserver-gen2preview\",\r\n        \"sku\": \"2019-Datacenter-gen2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2022\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2022-Datacenter-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"_plan\": {\r\n        \"name\": \"windows-server-2022\",\r\n        \"publisher\": \"microsoftwindowsserver\",\r\n        \"product\": \"microsoftserveroperatingsystems-previews\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2022Containerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"datacenter-core-20h2-with-containers-smalldisk-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Core\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-Core\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019small\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-datacenter-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Coresmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-Server-Core-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Containerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019CoreContainerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-datacenter-core-with-containers-smalldisk-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016SS\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-with-Containers\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SSgs\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers-gs\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SS\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"NetScaler\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"citrix\",\r\n        \"Offer\": \"netscalervpx-120\",\r\n        \"Sku\": \"netscalerbyol\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"netscalerbyol\",\r\n        \"publisher\": \"citrix\",\r\n        \"product\": \"netscalervpx-120\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"MaxLoadBalancer\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"loadbalancer\",\r\n        \"offer\": \"loadbalancer-org-load-balancer-for-azure\",\r\n        \"sku\": \"max_load_balancer\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"max_load_balancer\",\r\n        \"publisher\": \"loadbalancer\",\r\n        \"product\": \"loadbalancer-org-load-balancer-for-azure\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortigate\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet_fortigate-vm_v5\",\r\n        \"sku\": \"fortinet_fg-vm\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"fortinet_fg-vm\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet_fortigate-vm_v5\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortigatepayg\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet_fortigate-vm_v5\",\r\n        \"sku\": \"fortinet_fg-vm_payg\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"fortinet_fg-vm_payg\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet_fortigate-vm_v5\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortimngr\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet-fortimanager\",\r\n        \"sku\": \"fortinet-fortimanager\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 3,\r\n      \"plan\": {\r\n        \"name\": \"fortinet-fortimanager\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet-fortimanager\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"UbuntuServer1904\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"canonical\",\r\n        \"offer\": \"UbuntuServer\",\r\n        \"sku\": \"19.04\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"Antimalware\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 1,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0\r\n      }\r\n    },\r\n    \"Bus-debian\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"credativ\",\r\n        \"offer\": \"Debian\",\r\n        \"sku\": \"8\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 1,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"PROXY-UBUNTU\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"Canonical\",\r\n        \"offer\": \"UbuntuServer\",\r\n        \"sku\": \"16.04-LTS\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"fileUris\": \"[concat(parameters(''global'')._artifactsLocation, ''/scripts/pxy.zip\",\r\n      \"commandToExecute\": \"[concat(''sudo apt-get update && sudo apt-get install unzip && unzip Proxy.zip && sudo bash -x haproxyvm-configure.sh '', '' -a '', ''ilbIPAddress'', '' -r '', ''ilbRabbitMqPort'', '' -m '', ''ilbRabbitMqMgmtPort'', '' -b '', ''dnsName'', ''.'', ''location'', ''.cloudapp.azure.com -p '', ''vmNamePrefix'', ''0 -s '', ''vmNamePrefix'', ''1'')]\",\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"CentOS75\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"OpenLogic\",\r\n        \"Offer\": \"CentOS\",\r\n        \"sku\": \"7.5\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"Antimalware\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    }\r\n  },\r\n  \"ladCfg\": {\r\n    \"diagnosticMonitorConfiguration\": {\r\n      \"eventVolume\": \"Medium\",\r\n      \"metrics\": {\r\n        \"metricAggregation\": [\r\n          {\r\n            \"scheduledTransferPeriod\": \"PT1H\"\r\n          },\r\n          {\r\n            \"scheduledTransferPeriod\": \"PT1M\"\r\n          }\r\n        ],\r\n        \"resourceId\": \"__VM_RESOURCE_ID__\"\r\n      },\r\n      \"performanceCounters\": {\r\n        \"performanceCounterConfiguration\": [\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk read guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readbytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/readbytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk writes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/writespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk transfer time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagetransfertime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagetransfertime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk transfers\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"transferspersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/transferspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk write guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writebytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/writebytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk read time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagereadtime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagereadtime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk write time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagewritetime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagewritetime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk total bytes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/bytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk reads\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readspersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/readspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk queue length\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagediskqueuelength\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagediskqueuelength\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network in guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytesreceived\",\r\n            \"counterSpecifier\": \"/builtin/network/bytesreceived\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network total bytes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytestotal\",\r\n            \"counterSpecifier\": \"/builtin/network/bytestotal\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network out guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytestransmitted\",\r\n            \"counterSpecifier\": \"/builtin/network/bytestransmitted\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network collisions\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totalcollisions\",\r\n            \"counterSpecifier\": \"/builtin/network/totalcollisions\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets received errors\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totalrxerrors\",\r\n            \"counterSpecifier\": \"/builtin/network/totalrxerrors\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets sent\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"packetstransmitted\",\r\n            \"counterSpecifier\": \"/builtin/network/packetstransmitted\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets received\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"packetsreceived\",\r\n            \"counterSpecifier\": \"/builtin/network/packetsreceived\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets sent errors\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totaltxerrors\",\r\n            \"counterSpecifier\": \"/builtin/network/totaltxerrors\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem transfers/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"transferspersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/transferspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % free space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentfreespace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentfreespace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % used space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusedspace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentusedspace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem used space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"usedspace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/usedspace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem read bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytesreadpersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/bytesreadpersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem free space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"freespace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/freespace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % free inodes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentfreeinodes\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentfreeinodes\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/bytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem reads/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readspersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/readspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem write bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"byteswrittenpersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/byteswrittenpersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem writes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writespersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/writespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % used inodes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusedinodes\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentusedinodes\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU IO wait time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentiowaittime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentiowaittime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU user time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusertime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentusertime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU nice time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentnicetime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentnicetime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU percentage guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentprocessortime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentprocessortime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU interrupt time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentinterrupttime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentinterrupttime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU idle time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentidletime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentidletime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU privileged time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentprivilegedtime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentprivilegedtime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"availablememory\",\r\n            \"counterSpecifier\": \"/builtin/memory/availablememory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap percent used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentusedswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentusedswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"usedmemory\",\r\n            \"counterSpecifier\": \"/builtin/memory/usedmemory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Page reads\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pagesreadpersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pagesreadpersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"availableswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/availableswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap percent available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentavailableswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentavailableswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Mem. percent available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentavailablememory\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentavailablememory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Pages\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pagespersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pagespersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"usedswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/usedswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory percentage\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentusedmemory\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentusedmemory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Page writes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pageswrittenpersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pageswrittenpersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          }\r\n        ]\r\n      },\r\n      \"syslogEvents\": {\r\n        \"syslogEventConfiguration\": {\r\n          \"LOG_AUTH\": \"LOG_DEBUG\",\r\n          \"LOG_AUTHPRIV\": \"LOG_DEBUG\",\r\n          \"LOG_CRON\": \"LOG_DEBUG\",\r\n          \"LOG_DAEMON\": \"LOG_DEBUG\",\r\n          \"LOG_FTP\": \"LOG_DEBUG\",\r\n          \"LOG_KERN\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL0\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL1\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL2\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL3\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL4\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL5\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL6\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL7\": \"LOG_DEBUG\",\r\n          \"LOG_LPR\": \"LOG_DEBUG\",\r\n          \"LOG_MAIL\": \"LOG_DEBUG\",\r\n          \"LOG_NEWS\": \"LOG_DEBUG\",\r\n          \"LOG_SYSLOG\": \"LOG_DEBUG\",\r\n          \"LOG_USER\": \"LOG_DEBUG\",\r\n          \"LOG_UUCP\": \"LOG_DEBUG\"\r\n        }\r\n      }\r\n    },\r\n    \"sampleRateInSeconds\": 15\r\n  },\r\n  \"WadCfg\": {\r\n    \"DiagnosticMonitorConfiguration\": {\r\n      \"overallQuotaInMB\": 10000,\r\n      \"DiagnosticInfrastructureLogs\": {\r\n        \"scheduledTransferLogLevelFilter\": \"Error\"\r\n      },\r\n      \"PerformanceCounters\": {\r\n        \"scheduledTransferPeriod\": \"PT1M\",\r\n        \"PerformanceCounterConfiguration\": []\r\n      },\r\n      \"WindowsEventLog\": {\r\n        \"scheduledTransferPeriod\": \"PT5M\",\r\n        \"DataSource\": [\r\n          {\r\n            \"name\": \"Application!*[System[(Level = 1 or Level = 2)]]\"\r\n          },\r\n          {\r\n            \"name\": \"Security!*[System[(Level = 1 or Level = 2)]\"\r\n          },\r\n          {\r\n            \"name\": \"System!*[System[(Level = 1 or Level = 2)]]\"\r\n          },\r\n          {\r\n            \"name\": \"Microsoft-Windows-DSC/Operational!*[System[(EventID=4249 or EventID=4097)]]\"\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}')]",
            "OSType": "[variables('computeGlobal').OSType]",
            "DataDiskInfo": "[variables('computeGlobal').DataDiskInfo]",
            "DeploymentName": "[if(contains(toLower(deployment().name), 'vmapp'), 'AppServers', replace(deployment().name, format('dp{0}-', variables('Deployment')), ''))]",
            "AppServers": "[parameters('DeploymentInfo').AppServers[variables('DeploymentName')]]",
            "HubKVJ": "[json(parameters('Global').hubKV)]",
            "HubRGJ": "[json(parameters('Global').hubRG)]",
            "gh": {
              "hubKVPrefix": "[if(contains(variables('HubKVJ'), 'Prefix'), variables('HubKVJ').Prefix, parameters('Prefix'))]",
              "hubKVOrgName": "[if(contains(variables('HubKVJ'), 'OrgName'), variables('HubKVJ').OrgName, parameters('Global').OrgName)]",
              "hubKVAppName": "[if(contains(variables('HubKVJ'), 'AppName'), variables('HubKVJ').AppName, parameters('Global').AppName)]",
              "hubKVRGName": "[if(contains(variables('HubKVJ'), 'RG'), variables('HubKVJ').RG, variables('HubRGJ').name)]"
            },
            "HubKVRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').hubKVPrefix, variables('gh').hubKVOrgName, variables('gh').hubKVAppName, variables('gh').hubKVRGName)]",
            "HubKVName": "[toLower(format('{0}-{1}-{2}-{3}-kv{4}', variables('gh').hubKVPrefix, variables('gh').hubKVOrgName, variables('gh').hubKVAppName, variables('gh').hubKVRGName, variables('HubKVJ').name))]"
          },
          "resources": [
            {
              "condition": "[variables('VMs')[copyIndex()].match]",
              "copy": {
                "name": "VM",
                "count": "[length(variables('AppServers'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dp{0}-VM-Deploy-{1}', variables('Deployment'), variables('AppServers')[copyIndex()].Name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "Prefix": {
                    "value": "[parameters('Prefix')]"
                  },
                  "DeploymentID": {
                    "value": "[parameters('DeploymentID')]"
                  },
                  "Environment": {
                    "value": "[parameters('Environment')]"
                  },
                  "AppServer": {
                    "value": "[variables('AppServers')[copyIndex()]]"
                  },
                  "VM": {
                    "value": "[variables('VMs')[copyIndex()]]"
                  },
                  "DeploymentName": {
                    "value": "[variables('DeploymentName')]"
                  },
                  "Global": {
                    "value": "[parameters('Global')]"
                  },
                  "vmAdminPassword": {
                    "reference": {
                      "keyVault": {
                        "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults', variables('HubKVName'))]"
                      },
                      "secretName": "localadmin"
                    }
                  },
                  "devOpsPat": {
                    "reference": {
                      "keyVault": {
                        "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults', variables('HubKVName'))]"
                      },
                      "secretName": "devOpsPat"
                    }
                  },
                  "sshPublic": {
                    "reference": {
                      "keyVault": {
                        "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults', variables('HubKVName'))]"
                      },
                      "secretName": "sshPublic"
                    }
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1318.3566",
                      "templateHash": "10183346640093717410"
                    }
                  },
                  "parameters": {
                    "Prefix": {
                      "type": "string"
                    },
                    "DeploymentID": {
                      "type": "string"
                    },
                    "Environment": {
                      "type": "string"
                    },
                    "VM": {
                      "type": "object"
                    },
                    "AppServer": {
                      "type": "object"
                    },
                    "Global": {
                      "type": "object"
                    },
                    "DeploymentName": {
                      "type": "string"
                    },
                    "vmAdminPassword": {
                      "type": "secureString"
                    },
                    "devOpsPat": {
                      "type": "secureString"
                    },
                    "sshPublic": {
                      "type": "secureString"
                    },
                    "saKey": {
                      "type": "secureString",
                      "defaultValue": "[newGuid()]"
                    },
                    "deploymentTime": {
                      "type": "string",
                      "defaultValue": "[utcNow()]"
                    }
                  },
                  "variables": {
                    "Deployment": "[format('{0}-{1}-{2}-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID'))]",
                    "DeploymentURI": "[toLower(format('{0}{1}{2}{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID')))]",
                    "computeGlobal": "[json('{\r\n  \"DataDiskInfo\": {\r\n    \"0GB\": {},\r\n    \"32GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            32\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GBSS\": {\r\n      \"DATASS\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GB-2\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ],\r\n          [\r\n            1,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"128GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            128\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"FIL64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"SOFS\": {\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            1,\r\n            32\r\n          ],\r\n          [\r\n            2,\r\n            32\r\n          ],\r\n          [\r\n            3,\r\n            32\r\n          ]\r\n        ],\r\n        \"FileSystem\": \"ReFS\",\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"SQL64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"LOGS\": {\r\n        \"DriveLetter\": \"G\",\r\n        \"caching\": \"None\",\r\n        \"LUNS\": [\r\n          [\r\n            8,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"TEMPDB\": {\r\n        \"DriveLetter\": \"H\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            12,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"BACKUP\": {\r\n        \"DriveLetter\": \"I\",\r\n        \"caching\": \"None\",\r\n        \"LUNS\": [\r\n          [\r\n            15,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    }\r\n  },\r\n  \"computeSizeLookupOptions\": {\r\n    \"API-P\": \"Standard_D4s_v3\",\r\n    \"API-D\": \"Standard_D4s_v3\",\r\n    \"API-S\": \"Standard_D2s_v3\",\r\n    \"SF-P\": \"Standard_D4s_v3\",\r\n    \"SF-D\": \"Standard_D2s_v3\",\r\n    \"SF-S\": \"Standard_D2s_v3\",\r\n    \"CTNR-P\": \"Standard_D4s_v3\",\r\n    \"CTNR-D\": \"Standard_D2s_v3\",\r\n    \"ADp-P\": \"Standard_D2s_v3\",\r\n    \"ADp-D\": \"Standard_A2m_v2\",\r\n    \"ADs-P\": \"Standard_D2s_v3\",\r\n    \"ADs-D\": \"Standard_A2m_v2\",\r\n    \"AAP-P\": \"Standard_D2s_v3\",\r\n    \"AAP-D\": \"Standard_D2s_v3\",\r\n    \"DNS-P\": \"Standard_D2s_v3\",\r\n    \"DNS-D\": \"Standard_D2s_v3\",\r\n    \"BUS-P\": \"Standard_DS2_v2\",\r\n    \"BUS-D\": \"Standard_DS2_v2\",\r\n    \"LIN-P\": \"Standard_DS2_v2\",\r\n    \"LIN-D\": \"Standard_DS2_v2\",\r\n    \"FIL-P\": \"Standard_D4s_v3\",\r\n    \"FIL-D\": \"Standard_D4s_v3\",\r\n    \"DFS-P\": \"Standard_D4s_v3\",\r\n    \"DFS-D\": \"Standard_D4s_v3\",\r\n    \"JMP-P\": \"Standard_D4s_v3\",\r\n    \"JMP-D\": \"Standard_D4s_v3\",\r\n    \"CLT-P\": \"Standard_D4s_v3\",\r\n    \"CLT-D\": \"Standard_D4s_v3\",\r\n    \"PXY-P\": \"Standard_D4s_v3\",\r\n    \"PXY-D\": \"Standard_D2s_v3\",\r\n    \"CLS01-D\": \"Standard_D4s_v3\",\r\n    \"CLS02-D\": \"Standard_D4s_v3\",\r\n    \"CLS01-P\": \"Standard_D4s_v3\",\r\n    \"CLS02-P\": \"Standard_D4s_v3\",\r\n    \"FW-P\": \"Standard_F4\",\r\n    \"FW-D\": \"Standard_F2\"\r\n  },\r\n  \"OSType\": {\r\n    \"Server2022SSIMG\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/b8f402aa-20f7-4888-b45c-3cf086dad9c3/resourceGroups/ACU1-BRW-AOA-RG-G1/providers/Microsoft.Compute/galleries/acu1brwaoag1gallery01/images/vmss2022\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SSIMG\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/b8f402aa-20f7-4888-b45c-3cf086dad9c3/resourceGroups/ACU1-BRW-AOA-RG-G1/providers/Microsoft.Compute/galleries/acu1brwaoag1gallery01/images/vmss2019webnetcore27\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"cbld10\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/27b750cd-ed43-42fd-9044-8d75e124ae55/resourceGroups/SBID-Build-Test/providers/Microsoft.Compute/galleries/cbldtest/images/cbld10-ext\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 1,\r\n        \"IaaSDiagnostics\": 1,\r\n        \"Antimalware\": 0,\r\n        \"DependencyAgent\": 1,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Win10O365\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsDesktop\",\r\n        \"offer\": \"office-365\",\r\n        \"sku\": \"rs5-evd-o365pp\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Client\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Win10\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsDesktop\",\r\n        \"offer\": \"Windows-10\",\r\n        \"sku\": \"21h1-pro-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Client\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"SQLServer2016\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftSQLServer\",\r\n        \"Offer\": \"SQL2016SP2-WS2016\",\r\n        \"sku\": \"Enterprise\",\r\n        \"version\": \"latest\"\r\n      },\r\n      // \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016Core\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-Server-Core\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016small\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016Coresmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-Server-Core-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019-gen2\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"windowsserver-gen2preview\",\r\n        \"sku\": \"2019-Datacenter-gen2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2022\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2022-Datacenter-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"_plan\": {\r\n        \"name\": \"windows-server-2022\",\r\n        \"publisher\": \"microsoftwindowsserver\",\r\n        \"product\": \"microsoftserveroperatingsystems-previews\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2022Containerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"datacenter-core-20h2-with-containers-smalldisk-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Core\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-Core\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019small\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-datacenter-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Coresmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-Server-Core-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Containerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019CoreContainerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-datacenter-core-with-containers-smalldisk-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016SS\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-with-Containers\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SSgs\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers-gs\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SS\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"NetScaler\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"citrix\",\r\n        \"Offer\": \"netscalervpx-120\",\r\n        \"Sku\": \"netscalerbyol\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"netscalerbyol\",\r\n        \"publisher\": \"citrix\",\r\n        \"product\": \"netscalervpx-120\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"MaxLoadBalancer\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"loadbalancer\",\r\n        \"offer\": \"loadbalancer-org-load-balancer-for-azure\",\r\n        \"sku\": \"max_load_balancer\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"max_load_balancer\",\r\n        \"publisher\": \"loadbalancer\",\r\n        \"product\": \"loadbalancer-org-load-balancer-for-azure\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortigate\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet_fortigate-vm_v5\",\r\n        \"sku\": \"fortinet_fg-vm\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"fortinet_fg-vm\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet_fortigate-vm_v5\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortigatepayg\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet_fortigate-vm_v5\",\r\n        \"sku\": \"fortinet_fg-vm_payg\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"fortinet_fg-vm_payg\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet_fortigate-vm_v5\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortimngr\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet-fortimanager\",\r\n        \"sku\": \"fortinet-fortimanager\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 3,\r\n      \"plan\": {\r\n        \"name\": \"fortinet-fortimanager\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet-fortimanager\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"UbuntuServer1904\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"canonical\",\r\n        \"offer\": \"UbuntuServer\",\r\n        \"sku\": \"19.04\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"Antimalware\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 1,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0\r\n      }\r\n    },\r\n    \"Bus-debian\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"credativ\",\r\n        \"offer\": \"Debian\",\r\n        \"sku\": \"8\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 1,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"PROXY-UBUNTU\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"Canonical\",\r\n        \"offer\": \"UbuntuServer\",\r\n        \"sku\": \"16.04-LTS\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"fileUris\": \"[concat(parameters(''global'')._artifactsLocation, ''/scripts/pxy.zip\",\r\n      \"commandToExecute\": \"[concat(''sudo apt-get update && sudo apt-get install unzip && unzip Proxy.zip && sudo bash -x haproxyvm-configure.sh '', '' -a '', ''ilbIPAddress'', '' -r '', ''ilbRabbitMqPort'', '' -m '', ''ilbRabbitMqMgmtPort'', '' -b '', ''dnsName'', ''.'', ''location'', ''.cloudapp.azure.com -p '', ''vmNamePrefix'', ''0 -s '', ''vmNamePrefix'', ''1'')]\",\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"CentOS75\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"OpenLogic\",\r\n        \"Offer\": \"CentOS\",\r\n        \"sku\": \"7.5\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"Antimalware\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    }\r\n  },\r\n  \"ladCfg\": {\r\n    \"diagnosticMonitorConfiguration\": {\r\n      \"eventVolume\": \"Medium\",\r\n      \"metrics\": {\r\n        \"metricAggregation\": [\r\n          {\r\n            \"scheduledTransferPeriod\": \"PT1H\"\r\n          },\r\n          {\r\n            \"scheduledTransferPeriod\": \"PT1M\"\r\n          }\r\n        ],\r\n        \"resourceId\": \"__VM_RESOURCE_ID__\"\r\n      },\r\n      \"performanceCounters\": {\r\n        \"performanceCounterConfiguration\": [\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk read guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readbytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/readbytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk writes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/writespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk transfer time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagetransfertime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagetransfertime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk transfers\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"transferspersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/transferspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk write guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writebytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/writebytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk read time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagereadtime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagereadtime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk write time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagewritetime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagewritetime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk total bytes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/bytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk reads\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readspersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/readspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk queue length\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagediskqueuelength\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagediskqueuelength\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network in guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytesreceived\",\r\n            \"counterSpecifier\": \"/builtin/network/bytesreceived\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network total bytes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytestotal\",\r\n            \"counterSpecifier\": \"/builtin/network/bytestotal\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network out guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytestransmitted\",\r\n            \"counterSpecifier\": \"/builtin/network/bytestransmitted\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network collisions\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totalcollisions\",\r\n            \"counterSpecifier\": \"/builtin/network/totalcollisions\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets received errors\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totalrxerrors\",\r\n            \"counterSpecifier\": \"/builtin/network/totalrxerrors\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets sent\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"packetstransmitted\",\r\n            \"counterSpecifier\": \"/builtin/network/packetstransmitted\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets received\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"packetsreceived\",\r\n            \"counterSpecifier\": \"/builtin/network/packetsreceived\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets sent errors\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totaltxerrors\",\r\n            \"counterSpecifier\": \"/builtin/network/totaltxerrors\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem transfers/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"transferspersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/transferspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % free space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentfreespace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentfreespace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % used space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusedspace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentusedspace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem used space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"usedspace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/usedspace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem read bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytesreadpersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/bytesreadpersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem free space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"freespace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/freespace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % free inodes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentfreeinodes\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentfreeinodes\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/bytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem reads/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readspersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/readspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem write bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"byteswrittenpersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/byteswrittenpersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem writes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writespersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/writespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % used inodes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusedinodes\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentusedinodes\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU IO wait time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentiowaittime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentiowaittime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU user time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusertime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentusertime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU nice time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentnicetime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentnicetime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU percentage guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentprocessortime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentprocessortime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU interrupt time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentinterrupttime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentinterrupttime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU idle time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentidletime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentidletime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU privileged time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentprivilegedtime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentprivilegedtime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"availablememory\",\r\n            \"counterSpecifier\": \"/builtin/memory/availablememory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap percent used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentusedswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentusedswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"usedmemory\",\r\n            \"counterSpecifier\": \"/builtin/memory/usedmemory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Page reads\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pagesreadpersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pagesreadpersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"availableswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/availableswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap percent available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentavailableswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentavailableswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Mem. percent available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentavailablememory\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentavailablememory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Pages\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pagespersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pagespersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"usedswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/usedswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory percentage\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentusedmemory\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentusedmemory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Page writes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pageswrittenpersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pageswrittenpersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          }\r\n        ]\r\n      },\r\n      \"syslogEvents\": {\r\n        \"syslogEventConfiguration\": {\r\n          \"LOG_AUTH\": \"LOG_DEBUG\",\r\n          \"LOG_AUTHPRIV\": \"LOG_DEBUG\",\r\n          \"LOG_CRON\": \"LOG_DEBUG\",\r\n          \"LOG_DAEMON\": \"LOG_DEBUG\",\r\n          \"LOG_FTP\": \"LOG_DEBUG\",\r\n          \"LOG_KERN\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL0\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL1\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL2\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL3\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL4\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL5\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL6\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL7\": \"LOG_DEBUG\",\r\n          \"LOG_LPR\": \"LOG_DEBUG\",\r\n          \"LOG_MAIL\": \"LOG_DEBUG\",\r\n          \"LOG_NEWS\": \"LOG_DEBUG\",\r\n          \"LOG_SYSLOG\": \"LOG_DEBUG\",\r\n          \"LOG_USER\": \"LOG_DEBUG\",\r\n          \"LOG_UUCP\": \"LOG_DEBUG\"\r\n        }\r\n      }\r\n    },\r\n    \"sampleRateInSeconds\": 15\r\n  },\r\n  \"WadCfg\": {\r\n    \"DiagnosticMonitorConfiguration\": {\r\n      \"overallQuotaInMB\": 10000,\r\n      \"DiagnosticInfrastructureLogs\": {\r\n        \"scheduledTransferLogLevelFilter\": \"Error\"\r\n      },\r\n      \"PerformanceCounters\": {\r\n        \"scheduledTransferPeriod\": \"PT1M\",\r\n        \"PerformanceCounterConfiguration\": []\r\n      },\r\n      \"WindowsEventLog\": {\r\n        \"scheduledTransferPeriod\": \"PT5M\",\r\n        \"DataSource\": [\r\n          {\r\n            \"name\": \"Application!*[System[(Level = 1 or Level = 2)]]\"\r\n          },\r\n          {\r\n            \"name\": \"Security!*[System[(Level = 1 or Level = 2)]\"\r\n          },\r\n          {\r\n            \"name\": \"System!*[System[(Level = 1 or Level = 2)]]\"\r\n          },\r\n          {\r\n            \"name\": \"Microsoft-Windows-DSC/Operational!*[System[(EventID=4249 or EventID=4097)]]\"\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}')]",
                    "OSType": "[variables('computeGlobal').OSType]",
                    "WadCfg": "[variables('computeGlobal').WadCfg]",
                    "ladCfg": "[variables('computeGlobal').ladCfg]",
                    "DataDiskInfo": "[variables('computeGlobal').DataDiskInfo]",
                    "computeSizeLookupOptions": "[variables('computeGlobal').computeSizeLookupOptions]",
                    "RGName": "[format('{0}-{1}-{2}-RG-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').AppName, parameters('Environment'), parameters('DeploymentID'))]",
                    "GlobalRGJ": "[json(parameters('Global').GlobalRG)]",
                    "GlobalSAJ": "[json(parameters('Global').GlobalSA)]",
                    "HubKVJ": "[json(parameters('Global').hubKV)]",
                    "HubRGJ": "[json(parameters('Global').hubRG)]",
                    "HubAAJ": "[json(parameters('Global').hubAA)]",
                    "regionLookup": "[json('{\r\n  \"francecentral\": {\r\n    \"displayname\": \"France Central\",\r\n    \"location\": \"francecentral\",\r\n    \"PREFIX\": \"AFC1\",\r\n    \"pairedRegion\": \"francesouth\"\r\n  },\r\n  \"southeastasia\": {\r\n    \"displayname\": \"Southeast Asia\",\r\n    \"location\": \"southeastasia\",\r\n    \"PREFIX\": \"ASA1\",\r\n    \"pairedRegion\": \"eastasia\"\r\n  },\r\n  \"southafricawest\": {\r\n    \"displayname\": \"South Africa West\",\r\n    \"location\": \"southafricawest\",\r\n    \"PREFIX\": \"ASAW\",\r\n    \"pairedRegion\": \"southafricanorth\"\r\n  },\r\n  \"eastus2\": {\r\n    \"displayname\": \"East US 2\",\r\n    \"location\": \"eastus2\",\r\n    \"PREFIX\": \"AEU2\",\r\n    \"pairedRegion\": \"centralus\"\r\n  },\r\n  \"eastus\": {\r\n    \"displayname\": \"East US\",\r\n    \"location\": \"eastus\",\r\n    \"PREFIX\": \"AEU1\",\r\n    \"pairedRegion\": \"westus\"\r\n  },\r\n  \"jioindiawest\": {\r\n    \"displayname\": \"Jio India West\",\r\n    \"location\": \"jioindiawest\",\r\n    \"PREFIX\": \"AJIW\",\r\n    \"pairedRegion\": \"jioindiacentral\"\r\n  },\r\n  \"westcentralus\": {\r\n    \"displayname\": \"West Central US\",\r\n    \"location\": \"westcentralus\",\r\n    \"PREFIX\": \"AWCU\",\r\n    \"pairedRegion\": \"westus2\"\r\n  },\r\n  \"koreacentral\": {\r\n    \"displayname\": \"Korea Central\",\r\n    \"location\": \"koreacentral\",\r\n    \"PREFIX\": \"AKC1\",\r\n    \"pairedRegion\": \"koreasouth\"\r\n  },\r\n  \"uaecentral\": {\r\n    \"displayname\": \"UAE Central\",\r\n    \"location\": \"uaecentral\",\r\n    \"PREFIX\": \"AUC1\",\r\n    \"pairedRegion\": \"uaenorth\"\r\n  },\r\n  \"westus\": {\r\n    \"displayname\": \"West US\",\r\n    \"location\": \"westus\",\r\n    \"PREFIX\": \"AWU1\",\r\n    \"pairedRegion\": \"eastus\"\r\n  },\r\n  \"southafricanorth\": {\r\n    \"displayname\": \"South Africa North\",\r\n    \"location\": \"southafricanorth\",\r\n    \"PREFIX\": \"ASAN\",\r\n    \"pairedRegion\": \"southafricawest\"\r\n  },\r\n  \"australiacentral2\": {\r\n    \"displayname\": \"Australia Central 2\",\r\n    \"location\": \"australiacentral2\",\r\n    \"PREFIX\": \"AAC2\",\r\n    \"pairedRegion\": \"australiacentral2\"\r\n  },\r\n  \"francesouth\": {\r\n    \"displayname\": \"France South\",\r\n    \"location\": \"francesouth\",\r\n    \"PREFIX\": \"AFS1\",\r\n    \"pairedRegion\": \"francecentral\"\r\n  },\r\n  \"ukwest\": {\r\n    \"displayname\": \"UK West\",\r\n    \"location\": \"ukwest\",\r\n    \"PREFIX\": \"AUW1\",\r\n    \"pairedRegion\": \"uksouth\"\r\n  },\r\n  \"southindia\": {\r\n    \"displayname\": \"South India\",\r\n    \"location\": \"southindia\",\r\n    \"PREFIX\": \"ASI1\",\r\n    \"pairedRegion\": \"centralindia\"\r\n  },\r\n  \"centralus\": {\r\n    \"displayname\": \"Central US\",\r\n    \"location\": \"centralus\",\r\n    \"PREFIX\": \"ACU1\",\r\n    \"pairedRegion\": \"eastus2\"\r\n  },\r\n  \"germanynorth\": {\r\n    \"displayname\": \"Germany North\",\r\n    \"location\": \"germanynorth\",\r\n    \"PREFIX\": \"AGN1\",\r\n    \"pairedRegion\": \"germanywestcentral\"\r\n  },\r\n  \"koreasouth\": {\r\n    \"displayname\": \"Korea South\",\r\n    \"location\": \"koreasouth\",\r\n    \"PREFIX\": \"AKS1\",\r\n    \"pairedRegion\": \"koreacentral\"\r\n  },\r\n  \"westindia\": {\r\n    \"displayname\": \"West India\",\r\n    \"location\": \"westindia\",\r\n    \"PREFIX\": \"AWI1\",\r\n    \"pairedRegion\": \"southindia\"\r\n  },\r\n  \"westus2\": {\r\n    \"displayname\": \"West US 2\",\r\n    \"location\": \"westus2\",\r\n    \"PREFIX\": \"AWU2\",\r\n    \"pairedRegion\": \"westcentralus\"\r\n  },\r\n  \"northcentralus\": {\r\n    \"displayname\": \"North Central US\",\r\n    \"location\": \"northcentralus\",\r\n    \"PREFIX\": \"ANCU\",\r\n    \"pairedRegion\": \"southcentralus\"\r\n  },\r\n  \"westeurope\": {\r\n    \"displayname\": \"West Europe\",\r\n    \"location\": \"westeurope\",\r\n    \"PREFIX\": \"AWEU\",\r\n    \"pairedRegion\": \"northeurope\"\r\n  },\r\n  \"canadacentral\": {\r\n    \"displayname\": \"Canada Central\",\r\n    \"location\": \"canadacentral\",\r\n    \"PREFIX\": \"ACC1\",\r\n    \"pairedRegion\": \"canadaeast\"\r\n  },\r\n  \"southcentralus\": {\r\n    \"displayname\": \"South Central US\",\r\n    \"location\": \"southcentralus\",\r\n    \"PREFIX\": \"ASCU\",\r\n    \"pairedRegion\": \"northcentralus\"\r\n  },\r\n  \"norwayeast\": {\r\n    \"displayname\": \"Norway East\",\r\n    \"location\": \"norwayeast\",\r\n    \"PREFIX\": \"ANE1\",\r\n    \"pairedRegion\": \"norwaywest\"\r\n  },\r\n  \"japanwest\": {\r\n    \"displayname\": \"Japan West\",\r\n    \"location\": \"japanwest\",\r\n    \"PREFIX\": \"AJW1\",\r\n    \"pairedRegion\": \"japaneast\"\r\n  },\r\n  \"norwaywest\": {\r\n    \"displayname\": \"Norway West\",\r\n    \"location\": \"norwaywest\",\r\n    \"PREFIX\": \"ANW1\",\r\n    \"pairedRegion\": \"norwayeast\"\r\n  },\r\n  \"jioindiacentral\": {\r\n    \"displayname\": \"Jio India Central\",\r\n    \"location\": \"jioindiacentral\",\r\n    \"PREFIX\": \"AJIC\",\r\n    \"pairedRegion\": \"jioindiawest\"\r\n  },\r\n  \"centralindia\": {\r\n    \"displayname\": \"Central India\",\r\n    \"location\": \"centralindia\",\r\n    \"PREFIX\": \"ACI1\",\r\n    \"pairedRegion\": \"southindia\"\r\n  },\r\n  \"westus3\": {\r\n    \"displayname\": \"West US 3\",\r\n    \"location\": \"westus3\",\r\n    \"PREFIX\": \"AWU3\",\r\n    \"pairedRegion\": \"eastus\"\r\n  },\r\n  \"brazilsouth\": {\r\n    \"displayname\": \"Brazil South\",\r\n    \"location\": \"brazilsouth\",\r\n    \"PREFIX\": \"ABS1\",\r\n    \"pairedRegion\": \"southcentralus\"\r\n  },\r\n  \"eastasia\": {\r\n    \"displayname\": \"East Asia\",\r\n    \"location\": \"eastasia\",\r\n    \"PREFIX\": \"AEA1\",\r\n    \"pairedRegion\": \"southeastasia\"\r\n  },\r\n  \"swedencentral\": {\r\n    \"displayname\": \"Sweden Central\",\r\n    \"location\": \"swedencentral\",\r\n    \"PREFIX\": \"ASC1\",\r\n    \"pairedRegion\": \"swedensouth\"\r\n  },\r\n  \"uksouth\": {\r\n    \"displayname\": \"UK South\",\r\n    \"location\": \"uksouth\",\r\n    \"PREFIX\": \"AUS1\",\r\n    \"pairedRegion\": \"ukwest\"\r\n  },\r\n  \"switzerlandnorth\": {\r\n    \"displayname\": \"Switzerland North\",\r\n    \"location\": \"switzerlandnorth\",\r\n    \"PREFIX\": \"ASN1\",\r\n    \"pairedRegion\": \"switzerlandwest\"\r\n  },\r\n  \"canadaeast\": {\r\n    \"displayname\": \"Canada East\",\r\n    \"location\": \"canadaeast\",\r\n    \"PREFIX\": \"ACE1\",\r\n    \"pairedRegion\": \"canadacentral\"\r\n  },\r\n  \"australiasoutheast\": {\r\n    \"displayname\": \"Australia Southeast\",\r\n    \"location\": \"australiasoutheast\",\r\n    \"PREFIX\": \"AAS1\",\r\n    \"pairedRegion\": \"australiaeast\"\r\n  },\r\n  \"northeurope\": {\r\n    \"displayname\": \"North Europe\",\r\n    \"location\": \"northeurope\",\r\n    \"PREFIX\": \"ANEU\",\r\n    \"pairedRegion\": \"westeurope\"\r\n  },\r\n  \"germanywestcentral\": {\r\n    \"displayname\": \"Germany West Central\",\r\n    \"location\": \"germanywestcentral\",\r\n    \"PREFIX\": \"AGWC\",\r\n    \"pairedRegion\": \"germanynorth\"\r\n  },\r\n  \"japaneast\": {\r\n    \"displayname\": \"Japan East\",\r\n    \"location\": \"japaneast\",\r\n    \"PREFIX\": \"AJE1\",\r\n    \"pairedRegion\": \"japanwest\"\r\n  },\r\n  \"uaenorth\": {\r\n    \"displayname\": \"UAE North\",\r\n    \"location\": \"uaenorth\",\r\n    \"PREFIX\": \"AUN1\",\r\n    \"pairedRegion\": \"uaecentral\"\r\n  },\r\n  \"australiaeast\": {\r\n    \"displayname\": \"Australia East\",\r\n    \"location\": \"australiaeast\",\r\n    \"PREFIX\": \"AAE1\",\r\n    \"pairedRegion\": \"australiasoutheast\"\r\n  },\r\n  \"switzerlandwest\": {\r\n    \"displayname\": \"Switzerland West\",\r\n    \"location\": \"switzerlandwest\",\r\n    \"PREFIX\": \"ASW1\",\r\n    \"pairedRegion\": \"switzerlandnorth\"\r\n  },\r\n  \"australiacentral\": {\r\n    \"displayname\": \"Australia Central\",\r\n    \"location\": \"australiacentral\",\r\n    \"PREFIX\": \"AAC1\",\r\n    \"pairedRegion\": \"australiacentral\"\r\n  },\r\n  \"brazilsoutheast\": {\r\n    \"displayname\": \"Brazil Southeast\",\r\n    \"location\": \"brazilsoutheast\",\r\n    \"PREFIX\": \"ABSE\",\r\n    \"pairedRegion\": \"brazilsouth\"\r\n  }\r\n}\r\n')]",
                    "primaryPrefix": "[variables('regionLookup')[parameters('Global').PrimaryLocation].prefix]",
                    "gh": {
                      "globalRGPrefix": "[if(contains(variables('GlobalRGJ'), 'Prefix'), variables('GlobalRGJ').Prefix, variables('primaryPrefix'))]",
                      "globalRGOrgName": "[if(contains(variables('GlobalRGJ'), 'OrgName'), variables('GlobalRGJ').OrgName, parameters('Global').OrgName)]",
                      "globalRGAppName": "[if(contains(variables('GlobalRGJ'), 'AppName'), variables('GlobalRGJ').AppName, parameters('Global').AppName)]",
                      "globalRGName": "[if(contains(variables('GlobalRGJ'), 'name'), variables('GlobalRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID')))]",
                      "globalSAPrefix": "[if(contains(variables('GlobalSAJ'), 'Prefix'), variables('GlobalSAJ').Prefix, variables('primaryPrefix'))]",
                      "globalSAOrgName": "[if(contains(variables('GlobalSAJ'), 'OrgName'), variables('GlobalSAJ').OrgName, parameters('Global').OrgName)]",
                      "globalSAAppName": "[if(contains(variables('GlobalSAJ'), 'AppName'), variables('GlobalSAJ').AppName, parameters('Global').AppName)]",
                      "globalSARGName": "[if(contains(variables('GlobalSAJ'), 'RG'), variables('GlobalSAJ').RG, if(contains(variables('GlobalRGJ'), 'name'), variables('GlobalRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID'))))]",
                      "hubRGPrefix": "[if(contains(variables('HubRGJ'), 'Prefix'), variables('HubRGJ').Prefix, parameters('Prefix'))]",
                      "hubRGOrgName": "[if(contains(variables('HubRGJ'), 'OrgName'), variables('HubRGJ').OrgName, parameters('Global').OrgName)]",
                      "hubRGAppName": "[if(contains(variables('HubRGJ'), 'AppName'), variables('HubRGJ').AppName, parameters('Global').AppName)]",
                      "hubRGRGName": "[if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID'))))]",
                      "hubKVPrefix": "[if(contains(variables('HubKVJ'), 'Prefix'), variables('HubKVJ').Prefix, parameters('Prefix'))]",
                      "hubKVOrgName": "[if(contains(variables('HubKVJ'), 'OrgName'), variables('HubKVJ').OrgName, parameters('Global').OrgName)]",
                      "hubKVAppName": "[if(contains(variables('HubKVJ'), 'AppName'), variables('HubKVJ').AppName, parameters('Global').AppName)]",
                      "hubKVRGName": "[if(contains(variables('HubKVJ'), 'RG'), variables('HubKVJ').RG, variables('HubRGJ').name)]",
                      "hubAAPrefix": "[if(contains(variables('HubAAJ'), 'Prefix'), variables('HubAAJ').Prefix, parameters('Prefix'))]",
                      "hubAAOrgName": "[if(contains(variables('HubAAJ'), 'OrgName'), variables('HubAAJ').OrgName, parameters('Global').OrgName)]",
                      "hubAAAppName": "[if(contains(variables('HubAAJ'), 'AppName'), variables('HubAAJ').AppName, parameters('Global').AppName)]",
                      "hubAARGName": "[if(contains(variables('HubAAJ'), 'RG'), variables('HubAAJ').RG, variables('HubRGJ').name)]"
                    },
                    "globalRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').globalRGPrefix, variables('gh').globalRGOrgName, variables('gh').globalRGAppName, variables('gh').globalRGName)]",
                    "HubRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').hubRGPrefix, variables('gh').hubRGOrgName, variables('gh').hubRGAppName, variables('gh').hubRGRGName)]",
                    "globalSAName": "[toLower(format('{0}{1}{2}{3}sa{4}', variables('gh').globalSAPrefix, variables('gh').globalSAOrgName, variables('gh').globalSAAppName, variables('gh').globalSARGName, variables('GlobalRGJ').name))]",
                    "HubKVRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').hubKVPrefix, variables('gh').hubKVOrgName, variables('gh').hubKVAppName, variables('gh').hubKVRGName)]",
                    "HubKVName": "[toLower(format('{0}-{1}-{2}-{3}-kv{4}', variables('gh').hubKVPrefix, variables('gh').hubKVOrgName, variables('gh').hubKVAppName, variables('gh').hubKVRGName, variables('HubKVJ').name))]",
                    "AAName": "[toLower(format('{0}{1}{2}{3}{4}', variables('gh').hubAAPrefix, variables('gh').hubAAOrgName, variables('gh').hubAAAppName, variables('gh').hubAARGName, variables('HubAAJ').name))]",
                    "EnvironmentLookup": {
                      "D": "Dev",
                      "T": "Test",
                      "I": "Int",
                      "U": "UAT",
                      "P": "PROD",
                      "S": "SBX"
                    },
                    "DSCConfigLookup": {
                      "AppServers": "AppServers",
                      "InitialDOP": "AppServers",
                      "WVDServers": "AppServers"
                    },
                    "AppServerSizeLookup": {
                      "D": "D",
                      "T": "D",
                      "I": "D",
                      "U": "D",
                      "P": "P",
                      "S": "D"
                    },
                    "RebootNodeLookup": {
                      "D": true,
                      "Q": true,
                      "T": true,
                      "U": true,
                      "P": false
                    },
                    "ConfigurationMode": {
                      "D": "ApplyAndAutoCorrect",
                      "Q": "ApplyAndAutoCorrect",
                      "T": "ApplyAndAutoCorrect",
                      "U": "ApplyAndAutoCorrect",
                      "P": "ApplyAndMonitor"
                    },
                    "DSCConfigurationModeFrequencyMins": 15,
                    "networkId": "[format('{0}{1}', parameters('Global').networkid[0], string(sub(parameters('Global').networkid[1], mul(2, int(parameters('DeploymentID'))))))]",
                    "storageAccountType": "[if(equals(parameters('Environment'), 'P'), if(contains(parameters('AppServer'), 'Zone'), 'Premium_LRS', 'Premium_ZRS'), if(contains(parameters('AppServer'), 'Zone'), 'StandardSSD_ZRS', 'StandardSSD_LRS'))]",
                    "SADiagName": "[format('{0}sadiag', variables('DeploymentURI'))]",
                    "saaccountiddiag": "[resourceId('Microsoft.Storage/storageAccounts/', variables('SADiagName'))]",
                    "saSQLBackupName": "[format('{0}sasqlbackup', variables('DeploymentURI'))]",
                    "MSILookup": {
                      "SQL": "Cluster",
                      "UTL": "DefaultKeyVault",
                      "FIL": "Cluster",
                      "OCR": "Storage",
                      "WVD": "WVD"
                    },
                    "userAssignedIdentities": {
                      "Cluster": {
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiKeyVaultSecretsGet', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperator', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperatorGlobal', variables('Deployment'))))]": {}
                      },
                      "Default": {
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiKeyVaultSecretsGet', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperatorGlobal', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperator', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountFileContributor', variables('Deployment'))))]": {}
                      },
                      "DefaultKeyVault": {
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperatorGlobal', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiKeyVaultSecretsGetApp', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiAzureServiceBusDataOwner', variables('Deployment'))))]": {}
                      },
                      "WVD": {
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperatorGlobal', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountFileContributor', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiWVDRegKeyReader', variables('Deployment'))))]": {}
                      },
                      "Storage": {
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountContributor', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperatorGlobal', variables('Deployment'))))]": {}
                      },
                      "None": {}
                    },
                    "ASNAME": "[if(contains(parameters('AppServer'), 'Zone'), 'usingZones', parameters('AppServer').ASNAME)]"
                  },
                  "resources": [
                    {
                      "condition": "[not(equals(variables('ASNAME'), 'usingZones'))]",
                      "type": "Microsoft.Compute/availabilitySets",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}-as{1}', variables('Deployment'), variables('ASNAME'))]",
                      "location": "[resourceGroup().location]",
                      "sku": {
                        "name": "Aligned"
                      },
                      "properties": {
                        "platformUpdateDomainCount": 5,
                        "platformFaultDomainCount": 3
                      }
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines",
                      "apiVersion": "2021-04-01",
                      "name": "[format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "location": "[resourceGroup().location]",
                      "identity": {
                        "type": "SystemAssigned, UserAssigned",
                        "userAssignedIdentities": "[if(contains(variables('MSILookup'), parameters('AppServer').ROLE), variables('userAssignedIdentities')[variables('MSILookup')[parameters('AppServer').ROLE]], variables('userAssignedIdentities').Default)]"
                      },
                      "tags": {
                        "Environment": "[variables('EnvironmentLookup')[parameters('Environment')]]",
                        "Zone": "[if(contains(parameters('AppServer'), 'Zone'), parameters('AppServer').Zone, 1)]"
                      },
                      "zones": "[if(contains(parameters('AppServer'), 'Zone'), array(parameters('AppServer').Zone), null())]",
                      "plan": "[if(contains(variables('OSType')[parameters('AppServer').OSType], 'plan'), variables('OSType')[parameters('AppServer').OSType].plan, null())]",
                      "properties": {
                        "licenseType": "[if(contains(variables('OSType')[parameters('AppServer').OSType], 'licenseType'), variables('OSType')[parameters('AppServer').OSType].licenseType, null())]",
                        "availabilitySet": "[if(contains(parameters('AppServer'), 'Zone'), null(), createObject('id', format('{0}', resourceId('Microsoft.Compute/availabilitySets', format('{0}-as{1}', variables('Deployment'), parameters('AppServer').ASName)))))]",
                        "hardwareProfile": {
                          "vmSize": "[variables('computeSizeLookupOptions')[format('{0}-{1}', parameters('AppServer').ROLE, variables('AppServerSizeLookup')[parameters('Environment')])]]"
                        },
                        "osProfile": {
                          "computerName": "[parameters('VM').vmHostName]",
                          "adminUsername": "[if(contains(parameters('AppServer'), 'AdminUser'), parameters('AppServer').AdminUser, parameters('Global').vmAdminUserName)]",
                          "adminPassword": "[parameters('vmAdminPassword')]",
                          "customData": "[if(contains(parameters('AppServer'), 'customData'), base64(replace(parameters('AppServer').customData, '{0}', format('{0}.', variables('networkId')))), null())]",
                          "secrets": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), createArray(createObject('sourceVault', createObject('id', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults', variables('HubKVName'))), 'vaultCertificates', createArray(createObject('certificateUrl', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults/secrets', variables('HubKVName'), parameters('Global').CertName), '2021-06-01-preview').secretUriWithVersion, 'certificateStore', 'My'), createObject('certificateUrl', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults/secrets', variables('HubKVName'), parameters('Global').CertName), '2021-06-01-preview').secretUriWithVersion, 'certificateStore', 'Root'), createObject('certificateUrl', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults/secrets', variables('HubKVName'), parameters('Global').CertName), '2021-06-01-preview').secretUriWithVersion, 'certificateStore', 'CA')))), null())]",
                          "windowsConfiguration": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), parameters('VM').windowsConfiguration, null())]",
                          "linuxConfiguration": "[if(not(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows')), parameters('VM').linuxConfiguration, null())]"
                        },
                        "storageProfile": {
                          "imageReference": "[variables('OSType')[parameters('AppServer').OSType].imageReference]",
                          "osDisk": {
                            "name": "[format('{0}-{1}-OSDisk', variables('Deployment'), parameters('AppServer').Name)]",
                            "caching": "ReadWrite",
                            "diskSizeGB": "[variables('OSType')[parameters('AppServer').OSType].OSDiskGB]",
                            "createOption": "FromImage",
                            "managedDisk": {
                              "storageAccountType": "[if(contains(parameters('AppServer'), 'OSstorageAccountType'), parameters('AppServer').OSstorageAccountType, variables('storageAccountType'))]"
                            }
                          },
                          "dataDisks": "[reference(resourceId('Microsoft.Resources/deployments', format('dp{0}-AppServer-diskLookup{1}', variables('Deployment'), parameters('AppServer').Name))).outputs.DATADisks.value]"
                        },
                        "networkProfile": {
                          "copy": [
                            {
                              "name": "networkInterfaces",
                              "count": "[length(parameters('AppServer').NICs)]",
                              "input": {
                                "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}{1}{2}{3}', variables('Deployment'), if(contains(parameters('AppServer').NICs[copyIndex('networkInterfaces')], 'LB'), '-niclb', if(contains(parameters('AppServer').NICs[copyIndex('networkInterfaces')], 'PLB'), '-nicplb', if(contains(parameters('AppServer').NICs[copyIndex('networkInterfaces')], 'SLB'), '-nicslb', '-nic'))), if(equals(copyIndex('networkInterfaces'), 0), '', add(copyIndex('networkInterfaces'), 1)), parameters('AppServer').Name))]",
                                "properties": {
                                  "primary": "[contains(parameters('AppServer').NICs[copyIndex('networkInterfaces')], 'Primary')]",
                                  "deleteOption": "Delete"
                                }
                              }
                            }
                          ]
                        },
                        "diagnosticsProfile": {
                          "bootDiagnostics": {
                            "enabled": true,
                            "storageUri": "[format('https://{0}.blob.{1}', variables('SADiagName'), environment().suffixes.storage)]"
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-AppServer-nicDeployLoop{1}', variables('Deployment'), parameters('AppServer').Name))]",
                        "[resourceId('Microsoft.Compute/availabilitySets', format('{0}-as{1}', variables('Deployment'), variables('ASNAME')))]",
                        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-AppServer-diskLookup{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, contains(parameters('AppServer'), 'shutdown'))]",
                      "type": "Microsoft.DevTestLab/schedules",
                      "apiVersion": "2018-09-15",
                      "name": "[format('shutdown-computevm-{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "dailyRecurrence": {
                          "time": "[parameters('AppServer').shutdown.time]"
                        },
                        "notificationSettings": {
                          "status": "[if(and(contains(parameters('AppServer').shutdown, 'notification'), bool(parameters('AppServer').shutdown.notification)), 'Enabled', 'Disabled')]",
                          "emailRecipient": "[replace(replace(replace(string(parameters('Global').alertRecipients), '\",\"', ';'), '[\"', ''), '\"]', '')]",
                          "notificationLocale": "en",
                          "timeInMinutes": 30
                        },
                        "status": "[if(or(not(contains(parameters('AppServer').shutdown, 'enabled')), and(contains(parameters('AppServer').shutdown, 'enabled'), bool(parameters('AppServer').shutdown.enabled))), 'Enabled', 'Disabled')]",
                        "targetResourceId": "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]",
                        "taskType": "ComputeVmShutdownTask",
                        "timeZoneId": "[parameters('Global').shutdownSchedulerTimeZone]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.CertMgmt))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'KVAppServerExtensionForWindows')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.Azure.KeyVault.Edp",
                        "type": "KeyVaultForWindows",
                        "typeHandlerVersion": "0.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "secretsManagementSettings": {
                            "pollingIntervalInS": 3600,
                            "certificateStoreName": "MY",
                            "certificateStoreLocation": "LOCAL_MACHINE",
                            "observedCertificates": [
                              "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults/secrets', variables('HubKVName'), parameters('Global').CertName), '2021-06-01-preview').secretUri]"
                            ]
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(parameters('VM').match, bool(parameters('VM').Extensions.AADLogin)), and(contains(parameters('AppServer'), 'ExcludeAADLogin'), not(equals(parameters('AppServer').ExcludeAADLogin, 1))))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'AADLogin')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'Microsoft.Azure.ActiveDirectory', 'Microsoft.Azure.ActiveDirectory.LinuxSSH')]",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'AADLoginForWindows', 'AADLoginForLinux')]",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.AzureDefender))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'AzureDefenderForServers')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.Azure.AzureDefenderForServers",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'MDE.Windows', 'MDE.Linux')]",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "azureResourceId": "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]",
                          "defenderForServersWorkspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', variables('DeploymentURI')))]",
                          "forceReOnboarding": false
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.GuestConfig))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'AzureGuestConfig')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.GuestConfiguration",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'ConfigurationForWindows', 'ConfigurationForLinux')]",
                        "typeHandlerVersion": "1.2",
                        "autoUpgradeMinorVersion": true,
                        "settings": {}
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(parameters('VM').match, bool(parameters('VM').Extensions.AdminCenter)), and(contains(parameters('AppServer'), 'ExcludeAdminCenter'), not(equals(parameters('AppServer').ExcludeAdminCenter, 1))))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'AdminCenter')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "publisher": "Microsoft.AdminCenter",
                        "type": "AdminCenter",
                        "typeHandlerVersion": "0.0",
                        "settings": {
                          "port": "6516",
                          "cspFrameAncestors": [
                            "https://portal.azure.com",
                            "https://*.hosting.portal.azure.net",
                            "https://localhost:1340"
                          ],
                          "corsOrigins": [
                            "https://portal.azure.com",
                            "https://waconazure.com"
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(parameters('VM').match, bool(parameters('VM').Extensions.DomainJoin)), not(and(contains(parameters('AppServer'), 'ExcludeDomainJoin'), bool(parameters('AppServer').ExcludeDomainJoin))))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'joindomain')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.Compute",
                        "type": "JsonADDomainExtension",
                        "typeHandlerVersion": "1.3",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "Name": "[parameters('Global').ADDomainName]",
                          "OUPath": "[if(contains(parameters('AppServer'), 'OUPath'), parameters('AppServer').OUPath, '')]",
                          "User": "[format('{0}@{1}', parameters('Global').vmAdminUserName, parameters('Global').ADDomainName)]",
                          "Restart": "true",
                          "Options": 3
                        },
                        "protectedSettings": {
                          "Password": "[parameters('vmAdminPassword')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(parameters('VM').match, bool(parameters('VM').Extensions.DSC)), equals(parameters('AppServer').Role, 'PULL'))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'Microsoft.Powershell.DSC.Pull')]",
                      "location": "[resourceGroup().location]",
                      "tags": {
                        "displayName": "Powershell.DSC.Pull"
                      },
                      "properties": {
                        "publisher": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'Microsoft.Powershell', 'Microsoft.OSTCExtensions')]",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'DSC', 'DSCForLinux')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '2.77', '2.0')]",
                        "autoUpgradeMinorVersion": true,
                        "protectedSettings": {
                          "Items": {
                            "registrationKeyPrivate": "[listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubRGName')), 'Microsoft.Automation/automationAccounts', variables('AAName')), '2020-01-13-preview').keys[0].Value]"
                          }
                        },
                        "settings": {
                          "advancedOptions": {
                            "forcePullAndApply": true
                          },
                          "Properties": [
                            {
                              "Name": "RegistrationKey",
                              "Value": {
                                "UserName": "PLACEHOLDER_DONOTUSE",
                                "Password": "PrivateSettingsRef:registrationKeyPrivate"
                              },
                              "TypeName": "System.Management.Automation.PSCredential"
                            },
                            {
                              "Name": "RegistrationUrl",
                              "Value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubRGName')), 'Microsoft.Automation/automationAccounts', variables('AAName')), '2020-01-13-preview').RegistrationUrl]",
                              "TypeName": "System.String"
                            },
                            {
                              "Name": "NodeConfigurationName",
                              "Value": "[format('{0}.{1}_{2}_{3}_{4}{5}', if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], 'AppServers'), parameters('Global').OrgName, parameters('Global').Appname, parameters('AppServer').ROLE, parameters('Environment'), parameters('DeploymentID'))]",
                              "TypeName": "System.String"
                            },
                            {
                              "Name": "ConfigurationMode",
                              "Value": "[variables('ConfigurationMode')[parameters('Environment')]]",
                              "TypeName": "System.String"
                            },
                            {
                              "Name": "RebootNodeIfNeeded",
                              "Value": "[variables('RebootNodeLookup')[parameters('Environment')]]",
                              "TypeName": "System.Boolean"
                            },
                            {
                              "Name": "ConfigurationModeFrequencyMins",
                              "Value": "[variables('DSCConfigurationModeFrequencyMins')]",
                              "TypeName": "System.Int32"
                            },
                            {
                              "Name": "RefreshFrequencyMins",
                              "Value": 30,
                              "TypeName": "System.Int32"
                            },
                            {
                              "Name": "ActionAfterReboot",
                              "Value": "ContinueConfiguration",
                              "TypeName": "System.String"
                            },
                            {
                              "Name": "AllowModuleOverwrite",
                              "Value": true,
                              "TypeName": "System.Boolean"
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'joindomain')]",
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(and(parameters('VM').match, and(contains(parameters('VM').Extensions, 'DSC2'), bool(parameters('VM').Extensions.DSC2))), not(equals(parameters('AppServer').Role, 'PULL'))), or(or(equals(parameters('DeploymentName'), 'ConfigSQLAO'), equals(parameters('DeploymentName'), 'CreateADPDC')), equals(parameters('DeploymentName'), 'CreateADBDC')))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'Microsoft.Powershell.DSC2')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'Microsoft.Powershell', 'Microsoft.OSTCExtensions')]",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'DSC', 'DSCForLinux')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '2.24', '2.0')]",
                        "autoUpgradeMinorVersion": true,
                        "forceUpdateTag": "[parameters('deploymentTime')]",
                        "settings": {
                          "wmfVersion": "latest",
                          "configuration": {
                            "url": "[format('{0}/ext-DSC/DSC-{1}.zip', parameters('Global')._artifactsLocation, if(contains(parameters('AppServer'), 'DSConfig'), parameters('AppServer').DSConfig, if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], parameters('DeploymentName'))))]",
                            "script": "[format('DSC-{0}.ps1', if(contains(parameters('AppServer'), 'DSConfig'), parameters('AppServer').DSConfig, if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], parameters('DeploymentName'))))]",
                            "function": "[if(contains(parameters('AppServer'), 'DSConfig'), parameters('AppServer').DSConfig, if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], parameters('DeploymentName')))]"
                          },
                          "configurationArguments": {
                            "DomainName": "[parameters('Global').ADDomainName]"
                          }
                        },
                        "protectedSettings": {
                          "configurationArguments": {
                            "AdminCreds": {
                              "UserName": "[parameters('Global').vmAdminUserName]",
                              "Password": "[parameters('vmAdminPassword')]"
                            },
                            "SQLServiceCreds": {
                              "UserName": "sqladmin",
                              "Password": "[parameters('vmAdminPassword')]"
                            },
                            "witnessStorageKey": {
                              "UserName": "sakey",
                              "Password": "[parameters('saKey')]"
                            }
                          },
                          "configurationUrlSasToken": "[parameters('Global')._artifactsLocationSasToken]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'joindomain')]",
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(and(parameters('VM').match, bool(parameters('VM').Extensions.DSC)), not(equals(parameters('AppServer').Role, 'PULL'))), not(or(or(equals(parameters('DeploymentName'), 'ConfigSQLAO'), equals(parameters('DeploymentName'), 'CreateADPDC')), equals(parameters('DeploymentName'), 'CreateADBDC'))))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'Microsoft.Powershell.DSC')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'Microsoft.Powershell', 'Microsoft.OSTCExtensions')]",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'DSC', 'DSCForLinux')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '2.24', '2.0')]",
                        "autoUpgradeMinorVersion": true,
                        "forceUpdateTag": "[parameters('deploymentTime')]",
                        "settings": {
                          "wmfVersion": "latest",
                          "configuration": {
                            "url": "[format('{0}/ext-DSC/DSC-{1}.zip', parameters('Global')._artifactsLocation, if(contains(parameters('AppServer'), 'DSConfig'), parameters('AppServer').DSConfig, if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], parameters('DeploymentName'))))]",
                            "script": "[format('DSC-{0}.ps1', if(contains(parameters('AppServer'), 'DSConfig'), parameters('AppServer').DSConfig, if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], parameters('DeploymentName'))))]",
                            "function": "[if(contains(parameters('AppServer'), 'DSConfig'), parameters('AppServer').DSConfig, if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], parameters('DeploymentName')))]"
                          },
                          "configurationArguments": {
                            "DomainName": "[parameters('Global').ADDomainName]",
                            "Thumbprint": "[parameters('Global').CertThumbprint]",
                            "storageAccountId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('globalRGName')), 'Microsoft.Storage/storageAccounts', variables('globalSAName'))]",
                            "deployment": "[variables('Deployment')]",
                            "networkid": "[format('{0}.', variables('networkId'))]",
                            "appInfo": "[if(contains(parameters('AppServer'), 'AppInfo'), string(parameters('VM').AppInfo), '')]",
                            "DataDiskInfo": "[string(parameters('VM').DataDisk)]",
                            "clientIDLocal": "[if(equals(format('{0}{1}', parameters('Environment'), parameters('DeploymentID')), 'G0'), '', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('RGName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-uaiStorageAccountOperator', variables('Deployment'))), '2018-11-30').clientId)]",
                            "clientIDGlobal": "[if(equals(format('{0}{1}', parameters('Environment'), parameters('DeploymentID')), 'G0'), '', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('RGName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-uaiStorageAccountFileContributor', variables('Deployment'))), '2018-11-30').clientId)]"
                          },
                          "configurationData": {
                            "url": "[format('{0}/ext-CD/{1}-ConfigurationData.psd1', parameters('Global')._artifactsLocation, parameters('AppServer').Role)]"
                          }
                        },
                        "protectedSettings": {
                          "configurationArguments": {
                            "AdminCreds": {
                              "UserName": "[parameters('Global').vmAdminUserName]",
                              "Password": "[parameters('vmAdminPassword')]"
                            },
                            "sshPublic": {
                              "UserName": "ssh",
                              "Password": "[parameters('sshPublic')]"
                            },
                            "devOpsPat": {
                              "UserName": "pat",
                              "Password": "[parameters('devOpsPat')]"
                            }
                          },
                          "configurationUrlSasToken": "[parameters('Global')._artifactsLocationSasToken]",
                          "configurationDataUrlSasToken": "[parameters('Global')._artifactsLocationSasToken]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'joindomain')]",
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.IaaSDiagnostics))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2020-12-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'vmDiagnostics')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Diagnostics",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'IaaSDiagnostics', 'LinuxDiagnostic')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '1.9', '3.0')]",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "WadCfg": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), variables('WadCfg'), null())]",
                          "ladCfg": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), null(), variables('ladCfg'))]",
                          "StorageAccount": "[variables('saaccountiddiag')]",
                          "StorageType": "TableAndBlob"
                        },
                        "protectedSettings": {
                          "storageAccountName": "[variables('saaccountiddiag')]",
                          "storageAccountKey": "[listKeys(variables('saaccountiddiag'), '2016-01-01').keys[0].value]",
                          "storageAccountEndPoint": "[format('https://{0}/', environment().suffixes.storage)]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.DependencyAgent))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2020-12-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'DependencyAgent')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'DependencyAgentWindows', 'DependencyAgentLinux')]",
                        "typeHandlerVersion": "9.5",
                        "autoUpgradeMinorVersion": true
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.AzureMonitorAgent))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2020-12-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), format('{0}', if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'AzureMonitorWindowsAgent', 'AzureMonitorLinuxAgent')))]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "publisher": "Microsoft.Azure.Monitor",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'AzureMonitorWindowsAgent', 'AzureMonitorLinuxAgent')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '1.0', '1.5')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.MonitoringAgent))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2020-12-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'MonitoringAgent')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.EnterpriseCloud.Monitoring",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'MicrosoftMonitoringAgent', 'OmsAgentForLinux')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '1.0', '1.4')]",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "workspaceId": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', variables('DeploymentURI'))), '2021-06-01').customerId]"
                        },
                        "protectedSettings": {
                          "workspaceKey": "[listKeys(resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', variables('DeploymentURI'))), '2021-06-01').primarySharedKey]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.GuestHealthAgent))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2020-12-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), format('{0}', if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'GuestHealthWindowsAgent', 'GuestHealthLinuxAgent')))]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "publisher": "Microsoft.Azure.Monitor.VirtualMachines.GuestHealth",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'GuestHealthWindowsAgent', 'GuestHealthLinuxAgent')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '1.0', '1.0')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Insights/dataCollectionRuleAssociations",
                      "apiVersion": "2019-11-01-preview",
                      "scope": "[format('Microsoft.Compute/virtualMachines/{0}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]",
                      "name": "[format('{0}vmInsights', variables('DeploymentURI'))]",
                      "properties": {
                        "description": "Association of data collection rule for AppServer Insights Health.",
                        "dataCollectionRuleId": "[resourceId('Microsoft.Insights/dataCollectionRules', format('{0}vmInsights', variables('DeploymentURI')))]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.chefClient))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'chefClient')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Chef.Bootstrap.WindowsAzure",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'ChefClient', 'LinuxChefClient')]",
                        "typeHandlerVersion": "1210.12",
                        "settings": {
                          "bootstrap_options": {
                            "chef_server_url": "[parameters('Global').chef_server_url]",
                            "validation_client_name": "[parameters('Global').chef_validation_client_name]"
                          },
                          "runlist": "recipe[mycookbook::default]"
                        },
                        "protectedSettings": {
                          "validation_key": "[parameters('Global').chef_validation_key]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(parameters('VM').match, equals(parameters('AppServer').role, 'SQL')), bool(parameters('VM').Extensions.SqlIaasExtension))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'SqlIaasExtension')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "type": "SqlIaaSAgent",
                        "publisher": "Microsoft.SqlServer.Management",
                        "typeHandlerVersion": "1.2",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "AutoTelemetrySettings": {
                            "Region": "[resourceGroup().location]"
                          },
                          "KeyVaultCredentialSettings": {
                            "Enable": true,
                            "CredentialName": "[parameters('Global').sqlCredentialName]"
                          }
                        },
                        "protectedSettings": {
                          "PrivateKeyVaultCredentialSettings": {
                            "AzureKeyVaultUrl": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults', variables('HubKVName')), '2021-06-01-preview').vaultUri]",
                            "StorageUrl": "[reference(resourceId('Microsoft.Storage/storageAccounts', if(equals(parameters('AppServer').Role, 'SQL'), variables('saSQLBackupName'), variables('SADiagName'))), '2015-06-15').primaryEndpoints.blob]",
                            "StorageAccessKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', if(equals(parameters('AppServer').Role, 'SQL'), variables('saSQLBackupName'), variables('SADiagName'))), '2016-01-01').keys[0].value]",
                            "Password": "[parameters('vmAdminPassword')]"
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(parameters('VM').match, equals(parameters('AppServer').role, 'SQL')), bool(parameters('VM').Extensions.BackupWindowsWorkloadSQL))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'AzureBackupWindowsWorkload')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "locale": "en-us",
                          "AppServerType": "microsoft.compute/virtualmachines"
                        },
                        "publisher": "Microsoft.Azure.RecoveryServices.WorkloadBackup",
                        "type": "AzureBackupWindowsWorkload",
                        "typeHandlerVersion": "1.1"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.Antimalware))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'IaaSAntimalware')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Security",
                        "type": "IaaSAntimalware",
                        "typeHandlerVersion": "1.5",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "Monitoring": "ON",
                          "StorageAccountName": "[variables('SADiagName')]",
                          "AntimalwareEnabled": true,
                          "RealtimeProtectionEnabled": "true",
                          "ScheduledScanSettings": {
                            "isEnabled": "true",
                            "day": "1",
                            "time": "720",
                            "scanType": "Full"
                          },
                          "Exclusions": {
                            "Extensions": "",
                            "Paths": "",
                            "Processes": ""
                          }
                        },
                        "protectedSettings": null
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-AppServer-publicIPDeploy{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[variables('Deployment')]"
                          },
                          "DeploymentURI": {
                            "value": "[variables('DeploymentURI')]"
                          },
                          "NICs": {
                            "value": "[parameters('AppServer').NICs]"
                          },
                          "VM": {
                            "value": "[parameters('AppServer')]"
                          },
                          "PIPprefix": {
                            "value": "AppServer"
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "18109364379899578760"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "DeploymentURI": {
                              "type": "string"
                            },
                            "PIPprefix": {
                              "type": "string"
                            },
                            "NICs": {
                              "type": "array"
                            },
                            "VM": {
                              "type": "object"
                            },
                            "Global": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "condition": "[and(contains(parameters('NICs')[copyIndex()], 'PublicIP'), not(equals(parameters('NICs')[copyIndex()].PublicIP, null())))]",
                              "copy": {
                                "name": "PublicIP",
                                "count": "[length(parameters('NICs'))]"
                              },
                              "type": "Microsoft.Network/publicIPAddresses",
                              "apiVersion": "2021-02-01",
                              "name": "[format('{0}-{1}{2}-publicip{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1))]",
                              "location": "[resourceGroup().location]",
                              "sku": {
                                "name": "[if(contains(parameters('VM'), 'Zone'), 'Standard', 'Basic')]"
                              },
                              "properties": {
                                "publicIPAllocationMethod": "[parameters('NICs')[copyIndex()].PublicIP]",
                                "dnsSettings": {
                                  "domainNameLabel": "[toLower(format('{0}-{1}{2}-{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1)))]"
                                }
                              }
                            },
                            {
                              "condition": "[and(contains(parameters('NICs')[copyIndex()], 'PublicIP'), not(equals(parameters('NICs')[copyIndex()].PublicIP, null())))]",
                              "copy": {
                                "name": "PublicIPDiag",
                                "count": "[length(parameters('NICs'))]"
                              },
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2017-05-01-preview",
                              "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', format('{0}-{1}{2}-publicip{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1)))]",
                              "name": "service",
                              "properties": {
                                "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                                "logs": [
                                  {
                                    "category": "DDoSProtectionNotifications",
                                    "enabled": true
                                  }
                                ],
                                "metrics": [
                                  {
                                    "timeGrain": "PT5M",
                                    "enabled": true,
                                    "retentionPolicy": {
                                      "enabled": false,
                                      "days": 0
                                    }
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/publicIPAddresses', format('{0}-{1}{2}-publicip{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1)))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "PIPID": {
                              "type": "array",
                              "copy": {
                                "count": "[length(parameters('NICs'))]",
                                "input": "[if(and(contains(parameters('NICs')[copyIndex()], 'PublicIP'), not(equals(parameters('NICs')[copyIndex()].PublicIP, null()))), resourceId('Microsoft.Network/publicIPAddresses', format('{0}-{1}{2}-publicip{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1))), '')]"
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-AppServer-JITNSG-{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[variables('Deployment')]"
                          },
                          "VM": {
                            "value": "[parameters('AppServer')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "16183288891198554910"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "VM": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/networkSecurityGroups",
                              "apiVersion": "2021-05-01",
                              "name": "[format('{0}-vm{1}-JITNSG', parameters('Deployment'), parameters('VM').Name)]",
                              "location": "[resourceGroup().location]"
                            }
                          ]
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-AppServer-nicDeployLoop{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[variables('Deployment')]"
                          },
                          "DeploymentURI": {
                            "value": "[variables('DeploymentURI')]"
                          },
                          "DeploymentID": {
                            "value": "[parameters('DeploymentID')]"
                          },
                          "NICs": {
                            "value": "[parameters('AppServer').NICs]"
                          },
                          "VM": {
                            "value": "[parameters('AppServer')]"
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "15680478958950286894"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "DeploymentURI": {
                              "type": "string"
                            },
                            "DeploymentID": {
                              "type": "string"
                            },
                            "NICs": {
                              "type": "array"
                            },
                            "VM": {
                              "type": "object"
                            },
                            "Global": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "NIC",
                                "count": "[length(parameters('NICs'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('dp{0}-nicDeploy{1}{2}', parameters('Deployment'), parameters('VM').Name, add(copyIndex(), 1))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "Deployment": {
                                    "value": "[parameters('Deployment')]"
                                  },
                                  "DeploymentURI": {
                                    "value": "[parameters('DeploymentURI')]"
                                  },
                                  "DeploymentID": {
                                    "value": "[parameters('DeploymentID')]"
                                  },
                                  "NIC": {
                                    "value": "[parameters('NICs')[copyIndex()]]"
                                  },
                                  "NICNumber": {
                                    "value": "[string(add(copyIndex(), 1))]"
                                  },
                                  "VM": {
                                    "value": "[parameters('VM')]"
                                  },
                                  "Global": {
                                    "value": "[parameters('Global')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.4.1318.3566",
                                      "templateHash": "13928916846586964615"
                                    }
                                  },
                                  "parameters": {
                                    "Deployment": {
                                      "type": "string"
                                    },
                                    "DeploymentURI": {
                                      "type": "string"
                                    },
                                    "DeploymentID": {
                                      "type": "string"
                                    },
                                    "NIC": {
                                      "type": "object"
                                    },
                                    "NICNumber": {
                                      "type": "string"
                                    },
                                    "VM": {
                                      "type": "object"
                                    },
                                    "Global": {
                                      "type": "object"
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "loadBalancerInboundNatRules",
                                        "count": "[length(variables('rules'))]",
                                        "input": {
                                          "id": "[format('{0}/providers/Microsoft.Network/loadBalancers/{1}-lb{2}/inboundNatRules/{3}', resourceGroup().id, parameters('Deployment'), if(contains(parameters('NIC'), 'PLB'), parameters('NIC').PLB, 'none'), if(contains(parameters('NIC'), 'NATRules'), variables('rules')[copyIndex('loadBalancerInboundNatRules')], 'none'))]"
                                        }
                                      }
                                    ],
                                    "networkId": "[format('{0}{1}', parameters('Global').networkid[0], string(sub(parameters('Global').networkid[1], mul(2, int(parameters('DeploymentID'))))))]",
                                    "networkIdUpper": "[format('{0}{1}', parameters('Global').networkid[0], string(add(1, sub(parameters('Global').networkid[1], mul(2, int(parameters('DeploymentID')))))))]",
                                    "VNetID": "[resourceId('Microsoft.Network/VirtualNetworks', format('{0}-vn', parameters('Deployment')))]",
                                    "subnetID": "[format('{0}/subnets/sn{1}', variables('VNetID'), parameters('NIC').Subnet)]",
                                    "acceleratedNetworking": "[if(contains(parameters('NIC'), 'FastNic'), true(), false())]",
                                    "NICSuffix": "[if(equals(parameters('NICNumber'), '1'), '', parameters('NICNumber'))]",
                                    "IPAllocation": "[if(contains(parameters('NIC'), 'StaticIP'), 'Static', 'Dynamic')]",
                                    "privateIPAddress": "[if(contains(parameters('NIC'), 'StaticIP'), format('{0}.{1}', if(equals(parameters('NIC').Subnet, 'MT02'), variables('networkIdUpper'), variables('networkId')), parameters('NIC').StaticIP), null())]",
                                    "publicIPAddress": "[if(not(contains(parameters('NIC'), 'PublicIP')), null(), createObject('id', resourceId('Microsoft.Network/publicIPAddresses', format('{0}-vm{1}-publicip{2}', parameters('Deployment'), parameters('VM').Name, parameters('NICNumber')))))]",
                                    "JITNSG": {
                                      "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-vm{1}-JITNSG', parameters('Deployment'), parameters('VM').Name))]"
                                    },
                                    "rules": "[if(contains(parameters('NIC'), 'NatRules'), parameters('NIC').NatRules, createArray())]"
                                  },
                                  "resources": [
                                    {
                                      "condition": "[not(or(or(or(contains(parameters('NIC'), 'LB'), contains(parameters('NIC'), 'PLB')), contains(parameters('NIC'), 'SLB')), contains(parameters('NIC'), 'ISLB')))]",
                                      "type": "Microsoft.Network/networkInterfaces",
                                      "apiVersion": "2021-02-01",
                                      "name": "[format('{0}-nic{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name)]",
                                      "location": "[resourceGroup().location]",
                                      "properties": {
                                        "enableAcceleratedNetworking": "[variables('acceleratedNetworking')]",
                                        "ipConfigurations": [
                                          {
                                            "name": "ipconfig1",
                                            "properties": {
                                              "publicIPAddress": "[if(contains(parameters('NIC'), 'PublicIP'), variables('publicIPAddress'), null())]",
                                              "privateIPAllocationMethod": "[variables('IPAllocation')]",
                                              "privateIPAddress": "[variables('privateIPAddress')]",
                                              "subnet": {
                                                "id": "[variables('subnetID')]"
                                              }
                                            }
                                          }
                                        ],
                                        "networkSecurityGroup": "[variables('JITNSG')]"
                                      }
                                    },
                                    {
                                      "condition": "[not(or(contains(parameters('NIC'), 'LB'), or(contains(parameters('NIC'), 'PLB'), or(contains(parameters('NIC'), 'SLB'), contains(parameters('NIC'), 'ISLB')))))]",
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', format('{0}-nic{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]",
                                      "name": "service",
                                      "properties": {
                                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                                        "metrics": [
                                          {
                                            "timeGrain": "PT5M",
                                            "enabled": true,
                                            "retentionPolicy": {
                                              "enabled": false,
                                              "days": 0
                                            }
                                          }
                                        ]
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nic{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]"
                                      ]
                                    },
                                    {
                                      "condition": "[contains(parameters('NIC'), 'PLB')]",
                                      "type": "Microsoft.Network/networkInterfaces",
                                      "apiVersion": "2021-02-01",
                                      "name": "[format('{0}-nicplb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name)]",
                                      "location": "[resourceGroup().location]",
                                      "properties": {
                                        "enableAcceleratedNetworking": "[variables('acceleratedNetworking')]",
                                        "ipConfigurations": [
                                          {
                                            "name": "ipconfig1",
                                            "properties": {
                                              "loadBalancerBackendAddressPools": [
                                                {
                                                  "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', format('{0}-lb{1}', parameters('Deployment'), parameters('NIC').PLB), parameters('NIC').PLB)]"
                                                }
                                              ],
                                              "loadBalancerInboundNatRules": "[if(contains(parameters('NIC'), 'NATRules'), variables('loadBalancerInboundNatRules'), null())]",
                                              "privateIPAllocationMethod": "[variables('IPAllocation')]",
                                              "privateIPAddress": "[variables('privateIPAddress')]",
                                              "subnet": {
                                                "id": "[variables('subnetID')]"
                                              }
                                            }
                                          }
                                        ],
                                        "networkSecurityGroup": "[variables('JITNSG')]"
                                      }
                                    },
                                    {
                                      "condition": "[contains(parameters('NIC'), 'PLB')]",
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', format('{0}-nicplb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]",
                                      "name": "service",
                                      "properties": {
                                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                                        "metrics": [
                                          {
                                            "timeGrain": "PT5M",
                                            "enabled": true,
                                            "retentionPolicy": {
                                              "enabled": false,
                                              "days": 0
                                            }
                                          }
                                        ]
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nicplb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]"
                                      ]
                                    },
                                    {
                                      "condition": "[contains(parameters('NIC'), 'LB')]",
                                      "type": "Microsoft.Network/networkInterfaces",
                                      "apiVersion": "2021-02-01",
                                      "name": "[format('{0}-niclb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name)]",
                                      "location": "[resourceGroup().location]",
                                      "properties": {
                                        "enableAcceleratedNetworking": "[variables('acceleratedNetworking')]",
                                        "ipConfigurations": [
                                          {
                                            "name": "ipconfig1",
                                            "properties": {
                                              "loadBalancerBackendAddressPools": [
                                                {
                                                  "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', format('{0}-ilb{1}', parameters('Deployment'), parameters('NIC').LB), parameters('NIC').LB)]"
                                                }
                                              ],
                                              "privateIPAllocationMethod": "[variables('IPAllocation')]",
                                              "privateIPAddress": "[variables('privateIPAddress')]",
                                              "subnet": {
                                                "id": "[variables('subnetID')]"
                                              }
                                            }
                                          }
                                        ],
                                        "networkSecurityGroup": "[variables('JITNSG')]"
                                      }
                                    },
                                    {
                                      "condition": "[contains(parameters('NIC'), 'LB')]",
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', format('{0}-niclb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]",
                                      "name": "service",
                                      "properties": {
                                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                                        "metrics": [
                                          {
                                            "timeGrain": "PT5M",
                                            "enabled": true,
                                            "retentionPolicy": {
                                              "enabled": false,
                                              "days": 0
                                            }
                                          }
                                        ]
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-niclb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]"
                                      ]
                                    },
                                    {
                                      "condition": "[contains(parameters('NIC'), 'SLB')]",
                                      "type": "Microsoft.Network/networkInterfaces",
                                      "apiVersion": "2021-02-01",
                                      "name": "[format('{0}-nicslb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name)]",
                                      "location": "[resourceGroup().location]",
                                      "properties": {
                                        "enableAcceleratedNetworking": "[variables('acceleratedNetworking')]",
                                        "ipConfigurations": [
                                          {
                                            "name": "ipconfig1",
                                            "properties": {
                                              "loadBalancerBackendAddressPools": [
                                                {
                                                  "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', format('{0}-lb{1}', parameters('Deployment'), parameters('NIC').SLB), parameters('NIC').SLB)]"
                                                }
                                              ],
                                              "privateIPAllocationMethod": "[variables('IPAllocation')]",
                                              "privateIPAddress": "[variables('privateIPAddress')]",
                                              "subnet": {
                                                "id": "[variables('subnetID')]"
                                              }
                                            }
                                          }
                                        ],
                                        "networkSecurityGroup": "[variables('JITNSG')]"
                                      }
                                    },
                                    {
                                      "condition": "[contains(parameters('NIC'), 'SLB')]",
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', format('{0}-nicslb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]",
                                      "name": "service",
                                      "properties": {
                                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                                        "metrics": [
                                          {
                                            "timeGrain": "PT5M",
                                            "enabled": true,
                                            "retentionPolicy": {
                                              "enabled": false,
                                              "days": 0
                                            }
                                          }
                                        ]
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nicslb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]"
                                      ]
                                    }
                                  ],
                                  "outputs": {
                                    "foo7": {
                                      "type": "array",
                                      "value": "[variables('loadBalancerInboundNatRules')]"
                                    },
                                    "foo": {
                                      "type": "object",
                                      "value": "[parameters('NIC')]"
                                    }
                                  }
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-AppServer-publicIPDeploy{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-AppServer-diskLookup{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[variables('Deployment')]"
                          },
                          "DeploymentID": {
                            "value": "[parameters('DeploymentID')]"
                          },
                          "Name": {
                            "value": "[parameters('AppServer').Name]"
                          },
                          "SOFS": {
                            "value": "[if(contains(variables('DataDiskInfo')[parameters('AppServer').DDRole], 'SOFS'), variables('DataDiskInfo')[parameters('AppServer').DDRole].SOFS, json('{\"1\":1}'))]"
                          },
                          "DATA": {
                            "value": "[if(contains(variables('DataDiskInfo')[parameters('AppServer').DDRole], 'DATA'), variables('DataDiskInfo')[parameters('AppServer').DDRole].DATA, json('{\"1\":1}'))]"
                          },
                          "LOGS": {
                            "value": "[if(contains(variables('DataDiskInfo')[parameters('AppServer').DDRole], 'LOGS'), variables('DataDiskInfo')[parameters('AppServer').DDRole].LOGS, json('{\"1\":1}'))]"
                          },
                          "TEMPDB": {
                            "value": "[if(contains(variables('DataDiskInfo')[parameters('AppServer').DDRole], 'TEMPDB'), variables('DataDiskInfo')[parameters('AppServer').DDRole].TEMPDB, json('{\"1\":1}'))]"
                          },
                          "BACKUP": {
                            "value": "[if(contains(variables('DataDiskInfo')[parameters('AppServer').DDRole], 'BACKUP'), variables('DataDiskInfo')[parameters('AppServer').DDRole].BACKUP, json('{\"1\":1}'))]"
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "13688646372196984293"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "DeploymentID": {
                              "type": "string"
                            },
                            "Name": {
                              "type": "string"
                            },
                            "DATA": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "DATASS": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "SOFS": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "LOGS": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "TEMPDB": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "BACKUP": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "DISKS": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "Global": {
                              "type": "object"
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "Data_var",
                                "count": "[length(range(0, if(contains(parameters('DATA'), '1'), 1, length(parameters('DATA').LUNS))))]",
                                "input": {
                                  "name": "[if(contains(parameters('DATA'), '1'), 1, format('{0}-{1}-DATA-DATA{2}', parameters('Deployment'), parameters('Name'), padLeft(parameters('DATA').LUNS[range(0, if(contains(parameters('DATA'), '1'), 1, length(parameters('DATA').LUNS)))[copyIndex('Data_var')]][0], 2, '0')))]",
                                  "lun": "[if(contains(parameters('DATA'), '1'), 1, int(parameters('DATA').LUNS[range(0, if(contains(parameters('DATA'), '1'), 1, length(parameters('DATA').LUNS)))[copyIndex('Data_var')]][0]))]",
                                  "caching": "[if(contains(parameters('DATA'), '1'), 1, parameters('DATA').caching)]",
                                  "diskSizeGB": "[if(contains(parameters('DATA'), '1'), 1, int(parameters('DATA').LUNS[range(0, if(contains(parameters('DATA'), '1'), 1, length(parameters('DATA').LUNS)))[copyIndex('Data_var')]][1]))]",
                                  "createOption": "[if(contains(parameters('DATA'), '1'), 1, if(equals(length(parameters('DATA').LUNS[range(0, if(contains(parameters('DATA'), '1'), 1, length(parameters('DATA').LUNS)))[copyIndex('Data_var')]]), 3), parameters('DATA').LUNS[range(0, if(contains(parameters('DATA'), '1'), 1, length(parameters('DATA').LUNS)))[copyIndex('Data_var')]][2], 'Empty'))]",
                                  "managedDisk": "[if(contains(parameters('DATA'), '1'), 1, if(contains(parameters('DATA'), 'saType'), json(format('{{\"storageAccountType\":\"{0}\"}}', parameters('DATA').saType)), json('null')))]"
                                }
                              },
                              {
                                "name": "Datass_var",
                                "count": "[length(range(0, if(contains(parameters('DATASS'), '1'), 1, length(parameters('DATASS').LUNS))))]",
                                "input": {
                                  "lun": "[if(contains(parameters('DATASS'), '1'), 1, int(parameters('DATASS').LUNS[range(0, if(contains(parameters('DATASS'), '1'), 1, length(parameters('DATASS').LUNS)))[copyIndex('Datass_var')]][0]))]",
                                  "caching": "[if(contains(parameters('DATASS'), '1'), 1, parameters('DATASS').caching)]",
                                  "diskSizeGB": "[if(contains(parameters('DATASS'), '1'), 1, int(parameters('DATASS').LUNS[range(0, if(contains(parameters('DATASS'), '1'), 1, length(parameters('DATASS').LUNS)))[copyIndex('Datass_var')]][1]))]",
                                  "createOption": "[if(contains(parameters('DATASS'), '1'), 1, if(equals(length(parameters('DATASS').LUNS[range(0, if(contains(parameters('DATASS'), '1'), 1, length(parameters('DATASS').LUNS)))[copyIndex('Datass_var')]]), 3), parameters('DATASS').LUNS[range(0, if(contains(parameters('DATASS'), '1'), 1, length(parameters('DATASS').LUNS)))[copyIndex('Datass_var')]][2], 'Empty'))]",
                                  "managedDisk": "[if(contains(parameters('DATASS'), '1'), 1, if(contains(parameters('DATASS'), 'saType'), json(format('{{\"storageAccountType\":\"{0}\"}}', parameters('DATASS').saType)), json('null')))]"
                                }
                              },
                              {
                                "name": "SOFS_var",
                                "count": "[length(range(0, if(contains(parameters('SOFS'), '1'), 1, length(parameters('SOFS').LUNS))))]",
                                "input": {
                                  "name": "[if(contains(parameters('SOFS'), '1'), 1, format('{0}-{1}-DATA-SOFS{2}', parameters('Deployment'), parameters('Name'), padLeft(parameters('SOFS').LUNS[range(0, if(contains(parameters('SOFS'), '1'), 1, length(parameters('SOFS').LUNS)))[copyIndex('SOFS_var')]][0], 2, '0')))]",
                                  "lun": "[if(contains(parameters('SOFS'), '1'), 1, int(parameters('SOFS').LUNS[range(0, if(contains(parameters('SOFS'), '1'), 1, length(parameters('SOFS').LUNS)))[copyIndex('SOFS_var')]][0]))]",
                                  "caching": "[if(contains(parameters('SOFS'), '1'), 1, parameters('SOFS').caching)]",
                                  "diskSizeGB": "[if(contains(parameters('SOFS'), '1'), 1, int(parameters('SOFS').LUNS[range(0, if(contains(parameters('SOFS'), '1'), 1, length(parameters('SOFS').LUNS)))[copyIndex('SOFS_var')]][1]))]",
                                  "createOption": "[if(contains(parameters('SOFS'), '1'), 1, if(equals(length(parameters('SOFS').LUNS[range(0, if(contains(parameters('SOFS'), '1'), 1, length(parameters('SOFS').LUNS)))[copyIndex('SOFS_var')]]), 3), parameters('SOFS').LUNS[range(0, if(contains(parameters('SOFS'), '1'), 1, length(parameters('SOFS').LUNS)))[copyIndex('SOFS_var')]][2], 'Empty'))]",
                                  "managedDisk": "[if(contains(parameters('SOFS'), '1'), 1, if(contains(parameters('SOFS'), 'saType'), json(format('{{\"storageAccountType\":\"{0}\"}}', parameters('SOFS').saType)), json('null')))]"
                                }
                              },
                              {
                                "name": "LOGS_var",
                                "count": "[length(range(0, if(contains(parameters('LOGS'), '1'), 1, length(parameters('LOGS').LUNS))))]",
                                "input": {
                                  "name": "[if(contains(parameters('LOGS'), '1'), 1, format('{0}-{1}-DATA-LOGS{2}', parameters('Deployment'), parameters('Name'), padLeft(parameters('LOGS').LUNS[range(0, if(contains(parameters('LOGS'), '1'), 1, length(parameters('LOGS').LUNS)))[copyIndex('LOGS_var')]][0], 2, '0')))]",
                                  "lun": "[if(contains(parameters('LOGS'), '1'), 1, int(parameters('LOGS').LUNS[range(0, if(contains(parameters('LOGS'), '1'), 1, length(parameters('LOGS').LUNS)))[copyIndex('LOGS_var')]][0]))]",
                                  "caching": "[if(contains(parameters('LOGS'), '1'), 1, parameters('LOGS').caching)]",
                                  "diskSizeGB": "[if(contains(parameters('LOGS'), '1'), 1, int(parameters('LOGS').LUNS[range(0, if(contains(parameters('LOGS'), '1'), 1, length(parameters('LOGS').LUNS)))[copyIndex('LOGS_var')]][1]))]",
                                  "createOption": "[if(contains(parameters('LOGS'), '1'), 1, if(equals(length(parameters('LOGS').LUNS[range(0, if(contains(parameters('LOGS'), '1'), 1, length(parameters('LOGS').LUNS)))[copyIndex('LOGS_var')]]), 3), parameters('LOGS').LUNS[range(0, if(contains(parameters('LOGS'), '1'), 1, length(parameters('LOGS').LUNS)))[copyIndex('LOGS_var')]][2], 'Empty'))]",
                                  "managedDisk": "[if(contains(parameters('LOGS'), '1'), 1, if(contains(parameters('LOGS'), 'saType'), json(format('{{\"storageAccountType\":\"{0}\"}}', parameters('LOGS').saType)), json('null')))]"
                                }
                              },
                              {
                                "name": "TEMPDB_var",
                                "count": "[length(range(0, if(contains(parameters('TEMPDB'), '1'), 1, length(parameters('TEMPDB').LUNS))))]",
                                "input": {
                                  "name": "[if(contains(parameters('TEMPDB'), '1'), 1, format('{0}-{1}-DATA-TEMPDB{2}', parameters('Deployment'), parameters('Name'), padLeft(parameters('TEMPDB').LUNS[range(0, if(contains(parameters('TEMPDB'), '1'), 1, length(parameters('TEMPDB').LUNS)))[copyIndex('TEMPDB_var')]][0], 2, '0')))]",
                                  "lun": "[if(contains(parameters('TEMPDB'), '1'), 1, int(parameters('TEMPDB').LUNS[range(0, if(contains(parameters('TEMPDB'), '1'), 1, length(parameters('TEMPDB').LUNS)))[copyIndex('TEMPDB_var')]][0]))]",
                                  "caching": "[if(contains(parameters('TEMPDB'), '1'), 1, parameters('TEMPDB').caching)]",
                                  "diskSizeGB": "[if(contains(parameters('TEMPDB'), '1'), 1, int(parameters('TEMPDB').LUNS[range(0, if(contains(parameters('TEMPDB'), '1'), 1, length(parameters('TEMPDB').LUNS)))[copyIndex('TEMPDB_var')]][1]))]",
                                  "createOption": "[if(contains(parameters('TEMPDB'), '1'), 1, if(equals(length(parameters('TEMPDB').LUNS[range(0, if(contains(parameters('TEMPDB'), '1'), 1, length(parameters('TEMPDB').LUNS)))[copyIndex('TEMPDB_var')]]), 3), parameters('TEMPDB').LUNS[range(0, if(contains(parameters('TEMPDB'), '1'), 1, length(parameters('TEMPDB').LUNS)))[copyIndex('TEMPDB_var')]][2], 'Empty'))]",
                                  "managedDisk": "[if(contains(parameters('TEMPDB'), '1'), 1, if(contains(parameters('TEMPDB'), 'saType'), json(format('{{\"storageAccountType\":\"{0}\"}}', parameters('TEMPDB').saType)), json('null')))]"
                                }
                              },
                              {
                                "name": "BACKUP_var",
                                "count": "[length(range(0, if(contains(parameters('BACKUP'), '1'), 1, length(parameters('BACKUP').LUNS))))]",
                                "input": {
                                  "name": "[if(contains(parameters('BACKUP'), '1'), 1, format('{0}-{1}-DATA-BACKUP{2}', parameters('Deployment'), parameters('Name'), padLeft(parameters('BACKUP').LUNS[range(0, if(contains(parameters('BACKUP'), '1'), 1, length(parameters('BACKUP').LUNS)))[copyIndex('BACKUP_var')]][0], 2, '0')))]",
                                  "lun": "[if(contains(parameters('BACKUP'), '1'), 1, int(parameters('BACKUP').LUNS[range(0, if(contains(parameters('BACKUP'), '1'), 1, length(parameters('BACKUP').LUNS)))[copyIndex('BACKUP_var')]][0]))]",
                                  "caching": "[if(contains(parameters('BACKUP'), '1'), 1, parameters('BACKUP').caching)]",
                                  "diskSizeGB": "[if(contains(parameters('BACKUP'), '1'), 1, int(parameters('BACKUP').LUNS[range(0, if(contains(parameters('BACKUP'), '1'), 1, length(parameters('BACKUP').LUNS)))[copyIndex('BACKUP_var')]][1]))]",
                                  "createOption": "[if(contains(parameters('BACKUP'), '1'), 1, if(equals(length(parameters('BACKUP').LUNS[range(0, if(contains(parameters('BACKUP'), '1'), 1, length(parameters('BACKUP').LUNS)))[copyIndex('BACKUP_var')]]), 3), parameters('BACKUP').LUNS[range(0, if(contains(parameters('BACKUP'), '1'), 1, length(parameters('BACKUP').LUNS)))[copyIndex('BACKUP_var')]][2], 'Empty'))]",
                                  "managedDisk": "[if(contains(parameters('BACKUP'), '1'), 1, if(contains(parameters('BACKUP'), 'saType'), json(format('{{\"storageAccountType\":\"{0}\"}}', parameters('BACKUP').saType)), json('null')))]"
                                }
                              }
                            ]
                          },
                          "resources": [],
                          "outputs": {
                            "SOFS": {
                              "type": "array",
                              "value": "[if(contains(parameters('SOFS'), '1'), array('no SOFS disks'), variables('SOFS_var'))]"
                            },
                            "DATA": {
                              "type": "array",
                              "value": "[if(contains(parameters('DATA'), '1'), array('no DATA disks'), variables('Data_var'))]"
                            },
                            "DATASS": {
                              "type": "array",
                              "value": "[if(contains(parameters('DATASS'), '1'), array('no DATA disks'), variables('Datass_var'))]"
                            },
                            "LOGS": {
                              "type": "array",
                              "value": "[if(contains(parameters('LOGS'), '1'), array('no LOGS disks'), variables('LOGS_var'))]"
                            },
                            "TEMPDB": {
                              "type": "array",
                              "value": "[if(contains(parameters('TEMPDB'), '1'), array('no TEMPDB disks'), variables('TEMPDB_var'))]"
                            },
                            "BACKUP": {
                              "type": "array",
                              "value": "[if(contains(parameters('BACKUP'), '1'), array('no BACKUP disks'), variables('BACKUP_var'))]"
                            },
                            "DATADisks": {
                              "type": "array",
                              "value": "[union(if(contains(parameters('SOFS'), '1'), createArray(), variables('SOFS_var')), if(contains(parameters('DATA'), '1'), createArray(), variables('Data_var')), if(contains(parameters('DATASS'), '1'), createArray(), variables('Datass_var')), if(contains(parameters('LOGS'), '1'), createArray(), variables('LOGS_var')), if(contains(parameters('TEMPDB'), '1'), createArray(), variables('TEMPDB_var')), if(contains(parameters('BACKUP'), '1'), createArray(), variables('BACKUP_var')))]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "condition": "[bool(parameters('AppServer').DeployJIT)]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-AppServer-JIT-{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[variables('Deployment')]"
                          },
                          "VM": {
                            "value": "[parameters('AppServer')]"
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          },
                          "DeploymentID": {
                            "value": "[parameters('DeploymentID')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "17671050488544287828"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "VM": {
                              "type": "object"
                            },
                            "Global": {
                              "type": "object"
                            },
                            "DeploymentID": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "ports",
                                "count": "[length(variables('portList'))]",
                                "input": {
                                  "number": "[variables('portList')[copyIndex('ports')]]",
                                  "protocol": "TCP",
                                  "allowedSourceAddressPrefixes": "[union(parameters('Global').IPAddressforRemoteAccess, variables('addressPrefixes'))]",
                                  "maxRequestAccessDuration": "PT3H"
                                }
                              }
                            ],
                            "portList": [
                              3389,
                              22,
                              5985,
                              5986
                            ],
                            "networkId": "[format('{0}{1}', parameters('Global').networkid[0], string(sub(parameters('Global').networkid[1], mul(2, int(parameters('DeploymentID'))))))]",
                            "addressPrefixes": [
                              "[format('{0}.0/23', variables('networkId'))]"
                            ]
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Security/locations/jitNetworkAccessPolicies",
                              "apiVersion": "2020-01-01",
                              "name": "[format('{0}/JIT_{1}', resourceGroup().location, format('{0}-vm{1}', parameters('Deployment'), parameters('VM').name))]",
                              "kind": "Basic",
                              "properties": {
                                "virtualMachines": [
                                  {
                                    "id": "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', parameters('Deployment'), parameters('VM').name))]",
                                    "ports": "[variables('ports')]"
                                  }
                                ],
                                "appendMode": true
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "Disks": {
                      "type": "array",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('dp{0}-AppServer-diskLookup{1}', variables('Deployment'), parameters('AppServer').Name))).outputs.DATADisks.value]"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-OMS', variables('Deployment')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-SA', variables('Deployment')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-VNETDNSDC1', variables('Deployment')))]"
      ]
    },
    {
      "condition": "[or(bool(parameters('Stage').ADSecondary), and(contains(parameters('Stage'), 'CreateADBDC'), bool(parameters('Stage').CreateADBDC)))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('dp{0}-VNETDNSDC2', variables('Deployment'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "Deployment": {
            "value": "[variables('Deployment')]"
          },
          "DeploymentID": {
            "value": "[parameters('DeploymentID')]"
          },
          "DeploymentInfo": {
            "value": "[parameters('DeploymentInfo')]"
          },
          "Environment": {
            "value": "[parameters('Environment')]"
          },
          "Prefix": {
            "value": "[parameters('Prefix')]"
          },
          "DNSServers": {
            "value": [
              "[variables('DNSServers')[0]]",
              "[variables('DNSServers')[1]]"
            ]
          },
          "Global": {
            "value": "[parameters('Global')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "3160939652284819424"
            }
          },
          "parameters": {
            "Deployment": {
              "type": "string"
            },
            "DeploymentID": {
              "type": "string"
            },
            "DeploymentInfo": {
              "type": "object"
            },
            "DNSServers": {
              "type": "array"
            },
            "Global": {
              "type": "object"
            },
            "Prefix": {
              "type": "string"
            },
            "Environment": {
              "type": "string"
            }
          },
          "variables": {
            "HubRGJ": "[json(parameters('Global').hubRG)]",
            "gh": {
              "hubRGPrefix": "[if(contains(variables('HubRGJ'), 'Prefix'), variables('HubRGJ').Prefix, parameters('Prefix'))]",
              "hubRGOrgName": "[if(contains(variables('HubRGJ'), 'OrgName'), variables('HubRGJ').OrgName, parameters('Global').OrgName)]",
              "hubRGAppName": "[if(contains(variables('HubRGJ'), 'AppName'), variables('HubRGJ').AppName, parameters('Global').AppName)]",
              "hubRGRGName": "[if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID'))))]"
            },
            "HubRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').hubRGPrefix, variables('gh').hubRGOrgName, variables('gh').hubRGAppName, variables('gh').hubRGRGName)]",
            "HubVNName": "[format('{0}-{1}-{2}-{3}-vn', variables('gh').hubRGPrefix, variables('gh').hubRGOrgName, variables('gh').hubRGAppName, variables('gh').hubRGRGName)]",
            "networkId": "[format('{0}{1}', parameters('Global').networkid[0], string(sub(parameters('Global').networkid[1], mul(2, int(parameters('DeploymentID'))))))]",
            "networkIdUpper": "[format('{0}{1}', parameters('Global').networkid[0], string(add(1, sub(parameters('Global').networkid[1], mul(2, int(parameters('DeploymentID')))))))]",
            "addressPrefixes": [
              "[format('{0}.0/23', variables('networkId'))]"
            ],
            "SubnetInfo": "[if(contains(parameters('DeploymentInfo'), 'SubnetInfo'), parameters('DeploymentInfo').SubnetInfo, createArray())]",
            "Domain": "[split(parameters('Global').DomainName, '.')[0]]",
            "RouteTableGlobal": {
              "id": "[resourceId(variables('HubRGName'), 'Microsoft.Network/routeTables/', format('{0}{1}{2}', replace(variables('HubVNName'), 'vn', 'rt'), variables('Domain'), parameters('Global').RTName))]"
            },
            "delegations": {
              "default": [],
              "Microsoft.Web/serverfarms": [
                {
                  "name": "delegation",
                  "properties": {
                    "serviceName": "Microsoft.Web/serverfarms"
                  }
                }
              ],
              "Microsoft.ContainerInstance/containerGroups": [
                {
                  "name": "aciDelegation",
                  "properties": {
                    "serviceName": "Microsoft.ContainerInstance/containerGroups"
                  }
                }
              ]
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2021-02-01",
              "name": "[format('{0}-vn', parameters('Deployment'))]",
              "location": "[resourceGroup().location]",
              "properties": {
                "copy": [
                  {
                    "name": "subnets",
                    "count": "[length(variables('SubnetInfo'))]",
                    "input": {
                      "name": "[variables('SubnetInfo')[copyIndex('subnets')].name]",
                      "properties": {
                        "addressPrefix": "[format('{0}.{1}', if(equals(variables('SubnetInfo')[copyIndex('subnets')].name, 'snMT02'), variables('networkIdUpper'), variables('networkId')), variables('SubnetInfo')[copyIndex('subnets')].Prefix)]",
                        "networkSecurityGroup": "[if(not(and(contains(variables('SubnetInfo')[copyIndex('subnets')], 'NSG'), bool(variables('SubnetInfo')[copyIndex('subnets')].NSG))), null(), createObject('id', resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-nsg{1}', parameters('Deployment'), variables('SubnetInfo')[copyIndex('subnets')].name))))]",
                        "natGateway": "[if(not(and(contains(variables('SubnetInfo')[copyIndex('subnets')], 'NGW'), bool(variables('SubnetInfo')[copyIndex('subnets')].NGW))), null(), createObject('id', resourceId('Microsoft.Network/natGateways', format('{0}-ngwNAT01', parameters('Deployment')))))]",
                        "routeTable": "[if(and(contains(variables('SubnetInfo')[copyIndex('subnets')], 'Route'), bool(variables('SubnetInfo')[copyIndex('subnets')].Route)), variables('RouteTableGlobal'), null())]",
                        "privateEndpointNetworkPolicies": "Disabled",
                        "delegations": "[if(contains(variables('SubnetInfo')[copyIndex('subnets')], 'delegations'), variables('delegations')[variables('SubnetInfo')[copyIndex('subnets')].delegations], variables('delegations').default)]"
                      }
                    }
                  }
                ],
                "addressSpace": {
                  "addressPrefixes": "[variables('addressPrefixes')]"
                },
                "dhcpOptions": {
                  "dnsServers": "[array(parameters('DNSServers'))]"
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'ADSecondary')]",
        "[resourceId('Microsoft.Resources/deployments', 'CreateADBDC')]"
      ]
    },
    {
      "condition": "[bool(parameters('Stage').VMApp)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "AppServers",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "DeploymentID": {
            "value": "[parameters('DeploymentID')]"
          },
          "DeploymentInfo": {
            "value": "[parameters('DeploymentInfo')]"
          },
          "Environment": {
            "value": "[parameters('Environment')]"
          },
          "Extensions": {
            "value": "[parameters('Extensions')]"
          },
          "Global": {
            "value": "[parameters('Global')]"
          },
          "Prefix": {
            "value": "[parameters('Prefix')]"
          },
          "Stage": {
            "value": "[parameters('Stage')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "13874993644946453761"
            }
          },
          "parameters": {
            "Prefix": {
              "type": "string"
            },
            "Environment": {
              "type": "string",
              "defaultValue": "D",
              "allowedValues": [
                "I",
                "D",
                "T",
                "U",
                "P",
                "S",
                "G",
                "A"
              ]
            },
            "DeploymentID": {
              "type": "string",
              "defaultValue": "1",
              "allowedValues": [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9"
              ]
            },
            "Stage": {
              "type": "object"
            },
            "Extensions": {
              "type": "object"
            },
            "Global": {
              "type": "object"
            },
            "DeploymentInfo": {
              "type": "object"
            }
          },
          "variables": {
            "copy": [
              {
                "name": "VMs",
                "count": "[length(variables('AppServers'))]",
                "input": {
                  "name": "[variables('AppServers')[copyIndex('VMs')].Name]",
                  "match": "[or(equals(parameters('Global').CN, '.'), contains(array(parameters('Global').CN), variables('AppServers')[copyIndex('VMs')].Name))]",
                  "Extensions": "[if(contains(variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType], 'RoleExtensions'), union(parameters('Extensions'), variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType].RoleExtensions), parameters('Extensions'))]",
                  "DataDisk": "[if(contains(variables('AppServers')[copyIndex('VMs')], 'DDRole'), variables('DataDiskInfo')[variables('AppServers')[copyIndex('VMs')].DDRole], null())]",
                  "vmHostName": "[toLower(format('{0}{1}{2}{3}{4}', parameters('Prefix'), parameters('Global').AppName, parameters('Environment'), parameters('DeploymentID'), variables('AppServers')[copyIndex('VMs')].Name))]",
                  "AppInfo": "[if(contains(variables('AppServers')[copyIndex('VMs')], 'AppInfo'), variables('AppServers')[copyIndex('VMs')].AppInfo, null())]",
                  "windowsConfiguration": {
                    "enableAutomaticUpdates": true,
                    "provisionVmAgent": true,
                    "patchSettings": {
                      "enableHotpatching": "[if(contains(variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType], 'HotPatch'), variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType].HotPatch, false())]",
                      "patchMode": "[if(contains(variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType], 'patchMode'), variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType].patchMode, 'AutomaticByOS')]"
                    }
                  },
                  "linuxConfiguration": {
                    "enableAutomaticUpdates": true,
                    "provisionVmAgent": true,
                    "patchSettings": {
                      "enableHotpatching": "[if(contains(variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType], 'HotPatch'), variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType].HotPatch, false())]",
                      "patchMode": "[if(contains(variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType], 'patchMode'), variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType].patchMode, 'AutomaticByOS')]"
                    }
                  }
                }
              }
            ],
            "Deployment": "[format('{0}-{1}-{2}-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID'))]",
            "computeGlobal": "[json('{\r\n  \"DataDiskInfo\": {\r\n    \"0GB\": {},\r\n    \"32GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            32\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GBSS\": {\r\n      \"DATASS\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GB-2\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ],\r\n          [\r\n            1,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"128GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            128\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"FIL64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"SOFS\": {\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            1,\r\n            32\r\n          ],\r\n          [\r\n            2,\r\n            32\r\n          ],\r\n          [\r\n            3,\r\n            32\r\n          ]\r\n        ],\r\n        \"FileSystem\": \"ReFS\",\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"SQL64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"LOGS\": {\r\n        \"DriveLetter\": \"G\",\r\n        \"caching\": \"None\",\r\n        \"LUNS\": [\r\n          [\r\n            8,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"TEMPDB\": {\r\n        \"DriveLetter\": \"H\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            12,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"BACKUP\": {\r\n        \"DriveLetter\": \"I\",\r\n        \"caching\": \"None\",\r\n        \"LUNS\": [\r\n          [\r\n            15,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    }\r\n  },\r\n  \"computeSizeLookupOptions\": {\r\n    \"API-P\": \"Standard_D4s_v3\",\r\n    \"API-D\": \"Standard_D4s_v3\",\r\n    \"API-S\": \"Standard_D2s_v3\",\r\n    \"SF-P\": \"Standard_D4s_v3\",\r\n    \"SF-D\": \"Standard_D2s_v3\",\r\n    \"SF-S\": \"Standard_D2s_v3\",\r\n    \"CTNR-P\": \"Standard_D4s_v3\",\r\n    \"CTNR-D\": \"Standard_D2s_v3\",\r\n    \"ADp-P\": \"Standard_D2s_v3\",\r\n    \"ADp-D\": \"Standard_A2m_v2\",\r\n    \"ADs-P\": \"Standard_D2s_v3\",\r\n    \"ADs-D\": \"Standard_A2m_v2\",\r\n    \"AAP-P\": \"Standard_D2s_v3\",\r\n    \"AAP-D\": \"Standard_D2s_v3\",\r\n    \"DNS-P\": \"Standard_D2s_v3\",\r\n    \"DNS-D\": \"Standard_D2s_v3\",\r\n    \"BUS-P\": \"Standard_DS2_v2\",\r\n    \"BUS-D\": \"Standard_DS2_v2\",\r\n    \"LIN-P\": \"Standard_DS2_v2\",\r\n    \"LIN-D\": \"Standard_DS2_v2\",\r\n    \"FIL-P\": \"Standard_D4s_v3\",\r\n    \"FIL-D\": \"Standard_D4s_v3\",\r\n    \"DFS-P\": \"Standard_D4s_v3\",\r\n    \"DFS-D\": \"Standard_D4s_v3\",\r\n    \"JMP-P\": \"Standard_D4s_v3\",\r\n    \"JMP-D\": \"Standard_D4s_v3\",\r\n    \"CLT-P\": \"Standard_D4s_v3\",\r\n    \"CLT-D\": \"Standard_D4s_v3\",\r\n    \"PXY-P\": \"Standard_D4s_v3\",\r\n    \"PXY-D\": \"Standard_D2s_v3\",\r\n    \"CLS01-D\": \"Standard_D4s_v3\",\r\n    \"CLS02-D\": \"Standard_D4s_v3\",\r\n    \"CLS01-P\": \"Standard_D4s_v3\",\r\n    \"CLS02-P\": \"Standard_D4s_v3\",\r\n    \"FW-P\": \"Standard_F4\",\r\n    \"FW-D\": \"Standard_F2\"\r\n  },\r\n  \"OSType\": {\r\n    \"Server2022SSIMG\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/b8f402aa-20f7-4888-b45c-3cf086dad9c3/resourceGroups/ACU1-BRW-AOA-RG-G1/providers/Microsoft.Compute/galleries/acu1brwaoag1gallery01/images/vmss2022\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SSIMG\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/b8f402aa-20f7-4888-b45c-3cf086dad9c3/resourceGroups/ACU1-BRW-AOA-RG-G1/providers/Microsoft.Compute/galleries/acu1brwaoag1gallery01/images/vmss2019webnetcore27\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"cbld10\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/27b750cd-ed43-42fd-9044-8d75e124ae55/resourceGroups/SBID-Build-Test/providers/Microsoft.Compute/galleries/cbldtest/images/cbld10-ext\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 1,\r\n        \"IaaSDiagnostics\": 1,\r\n        \"Antimalware\": 0,\r\n        \"DependencyAgent\": 1,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Win10O365\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsDesktop\",\r\n        \"offer\": \"office-365\",\r\n        \"sku\": \"rs5-evd-o365pp\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Client\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Win10\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsDesktop\",\r\n        \"offer\": \"Windows-10\",\r\n        \"sku\": \"21h1-pro-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Client\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"SQLServer2016\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftSQLServer\",\r\n        \"Offer\": \"SQL2016SP2-WS2016\",\r\n        \"sku\": \"Enterprise\",\r\n        \"version\": \"latest\"\r\n      },\r\n      // \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016Core\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-Server-Core\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016small\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016Coresmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-Server-Core-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019-gen2\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"windowsserver-gen2preview\",\r\n        \"sku\": \"2019-Datacenter-gen2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2022\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2022-Datacenter-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"_plan\": {\r\n        \"name\": \"windows-server-2022\",\r\n        \"publisher\": \"microsoftwindowsserver\",\r\n        \"product\": \"microsoftserveroperatingsystems-previews\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2022Containerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"datacenter-core-20h2-with-containers-smalldisk-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Core\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-Core\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019small\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-datacenter-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Coresmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-Server-Core-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Containerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019CoreContainerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-datacenter-core-with-containers-smalldisk-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016SS\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-with-Containers\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SSgs\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers-gs\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SS\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"NetScaler\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"citrix\",\r\n        \"Offer\": \"netscalervpx-120\",\r\n        \"Sku\": \"netscalerbyol\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"netscalerbyol\",\r\n        \"publisher\": \"citrix\",\r\n        \"product\": \"netscalervpx-120\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"MaxLoadBalancer\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"loadbalancer\",\r\n        \"offer\": \"loadbalancer-org-load-balancer-for-azure\",\r\n        \"sku\": \"max_load_balancer\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"max_load_balancer\",\r\n        \"publisher\": \"loadbalancer\",\r\n        \"product\": \"loadbalancer-org-load-balancer-for-azure\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortigate\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet_fortigate-vm_v5\",\r\n        \"sku\": \"fortinet_fg-vm\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"fortinet_fg-vm\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet_fortigate-vm_v5\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortigatepayg\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet_fortigate-vm_v5\",\r\n        \"sku\": \"fortinet_fg-vm_payg\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"fortinet_fg-vm_payg\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet_fortigate-vm_v5\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortimngr\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet-fortimanager\",\r\n        \"sku\": \"fortinet-fortimanager\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 3,\r\n      \"plan\": {\r\n        \"name\": \"fortinet-fortimanager\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet-fortimanager\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"UbuntuServer1904\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"canonical\",\r\n        \"offer\": \"UbuntuServer\",\r\n        \"sku\": \"19.04\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"Antimalware\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 1,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0\r\n      }\r\n    },\r\n    \"Bus-debian\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"credativ\",\r\n        \"offer\": \"Debian\",\r\n        \"sku\": \"8\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 1,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"PROXY-UBUNTU\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"Canonical\",\r\n        \"offer\": \"UbuntuServer\",\r\n        \"sku\": \"16.04-LTS\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"fileUris\": \"[concat(parameters(''global'')._artifactsLocation, ''/scripts/pxy.zip\",\r\n      \"commandToExecute\": \"[concat(''sudo apt-get update && sudo apt-get install unzip && unzip Proxy.zip && sudo bash -x haproxyvm-configure.sh '', '' -a '', ''ilbIPAddress'', '' -r '', ''ilbRabbitMqPort'', '' -m '', ''ilbRabbitMqMgmtPort'', '' -b '', ''dnsName'', ''.'', ''location'', ''.cloudapp.azure.com -p '', ''vmNamePrefix'', ''0 -s '', ''vmNamePrefix'', ''1'')]\",\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"CentOS75\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"OpenLogic\",\r\n        \"Offer\": \"CentOS\",\r\n        \"sku\": \"7.5\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"Antimalware\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    }\r\n  },\r\n  \"ladCfg\": {\r\n    \"diagnosticMonitorConfiguration\": {\r\n      \"eventVolume\": \"Medium\",\r\n      \"metrics\": {\r\n        \"metricAggregation\": [\r\n          {\r\n            \"scheduledTransferPeriod\": \"PT1H\"\r\n          },\r\n          {\r\n            \"scheduledTransferPeriod\": \"PT1M\"\r\n          }\r\n        ],\r\n        \"resourceId\": \"__VM_RESOURCE_ID__\"\r\n      },\r\n      \"performanceCounters\": {\r\n        \"performanceCounterConfiguration\": [\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk read guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readbytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/readbytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk writes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/writespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk transfer time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagetransfertime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagetransfertime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk transfers\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"transferspersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/transferspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk write guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writebytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/writebytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk read time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagereadtime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagereadtime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk write time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagewritetime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagewritetime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk total bytes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/bytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk reads\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readspersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/readspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk queue length\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagediskqueuelength\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagediskqueuelength\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network in guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytesreceived\",\r\n            \"counterSpecifier\": \"/builtin/network/bytesreceived\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network total bytes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytestotal\",\r\n            \"counterSpecifier\": \"/builtin/network/bytestotal\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network out guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytestransmitted\",\r\n            \"counterSpecifier\": \"/builtin/network/bytestransmitted\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network collisions\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totalcollisions\",\r\n            \"counterSpecifier\": \"/builtin/network/totalcollisions\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets received errors\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totalrxerrors\",\r\n            \"counterSpecifier\": \"/builtin/network/totalrxerrors\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets sent\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"packetstransmitted\",\r\n            \"counterSpecifier\": \"/builtin/network/packetstransmitted\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets received\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"packetsreceived\",\r\n            \"counterSpecifier\": \"/builtin/network/packetsreceived\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets sent errors\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totaltxerrors\",\r\n            \"counterSpecifier\": \"/builtin/network/totaltxerrors\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem transfers/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"transferspersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/transferspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % free space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentfreespace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentfreespace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % used space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusedspace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentusedspace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem used space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"usedspace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/usedspace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem read bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytesreadpersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/bytesreadpersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem free space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"freespace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/freespace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % free inodes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentfreeinodes\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentfreeinodes\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/bytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem reads/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readspersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/readspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem write bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"byteswrittenpersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/byteswrittenpersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem writes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writespersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/writespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % used inodes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusedinodes\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentusedinodes\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU IO wait time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentiowaittime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentiowaittime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU user time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusertime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentusertime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU nice time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentnicetime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentnicetime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU percentage guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentprocessortime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentprocessortime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU interrupt time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentinterrupttime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentinterrupttime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU idle time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentidletime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentidletime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU privileged time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentprivilegedtime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentprivilegedtime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"availablememory\",\r\n            \"counterSpecifier\": \"/builtin/memory/availablememory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap percent used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentusedswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentusedswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"usedmemory\",\r\n            \"counterSpecifier\": \"/builtin/memory/usedmemory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Page reads\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pagesreadpersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pagesreadpersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"availableswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/availableswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap percent available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentavailableswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentavailableswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Mem. percent available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentavailablememory\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentavailablememory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Pages\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pagespersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pagespersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"usedswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/usedswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory percentage\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentusedmemory\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentusedmemory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Page writes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pageswrittenpersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pageswrittenpersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          }\r\n        ]\r\n      },\r\n      \"syslogEvents\": {\r\n        \"syslogEventConfiguration\": {\r\n          \"LOG_AUTH\": \"LOG_DEBUG\",\r\n          \"LOG_AUTHPRIV\": \"LOG_DEBUG\",\r\n          \"LOG_CRON\": \"LOG_DEBUG\",\r\n          \"LOG_DAEMON\": \"LOG_DEBUG\",\r\n          \"LOG_FTP\": \"LOG_DEBUG\",\r\n          \"LOG_KERN\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL0\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL1\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL2\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL3\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL4\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL5\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL6\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL7\": \"LOG_DEBUG\",\r\n          \"LOG_LPR\": \"LOG_DEBUG\",\r\n          \"LOG_MAIL\": \"LOG_DEBUG\",\r\n          \"LOG_NEWS\": \"LOG_DEBUG\",\r\n          \"LOG_SYSLOG\": \"LOG_DEBUG\",\r\n          \"LOG_USER\": \"LOG_DEBUG\",\r\n          \"LOG_UUCP\": \"LOG_DEBUG\"\r\n        }\r\n      }\r\n    },\r\n    \"sampleRateInSeconds\": 15\r\n  },\r\n  \"WadCfg\": {\r\n    \"DiagnosticMonitorConfiguration\": {\r\n      \"overallQuotaInMB\": 10000,\r\n      \"DiagnosticInfrastructureLogs\": {\r\n        \"scheduledTransferLogLevelFilter\": \"Error\"\r\n      },\r\n      \"PerformanceCounters\": {\r\n        \"scheduledTransferPeriod\": \"PT1M\",\r\n        \"PerformanceCounterConfiguration\": []\r\n      },\r\n      \"WindowsEventLog\": {\r\n        \"scheduledTransferPeriod\": \"PT5M\",\r\n        \"DataSource\": [\r\n          {\r\n            \"name\": \"Application!*[System[(Level = 1 or Level = 2)]]\"\r\n          },\r\n          {\r\n            \"name\": \"Security!*[System[(Level = 1 or Level = 2)]\"\r\n          },\r\n          {\r\n            \"name\": \"System!*[System[(Level = 1 or Level = 2)]]\"\r\n          },\r\n          {\r\n            \"name\": \"Microsoft-Windows-DSC/Operational!*[System[(EventID=4249 or EventID=4097)]]\"\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}')]",
            "OSType": "[variables('computeGlobal').OSType]",
            "DataDiskInfo": "[variables('computeGlobal').DataDiskInfo]",
            "DeploymentName": "[if(contains(toLower(deployment().name), 'vmapp'), 'AppServers', replace(deployment().name, format('dp{0}-', variables('Deployment')), ''))]",
            "AppServers": "[parameters('DeploymentInfo').AppServers[variables('DeploymentName')]]",
            "HubKVJ": "[json(parameters('Global').hubKV)]",
            "HubRGJ": "[json(parameters('Global').hubRG)]",
            "gh": {
              "hubKVPrefix": "[if(contains(variables('HubKVJ'), 'Prefix'), variables('HubKVJ').Prefix, parameters('Prefix'))]",
              "hubKVOrgName": "[if(contains(variables('HubKVJ'), 'OrgName'), variables('HubKVJ').OrgName, parameters('Global').OrgName)]",
              "hubKVAppName": "[if(contains(variables('HubKVJ'), 'AppName'), variables('HubKVJ').AppName, parameters('Global').AppName)]",
              "hubKVRGName": "[if(contains(variables('HubKVJ'), 'RG'), variables('HubKVJ').RG, variables('HubRGJ').name)]"
            },
            "HubKVRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').hubKVPrefix, variables('gh').hubKVOrgName, variables('gh').hubKVAppName, variables('gh').hubKVRGName)]",
            "HubKVName": "[toLower(format('{0}-{1}-{2}-{3}-kv{4}', variables('gh').hubKVPrefix, variables('gh').hubKVOrgName, variables('gh').hubKVAppName, variables('gh').hubKVRGName, variables('HubKVJ').name))]"
          },
          "resources": [
            {
              "condition": "[variables('VMs')[copyIndex()].match]",
              "copy": {
                "name": "VM",
                "count": "[length(variables('AppServers'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dp{0}-VM-Deploy-{1}', variables('Deployment'), variables('AppServers')[copyIndex()].Name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "Prefix": {
                    "value": "[parameters('Prefix')]"
                  },
                  "DeploymentID": {
                    "value": "[parameters('DeploymentID')]"
                  },
                  "Environment": {
                    "value": "[parameters('Environment')]"
                  },
                  "AppServer": {
                    "value": "[variables('AppServers')[copyIndex()]]"
                  },
                  "VM": {
                    "value": "[variables('VMs')[copyIndex()]]"
                  },
                  "DeploymentName": {
                    "value": "[variables('DeploymentName')]"
                  },
                  "Global": {
                    "value": "[parameters('Global')]"
                  },
                  "vmAdminPassword": {
                    "reference": {
                      "keyVault": {
                        "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults', variables('HubKVName'))]"
                      },
                      "secretName": "localadmin"
                    }
                  },
                  "devOpsPat": {
                    "reference": {
                      "keyVault": {
                        "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults', variables('HubKVName'))]"
                      },
                      "secretName": "devOpsPat"
                    }
                  },
                  "sshPublic": {
                    "reference": {
                      "keyVault": {
                        "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults', variables('HubKVName'))]"
                      },
                      "secretName": "sshPublic"
                    }
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1318.3566",
                      "templateHash": "10183346640093717410"
                    }
                  },
                  "parameters": {
                    "Prefix": {
                      "type": "string"
                    },
                    "DeploymentID": {
                      "type": "string"
                    },
                    "Environment": {
                      "type": "string"
                    },
                    "VM": {
                      "type": "object"
                    },
                    "AppServer": {
                      "type": "object"
                    },
                    "Global": {
                      "type": "object"
                    },
                    "DeploymentName": {
                      "type": "string"
                    },
                    "vmAdminPassword": {
                      "type": "secureString"
                    },
                    "devOpsPat": {
                      "type": "secureString"
                    },
                    "sshPublic": {
                      "type": "secureString"
                    },
                    "saKey": {
                      "type": "secureString",
                      "defaultValue": "[newGuid()]"
                    },
                    "deploymentTime": {
                      "type": "string",
                      "defaultValue": "[utcNow()]"
                    }
                  },
                  "variables": {
                    "Deployment": "[format('{0}-{1}-{2}-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID'))]",
                    "DeploymentURI": "[toLower(format('{0}{1}{2}{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID')))]",
                    "computeGlobal": "[json('{\r\n  \"DataDiskInfo\": {\r\n    \"0GB\": {},\r\n    \"32GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            32\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GBSS\": {\r\n      \"DATASS\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GB-2\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ],\r\n          [\r\n            1,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"128GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            128\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"FIL64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"SOFS\": {\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            1,\r\n            32\r\n          ],\r\n          [\r\n            2,\r\n            32\r\n          ],\r\n          [\r\n            3,\r\n            32\r\n          ]\r\n        ],\r\n        \"FileSystem\": \"ReFS\",\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"SQL64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"LOGS\": {\r\n        \"DriveLetter\": \"G\",\r\n        \"caching\": \"None\",\r\n        \"LUNS\": [\r\n          [\r\n            8,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"TEMPDB\": {\r\n        \"DriveLetter\": \"H\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            12,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"BACKUP\": {\r\n        \"DriveLetter\": \"I\",\r\n        \"caching\": \"None\",\r\n        \"LUNS\": [\r\n          [\r\n            15,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    }\r\n  },\r\n  \"computeSizeLookupOptions\": {\r\n    \"API-P\": \"Standard_D4s_v3\",\r\n    \"API-D\": \"Standard_D4s_v3\",\r\n    \"API-S\": \"Standard_D2s_v3\",\r\n    \"SF-P\": \"Standard_D4s_v3\",\r\n    \"SF-D\": \"Standard_D2s_v3\",\r\n    \"SF-S\": \"Standard_D2s_v3\",\r\n    \"CTNR-P\": \"Standard_D4s_v3\",\r\n    \"CTNR-D\": \"Standard_D2s_v3\",\r\n    \"ADp-P\": \"Standard_D2s_v3\",\r\n    \"ADp-D\": \"Standard_A2m_v2\",\r\n    \"ADs-P\": \"Standard_D2s_v3\",\r\n    \"ADs-D\": \"Standard_A2m_v2\",\r\n    \"AAP-P\": \"Standard_D2s_v3\",\r\n    \"AAP-D\": \"Standard_D2s_v3\",\r\n    \"DNS-P\": \"Standard_D2s_v3\",\r\n    \"DNS-D\": \"Standard_D2s_v3\",\r\n    \"BUS-P\": \"Standard_DS2_v2\",\r\n    \"BUS-D\": \"Standard_DS2_v2\",\r\n    \"LIN-P\": \"Standard_DS2_v2\",\r\n    \"LIN-D\": \"Standard_DS2_v2\",\r\n    \"FIL-P\": \"Standard_D4s_v3\",\r\n    \"FIL-D\": \"Standard_D4s_v3\",\r\n    \"DFS-P\": \"Standard_D4s_v3\",\r\n    \"DFS-D\": \"Standard_D4s_v3\",\r\n    \"JMP-P\": \"Standard_D4s_v3\",\r\n    \"JMP-D\": \"Standard_D4s_v3\",\r\n    \"CLT-P\": \"Standard_D4s_v3\",\r\n    \"CLT-D\": \"Standard_D4s_v3\",\r\n    \"PXY-P\": \"Standard_D4s_v3\",\r\n    \"PXY-D\": \"Standard_D2s_v3\",\r\n    \"CLS01-D\": \"Standard_D4s_v3\",\r\n    \"CLS02-D\": \"Standard_D4s_v3\",\r\n    \"CLS01-P\": \"Standard_D4s_v3\",\r\n    \"CLS02-P\": \"Standard_D4s_v3\",\r\n    \"FW-P\": \"Standard_F4\",\r\n    \"FW-D\": \"Standard_F2\"\r\n  },\r\n  \"OSType\": {\r\n    \"Server2022SSIMG\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/b8f402aa-20f7-4888-b45c-3cf086dad9c3/resourceGroups/ACU1-BRW-AOA-RG-G1/providers/Microsoft.Compute/galleries/acu1brwaoag1gallery01/images/vmss2022\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SSIMG\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/b8f402aa-20f7-4888-b45c-3cf086dad9c3/resourceGroups/ACU1-BRW-AOA-RG-G1/providers/Microsoft.Compute/galleries/acu1brwaoag1gallery01/images/vmss2019webnetcore27\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"cbld10\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/27b750cd-ed43-42fd-9044-8d75e124ae55/resourceGroups/SBID-Build-Test/providers/Microsoft.Compute/galleries/cbldtest/images/cbld10-ext\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 1,\r\n        \"IaaSDiagnostics\": 1,\r\n        \"Antimalware\": 0,\r\n        \"DependencyAgent\": 1,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Win10O365\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsDesktop\",\r\n        \"offer\": \"office-365\",\r\n        \"sku\": \"rs5-evd-o365pp\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Client\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Win10\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsDesktop\",\r\n        \"offer\": \"Windows-10\",\r\n        \"sku\": \"21h1-pro-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Client\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"SQLServer2016\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftSQLServer\",\r\n        \"Offer\": \"SQL2016SP2-WS2016\",\r\n        \"sku\": \"Enterprise\",\r\n        \"version\": \"latest\"\r\n      },\r\n      // \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016Core\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-Server-Core\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016small\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016Coresmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-Server-Core-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019-gen2\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"windowsserver-gen2preview\",\r\n        \"sku\": \"2019-Datacenter-gen2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2022\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2022-Datacenter-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"_plan\": {\r\n        \"name\": \"windows-server-2022\",\r\n        \"publisher\": \"microsoftwindowsserver\",\r\n        \"product\": \"microsoftserveroperatingsystems-previews\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2022Containerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"datacenter-core-20h2-with-containers-smalldisk-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Core\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-Core\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019small\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-datacenter-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Coresmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-Server-Core-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Containerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019CoreContainerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-datacenter-core-with-containers-smalldisk-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016SS\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-with-Containers\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SSgs\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers-gs\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SS\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"NetScaler\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"citrix\",\r\n        \"Offer\": \"netscalervpx-120\",\r\n        \"Sku\": \"netscalerbyol\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"netscalerbyol\",\r\n        \"publisher\": \"citrix\",\r\n        \"product\": \"netscalervpx-120\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"MaxLoadBalancer\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"loadbalancer\",\r\n        \"offer\": \"loadbalancer-org-load-balancer-for-azure\",\r\n        \"sku\": \"max_load_balancer\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"max_load_balancer\",\r\n        \"publisher\": \"loadbalancer\",\r\n        \"product\": \"loadbalancer-org-load-balancer-for-azure\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortigate\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet_fortigate-vm_v5\",\r\n        \"sku\": \"fortinet_fg-vm\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"fortinet_fg-vm\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet_fortigate-vm_v5\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortigatepayg\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet_fortigate-vm_v5\",\r\n        \"sku\": \"fortinet_fg-vm_payg\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"fortinet_fg-vm_payg\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet_fortigate-vm_v5\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortimngr\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet-fortimanager\",\r\n        \"sku\": \"fortinet-fortimanager\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 3,\r\n      \"plan\": {\r\n        \"name\": \"fortinet-fortimanager\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet-fortimanager\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"UbuntuServer1904\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"canonical\",\r\n        \"offer\": \"UbuntuServer\",\r\n        \"sku\": \"19.04\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"Antimalware\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 1,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0\r\n      }\r\n    },\r\n    \"Bus-debian\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"credativ\",\r\n        \"offer\": \"Debian\",\r\n        \"sku\": \"8\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 1,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"PROXY-UBUNTU\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"Canonical\",\r\n        \"offer\": \"UbuntuServer\",\r\n        \"sku\": \"16.04-LTS\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"fileUris\": \"[concat(parameters(''global'')._artifactsLocation, ''/scripts/pxy.zip\",\r\n      \"commandToExecute\": \"[concat(''sudo apt-get update && sudo apt-get install unzip && unzip Proxy.zip && sudo bash -x haproxyvm-configure.sh '', '' -a '', ''ilbIPAddress'', '' -r '', ''ilbRabbitMqPort'', '' -m '', ''ilbRabbitMqMgmtPort'', '' -b '', ''dnsName'', ''.'', ''location'', ''.cloudapp.azure.com -p '', ''vmNamePrefix'', ''0 -s '', ''vmNamePrefix'', ''1'')]\",\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"CentOS75\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"OpenLogic\",\r\n        \"Offer\": \"CentOS\",\r\n        \"sku\": \"7.5\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"Antimalware\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    }\r\n  },\r\n  \"ladCfg\": {\r\n    \"diagnosticMonitorConfiguration\": {\r\n      \"eventVolume\": \"Medium\",\r\n      \"metrics\": {\r\n        \"metricAggregation\": [\r\n          {\r\n            \"scheduledTransferPeriod\": \"PT1H\"\r\n          },\r\n          {\r\n            \"scheduledTransferPeriod\": \"PT1M\"\r\n          }\r\n        ],\r\n        \"resourceId\": \"__VM_RESOURCE_ID__\"\r\n      },\r\n      \"performanceCounters\": {\r\n        \"performanceCounterConfiguration\": [\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk read guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readbytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/readbytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk writes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/writespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk transfer time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagetransfertime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagetransfertime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk transfers\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"transferspersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/transferspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk write guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writebytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/writebytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk read time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagereadtime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagereadtime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk write time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagewritetime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagewritetime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk total bytes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/bytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk reads\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readspersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/readspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk queue length\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagediskqueuelength\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagediskqueuelength\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network in guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytesreceived\",\r\n            \"counterSpecifier\": \"/builtin/network/bytesreceived\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network total bytes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytestotal\",\r\n            \"counterSpecifier\": \"/builtin/network/bytestotal\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network out guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytestransmitted\",\r\n            \"counterSpecifier\": \"/builtin/network/bytestransmitted\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network collisions\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totalcollisions\",\r\n            \"counterSpecifier\": \"/builtin/network/totalcollisions\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets received errors\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totalrxerrors\",\r\n            \"counterSpecifier\": \"/builtin/network/totalrxerrors\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets sent\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"packetstransmitted\",\r\n            \"counterSpecifier\": \"/builtin/network/packetstransmitted\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets received\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"packetsreceived\",\r\n            \"counterSpecifier\": \"/builtin/network/packetsreceived\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets sent errors\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totaltxerrors\",\r\n            \"counterSpecifier\": \"/builtin/network/totaltxerrors\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem transfers/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"transferspersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/transferspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % free space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentfreespace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentfreespace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % used space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusedspace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentusedspace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem used space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"usedspace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/usedspace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem read bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytesreadpersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/bytesreadpersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem free space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"freespace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/freespace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % free inodes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentfreeinodes\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentfreeinodes\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/bytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem reads/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readspersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/readspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem write bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"byteswrittenpersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/byteswrittenpersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem writes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writespersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/writespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % used inodes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusedinodes\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentusedinodes\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU IO wait time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentiowaittime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentiowaittime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU user time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusertime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentusertime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU nice time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentnicetime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentnicetime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU percentage guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentprocessortime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentprocessortime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU interrupt time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentinterrupttime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentinterrupttime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU idle time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentidletime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentidletime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU privileged time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentprivilegedtime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentprivilegedtime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"availablememory\",\r\n            \"counterSpecifier\": \"/builtin/memory/availablememory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap percent used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentusedswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentusedswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"usedmemory\",\r\n            \"counterSpecifier\": \"/builtin/memory/usedmemory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Page reads\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pagesreadpersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pagesreadpersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"availableswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/availableswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap percent available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentavailableswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentavailableswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Mem. percent available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentavailablememory\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentavailablememory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Pages\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pagespersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pagespersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"usedswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/usedswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory percentage\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentusedmemory\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentusedmemory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Page writes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pageswrittenpersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pageswrittenpersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          }\r\n        ]\r\n      },\r\n      \"syslogEvents\": {\r\n        \"syslogEventConfiguration\": {\r\n          \"LOG_AUTH\": \"LOG_DEBUG\",\r\n          \"LOG_AUTHPRIV\": \"LOG_DEBUG\",\r\n          \"LOG_CRON\": \"LOG_DEBUG\",\r\n          \"LOG_DAEMON\": \"LOG_DEBUG\",\r\n          \"LOG_FTP\": \"LOG_DEBUG\",\r\n          \"LOG_KERN\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL0\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL1\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL2\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL3\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL4\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL5\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL6\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL7\": \"LOG_DEBUG\",\r\n          \"LOG_LPR\": \"LOG_DEBUG\",\r\n          \"LOG_MAIL\": \"LOG_DEBUG\",\r\n          \"LOG_NEWS\": \"LOG_DEBUG\",\r\n          \"LOG_SYSLOG\": \"LOG_DEBUG\",\r\n          \"LOG_USER\": \"LOG_DEBUG\",\r\n          \"LOG_UUCP\": \"LOG_DEBUG\"\r\n        }\r\n      }\r\n    },\r\n    \"sampleRateInSeconds\": 15\r\n  },\r\n  \"WadCfg\": {\r\n    \"DiagnosticMonitorConfiguration\": {\r\n      \"overallQuotaInMB\": 10000,\r\n      \"DiagnosticInfrastructureLogs\": {\r\n        \"scheduledTransferLogLevelFilter\": \"Error\"\r\n      },\r\n      \"PerformanceCounters\": {\r\n        \"scheduledTransferPeriod\": \"PT1M\",\r\n        \"PerformanceCounterConfiguration\": []\r\n      },\r\n      \"WindowsEventLog\": {\r\n        \"scheduledTransferPeriod\": \"PT5M\",\r\n        \"DataSource\": [\r\n          {\r\n            \"name\": \"Application!*[System[(Level = 1 or Level = 2)]]\"\r\n          },\r\n          {\r\n            \"name\": \"Security!*[System[(Level = 1 or Level = 2)]\"\r\n          },\r\n          {\r\n            \"name\": \"System!*[System[(Level = 1 or Level = 2)]]\"\r\n          },\r\n          {\r\n            \"name\": \"Microsoft-Windows-DSC/Operational!*[System[(EventID=4249 or EventID=4097)]]\"\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}')]",
                    "OSType": "[variables('computeGlobal').OSType]",
                    "WadCfg": "[variables('computeGlobal').WadCfg]",
                    "ladCfg": "[variables('computeGlobal').ladCfg]",
                    "DataDiskInfo": "[variables('computeGlobal').DataDiskInfo]",
                    "computeSizeLookupOptions": "[variables('computeGlobal').computeSizeLookupOptions]",
                    "RGName": "[format('{0}-{1}-{2}-RG-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').AppName, parameters('Environment'), parameters('DeploymentID'))]",
                    "GlobalRGJ": "[json(parameters('Global').GlobalRG)]",
                    "GlobalSAJ": "[json(parameters('Global').GlobalSA)]",
                    "HubKVJ": "[json(parameters('Global').hubKV)]",
                    "HubRGJ": "[json(parameters('Global').hubRG)]",
                    "HubAAJ": "[json(parameters('Global').hubAA)]",
                    "regionLookup": "[json('{\r\n  \"francecentral\": {\r\n    \"displayname\": \"France Central\",\r\n    \"location\": \"francecentral\",\r\n    \"PREFIX\": \"AFC1\",\r\n    \"pairedRegion\": \"francesouth\"\r\n  },\r\n  \"southeastasia\": {\r\n    \"displayname\": \"Southeast Asia\",\r\n    \"location\": \"southeastasia\",\r\n    \"PREFIX\": \"ASA1\",\r\n    \"pairedRegion\": \"eastasia\"\r\n  },\r\n  \"southafricawest\": {\r\n    \"displayname\": \"South Africa West\",\r\n    \"location\": \"southafricawest\",\r\n    \"PREFIX\": \"ASAW\",\r\n    \"pairedRegion\": \"southafricanorth\"\r\n  },\r\n  \"eastus2\": {\r\n    \"displayname\": \"East US 2\",\r\n    \"location\": \"eastus2\",\r\n    \"PREFIX\": \"AEU2\",\r\n    \"pairedRegion\": \"centralus\"\r\n  },\r\n  \"eastus\": {\r\n    \"displayname\": \"East US\",\r\n    \"location\": \"eastus\",\r\n    \"PREFIX\": \"AEU1\",\r\n    \"pairedRegion\": \"westus\"\r\n  },\r\n  \"jioindiawest\": {\r\n    \"displayname\": \"Jio India West\",\r\n    \"location\": \"jioindiawest\",\r\n    \"PREFIX\": \"AJIW\",\r\n    \"pairedRegion\": \"jioindiacentral\"\r\n  },\r\n  \"westcentralus\": {\r\n    \"displayname\": \"West Central US\",\r\n    \"location\": \"westcentralus\",\r\n    \"PREFIX\": \"AWCU\",\r\n    \"pairedRegion\": \"westus2\"\r\n  },\r\n  \"koreacentral\": {\r\n    \"displayname\": \"Korea Central\",\r\n    \"location\": \"koreacentral\",\r\n    \"PREFIX\": \"AKC1\",\r\n    \"pairedRegion\": \"koreasouth\"\r\n  },\r\n  \"uaecentral\": {\r\n    \"displayname\": \"UAE Central\",\r\n    \"location\": \"uaecentral\",\r\n    \"PREFIX\": \"AUC1\",\r\n    \"pairedRegion\": \"uaenorth\"\r\n  },\r\n  \"westus\": {\r\n    \"displayname\": \"West US\",\r\n    \"location\": \"westus\",\r\n    \"PREFIX\": \"AWU1\",\r\n    \"pairedRegion\": \"eastus\"\r\n  },\r\n  \"southafricanorth\": {\r\n    \"displayname\": \"South Africa North\",\r\n    \"location\": \"southafricanorth\",\r\n    \"PREFIX\": \"ASAN\",\r\n    \"pairedRegion\": \"southafricawest\"\r\n  },\r\n  \"australiacentral2\": {\r\n    \"displayname\": \"Australia Central 2\",\r\n    \"location\": \"australiacentral2\",\r\n    \"PREFIX\": \"AAC2\",\r\n    \"pairedRegion\": \"australiacentral2\"\r\n  },\r\n  \"francesouth\": {\r\n    \"displayname\": \"France South\",\r\n    \"location\": \"francesouth\",\r\n    \"PREFIX\": \"AFS1\",\r\n    \"pairedRegion\": \"francecentral\"\r\n  },\r\n  \"ukwest\": {\r\n    \"displayname\": \"UK West\",\r\n    \"location\": \"ukwest\",\r\n    \"PREFIX\": \"AUW1\",\r\n    \"pairedRegion\": \"uksouth\"\r\n  },\r\n  \"southindia\": {\r\n    \"displayname\": \"South India\",\r\n    \"location\": \"southindia\",\r\n    \"PREFIX\": \"ASI1\",\r\n    \"pairedRegion\": \"centralindia\"\r\n  },\r\n  \"centralus\": {\r\n    \"displayname\": \"Central US\",\r\n    \"location\": \"centralus\",\r\n    \"PREFIX\": \"ACU1\",\r\n    \"pairedRegion\": \"eastus2\"\r\n  },\r\n  \"germanynorth\": {\r\n    \"displayname\": \"Germany North\",\r\n    \"location\": \"germanynorth\",\r\n    \"PREFIX\": \"AGN1\",\r\n    \"pairedRegion\": \"germanywestcentral\"\r\n  },\r\n  \"koreasouth\": {\r\n    \"displayname\": \"Korea South\",\r\n    \"location\": \"koreasouth\",\r\n    \"PREFIX\": \"AKS1\",\r\n    \"pairedRegion\": \"koreacentral\"\r\n  },\r\n  \"westindia\": {\r\n    \"displayname\": \"West India\",\r\n    \"location\": \"westindia\",\r\n    \"PREFIX\": \"AWI1\",\r\n    \"pairedRegion\": \"southindia\"\r\n  },\r\n  \"westus2\": {\r\n    \"displayname\": \"West US 2\",\r\n    \"location\": \"westus2\",\r\n    \"PREFIX\": \"AWU2\",\r\n    \"pairedRegion\": \"westcentralus\"\r\n  },\r\n  \"northcentralus\": {\r\n    \"displayname\": \"North Central US\",\r\n    \"location\": \"northcentralus\",\r\n    \"PREFIX\": \"ANCU\",\r\n    \"pairedRegion\": \"southcentralus\"\r\n  },\r\n  \"westeurope\": {\r\n    \"displayname\": \"West Europe\",\r\n    \"location\": \"westeurope\",\r\n    \"PREFIX\": \"AWEU\",\r\n    \"pairedRegion\": \"northeurope\"\r\n  },\r\n  \"canadacentral\": {\r\n    \"displayname\": \"Canada Central\",\r\n    \"location\": \"canadacentral\",\r\n    \"PREFIX\": \"ACC1\",\r\n    \"pairedRegion\": \"canadaeast\"\r\n  },\r\n  \"southcentralus\": {\r\n    \"displayname\": \"South Central US\",\r\n    \"location\": \"southcentralus\",\r\n    \"PREFIX\": \"ASCU\",\r\n    \"pairedRegion\": \"northcentralus\"\r\n  },\r\n  \"norwayeast\": {\r\n    \"displayname\": \"Norway East\",\r\n    \"location\": \"norwayeast\",\r\n    \"PREFIX\": \"ANE1\",\r\n    \"pairedRegion\": \"norwaywest\"\r\n  },\r\n  \"japanwest\": {\r\n    \"displayname\": \"Japan West\",\r\n    \"location\": \"japanwest\",\r\n    \"PREFIX\": \"AJW1\",\r\n    \"pairedRegion\": \"japaneast\"\r\n  },\r\n  \"norwaywest\": {\r\n    \"displayname\": \"Norway West\",\r\n    \"location\": \"norwaywest\",\r\n    \"PREFIX\": \"ANW1\",\r\n    \"pairedRegion\": \"norwayeast\"\r\n  },\r\n  \"jioindiacentral\": {\r\n    \"displayname\": \"Jio India Central\",\r\n    \"location\": \"jioindiacentral\",\r\n    \"PREFIX\": \"AJIC\",\r\n    \"pairedRegion\": \"jioindiawest\"\r\n  },\r\n  \"centralindia\": {\r\n    \"displayname\": \"Central India\",\r\n    \"location\": \"centralindia\",\r\n    \"PREFIX\": \"ACI1\",\r\n    \"pairedRegion\": \"southindia\"\r\n  },\r\n  \"westus3\": {\r\n    \"displayname\": \"West US 3\",\r\n    \"location\": \"westus3\",\r\n    \"PREFIX\": \"AWU3\",\r\n    \"pairedRegion\": \"eastus\"\r\n  },\r\n  \"brazilsouth\": {\r\n    \"displayname\": \"Brazil South\",\r\n    \"location\": \"brazilsouth\",\r\n    \"PREFIX\": \"ABS1\",\r\n    \"pairedRegion\": \"southcentralus\"\r\n  },\r\n  \"eastasia\": {\r\n    \"displayname\": \"East Asia\",\r\n    \"location\": \"eastasia\",\r\n    \"PREFIX\": \"AEA1\",\r\n    \"pairedRegion\": \"southeastasia\"\r\n  },\r\n  \"swedencentral\": {\r\n    \"displayname\": \"Sweden Central\",\r\n    \"location\": \"swedencentral\",\r\n    \"PREFIX\": \"ASC1\",\r\n    \"pairedRegion\": \"swedensouth\"\r\n  },\r\n  \"uksouth\": {\r\n    \"displayname\": \"UK South\",\r\n    \"location\": \"uksouth\",\r\n    \"PREFIX\": \"AUS1\",\r\n    \"pairedRegion\": \"ukwest\"\r\n  },\r\n  \"switzerlandnorth\": {\r\n    \"displayname\": \"Switzerland North\",\r\n    \"location\": \"switzerlandnorth\",\r\n    \"PREFIX\": \"ASN1\",\r\n    \"pairedRegion\": \"switzerlandwest\"\r\n  },\r\n  \"canadaeast\": {\r\n    \"displayname\": \"Canada East\",\r\n    \"location\": \"canadaeast\",\r\n    \"PREFIX\": \"ACE1\",\r\n    \"pairedRegion\": \"canadacentral\"\r\n  },\r\n  \"australiasoutheast\": {\r\n    \"displayname\": \"Australia Southeast\",\r\n    \"location\": \"australiasoutheast\",\r\n    \"PREFIX\": \"AAS1\",\r\n    \"pairedRegion\": \"australiaeast\"\r\n  },\r\n  \"northeurope\": {\r\n    \"displayname\": \"North Europe\",\r\n    \"location\": \"northeurope\",\r\n    \"PREFIX\": \"ANEU\",\r\n    \"pairedRegion\": \"westeurope\"\r\n  },\r\n  \"germanywestcentral\": {\r\n    \"displayname\": \"Germany West Central\",\r\n    \"location\": \"germanywestcentral\",\r\n    \"PREFIX\": \"AGWC\",\r\n    \"pairedRegion\": \"germanynorth\"\r\n  },\r\n  \"japaneast\": {\r\n    \"displayname\": \"Japan East\",\r\n    \"location\": \"japaneast\",\r\n    \"PREFIX\": \"AJE1\",\r\n    \"pairedRegion\": \"japanwest\"\r\n  },\r\n  \"uaenorth\": {\r\n    \"displayname\": \"UAE North\",\r\n    \"location\": \"uaenorth\",\r\n    \"PREFIX\": \"AUN1\",\r\n    \"pairedRegion\": \"uaecentral\"\r\n  },\r\n  \"australiaeast\": {\r\n    \"displayname\": \"Australia East\",\r\n    \"location\": \"australiaeast\",\r\n    \"PREFIX\": \"AAE1\",\r\n    \"pairedRegion\": \"australiasoutheast\"\r\n  },\r\n  \"switzerlandwest\": {\r\n    \"displayname\": \"Switzerland West\",\r\n    \"location\": \"switzerlandwest\",\r\n    \"PREFIX\": \"ASW1\",\r\n    \"pairedRegion\": \"switzerlandnorth\"\r\n  },\r\n  \"australiacentral\": {\r\n    \"displayname\": \"Australia Central\",\r\n    \"location\": \"australiacentral\",\r\n    \"PREFIX\": \"AAC1\",\r\n    \"pairedRegion\": \"australiacentral\"\r\n  },\r\n  \"brazilsoutheast\": {\r\n    \"displayname\": \"Brazil Southeast\",\r\n    \"location\": \"brazilsoutheast\",\r\n    \"PREFIX\": \"ABSE\",\r\n    \"pairedRegion\": \"brazilsouth\"\r\n  }\r\n}\r\n')]",
                    "primaryPrefix": "[variables('regionLookup')[parameters('Global').PrimaryLocation].prefix]",
                    "gh": {
                      "globalRGPrefix": "[if(contains(variables('GlobalRGJ'), 'Prefix'), variables('GlobalRGJ').Prefix, variables('primaryPrefix'))]",
                      "globalRGOrgName": "[if(contains(variables('GlobalRGJ'), 'OrgName'), variables('GlobalRGJ').OrgName, parameters('Global').OrgName)]",
                      "globalRGAppName": "[if(contains(variables('GlobalRGJ'), 'AppName'), variables('GlobalRGJ').AppName, parameters('Global').AppName)]",
                      "globalRGName": "[if(contains(variables('GlobalRGJ'), 'name'), variables('GlobalRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID')))]",
                      "globalSAPrefix": "[if(contains(variables('GlobalSAJ'), 'Prefix'), variables('GlobalSAJ').Prefix, variables('primaryPrefix'))]",
                      "globalSAOrgName": "[if(contains(variables('GlobalSAJ'), 'OrgName'), variables('GlobalSAJ').OrgName, parameters('Global').OrgName)]",
                      "globalSAAppName": "[if(contains(variables('GlobalSAJ'), 'AppName'), variables('GlobalSAJ').AppName, parameters('Global').AppName)]",
                      "globalSARGName": "[if(contains(variables('GlobalSAJ'), 'RG'), variables('GlobalSAJ').RG, if(contains(variables('GlobalRGJ'), 'name'), variables('GlobalRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID'))))]",
                      "hubRGPrefix": "[if(contains(variables('HubRGJ'), 'Prefix'), variables('HubRGJ').Prefix, parameters('Prefix'))]",
                      "hubRGOrgName": "[if(contains(variables('HubRGJ'), 'OrgName'), variables('HubRGJ').OrgName, parameters('Global').OrgName)]",
                      "hubRGAppName": "[if(contains(variables('HubRGJ'), 'AppName'), variables('HubRGJ').AppName, parameters('Global').AppName)]",
                      "hubRGRGName": "[if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID'))))]",
                      "hubKVPrefix": "[if(contains(variables('HubKVJ'), 'Prefix'), variables('HubKVJ').Prefix, parameters('Prefix'))]",
                      "hubKVOrgName": "[if(contains(variables('HubKVJ'), 'OrgName'), variables('HubKVJ').OrgName, parameters('Global').OrgName)]",
                      "hubKVAppName": "[if(contains(variables('HubKVJ'), 'AppName'), variables('HubKVJ').AppName, parameters('Global').AppName)]",
                      "hubKVRGName": "[if(contains(variables('HubKVJ'), 'RG'), variables('HubKVJ').RG, variables('HubRGJ').name)]",
                      "hubAAPrefix": "[if(contains(variables('HubAAJ'), 'Prefix'), variables('HubAAJ').Prefix, parameters('Prefix'))]",
                      "hubAAOrgName": "[if(contains(variables('HubAAJ'), 'OrgName'), variables('HubAAJ').OrgName, parameters('Global').OrgName)]",
                      "hubAAAppName": "[if(contains(variables('HubAAJ'), 'AppName'), variables('HubAAJ').AppName, parameters('Global').AppName)]",
                      "hubAARGName": "[if(contains(variables('HubAAJ'), 'RG'), variables('HubAAJ').RG, variables('HubRGJ').name)]"
                    },
                    "globalRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').globalRGPrefix, variables('gh').globalRGOrgName, variables('gh').globalRGAppName, variables('gh').globalRGName)]",
                    "HubRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').hubRGPrefix, variables('gh').hubRGOrgName, variables('gh').hubRGAppName, variables('gh').hubRGRGName)]",
                    "globalSAName": "[toLower(format('{0}{1}{2}{3}sa{4}', variables('gh').globalSAPrefix, variables('gh').globalSAOrgName, variables('gh').globalSAAppName, variables('gh').globalSARGName, variables('GlobalRGJ').name))]",
                    "HubKVRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').hubKVPrefix, variables('gh').hubKVOrgName, variables('gh').hubKVAppName, variables('gh').hubKVRGName)]",
                    "HubKVName": "[toLower(format('{0}-{1}-{2}-{3}-kv{4}', variables('gh').hubKVPrefix, variables('gh').hubKVOrgName, variables('gh').hubKVAppName, variables('gh').hubKVRGName, variables('HubKVJ').name))]",
                    "AAName": "[toLower(format('{0}{1}{2}{3}{4}', variables('gh').hubAAPrefix, variables('gh').hubAAOrgName, variables('gh').hubAAAppName, variables('gh').hubAARGName, variables('HubAAJ').name))]",
                    "EnvironmentLookup": {
                      "D": "Dev",
                      "T": "Test",
                      "I": "Int",
                      "U": "UAT",
                      "P": "PROD",
                      "S": "SBX"
                    },
                    "DSCConfigLookup": {
                      "AppServers": "AppServers",
                      "InitialDOP": "AppServers",
                      "WVDServers": "AppServers"
                    },
                    "AppServerSizeLookup": {
                      "D": "D",
                      "T": "D",
                      "I": "D",
                      "U": "D",
                      "P": "P",
                      "S": "D"
                    },
                    "RebootNodeLookup": {
                      "D": true,
                      "Q": true,
                      "T": true,
                      "U": true,
                      "P": false
                    },
                    "ConfigurationMode": {
                      "D": "ApplyAndAutoCorrect",
                      "Q": "ApplyAndAutoCorrect",
                      "T": "ApplyAndAutoCorrect",
                      "U": "ApplyAndAutoCorrect",
                      "P": "ApplyAndMonitor"
                    },
                    "DSCConfigurationModeFrequencyMins": 15,
                    "networkId": "[format('{0}{1}', parameters('Global').networkid[0], string(sub(parameters('Global').networkid[1], mul(2, int(parameters('DeploymentID'))))))]",
                    "storageAccountType": "[if(equals(parameters('Environment'), 'P'), if(contains(parameters('AppServer'), 'Zone'), 'Premium_LRS', 'Premium_ZRS'), if(contains(parameters('AppServer'), 'Zone'), 'StandardSSD_ZRS', 'StandardSSD_LRS'))]",
                    "SADiagName": "[format('{0}sadiag', variables('DeploymentURI'))]",
                    "saaccountiddiag": "[resourceId('Microsoft.Storage/storageAccounts/', variables('SADiagName'))]",
                    "saSQLBackupName": "[format('{0}sasqlbackup', variables('DeploymentURI'))]",
                    "MSILookup": {
                      "SQL": "Cluster",
                      "UTL": "DefaultKeyVault",
                      "FIL": "Cluster",
                      "OCR": "Storage",
                      "WVD": "WVD"
                    },
                    "userAssignedIdentities": {
                      "Cluster": {
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiKeyVaultSecretsGet', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperator', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperatorGlobal', variables('Deployment'))))]": {}
                      },
                      "Default": {
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiKeyVaultSecretsGet', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperatorGlobal', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperator', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountFileContributor', variables('Deployment'))))]": {}
                      },
                      "DefaultKeyVault": {
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperatorGlobal', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiKeyVaultSecretsGetApp', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiAzureServiceBusDataOwner', variables('Deployment'))))]": {}
                      },
                      "WVD": {
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperatorGlobal', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountFileContributor', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiWVDRegKeyReader', variables('Deployment'))))]": {}
                      },
                      "Storage": {
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountContributor', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperatorGlobal', variables('Deployment'))))]": {}
                      },
                      "None": {}
                    },
                    "ASNAME": "[if(contains(parameters('AppServer'), 'Zone'), 'usingZones', parameters('AppServer').ASNAME)]"
                  },
                  "resources": [
                    {
                      "condition": "[not(equals(variables('ASNAME'), 'usingZones'))]",
                      "type": "Microsoft.Compute/availabilitySets",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}-as{1}', variables('Deployment'), variables('ASNAME'))]",
                      "location": "[resourceGroup().location]",
                      "sku": {
                        "name": "Aligned"
                      },
                      "properties": {
                        "platformUpdateDomainCount": 5,
                        "platformFaultDomainCount": 3
                      }
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines",
                      "apiVersion": "2021-04-01",
                      "name": "[format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "location": "[resourceGroup().location]",
                      "identity": {
                        "type": "SystemAssigned, UserAssigned",
                        "userAssignedIdentities": "[if(contains(variables('MSILookup'), parameters('AppServer').ROLE), variables('userAssignedIdentities')[variables('MSILookup')[parameters('AppServer').ROLE]], variables('userAssignedIdentities').Default)]"
                      },
                      "tags": {
                        "Environment": "[variables('EnvironmentLookup')[parameters('Environment')]]",
                        "Zone": "[if(contains(parameters('AppServer'), 'Zone'), parameters('AppServer').Zone, 1)]"
                      },
                      "zones": "[if(contains(parameters('AppServer'), 'Zone'), array(parameters('AppServer').Zone), null())]",
                      "plan": "[if(contains(variables('OSType')[parameters('AppServer').OSType], 'plan'), variables('OSType')[parameters('AppServer').OSType].plan, null())]",
                      "properties": {
                        "licenseType": "[if(contains(variables('OSType')[parameters('AppServer').OSType], 'licenseType'), variables('OSType')[parameters('AppServer').OSType].licenseType, null())]",
                        "availabilitySet": "[if(contains(parameters('AppServer'), 'Zone'), null(), createObject('id', format('{0}', resourceId('Microsoft.Compute/availabilitySets', format('{0}-as{1}', variables('Deployment'), parameters('AppServer').ASName)))))]",
                        "hardwareProfile": {
                          "vmSize": "[variables('computeSizeLookupOptions')[format('{0}-{1}', parameters('AppServer').ROLE, variables('AppServerSizeLookup')[parameters('Environment')])]]"
                        },
                        "osProfile": {
                          "computerName": "[parameters('VM').vmHostName]",
                          "adminUsername": "[if(contains(parameters('AppServer'), 'AdminUser'), parameters('AppServer').AdminUser, parameters('Global').vmAdminUserName)]",
                          "adminPassword": "[parameters('vmAdminPassword')]",
                          "customData": "[if(contains(parameters('AppServer'), 'customData'), base64(replace(parameters('AppServer').customData, '{0}', format('{0}.', variables('networkId')))), null())]",
                          "secrets": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), createArray(createObject('sourceVault', createObject('id', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults', variables('HubKVName'))), 'vaultCertificates', createArray(createObject('certificateUrl', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults/secrets', variables('HubKVName'), parameters('Global').CertName), '2021-06-01-preview').secretUriWithVersion, 'certificateStore', 'My'), createObject('certificateUrl', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults/secrets', variables('HubKVName'), parameters('Global').CertName), '2021-06-01-preview').secretUriWithVersion, 'certificateStore', 'Root'), createObject('certificateUrl', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults/secrets', variables('HubKVName'), parameters('Global').CertName), '2021-06-01-preview').secretUriWithVersion, 'certificateStore', 'CA')))), null())]",
                          "windowsConfiguration": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), parameters('VM').windowsConfiguration, null())]",
                          "linuxConfiguration": "[if(not(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows')), parameters('VM').linuxConfiguration, null())]"
                        },
                        "storageProfile": {
                          "imageReference": "[variables('OSType')[parameters('AppServer').OSType].imageReference]",
                          "osDisk": {
                            "name": "[format('{0}-{1}-OSDisk', variables('Deployment'), parameters('AppServer').Name)]",
                            "caching": "ReadWrite",
                            "diskSizeGB": "[variables('OSType')[parameters('AppServer').OSType].OSDiskGB]",
                            "createOption": "FromImage",
                            "managedDisk": {
                              "storageAccountType": "[if(contains(parameters('AppServer'), 'OSstorageAccountType'), parameters('AppServer').OSstorageAccountType, variables('storageAccountType'))]"
                            }
                          },
                          "dataDisks": "[reference(resourceId('Microsoft.Resources/deployments', format('dp{0}-AppServer-diskLookup{1}', variables('Deployment'), parameters('AppServer').Name))).outputs.DATADisks.value]"
                        },
                        "networkProfile": {
                          "copy": [
                            {
                              "name": "networkInterfaces",
                              "count": "[length(parameters('AppServer').NICs)]",
                              "input": {
                                "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}{1}{2}{3}', variables('Deployment'), if(contains(parameters('AppServer').NICs[copyIndex('networkInterfaces')], 'LB'), '-niclb', if(contains(parameters('AppServer').NICs[copyIndex('networkInterfaces')], 'PLB'), '-nicplb', if(contains(parameters('AppServer').NICs[copyIndex('networkInterfaces')], 'SLB'), '-nicslb', '-nic'))), if(equals(copyIndex('networkInterfaces'), 0), '', add(copyIndex('networkInterfaces'), 1)), parameters('AppServer').Name))]",
                                "properties": {
                                  "primary": "[contains(parameters('AppServer').NICs[copyIndex('networkInterfaces')], 'Primary')]",
                                  "deleteOption": "Delete"
                                }
                              }
                            }
                          ]
                        },
                        "diagnosticsProfile": {
                          "bootDiagnostics": {
                            "enabled": true,
                            "storageUri": "[format('https://{0}.blob.{1}', variables('SADiagName'), environment().suffixes.storage)]"
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-AppServer-nicDeployLoop{1}', variables('Deployment'), parameters('AppServer').Name))]",
                        "[resourceId('Microsoft.Compute/availabilitySets', format('{0}-as{1}', variables('Deployment'), variables('ASNAME')))]",
                        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-AppServer-diskLookup{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, contains(parameters('AppServer'), 'shutdown'))]",
                      "type": "Microsoft.DevTestLab/schedules",
                      "apiVersion": "2018-09-15",
                      "name": "[format('shutdown-computevm-{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "dailyRecurrence": {
                          "time": "[parameters('AppServer').shutdown.time]"
                        },
                        "notificationSettings": {
                          "status": "[if(and(contains(parameters('AppServer').shutdown, 'notification'), bool(parameters('AppServer').shutdown.notification)), 'Enabled', 'Disabled')]",
                          "emailRecipient": "[replace(replace(replace(string(parameters('Global').alertRecipients), '\",\"', ';'), '[\"', ''), '\"]', '')]",
                          "notificationLocale": "en",
                          "timeInMinutes": 30
                        },
                        "status": "[if(or(not(contains(parameters('AppServer').shutdown, 'enabled')), and(contains(parameters('AppServer').shutdown, 'enabled'), bool(parameters('AppServer').shutdown.enabled))), 'Enabled', 'Disabled')]",
                        "targetResourceId": "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]",
                        "taskType": "ComputeVmShutdownTask",
                        "timeZoneId": "[parameters('Global').shutdownSchedulerTimeZone]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.CertMgmt))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'KVAppServerExtensionForWindows')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.Azure.KeyVault.Edp",
                        "type": "KeyVaultForWindows",
                        "typeHandlerVersion": "0.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "secretsManagementSettings": {
                            "pollingIntervalInS": 3600,
                            "certificateStoreName": "MY",
                            "certificateStoreLocation": "LOCAL_MACHINE",
                            "observedCertificates": [
                              "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults/secrets', variables('HubKVName'), parameters('Global').CertName), '2021-06-01-preview').secretUri]"
                            ]
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(parameters('VM').match, bool(parameters('VM').Extensions.AADLogin)), and(contains(parameters('AppServer'), 'ExcludeAADLogin'), not(equals(parameters('AppServer').ExcludeAADLogin, 1))))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'AADLogin')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'Microsoft.Azure.ActiveDirectory', 'Microsoft.Azure.ActiveDirectory.LinuxSSH')]",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'AADLoginForWindows', 'AADLoginForLinux')]",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.AzureDefender))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'AzureDefenderForServers')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.Azure.AzureDefenderForServers",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'MDE.Windows', 'MDE.Linux')]",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "azureResourceId": "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]",
                          "defenderForServersWorkspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', variables('DeploymentURI')))]",
                          "forceReOnboarding": false
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.GuestConfig))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'AzureGuestConfig')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.GuestConfiguration",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'ConfigurationForWindows', 'ConfigurationForLinux')]",
                        "typeHandlerVersion": "1.2",
                        "autoUpgradeMinorVersion": true,
                        "settings": {}
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(parameters('VM').match, bool(parameters('VM').Extensions.AdminCenter)), and(contains(parameters('AppServer'), 'ExcludeAdminCenter'), not(equals(parameters('AppServer').ExcludeAdminCenter, 1))))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'AdminCenter')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "publisher": "Microsoft.AdminCenter",
                        "type": "AdminCenter",
                        "typeHandlerVersion": "0.0",
                        "settings": {
                          "port": "6516",
                          "cspFrameAncestors": [
                            "https://portal.azure.com",
                            "https://*.hosting.portal.azure.net",
                            "https://localhost:1340"
                          ],
                          "corsOrigins": [
                            "https://portal.azure.com",
                            "https://waconazure.com"
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(parameters('VM').match, bool(parameters('VM').Extensions.DomainJoin)), not(and(contains(parameters('AppServer'), 'ExcludeDomainJoin'), bool(parameters('AppServer').ExcludeDomainJoin))))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'joindomain')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.Compute",
                        "type": "JsonADDomainExtension",
                        "typeHandlerVersion": "1.3",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "Name": "[parameters('Global').ADDomainName]",
                          "OUPath": "[if(contains(parameters('AppServer'), 'OUPath'), parameters('AppServer').OUPath, '')]",
                          "User": "[format('{0}@{1}', parameters('Global').vmAdminUserName, parameters('Global').ADDomainName)]",
                          "Restart": "true",
                          "Options": 3
                        },
                        "protectedSettings": {
                          "Password": "[parameters('vmAdminPassword')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(parameters('VM').match, bool(parameters('VM').Extensions.DSC)), equals(parameters('AppServer').Role, 'PULL'))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'Microsoft.Powershell.DSC.Pull')]",
                      "location": "[resourceGroup().location]",
                      "tags": {
                        "displayName": "Powershell.DSC.Pull"
                      },
                      "properties": {
                        "publisher": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'Microsoft.Powershell', 'Microsoft.OSTCExtensions')]",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'DSC', 'DSCForLinux')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '2.77', '2.0')]",
                        "autoUpgradeMinorVersion": true,
                        "protectedSettings": {
                          "Items": {
                            "registrationKeyPrivate": "[listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubRGName')), 'Microsoft.Automation/automationAccounts', variables('AAName')), '2020-01-13-preview').keys[0].Value]"
                          }
                        },
                        "settings": {
                          "advancedOptions": {
                            "forcePullAndApply": true
                          },
                          "Properties": [
                            {
                              "Name": "RegistrationKey",
                              "Value": {
                                "UserName": "PLACEHOLDER_DONOTUSE",
                                "Password": "PrivateSettingsRef:registrationKeyPrivate"
                              },
                              "TypeName": "System.Management.Automation.PSCredential"
                            },
                            {
                              "Name": "RegistrationUrl",
                              "Value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubRGName')), 'Microsoft.Automation/automationAccounts', variables('AAName')), '2020-01-13-preview').RegistrationUrl]",
                              "TypeName": "System.String"
                            },
                            {
                              "Name": "NodeConfigurationName",
                              "Value": "[format('{0}.{1}_{2}_{3}_{4}{5}', if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], 'AppServers'), parameters('Global').OrgName, parameters('Global').Appname, parameters('AppServer').ROLE, parameters('Environment'), parameters('DeploymentID'))]",
                              "TypeName": "System.String"
                            },
                            {
                              "Name": "ConfigurationMode",
                              "Value": "[variables('ConfigurationMode')[parameters('Environment')]]",
                              "TypeName": "System.String"
                            },
                            {
                              "Name": "RebootNodeIfNeeded",
                              "Value": "[variables('RebootNodeLookup')[parameters('Environment')]]",
                              "TypeName": "System.Boolean"
                            },
                            {
                              "Name": "ConfigurationModeFrequencyMins",
                              "Value": "[variables('DSCConfigurationModeFrequencyMins')]",
                              "TypeName": "System.Int32"
                            },
                            {
                              "Name": "RefreshFrequencyMins",
                              "Value": 30,
                              "TypeName": "System.Int32"
                            },
                            {
                              "Name": "ActionAfterReboot",
                              "Value": "ContinueConfiguration",
                              "TypeName": "System.String"
                            },
                            {
                              "Name": "AllowModuleOverwrite",
                              "Value": true,
                              "TypeName": "System.Boolean"
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'joindomain')]",
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(and(parameters('VM').match, and(contains(parameters('VM').Extensions, 'DSC2'), bool(parameters('VM').Extensions.DSC2))), not(equals(parameters('AppServer').Role, 'PULL'))), or(or(equals(parameters('DeploymentName'), 'ConfigSQLAO'), equals(parameters('DeploymentName'), 'CreateADPDC')), equals(parameters('DeploymentName'), 'CreateADBDC')))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'Microsoft.Powershell.DSC2')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'Microsoft.Powershell', 'Microsoft.OSTCExtensions')]",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'DSC', 'DSCForLinux')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '2.24', '2.0')]",
                        "autoUpgradeMinorVersion": true,
                        "forceUpdateTag": "[parameters('deploymentTime')]",
                        "settings": {
                          "wmfVersion": "latest",
                          "configuration": {
                            "url": "[format('{0}/ext-DSC/DSC-{1}.zip', parameters('Global')._artifactsLocation, if(contains(parameters('AppServer'), 'DSConfig'), parameters('AppServer').DSConfig, if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], parameters('DeploymentName'))))]",
                            "script": "[format('DSC-{0}.ps1', if(contains(parameters('AppServer'), 'DSConfig'), parameters('AppServer').DSConfig, if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], parameters('DeploymentName'))))]",
                            "function": "[if(contains(parameters('AppServer'), 'DSConfig'), parameters('AppServer').DSConfig, if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], parameters('DeploymentName')))]"
                          },
                          "configurationArguments": {
                            "DomainName": "[parameters('Global').ADDomainName]"
                          }
                        },
                        "protectedSettings": {
                          "configurationArguments": {
                            "AdminCreds": {
                              "UserName": "[parameters('Global').vmAdminUserName]",
                              "Password": "[parameters('vmAdminPassword')]"
                            },
                            "SQLServiceCreds": {
                              "UserName": "sqladmin",
                              "Password": "[parameters('vmAdminPassword')]"
                            },
                            "witnessStorageKey": {
                              "UserName": "sakey",
                              "Password": "[parameters('saKey')]"
                            }
                          },
                          "configurationUrlSasToken": "[parameters('Global')._artifactsLocationSasToken]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'joindomain')]",
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(and(parameters('VM').match, bool(parameters('VM').Extensions.DSC)), not(equals(parameters('AppServer').Role, 'PULL'))), not(or(or(equals(parameters('DeploymentName'), 'ConfigSQLAO'), equals(parameters('DeploymentName'), 'CreateADPDC')), equals(parameters('DeploymentName'), 'CreateADBDC'))))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'Microsoft.Powershell.DSC')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'Microsoft.Powershell', 'Microsoft.OSTCExtensions')]",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'DSC', 'DSCForLinux')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '2.24', '2.0')]",
                        "autoUpgradeMinorVersion": true,
                        "forceUpdateTag": "[parameters('deploymentTime')]",
                        "settings": {
                          "wmfVersion": "latest",
                          "configuration": {
                            "url": "[format('{0}/ext-DSC/DSC-{1}.zip', parameters('Global')._artifactsLocation, if(contains(parameters('AppServer'), 'DSConfig'), parameters('AppServer').DSConfig, if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], parameters('DeploymentName'))))]",
                            "script": "[format('DSC-{0}.ps1', if(contains(parameters('AppServer'), 'DSConfig'), parameters('AppServer').DSConfig, if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], parameters('DeploymentName'))))]",
                            "function": "[if(contains(parameters('AppServer'), 'DSConfig'), parameters('AppServer').DSConfig, if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], parameters('DeploymentName')))]"
                          },
                          "configurationArguments": {
                            "DomainName": "[parameters('Global').ADDomainName]",
                            "Thumbprint": "[parameters('Global').CertThumbprint]",
                            "storageAccountId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('globalRGName')), 'Microsoft.Storage/storageAccounts', variables('globalSAName'))]",
                            "deployment": "[variables('Deployment')]",
                            "networkid": "[format('{0}.', variables('networkId'))]",
                            "appInfo": "[if(contains(parameters('AppServer'), 'AppInfo'), string(parameters('VM').AppInfo), '')]",
                            "DataDiskInfo": "[string(parameters('VM').DataDisk)]",
                            "clientIDLocal": "[if(equals(format('{0}{1}', parameters('Environment'), parameters('DeploymentID')), 'G0'), '', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('RGName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-uaiStorageAccountOperator', variables('Deployment'))), '2018-11-30').clientId)]",
                            "clientIDGlobal": "[if(equals(format('{0}{1}', parameters('Environment'), parameters('DeploymentID')), 'G0'), '', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('RGName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-uaiStorageAccountFileContributor', variables('Deployment'))), '2018-11-30').clientId)]"
                          },
                          "configurationData": {
                            "url": "[format('{0}/ext-CD/{1}-ConfigurationData.psd1', parameters('Global')._artifactsLocation, parameters('AppServer').Role)]"
                          }
                        },
                        "protectedSettings": {
                          "configurationArguments": {
                            "AdminCreds": {
                              "UserName": "[parameters('Global').vmAdminUserName]",
                              "Password": "[parameters('vmAdminPassword')]"
                            },
                            "sshPublic": {
                              "UserName": "ssh",
                              "Password": "[parameters('sshPublic')]"
                            },
                            "devOpsPat": {
                              "UserName": "pat",
                              "Password": "[parameters('devOpsPat')]"
                            }
                          },
                          "configurationUrlSasToken": "[parameters('Global')._artifactsLocationSasToken]",
                          "configurationDataUrlSasToken": "[parameters('Global')._artifactsLocationSasToken]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'joindomain')]",
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.IaaSDiagnostics))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2020-12-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'vmDiagnostics')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Diagnostics",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'IaaSDiagnostics', 'LinuxDiagnostic')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '1.9', '3.0')]",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "WadCfg": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), variables('WadCfg'), null())]",
                          "ladCfg": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), null(), variables('ladCfg'))]",
                          "StorageAccount": "[variables('saaccountiddiag')]",
                          "StorageType": "TableAndBlob"
                        },
                        "protectedSettings": {
                          "storageAccountName": "[variables('saaccountiddiag')]",
                          "storageAccountKey": "[listKeys(variables('saaccountiddiag'), '2016-01-01').keys[0].value]",
                          "storageAccountEndPoint": "[format('https://{0}/', environment().suffixes.storage)]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.DependencyAgent))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2020-12-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'DependencyAgent')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'DependencyAgentWindows', 'DependencyAgentLinux')]",
                        "typeHandlerVersion": "9.5",
                        "autoUpgradeMinorVersion": true
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.AzureMonitorAgent))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2020-12-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), format('{0}', if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'AzureMonitorWindowsAgent', 'AzureMonitorLinuxAgent')))]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "publisher": "Microsoft.Azure.Monitor",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'AzureMonitorWindowsAgent', 'AzureMonitorLinuxAgent')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '1.0', '1.5')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.MonitoringAgent))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2020-12-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'MonitoringAgent')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.EnterpriseCloud.Monitoring",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'MicrosoftMonitoringAgent', 'OmsAgentForLinux')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '1.0', '1.4')]",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "workspaceId": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', variables('DeploymentURI'))), '2021-06-01').customerId]"
                        },
                        "protectedSettings": {
                          "workspaceKey": "[listKeys(resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', variables('DeploymentURI'))), '2021-06-01').primarySharedKey]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.GuestHealthAgent))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2020-12-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), format('{0}', if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'GuestHealthWindowsAgent', 'GuestHealthLinuxAgent')))]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "publisher": "Microsoft.Azure.Monitor.VirtualMachines.GuestHealth",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'GuestHealthWindowsAgent', 'GuestHealthLinuxAgent')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '1.0', '1.0')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Insights/dataCollectionRuleAssociations",
                      "apiVersion": "2019-11-01-preview",
                      "scope": "[format('Microsoft.Compute/virtualMachines/{0}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]",
                      "name": "[format('{0}vmInsights', variables('DeploymentURI'))]",
                      "properties": {
                        "description": "Association of data collection rule for AppServer Insights Health.",
                        "dataCollectionRuleId": "[resourceId('Microsoft.Insights/dataCollectionRules', format('{0}vmInsights', variables('DeploymentURI')))]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.chefClient))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'chefClient')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Chef.Bootstrap.WindowsAzure",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'ChefClient', 'LinuxChefClient')]",
                        "typeHandlerVersion": "1210.12",
                        "settings": {
                          "bootstrap_options": {
                            "chef_server_url": "[parameters('Global').chef_server_url]",
                            "validation_client_name": "[parameters('Global').chef_validation_client_name]"
                          },
                          "runlist": "recipe[mycookbook::default]"
                        },
                        "protectedSettings": {
                          "validation_key": "[parameters('Global').chef_validation_key]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(parameters('VM').match, equals(parameters('AppServer').role, 'SQL')), bool(parameters('VM').Extensions.SqlIaasExtension))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'SqlIaasExtension')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "type": "SqlIaaSAgent",
                        "publisher": "Microsoft.SqlServer.Management",
                        "typeHandlerVersion": "1.2",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "AutoTelemetrySettings": {
                            "Region": "[resourceGroup().location]"
                          },
                          "KeyVaultCredentialSettings": {
                            "Enable": true,
                            "CredentialName": "[parameters('Global').sqlCredentialName]"
                          }
                        },
                        "protectedSettings": {
                          "PrivateKeyVaultCredentialSettings": {
                            "AzureKeyVaultUrl": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults', variables('HubKVName')), '2021-06-01-preview').vaultUri]",
                            "StorageUrl": "[reference(resourceId('Microsoft.Storage/storageAccounts', if(equals(parameters('AppServer').Role, 'SQL'), variables('saSQLBackupName'), variables('SADiagName'))), '2015-06-15').primaryEndpoints.blob]",
                            "StorageAccessKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', if(equals(parameters('AppServer').Role, 'SQL'), variables('saSQLBackupName'), variables('SADiagName'))), '2016-01-01').keys[0].value]",
                            "Password": "[parameters('vmAdminPassword')]"
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(parameters('VM').match, equals(parameters('AppServer').role, 'SQL')), bool(parameters('VM').Extensions.BackupWindowsWorkloadSQL))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'AzureBackupWindowsWorkload')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "locale": "en-us",
                          "AppServerType": "microsoft.compute/virtualmachines"
                        },
                        "publisher": "Microsoft.Azure.RecoveryServices.WorkloadBackup",
                        "type": "AzureBackupWindowsWorkload",
                        "typeHandlerVersion": "1.1"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.Antimalware))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'IaaSAntimalware')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Security",
                        "type": "IaaSAntimalware",
                        "typeHandlerVersion": "1.5",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "Monitoring": "ON",
                          "StorageAccountName": "[variables('SADiagName')]",
                          "AntimalwareEnabled": true,
                          "RealtimeProtectionEnabled": "true",
                          "ScheduledScanSettings": {
                            "isEnabled": "true",
                            "day": "1",
                            "time": "720",
                            "scanType": "Full"
                          },
                          "Exclusions": {
                            "Extensions": "",
                            "Paths": "",
                            "Processes": ""
                          }
                        },
                        "protectedSettings": null
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-AppServer-publicIPDeploy{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[variables('Deployment')]"
                          },
                          "DeploymentURI": {
                            "value": "[variables('DeploymentURI')]"
                          },
                          "NICs": {
                            "value": "[parameters('AppServer').NICs]"
                          },
                          "VM": {
                            "value": "[parameters('AppServer')]"
                          },
                          "PIPprefix": {
                            "value": "AppServer"
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "18109364379899578760"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "DeploymentURI": {
                              "type": "string"
                            },
                            "PIPprefix": {
                              "type": "string"
                            },
                            "NICs": {
                              "type": "array"
                            },
                            "VM": {
                              "type": "object"
                            },
                            "Global": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "condition": "[and(contains(parameters('NICs')[copyIndex()], 'PublicIP'), not(equals(parameters('NICs')[copyIndex()].PublicIP, null())))]",
                              "copy": {
                                "name": "PublicIP",
                                "count": "[length(parameters('NICs'))]"
                              },
                              "type": "Microsoft.Network/publicIPAddresses",
                              "apiVersion": "2021-02-01",
                              "name": "[format('{0}-{1}{2}-publicip{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1))]",
                              "location": "[resourceGroup().location]",
                              "sku": {
                                "name": "[if(contains(parameters('VM'), 'Zone'), 'Standard', 'Basic')]"
                              },
                              "properties": {
                                "publicIPAllocationMethod": "[parameters('NICs')[copyIndex()].PublicIP]",
                                "dnsSettings": {
                                  "domainNameLabel": "[toLower(format('{0}-{1}{2}-{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1)))]"
                                }
                              }
                            },
                            {
                              "condition": "[and(contains(parameters('NICs')[copyIndex()], 'PublicIP'), not(equals(parameters('NICs')[copyIndex()].PublicIP, null())))]",
                              "copy": {
                                "name": "PublicIPDiag",
                                "count": "[length(parameters('NICs'))]"
                              },
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2017-05-01-preview",
                              "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', format('{0}-{1}{2}-publicip{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1)))]",
                              "name": "service",
                              "properties": {
                                "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                                "logs": [
                                  {
                                    "category": "DDoSProtectionNotifications",
                                    "enabled": true
                                  }
                                ],
                                "metrics": [
                                  {
                                    "timeGrain": "PT5M",
                                    "enabled": true,
                                    "retentionPolicy": {
                                      "enabled": false,
                                      "days": 0
                                    }
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/publicIPAddresses', format('{0}-{1}{2}-publicip{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1)))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "PIPID": {
                              "type": "array",
                              "copy": {
                                "count": "[length(parameters('NICs'))]",
                                "input": "[if(and(contains(parameters('NICs')[copyIndex()], 'PublicIP'), not(equals(parameters('NICs')[copyIndex()].PublicIP, null()))), resourceId('Microsoft.Network/publicIPAddresses', format('{0}-{1}{2}-publicip{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1))), '')]"
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-AppServer-JITNSG-{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[variables('Deployment')]"
                          },
                          "VM": {
                            "value": "[parameters('AppServer')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "16183288891198554910"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "VM": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/networkSecurityGroups",
                              "apiVersion": "2021-05-01",
                              "name": "[format('{0}-vm{1}-JITNSG', parameters('Deployment'), parameters('VM').Name)]",
                              "location": "[resourceGroup().location]"
                            }
                          ]
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-AppServer-nicDeployLoop{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[variables('Deployment')]"
                          },
                          "DeploymentURI": {
                            "value": "[variables('DeploymentURI')]"
                          },
                          "DeploymentID": {
                            "value": "[parameters('DeploymentID')]"
                          },
                          "NICs": {
                            "value": "[parameters('AppServer').NICs]"
                          },
                          "VM": {
                            "value": "[parameters('AppServer')]"
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "15680478958950286894"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "DeploymentURI": {
                              "type": "string"
                            },
                            "DeploymentID": {
                              "type": "string"
                            },
                            "NICs": {
                              "type": "array"
                            },
                            "VM": {
                              "type": "object"
                            },
                            "Global": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "NIC",
                                "count": "[length(parameters('NICs'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('dp{0}-nicDeploy{1}{2}', parameters('Deployment'), parameters('VM').Name, add(copyIndex(), 1))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "Deployment": {
                                    "value": "[parameters('Deployment')]"
                                  },
                                  "DeploymentURI": {
                                    "value": "[parameters('DeploymentURI')]"
                                  },
                                  "DeploymentID": {
                                    "value": "[parameters('DeploymentID')]"
                                  },
                                  "NIC": {
                                    "value": "[parameters('NICs')[copyIndex()]]"
                                  },
                                  "NICNumber": {
                                    "value": "[string(add(copyIndex(), 1))]"
                                  },
                                  "VM": {
                                    "value": "[parameters('VM')]"
                                  },
                                  "Global": {
                                    "value": "[parameters('Global')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.4.1318.3566",
                                      "templateHash": "13928916846586964615"
                                    }
                                  },
                                  "parameters": {
                                    "Deployment": {
                                      "type": "string"
                                    },
                                    "DeploymentURI": {
                                      "type": "string"
                                    },
                                    "DeploymentID": {
                                      "type": "string"
                                    },
                                    "NIC": {
                                      "type": "object"
                                    },
                                    "NICNumber": {
                                      "type": "string"
                                    },
                                    "VM": {
                                      "type": "object"
                                    },
                                    "Global": {
                                      "type": "object"
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "loadBalancerInboundNatRules",
                                        "count": "[length(variables('rules'))]",
                                        "input": {
                                          "id": "[format('{0}/providers/Microsoft.Network/loadBalancers/{1}-lb{2}/inboundNatRules/{3}', resourceGroup().id, parameters('Deployment'), if(contains(parameters('NIC'), 'PLB'), parameters('NIC').PLB, 'none'), if(contains(parameters('NIC'), 'NATRules'), variables('rules')[copyIndex('loadBalancerInboundNatRules')], 'none'))]"
                                        }
                                      }
                                    ],
                                    "networkId": "[format('{0}{1}', parameters('Global').networkid[0], string(sub(parameters('Global').networkid[1], mul(2, int(parameters('DeploymentID'))))))]",
                                    "networkIdUpper": "[format('{0}{1}', parameters('Global').networkid[0], string(add(1, sub(parameters('Global').networkid[1], mul(2, int(parameters('DeploymentID')))))))]",
                                    "VNetID": "[resourceId('Microsoft.Network/VirtualNetworks', format('{0}-vn', parameters('Deployment')))]",
                                    "subnetID": "[format('{0}/subnets/sn{1}', variables('VNetID'), parameters('NIC').Subnet)]",
                                    "acceleratedNetworking": "[if(contains(parameters('NIC'), 'FastNic'), true(), false())]",
                                    "NICSuffix": "[if(equals(parameters('NICNumber'), '1'), '', parameters('NICNumber'))]",
                                    "IPAllocation": "[if(contains(parameters('NIC'), 'StaticIP'), 'Static', 'Dynamic')]",
                                    "privateIPAddress": "[if(contains(parameters('NIC'), 'StaticIP'), format('{0}.{1}', if(equals(parameters('NIC').Subnet, 'MT02'), variables('networkIdUpper'), variables('networkId')), parameters('NIC').StaticIP), null())]",
                                    "publicIPAddress": "[if(not(contains(parameters('NIC'), 'PublicIP')), null(), createObject('id', resourceId('Microsoft.Network/publicIPAddresses', format('{0}-vm{1}-publicip{2}', parameters('Deployment'), parameters('VM').Name, parameters('NICNumber')))))]",
                                    "JITNSG": {
                                      "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-vm{1}-JITNSG', parameters('Deployment'), parameters('VM').Name))]"
                                    },
                                    "rules": "[if(contains(parameters('NIC'), 'NatRules'), parameters('NIC').NatRules, createArray())]"
                                  },
                                  "resources": [
                                    {
                                      "condition": "[not(or(or(or(contains(parameters('NIC'), 'LB'), contains(parameters('NIC'), 'PLB')), contains(parameters('NIC'), 'SLB')), contains(parameters('NIC'), 'ISLB')))]",
                                      "type": "Microsoft.Network/networkInterfaces",
                                      "apiVersion": "2021-02-01",
                                      "name": "[format('{0}-nic{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name)]",
                                      "location": "[resourceGroup().location]",
                                      "properties": {
                                        "enableAcceleratedNetworking": "[variables('acceleratedNetworking')]",
                                        "ipConfigurations": [
                                          {
                                            "name": "ipconfig1",
                                            "properties": {
                                              "publicIPAddress": "[if(contains(parameters('NIC'), 'PublicIP'), variables('publicIPAddress'), null())]",
                                              "privateIPAllocationMethod": "[variables('IPAllocation')]",
                                              "privateIPAddress": "[variables('privateIPAddress')]",
                                              "subnet": {
                                                "id": "[variables('subnetID')]"
                                              }
                                            }
                                          }
                                        ],
                                        "networkSecurityGroup": "[variables('JITNSG')]"
                                      }
                                    },
                                    {
                                      "condition": "[not(or(contains(parameters('NIC'), 'LB'), or(contains(parameters('NIC'), 'PLB'), or(contains(parameters('NIC'), 'SLB'), contains(parameters('NIC'), 'ISLB')))))]",
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', format('{0}-nic{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]",
                                      "name": "service",
                                      "properties": {
                                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                                        "metrics": [
                                          {
                                            "timeGrain": "PT5M",
                                            "enabled": true,
                                            "retentionPolicy": {
                                              "enabled": false,
                                              "days": 0
                                            }
                                          }
                                        ]
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nic{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]"
                                      ]
                                    },
                                    {
                                      "condition": "[contains(parameters('NIC'), 'PLB')]",
                                      "type": "Microsoft.Network/networkInterfaces",
                                      "apiVersion": "2021-02-01",
                                      "name": "[format('{0}-nicplb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name)]",
                                      "location": "[resourceGroup().location]",
                                      "properties": {
                                        "enableAcceleratedNetworking": "[variables('acceleratedNetworking')]",
                                        "ipConfigurations": [
                                          {
                                            "name": "ipconfig1",
                                            "properties": {
                                              "loadBalancerBackendAddressPools": [
                                                {
                                                  "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', format('{0}-lb{1}', parameters('Deployment'), parameters('NIC').PLB), parameters('NIC').PLB)]"
                                                }
                                              ],
                                              "loadBalancerInboundNatRules": "[if(contains(parameters('NIC'), 'NATRules'), variables('loadBalancerInboundNatRules'), null())]",
                                              "privateIPAllocationMethod": "[variables('IPAllocation')]",
                                              "privateIPAddress": "[variables('privateIPAddress')]",
                                              "subnet": {
                                                "id": "[variables('subnetID')]"
                                              }
                                            }
                                          }
                                        ],
                                        "networkSecurityGroup": "[variables('JITNSG')]"
                                      }
                                    },
                                    {
                                      "condition": "[contains(parameters('NIC'), 'PLB')]",
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', format('{0}-nicplb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]",
                                      "name": "service",
                                      "properties": {
                                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                                        "metrics": [
                                          {
                                            "timeGrain": "PT5M",
                                            "enabled": true,
                                            "retentionPolicy": {
                                              "enabled": false,
                                              "days": 0
                                            }
                                          }
                                        ]
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nicplb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]"
                                      ]
                                    },
                                    {
                                      "condition": "[contains(parameters('NIC'), 'LB')]",
                                      "type": "Microsoft.Network/networkInterfaces",
                                      "apiVersion": "2021-02-01",
                                      "name": "[format('{0}-niclb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name)]",
                                      "location": "[resourceGroup().location]",
                                      "properties": {
                                        "enableAcceleratedNetworking": "[variables('acceleratedNetworking')]",
                                        "ipConfigurations": [
                                          {
                                            "name": "ipconfig1",
                                            "properties": {
                                              "loadBalancerBackendAddressPools": [
                                                {
                                                  "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', format('{0}-ilb{1}', parameters('Deployment'), parameters('NIC').LB), parameters('NIC').LB)]"
                                                }
                                              ],
                                              "privateIPAllocationMethod": "[variables('IPAllocation')]",
                                              "privateIPAddress": "[variables('privateIPAddress')]",
                                              "subnet": {
                                                "id": "[variables('subnetID')]"
                                              }
                                            }
                                          }
                                        ],
                                        "networkSecurityGroup": "[variables('JITNSG')]"
                                      }
                                    },
                                    {
                                      "condition": "[contains(parameters('NIC'), 'LB')]",
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', format('{0}-niclb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]",
                                      "name": "service",
                                      "properties": {
                                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                                        "metrics": [
                                          {
                                            "timeGrain": "PT5M",
                                            "enabled": true,
                                            "retentionPolicy": {
                                              "enabled": false,
                                              "days": 0
                                            }
                                          }
                                        ]
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-niclb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]"
                                      ]
                                    },
                                    {
                                      "condition": "[contains(parameters('NIC'), 'SLB')]",
                                      "type": "Microsoft.Network/networkInterfaces",
                                      "apiVersion": "2021-02-01",
                                      "name": "[format('{0}-nicslb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name)]",
                                      "location": "[resourceGroup().location]",
                                      "properties": {
                                        "enableAcceleratedNetworking": "[variables('acceleratedNetworking')]",
                                        "ipConfigurations": [
                                          {
                                            "name": "ipconfig1",
                                            "properties": {
                                              "loadBalancerBackendAddressPools": [
                                                {
                                                  "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', format('{0}-lb{1}', parameters('Deployment'), parameters('NIC').SLB), parameters('NIC').SLB)]"
                                                }
                                              ],
                                              "privateIPAllocationMethod": "[variables('IPAllocation')]",
                                              "privateIPAddress": "[variables('privateIPAddress')]",
                                              "subnet": {
                                                "id": "[variables('subnetID')]"
                                              }
                                            }
                                          }
                                        ],
                                        "networkSecurityGroup": "[variables('JITNSG')]"
                                      }
                                    },
                                    {
                                      "condition": "[contains(parameters('NIC'), 'SLB')]",
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', format('{0}-nicslb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]",
                                      "name": "service",
                                      "properties": {
                                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                                        "metrics": [
                                          {
                                            "timeGrain": "PT5M",
                                            "enabled": true,
                                            "retentionPolicy": {
                                              "enabled": false,
                                              "days": 0
                                            }
                                          }
                                        ]
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nicslb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]"
                                      ]
                                    }
                                  ],
                                  "outputs": {
                                    "foo7": {
                                      "type": "array",
                                      "value": "[variables('loadBalancerInboundNatRules')]"
                                    },
                                    "foo": {
                                      "type": "object",
                                      "value": "[parameters('NIC')]"
                                    }
                                  }
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-AppServer-publicIPDeploy{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-AppServer-diskLookup{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[variables('Deployment')]"
                          },
                          "DeploymentID": {
                            "value": "[parameters('DeploymentID')]"
                          },
                          "Name": {
                            "value": "[parameters('AppServer').Name]"
                          },
                          "SOFS": {
                            "value": "[if(contains(variables('DataDiskInfo')[parameters('AppServer').DDRole], 'SOFS'), variables('DataDiskInfo')[parameters('AppServer').DDRole].SOFS, json('{\"1\":1}'))]"
                          },
                          "DATA": {
                            "value": "[if(contains(variables('DataDiskInfo')[parameters('AppServer').DDRole], 'DATA'), variables('DataDiskInfo')[parameters('AppServer').DDRole].DATA, json('{\"1\":1}'))]"
                          },
                          "LOGS": {
                            "value": "[if(contains(variables('DataDiskInfo')[parameters('AppServer').DDRole], 'LOGS'), variables('DataDiskInfo')[parameters('AppServer').DDRole].LOGS, json('{\"1\":1}'))]"
                          },
                          "TEMPDB": {
                            "value": "[if(contains(variables('DataDiskInfo')[parameters('AppServer').DDRole], 'TEMPDB'), variables('DataDiskInfo')[parameters('AppServer').DDRole].TEMPDB, json('{\"1\":1}'))]"
                          },
                          "BACKUP": {
                            "value": "[if(contains(variables('DataDiskInfo')[parameters('AppServer').DDRole], 'BACKUP'), variables('DataDiskInfo')[parameters('AppServer').DDRole].BACKUP, json('{\"1\":1}'))]"
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "13688646372196984293"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "DeploymentID": {
                              "type": "string"
                            },
                            "Name": {
                              "type": "string"
                            },
                            "DATA": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "DATASS": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "SOFS": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "LOGS": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "TEMPDB": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "BACKUP": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "DISKS": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "Global": {
                              "type": "object"
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "Data_var",
                                "count": "[length(range(0, if(contains(parameters('DATA'), '1'), 1, length(parameters('DATA').LUNS))))]",
                                "input": {
                                  "name": "[if(contains(parameters('DATA'), '1'), 1, format('{0}-{1}-DATA-DATA{2}', parameters('Deployment'), parameters('Name'), padLeft(parameters('DATA').LUNS[range(0, if(contains(parameters('DATA'), '1'), 1, length(parameters('DATA').LUNS)))[copyIndex('Data_var')]][0], 2, '0')))]",
                                  "lun": "[if(contains(parameters('DATA'), '1'), 1, int(parameters('DATA').LUNS[range(0, if(contains(parameters('DATA'), '1'), 1, length(parameters('DATA').LUNS)))[copyIndex('Data_var')]][0]))]",
                                  "caching": "[if(contains(parameters('DATA'), '1'), 1, parameters('DATA').caching)]",
                                  "diskSizeGB": "[if(contains(parameters('DATA'), '1'), 1, int(parameters('DATA').LUNS[range(0, if(contains(parameters('DATA'), '1'), 1, length(parameters('DATA').LUNS)))[copyIndex('Data_var')]][1]))]",
                                  "createOption": "[if(contains(parameters('DATA'), '1'), 1, if(equals(length(parameters('DATA').LUNS[range(0, if(contains(parameters('DATA'), '1'), 1, length(parameters('DATA').LUNS)))[copyIndex('Data_var')]]), 3), parameters('DATA').LUNS[range(0, if(contains(parameters('DATA'), '1'), 1, length(parameters('DATA').LUNS)))[copyIndex('Data_var')]][2], 'Empty'))]",
                                  "managedDisk": "[if(contains(parameters('DATA'), '1'), 1, if(contains(parameters('DATA'), 'saType'), json(format('{{\"storageAccountType\":\"{0}\"}}', parameters('DATA').saType)), json('null')))]"
                                }
                              },
                              {
                                "name": "Datass_var",
                                "count": "[length(range(0, if(contains(parameters('DATASS'), '1'), 1, length(parameters('DATASS').LUNS))))]",
                                "input": {
                                  "lun": "[if(contains(parameters('DATASS'), '1'), 1, int(parameters('DATASS').LUNS[range(0, if(contains(parameters('DATASS'), '1'), 1, length(parameters('DATASS').LUNS)))[copyIndex('Datass_var')]][0]))]",
                                  "caching": "[if(contains(parameters('DATASS'), '1'), 1, parameters('DATASS').caching)]",
                                  "diskSizeGB": "[if(contains(parameters('DATASS'), '1'), 1, int(parameters('DATASS').LUNS[range(0, if(contains(parameters('DATASS'), '1'), 1, length(parameters('DATASS').LUNS)))[copyIndex('Datass_var')]][1]))]",
                                  "createOption": "[if(contains(parameters('DATASS'), '1'), 1, if(equals(length(parameters('DATASS').LUNS[range(0, if(contains(parameters('DATASS'), '1'), 1, length(parameters('DATASS').LUNS)))[copyIndex('Datass_var')]]), 3), parameters('DATASS').LUNS[range(0, if(contains(parameters('DATASS'), '1'), 1, length(parameters('DATASS').LUNS)))[copyIndex('Datass_var')]][2], 'Empty'))]",
                                  "managedDisk": "[if(contains(parameters('DATASS'), '1'), 1, if(contains(parameters('DATASS'), 'saType'), json(format('{{\"storageAccountType\":\"{0}\"}}', parameters('DATASS').saType)), json('null')))]"
                                }
                              },
                              {
                                "name": "SOFS_var",
                                "count": "[length(range(0, if(contains(parameters('SOFS'), '1'), 1, length(parameters('SOFS').LUNS))))]",
                                "input": {
                                  "name": "[if(contains(parameters('SOFS'), '1'), 1, format('{0}-{1}-DATA-SOFS{2}', parameters('Deployment'), parameters('Name'), padLeft(parameters('SOFS').LUNS[range(0, if(contains(parameters('SOFS'), '1'), 1, length(parameters('SOFS').LUNS)))[copyIndex('SOFS_var')]][0], 2, '0')))]",
                                  "lun": "[if(contains(parameters('SOFS'), '1'), 1, int(parameters('SOFS').LUNS[range(0, if(contains(parameters('SOFS'), '1'), 1, length(parameters('SOFS').LUNS)))[copyIndex('SOFS_var')]][0]))]",
                                  "caching": "[if(contains(parameters('SOFS'), '1'), 1, parameters('SOFS').caching)]",
                                  "diskSizeGB": "[if(contains(parameters('SOFS'), '1'), 1, int(parameters('SOFS').LUNS[range(0, if(contains(parameters('SOFS'), '1'), 1, length(parameters('SOFS').LUNS)))[copyIndex('SOFS_var')]][1]))]",
                                  "createOption": "[if(contains(parameters('SOFS'), '1'), 1, if(equals(length(parameters('SOFS').LUNS[range(0, if(contains(parameters('SOFS'), '1'), 1, length(parameters('SOFS').LUNS)))[copyIndex('SOFS_var')]]), 3), parameters('SOFS').LUNS[range(0, if(contains(parameters('SOFS'), '1'), 1, length(parameters('SOFS').LUNS)))[copyIndex('SOFS_var')]][2], 'Empty'))]",
                                  "managedDisk": "[if(contains(parameters('SOFS'), '1'), 1, if(contains(parameters('SOFS'), 'saType'), json(format('{{\"storageAccountType\":\"{0}\"}}', parameters('SOFS').saType)), json('null')))]"
                                }
                              },
                              {
                                "name": "LOGS_var",
                                "count": "[length(range(0, if(contains(parameters('LOGS'), '1'), 1, length(parameters('LOGS').LUNS))))]",
                                "input": {
                                  "name": "[if(contains(parameters('LOGS'), '1'), 1, format('{0}-{1}-DATA-LOGS{2}', parameters('Deployment'), parameters('Name'), padLeft(parameters('LOGS').LUNS[range(0, if(contains(parameters('LOGS'), '1'), 1, length(parameters('LOGS').LUNS)))[copyIndex('LOGS_var')]][0], 2, '0')))]",
                                  "lun": "[if(contains(parameters('LOGS'), '1'), 1, int(parameters('LOGS').LUNS[range(0, if(contains(parameters('LOGS'), '1'), 1, length(parameters('LOGS').LUNS)))[copyIndex('LOGS_var')]][0]))]",
                                  "caching": "[if(contains(parameters('LOGS'), '1'), 1, parameters('LOGS').caching)]",
                                  "diskSizeGB": "[if(contains(parameters('LOGS'), '1'), 1, int(parameters('LOGS').LUNS[range(0, if(contains(parameters('LOGS'), '1'), 1, length(parameters('LOGS').LUNS)))[copyIndex('LOGS_var')]][1]))]",
                                  "createOption": "[if(contains(parameters('LOGS'), '1'), 1, if(equals(length(parameters('LOGS').LUNS[range(0, if(contains(parameters('LOGS'), '1'), 1, length(parameters('LOGS').LUNS)))[copyIndex('LOGS_var')]]), 3), parameters('LOGS').LUNS[range(0, if(contains(parameters('LOGS'), '1'), 1, length(parameters('LOGS').LUNS)))[copyIndex('LOGS_var')]][2], 'Empty'))]",
                                  "managedDisk": "[if(contains(parameters('LOGS'), '1'), 1, if(contains(parameters('LOGS'), 'saType'), json(format('{{\"storageAccountType\":\"{0}\"}}', parameters('LOGS').saType)), json('null')))]"
                                }
                              },
                              {
                                "name": "TEMPDB_var",
                                "count": "[length(range(0, if(contains(parameters('TEMPDB'), '1'), 1, length(parameters('TEMPDB').LUNS))))]",
                                "input": {
                                  "name": "[if(contains(parameters('TEMPDB'), '1'), 1, format('{0}-{1}-DATA-TEMPDB{2}', parameters('Deployment'), parameters('Name'), padLeft(parameters('TEMPDB').LUNS[range(0, if(contains(parameters('TEMPDB'), '1'), 1, length(parameters('TEMPDB').LUNS)))[copyIndex('TEMPDB_var')]][0], 2, '0')))]",
                                  "lun": "[if(contains(parameters('TEMPDB'), '1'), 1, int(parameters('TEMPDB').LUNS[range(0, if(contains(parameters('TEMPDB'), '1'), 1, length(parameters('TEMPDB').LUNS)))[copyIndex('TEMPDB_var')]][0]))]",
                                  "caching": "[if(contains(parameters('TEMPDB'), '1'), 1, parameters('TEMPDB').caching)]",
                                  "diskSizeGB": "[if(contains(parameters('TEMPDB'), '1'), 1, int(parameters('TEMPDB').LUNS[range(0, if(contains(parameters('TEMPDB'), '1'), 1, length(parameters('TEMPDB').LUNS)))[copyIndex('TEMPDB_var')]][1]))]",
                                  "createOption": "[if(contains(parameters('TEMPDB'), '1'), 1, if(equals(length(parameters('TEMPDB').LUNS[range(0, if(contains(parameters('TEMPDB'), '1'), 1, length(parameters('TEMPDB').LUNS)))[copyIndex('TEMPDB_var')]]), 3), parameters('TEMPDB').LUNS[range(0, if(contains(parameters('TEMPDB'), '1'), 1, length(parameters('TEMPDB').LUNS)))[copyIndex('TEMPDB_var')]][2], 'Empty'))]",
                                  "managedDisk": "[if(contains(parameters('TEMPDB'), '1'), 1, if(contains(parameters('TEMPDB'), 'saType'), json(format('{{\"storageAccountType\":\"{0}\"}}', parameters('TEMPDB').saType)), json('null')))]"
                                }
                              },
                              {
                                "name": "BACKUP_var",
                                "count": "[length(range(0, if(contains(parameters('BACKUP'), '1'), 1, length(parameters('BACKUP').LUNS))))]",
                                "input": {
                                  "name": "[if(contains(parameters('BACKUP'), '1'), 1, format('{0}-{1}-DATA-BACKUP{2}', parameters('Deployment'), parameters('Name'), padLeft(parameters('BACKUP').LUNS[range(0, if(contains(parameters('BACKUP'), '1'), 1, length(parameters('BACKUP').LUNS)))[copyIndex('BACKUP_var')]][0], 2, '0')))]",
                                  "lun": "[if(contains(parameters('BACKUP'), '1'), 1, int(parameters('BACKUP').LUNS[range(0, if(contains(parameters('BACKUP'), '1'), 1, length(parameters('BACKUP').LUNS)))[copyIndex('BACKUP_var')]][0]))]",
                                  "caching": "[if(contains(parameters('BACKUP'), '1'), 1, parameters('BACKUP').caching)]",
                                  "diskSizeGB": "[if(contains(parameters('BACKUP'), '1'), 1, int(parameters('BACKUP').LUNS[range(0, if(contains(parameters('BACKUP'), '1'), 1, length(parameters('BACKUP').LUNS)))[copyIndex('BACKUP_var')]][1]))]",
                                  "createOption": "[if(contains(parameters('BACKUP'), '1'), 1, if(equals(length(parameters('BACKUP').LUNS[range(0, if(contains(parameters('BACKUP'), '1'), 1, length(parameters('BACKUP').LUNS)))[copyIndex('BACKUP_var')]]), 3), parameters('BACKUP').LUNS[range(0, if(contains(parameters('BACKUP'), '1'), 1, length(parameters('BACKUP').LUNS)))[copyIndex('BACKUP_var')]][2], 'Empty'))]",
                                  "managedDisk": "[if(contains(parameters('BACKUP'), '1'), 1, if(contains(parameters('BACKUP'), 'saType'), json(format('{{\"storageAccountType\":\"{0}\"}}', parameters('BACKUP').saType)), json('null')))]"
                                }
                              }
                            ]
                          },
                          "resources": [],
                          "outputs": {
                            "SOFS": {
                              "type": "array",
                              "value": "[if(contains(parameters('SOFS'), '1'), array('no SOFS disks'), variables('SOFS_var'))]"
                            },
                            "DATA": {
                              "type": "array",
                              "value": "[if(contains(parameters('DATA'), '1'), array('no DATA disks'), variables('Data_var'))]"
                            },
                            "DATASS": {
                              "type": "array",
                              "value": "[if(contains(parameters('DATASS'), '1'), array('no DATA disks'), variables('Datass_var'))]"
                            },
                            "LOGS": {
                              "type": "array",
                              "value": "[if(contains(parameters('LOGS'), '1'), array('no LOGS disks'), variables('LOGS_var'))]"
                            },
                            "TEMPDB": {
                              "type": "array",
                              "value": "[if(contains(parameters('TEMPDB'), '1'), array('no TEMPDB disks'), variables('TEMPDB_var'))]"
                            },
                            "BACKUP": {
                              "type": "array",
                              "value": "[if(contains(parameters('BACKUP'), '1'), array('no BACKUP disks'), variables('BACKUP_var'))]"
                            },
                            "DATADisks": {
                              "type": "array",
                              "value": "[union(if(contains(parameters('SOFS'), '1'), createArray(), variables('SOFS_var')), if(contains(parameters('DATA'), '1'), createArray(), variables('Data_var')), if(contains(parameters('DATASS'), '1'), createArray(), variables('Datass_var')), if(contains(parameters('LOGS'), '1'), createArray(), variables('LOGS_var')), if(contains(parameters('TEMPDB'), '1'), createArray(), variables('TEMPDB_var')), if(contains(parameters('BACKUP'), '1'), createArray(), variables('BACKUP_var')))]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "condition": "[bool(parameters('AppServer').DeployJIT)]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-AppServer-JIT-{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[variables('Deployment')]"
                          },
                          "VM": {
                            "value": "[parameters('AppServer')]"
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          },
                          "DeploymentID": {
                            "value": "[parameters('DeploymentID')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "17671050488544287828"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "VM": {
                              "type": "object"
                            },
                            "Global": {
                              "type": "object"
                            },
                            "DeploymentID": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "ports",
                                "count": "[length(variables('portList'))]",
                                "input": {
                                  "number": "[variables('portList')[copyIndex('ports')]]",
                                  "protocol": "TCP",
                                  "allowedSourceAddressPrefixes": "[union(parameters('Global').IPAddressforRemoteAccess, variables('addressPrefixes'))]",
                                  "maxRequestAccessDuration": "PT3H"
                                }
                              }
                            ],
                            "portList": [
                              3389,
                              22,
                              5985,
                              5986
                            ],
                            "networkId": "[format('{0}{1}', parameters('Global').networkid[0], string(sub(parameters('Global').networkid[1], mul(2, int(parameters('DeploymentID'))))))]",
                            "addressPrefixes": [
                              "[format('{0}.0/23', variables('networkId'))]"
                            ]
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Security/locations/jitNetworkAccessPolicies",
                              "apiVersion": "2020-01-01",
                              "name": "[format('{0}/JIT_{1}', resourceGroup().location, format('{0}-vm{1}', parameters('Deployment'), parameters('VM').name))]",
                              "kind": "Basic",
                              "properties": {
                                "virtualMachines": [
                                  {
                                    "id": "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', parameters('Deployment'), parameters('VM').name))]",
                                    "ports": "[variables('ports')]"
                                  }
                                ],
                                "appendMode": true
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "Disks": {
                      "type": "array",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('dp{0}-AppServer-diskLookup{1}', variables('Deployment'), parameters('AppServer').Name))).outputs.DATADisks.value]"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-LB', variables('Deployment')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-OMS', variables('Deployment')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-SA', variables('Deployment')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-VNETDNSDC1', variables('Deployment')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-VNETDNSDC2', variables('Deployment')))]"
      ]
    },
    {
      "condition": "[and(contains(parameters('Stage'), 'ConfigSQLAO'), bool(parameters('Stage').ConfigSQLAO))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "ConfigSQLAO",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "DeploymentID": {
            "value": "[parameters('DeploymentID')]"
          },
          "DeploymentInfo": {
            "value": "[parameters('DeploymentInfo')]"
          },
          "Environment": {
            "value": "[parameters('Environment')]"
          },
          "Extensions": {
            "value": "[parameters('Extensions')]"
          },
          "Global": {
            "value": "[parameters('Global')]"
          },
          "Prefix": {
            "value": "[parameters('Prefix')]"
          },
          "Stage": {
            "value": "[parameters('Stage')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "13874993644946453761"
            }
          },
          "parameters": {
            "Prefix": {
              "type": "string"
            },
            "Environment": {
              "type": "string",
              "defaultValue": "D",
              "allowedValues": [
                "I",
                "D",
                "T",
                "U",
                "P",
                "S",
                "G",
                "A"
              ]
            },
            "DeploymentID": {
              "type": "string",
              "defaultValue": "1",
              "allowedValues": [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9"
              ]
            },
            "Stage": {
              "type": "object"
            },
            "Extensions": {
              "type": "object"
            },
            "Global": {
              "type": "object"
            },
            "DeploymentInfo": {
              "type": "object"
            }
          },
          "variables": {
            "copy": [
              {
                "name": "VMs",
                "count": "[length(variables('AppServers'))]",
                "input": {
                  "name": "[variables('AppServers')[copyIndex('VMs')].Name]",
                  "match": "[or(equals(parameters('Global').CN, '.'), contains(array(parameters('Global').CN), variables('AppServers')[copyIndex('VMs')].Name))]",
                  "Extensions": "[if(contains(variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType], 'RoleExtensions'), union(parameters('Extensions'), variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType].RoleExtensions), parameters('Extensions'))]",
                  "DataDisk": "[if(contains(variables('AppServers')[copyIndex('VMs')], 'DDRole'), variables('DataDiskInfo')[variables('AppServers')[copyIndex('VMs')].DDRole], null())]",
                  "vmHostName": "[toLower(format('{0}{1}{2}{3}{4}', parameters('Prefix'), parameters('Global').AppName, parameters('Environment'), parameters('DeploymentID'), variables('AppServers')[copyIndex('VMs')].Name))]",
                  "AppInfo": "[if(contains(variables('AppServers')[copyIndex('VMs')], 'AppInfo'), variables('AppServers')[copyIndex('VMs')].AppInfo, null())]",
                  "windowsConfiguration": {
                    "enableAutomaticUpdates": true,
                    "provisionVmAgent": true,
                    "patchSettings": {
                      "enableHotpatching": "[if(contains(variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType], 'HotPatch'), variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType].HotPatch, false())]",
                      "patchMode": "[if(contains(variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType], 'patchMode'), variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType].patchMode, 'AutomaticByOS')]"
                    }
                  },
                  "linuxConfiguration": {
                    "enableAutomaticUpdates": true,
                    "provisionVmAgent": true,
                    "patchSettings": {
                      "enableHotpatching": "[if(contains(variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType], 'HotPatch'), variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType].HotPatch, false())]",
                      "patchMode": "[if(contains(variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType], 'patchMode'), variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType].patchMode, 'AutomaticByOS')]"
                    }
                  }
                }
              }
            ],
            "Deployment": "[format('{0}-{1}-{2}-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID'))]",
            "computeGlobal": "[json('{\r\n  \"DataDiskInfo\": {\r\n    \"0GB\": {},\r\n    \"32GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            32\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GBSS\": {\r\n      \"DATASS\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GB-2\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ],\r\n          [\r\n            1,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"128GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            128\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"FIL64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"SOFS\": {\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            1,\r\n            32\r\n          ],\r\n          [\r\n            2,\r\n            32\r\n          ],\r\n          [\r\n            3,\r\n            32\r\n          ]\r\n        ],\r\n        \"FileSystem\": \"ReFS\",\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"SQL64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"LOGS\": {\r\n        \"DriveLetter\": \"G\",\r\n        \"caching\": \"None\",\r\n        \"LUNS\": [\r\n          [\r\n            8,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"TEMPDB\": {\r\n        \"DriveLetter\": \"H\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            12,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"BACKUP\": {\r\n        \"DriveLetter\": \"I\",\r\n        \"caching\": \"None\",\r\n        \"LUNS\": [\r\n          [\r\n            15,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    }\r\n  },\r\n  \"computeSizeLookupOptions\": {\r\n    \"API-P\": \"Standard_D4s_v3\",\r\n    \"API-D\": \"Standard_D4s_v3\",\r\n    \"API-S\": \"Standard_D2s_v3\",\r\n    \"SF-P\": \"Standard_D4s_v3\",\r\n    \"SF-D\": \"Standard_D2s_v3\",\r\n    \"SF-S\": \"Standard_D2s_v3\",\r\n    \"CTNR-P\": \"Standard_D4s_v3\",\r\n    \"CTNR-D\": \"Standard_D2s_v3\",\r\n    \"ADp-P\": \"Standard_D2s_v3\",\r\n    \"ADp-D\": \"Standard_A2m_v2\",\r\n    \"ADs-P\": \"Standard_D2s_v3\",\r\n    \"ADs-D\": \"Standard_A2m_v2\",\r\n    \"AAP-P\": \"Standard_D2s_v3\",\r\n    \"AAP-D\": \"Standard_D2s_v3\",\r\n    \"DNS-P\": \"Standard_D2s_v3\",\r\n    \"DNS-D\": \"Standard_D2s_v3\",\r\n    \"BUS-P\": \"Standard_DS2_v2\",\r\n    \"BUS-D\": \"Standard_DS2_v2\",\r\n    \"LIN-P\": \"Standard_DS2_v2\",\r\n    \"LIN-D\": \"Standard_DS2_v2\",\r\n    \"FIL-P\": \"Standard_D4s_v3\",\r\n    \"FIL-D\": \"Standard_D4s_v3\",\r\n    \"DFS-P\": \"Standard_D4s_v3\",\r\n    \"DFS-D\": \"Standard_D4s_v3\",\r\n    \"JMP-P\": \"Standard_D4s_v3\",\r\n    \"JMP-D\": \"Standard_D4s_v3\",\r\n    \"CLT-P\": \"Standard_D4s_v3\",\r\n    \"CLT-D\": \"Standard_D4s_v3\",\r\n    \"PXY-P\": \"Standard_D4s_v3\",\r\n    \"PXY-D\": \"Standard_D2s_v3\",\r\n    \"CLS01-D\": \"Standard_D4s_v3\",\r\n    \"CLS02-D\": \"Standard_D4s_v3\",\r\n    \"CLS01-P\": \"Standard_D4s_v3\",\r\n    \"CLS02-P\": \"Standard_D4s_v3\",\r\n    \"FW-P\": \"Standard_F4\",\r\n    \"FW-D\": \"Standard_F2\"\r\n  },\r\n  \"OSType\": {\r\n    \"Server2022SSIMG\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/b8f402aa-20f7-4888-b45c-3cf086dad9c3/resourceGroups/ACU1-BRW-AOA-RG-G1/providers/Microsoft.Compute/galleries/acu1brwaoag1gallery01/images/vmss2022\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SSIMG\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/b8f402aa-20f7-4888-b45c-3cf086dad9c3/resourceGroups/ACU1-BRW-AOA-RG-G1/providers/Microsoft.Compute/galleries/acu1brwaoag1gallery01/images/vmss2019webnetcore27\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"cbld10\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/27b750cd-ed43-42fd-9044-8d75e124ae55/resourceGroups/SBID-Build-Test/providers/Microsoft.Compute/galleries/cbldtest/images/cbld10-ext\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 1,\r\n        \"IaaSDiagnostics\": 1,\r\n        \"Antimalware\": 0,\r\n        \"DependencyAgent\": 1,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Win10O365\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsDesktop\",\r\n        \"offer\": \"office-365\",\r\n        \"sku\": \"rs5-evd-o365pp\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Client\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Win10\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsDesktop\",\r\n        \"offer\": \"Windows-10\",\r\n        \"sku\": \"21h1-pro-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Client\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"SQLServer2016\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftSQLServer\",\r\n        \"Offer\": \"SQL2016SP2-WS2016\",\r\n        \"sku\": \"Enterprise\",\r\n        \"version\": \"latest\"\r\n      },\r\n      // \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016Core\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-Server-Core\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016small\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016Coresmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-Server-Core-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019-gen2\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"windowsserver-gen2preview\",\r\n        \"sku\": \"2019-Datacenter-gen2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2022\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2022-Datacenter-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"_plan\": {\r\n        \"name\": \"windows-server-2022\",\r\n        \"publisher\": \"microsoftwindowsserver\",\r\n        \"product\": \"microsoftserveroperatingsystems-previews\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2022Containerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"datacenter-core-20h2-with-containers-smalldisk-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Core\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-Core\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019small\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-datacenter-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Coresmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-Server-Core-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Containerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019CoreContainerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-datacenter-core-with-containers-smalldisk-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016SS\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-with-Containers\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SSgs\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers-gs\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SS\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"NetScaler\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"citrix\",\r\n        \"Offer\": \"netscalervpx-120\",\r\n        \"Sku\": \"netscalerbyol\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"netscalerbyol\",\r\n        \"publisher\": \"citrix\",\r\n        \"product\": \"netscalervpx-120\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"MaxLoadBalancer\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"loadbalancer\",\r\n        \"offer\": \"loadbalancer-org-load-balancer-for-azure\",\r\n        \"sku\": \"max_load_balancer\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"max_load_balancer\",\r\n        \"publisher\": \"loadbalancer\",\r\n        \"product\": \"loadbalancer-org-load-balancer-for-azure\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortigate\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet_fortigate-vm_v5\",\r\n        \"sku\": \"fortinet_fg-vm\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"fortinet_fg-vm\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet_fortigate-vm_v5\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortigatepayg\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet_fortigate-vm_v5\",\r\n        \"sku\": \"fortinet_fg-vm_payg\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"fortinet_fg-vm_payg\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet_fortigate-vm_v5\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortimngr\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet-fortimanager\",\r\n        \"sku\": \"fortinet-fortimanager\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 3,\r\n      \"plan\": {\r\n        \"name\": \"fortinet-fortimanager\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet-fortimanager\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"UbuntuServer1904\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"canonical\",\r\n        \"offer\": \"UbuntuServer\",\r\n        \"sku\": \"19.04\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"Antimalware\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 1,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0\r\n      }\r\n    },\r\n    \"Bus-debian\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"credativ\",\r\n        \"offer\": \"Debian\",\r\n        \"sku\": \"8\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 1,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"PROXY-UBUNTU\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"Canonical\",\r\n        \"offer\": \"UbuntuServer\",\r\n        \"sku\": \"16.04-LTS\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"fileUris\": \"[concat(parameters(''global'')._artifactsLocation, ''/scripts/pxy.zip\",\r\n      \"commandToExecute\": \"[concat(''sudo apt-get update && sudo apt-get install unzip && unzip Proxy.zip && sudo bash -x haproxyvm-configure.sh '', '' -a '', ''ilbIPAddress'', '' -r '', ''ilbRabbitMqPort'', '' -m '', ''ilbRabbitMqMgmtPort'', '' -b '', ''dnsName'', ''.'', ''location'', ''.cloudapp.azure.com -p '', ''vmNamePrefix'', ''0 -s '', ''vmNamePrefix'', ''1'')]\",\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"CentOS75\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"OpenLogic\",\r\n        \"Offer\": \"CentOS\",\r\n        \"sku\": \"7.5\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"Antimalware\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    }\r\n  },\r\n  \"ladCfg\": {\r\n    \"diagnosticMonitorConfiguration\": {\r\n      \"eventVolume\": \"Medium\",\r\n      \"metrics\": {\r\n        \"metricAggregation\": [\r\n          {\r\n            \"scheduledTransferPeriod\": \"PT1H\"\r\n          },\r\n          {\r\n            \"scheduledTransferPeriod\": \"PT1M\"\r\n          }\r\n        ],\r\n        \"resourceId\": \"__VM_RESOURCE_ID__\"\r\n      },\r\n      \"performanceCounters\": {\r\n        \"performanceCounterConfiguration\": [\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk read guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readbytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/readbytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk writes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/writespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk transfer time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagetransfertime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagetransfertime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk transfers\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"transferspersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/transferspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk write guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writebytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/writebytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk read time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagereadtime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagereadtime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk write time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagewritetime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagewritetime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk total bytes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/bytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk reads\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readspersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/readspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk queue length\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagediskqueuelength\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagediskqueuelength\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network in guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytesreceived\",\r\n            \"counterSpecifier\": \"/builtin/network/bytesreceived\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network total bytes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytestotal\",\r\n            \"counterSpecifier\": \"/builtin/network/bytestotal\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network out guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytestransmitted\",\r\n            \"counterSpecifier\": \"/builtin/network/bytestransmitted\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network collisions\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totalcollisions\",\r\n            \"counterSpecifier\": \"/builtin/network/totalcollisions\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets received errors\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totalrxerrors\",\r\n            \"counterSpecifier\": \"/builtin/network/totalrxerrors\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets sent\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"packetstransmitted\",\r\n            \"counterSpecifier\": \"/builtin/network/packetstransmitted\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets received\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"packetsreceived\",\r\n            \"counterSpecifier\": \"/builtin/network/packetsreceived\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets sent errors\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totaltxerrors\",\r\n            \"counterSpecifier\": \"/builtin/network/totaltxerrors\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem transfers/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"transferspersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/transferspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % free space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentfreespace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentfreespace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % used space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusedspace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentusedspace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem used space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"usedspace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/usedspace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem read bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytesreadpersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/bytesreadpersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem free space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"freespace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/freespace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % free inodes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentfreeinodes\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentfreeinodes\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/bytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem reads/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readspersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/readspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem write bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"byteswrittenpersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/byteswrittenpersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem writes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writespersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/writespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % used inodes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusedinodes\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentusedinodes\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU IO wait time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentiowaittime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentiowaittime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU user time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusertime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentusertime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU nice time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentnicetime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentnicetime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU percentage guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentprocessortime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentprocessortime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU interrupt time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentinterrupttime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentinterrupttime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU idle time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentidletime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentidletime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU privileged time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentprivilegedtime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentprivilegedtime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"availablememory\",\r\n            \"counterSpecifier\": \"/builtin/memory/availablememory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap percent used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentusedswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentusedswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"usedmemory\",\r\n            \"counterSpecifier\": \"/builtin/memory/usedmemory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Page reads\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pagesreadpersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pagesreadpersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"availableswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/availableswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap percent available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentavailableswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentavailableswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Mem. percent available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentavailablememory\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentavailablememory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Pages\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pagespersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pagespersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"usedswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/usedswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory percentage\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentusedmemory\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentusedmemory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Page writes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pageswrittenpersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pageswrittenpersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          }\r\n        ]\r\n      },\r\n      \"syslogEvents\": {\r\n        \"syslogEventConfiguration\": {\r\n          \"LOG_AUTH\": \"LOG_DEBUG\",\r\n          \"LOG_AUTHPRIV\": \"LOG_DEBUG\",\r\n          \"LOG_CRON\": \"LOG_DEBUG\",\r\n          \"LOG_DAEMON\": \"LOG_DEBUG\",\r\n          \"LOG_FTP\": \"LOG_DEBUG\",\r\n          \"LOG_KERN\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL0\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL1\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL2\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL3\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL4\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL5\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL6\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL7\": \"LOG_DEBUG\",\r\n          \"LOG_LPR\": \"LOG_DEBUG\",\r\n          \"LOG_MAIL\": \"LOG_DEBUG\",\r\n          \"LOG_NEWS\": \"LOG_DEBUG\",\r\n          \"LOG_SYSLOG\": \"LOG_DEBUG\",\r\n          \"LOG_USER\": \"LOG_DEBUG\",\r\n          \"LOG_UUCP\": \"LOG_DEBUG\"\r\n        }\r\n      }\r\n    },\r\n    \"sampleRateInSeconds\": 15\r\n  },\r\n  \"WadCfg\": {\r\n    \"DiagnosticMonitorConfiguration\": {\r\n      \"overallQuotaInMB\": 10000,\r\n      \"DiagnosticInfrastructureLogs\": {\r\n        \"scheduledTransferLogLevelFilter\": \"Error\"\r\n      },\r\n      \"PerformanceCounters\": {\r\n        \"scheduledTransferPeriod\": \"PT1M\",\r\n        \"PerformanceCounterConfiguration\": []\r\n      },\r\n      \"WindowsEventLog\": {\r\n        \"scheduledTransferPeriod\": \"PT5M\",\r\n        \"DataSource\": [\r\n          {\r\n            \"name\": \"Application!*[System[(Level = 1 or Level = 2)]]\"\r\n          },\r\n          {\r\n            \"name\": \"Security!*[System[(Level = 1 or Level = 2)]\"\r\n          },\r\n          {\r\n            \"name\": \"System!*[System[(Level = 1 or Level = 2)]]\"\r\n          },\r\n          {\r\n            \"name\": \"Microsoft-Windows-DSC/Operational!*[System[(EventID=4249 or EventID=4097)]]\"\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}')]",
            "OSType": "[variables('computeGlobal').OSType]",
            "DataDiskInfo": "[variables('computeGlobal').DataDiskInfo]",
            "DeploymentName": "[if(contains(toLower(deployment().name), 'vmapp'), 'AppServers', replace(deployment().name, format('dp{0}-', variables('Deployment')), ''))]",
            "AppServers": "[parameters('DeploymentInfo').AppServers[variables('DeploymentName')]]",
            "HubKVJ": "[json(parameters('Global').hubKV)]",
            "HubRGJ": "[json(parameters('Global').hubRG)]",
            "gh": {
              "hubKVPrefix": "[if(contains(variables('HubKVJ'), 'Prefix'), variables('HubKVJ').Prefix, parameters('Prefix'))]",
              "hubKVOrgName": "[if(contains(variables('HubKVJ'), 'OrgName'), variables('HubKVJ').OrgName, parameters('Global').OrgName)]",
              "hubKVAppName": "[if(contains(variables('HubKVJ'), 'AppName'), variables('HubKVJ').AppName, parameters('Global').AppName)]",
              "hubKVRGName": "[if(contains(variables('HubKVJ'), 'RG'), variables('HubKVJ').RG, variables('HubRGJ').name)]"
            },
            "HubKVRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').hubKVPrefix, variables('gh').hubKVOrgName, variables('gh').hubKVAppName, variables('gh').hubKVRGName)]",
            "HubKVName": "[toLower(format('{0}-{1}-{2}-{3}-kv{4}', variables('gh').hubKVPrefix, variables('gh').hubKVOrgName, variables('gh').hubKVAppName, variables('gh').hubKVRGName, variables('HubKVJ').name))]"
          },
          "resources": [
            {
              "condition": "[variables('VMs')[copyIndex()].match]",
              "copy": {
                "name": "VM",
                "count": "[length(variables('AppServers'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dp{0}-VM-Deploy-{1}', variables('Deployment'), variables('AppServers')[copyIndex()].Name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "Prefix": {
                    "value": "[parameters('Prefix')]"
                  },
                  "DeploymentID": {
                    "value": "[parameters('DeploymentID')]"
                  },
                  "Environment": {
                    "value": "[parameters('Environment')]"
                  },
                  "AppServer": {
                    "value": "[variables('AppServers')[copyIndex()]]"
                  },
                  "VM": {
                    "value": "[variables('VMs')[copyIndex()]]"
                  },
                  "DeploymentName": {
                    "value": "[variables('DeploymentName')]"
                  },
                  "Global": {
                    "value": "[parameters('Global')]"
                  },
                  "vmAdminPassword": {
                    "reference": {
                      "keyVault": {
                        "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults', variables('HubKVName'))]"
                      },
                      "secretName": "localadmin"
                    }
                  },
                  "devOpsPat": {
                    "reference": {
                      "keyVault": {
                        "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults', variables('HubKVName'))]"
                      },
                      "secretName": "devOpsPat"
                    }
                  },
                  "sshPublic": {
                    "reference": {
                      "keyVault": {
                        "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults', variables('HubKVName'))]"
                      },
                      "secretName": "sshPublic"
                    }
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1318.3566",
                      "templateHash": "10183346640093717410"
                    }
                  },
                  "parameters": {
                    "Prefix": {
                      "type": "string"
                    },
                    "DeploymentID": {
                      "type": "string"
                    },
                    "Environment": {
                      "type": "string"
                    },
                    "VM": {
                      "type": "object"
                    },
                    "AppServer": {
                      "type": "object"
                    },
                    "Global": {
                      "type": "object"
                    },
                    "DeploymentName": {
                      "type": "string"
                    },
                    "vmAdminPassword": {
                      "type": "secureString"
                    },
                    "devOpsPat": {
                      "type": "secureString"
                    },
                    "sshPublic": {
                      "type": "secureString"
                    },
                    "saKey": {
                      "type": "secureString",
                      "defaultValue": "[newGuid()]"
                    },
                    "deploymentTime": {
                      "type": "string",
                      "defaultValue": "[utcNow()]"
                    }
                  },
                  "variables": {
                    "Deployment": "[format('{0}-{1}-{2}-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID'))]",
                    "DeploymentURI": "[toLower(format('{0}{1}{2}{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID')))]",
                    "computeGlobal": "[json('{\r\n  \"DataDiskInfo\": {\r\n    \"0GB\": {},\r\n    \"32GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            32\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GBSS\": {\r\n      \"DATASS\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GB-2\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ],\r\n          [\r\n            1,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"128GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            128\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"FIL64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"SOFS\": {\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            1,\r\n            32\r\n          ],\r\n          [\r\n            2,\r\n            32\r\n          ],\r\n          [\r\n            3,\r\n            32\r\n          ]\r\n        ],\r\n        \"FileSystem\": \"ReFS\",\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"SQL64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"LOGS\": {\r\n        \"DriveLetter\": \"G\",\r\n        \"caching\": \"None\",\r\n        \"LUNS\": [\r\n          [\r\n            8,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"TEMPDB\": {\r\n        \"DriveLetter\": \"H\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            12,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"BACKUP\": {\r\n        \"DriveLetter\": \"I\",\r\n        \"caching\": \"None\",\r\n        \"LUNS\": [\r\n          [\r\n            15,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    }\r\n  },\r\n  \"computeSizeLookupOptions\": {\r\n    \"API-P\": \"Standard_D4s_v3\",\r\n    \"API-D\": \"Standard_D4s_v3\",\r\n    \"API-S\": \"Standard_D2s_v3\",\r\n    \"SF-P\": \"Standard_D4s_v3\",\r\n    \"SF-D\": \"Standard_D2s_v3\",\r\n    \"SF-S\": \"Standard_D2s_v3\",\r\n    \"CTNR-P\": \"Standard_D4s_v3\",\r\n    \"CTNR-D\": \"Standard_D2s_v3\",\r\n    \"ADp-P\": \"Standard_D2s_v3\",\r\n    \"ADp-D\": \"Standard_A2m_v2\",\r\n    \"ADs-P\": \"Standard_D2s_v3\",\r\n    \"ADs-D\": \"Standard_A2m_v2\",\r\n    \"AAP-P\": \"Standard_D2s_v3\",\r\n    \"AAP-D\": \"Standard_D2s_v3\",\r\n    \"DNS-P\": \"Standard_D2s_v3\",\r\n    \"DNS-D\": \"Standard_D2s_v3\",\r\n    \"BUS-P\": \"Standard_DS2_v2\",\r\n    \"BUS-D\": \"Standard_DS2_v2\",\r\n    \"LIN-P\": \"Standard_DS2_v2\",\r\n    \"LIN-D\": \"Standard_DS2_v2\",\r\n    \"FIL-P\": \"Standard_D4s_v3\",\r\n    \"FIL-D\": \"Standard_D4s_v3\",\r\n    \"DFS-P\": \"Standard_D4s_v3\",\r\n    \"DFS-D\": \"Standard_D4s_v3\",\r\n    \"JMP-P\": \"Standard_D4s_v3\",\r\n    \"JMP-D\": \"Standard_D4s_v3\",\r\n    \"CLT-P\": \"Standard_D4s_v3\",\r\n    \"CLT-D\": \"Standard_D4s_v3\",\r\n    \"PXY-P\": \"Standard_D4s_v3\",\r\n    \"PXY-D\": \"Standard_D2s_v3\",\r\n    \"CLS01-D\": \"Standard_D4s_v3\",\r\n    \"CLS02-D\": \"Standard_D4s_v3\",\r\n    \"CLS01-P\": \"Standard_D4s_v3\",\r\n    \"CLS02-P\": \"Standard_D4s_v3\",\r\n    \"FW-P\": \"Standard_F4\",\r\n    \"FW-D\": \"Standard_F2\"\r\n  },\r\n  \"OSType\": {\r\n    \"Server2022SSIMG\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/b8f402aa-20f7-4888-b45c-3cf086dad9c3/resourceGroups/ACU1-BRW-AOA-RG-G1/providers/Microsoft.Compute/galleries/acu1brwaoag1gallery01/images/vmss2022\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SSIMG\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/b8f402aa-20f7-4888-b45c-3cf086dad9c3/resourceGroups/ACU1-BRW-AOA-RG-G1/providers/Microsoft.Compute/galleries/acu1brwaoag1gallery01/images/vmss2019webnetcore27\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"cbld10\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/27b750cd-ed43-42fd-9044-8d75e124ae55/resourceGroups/SBID-Build-Test/providers/Microsoft.Compute/galleries/cbldtest/images/cbld10-ext\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 1,\r\n        \"IaaSDiagnostics\": 1,\r\n        \"Antimalware\": 0,\r\n        \"DependencyAgent\": 1,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Win10O365\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsDesktop\",\r\n        \"offer\": \"office-365\",\r\n        \"sku\": \"rs5-evd-o365pp\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Client\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Win10\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsDesktop\",\r\n        \"offer\": \"Windows-10\",\r\n        \"sku\": \"21h1-pro-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Client\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"SQLServer2016\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftSQLServer\",\r\n        \"Offer\": \"SQL2016SP2-WS2016\",\r\n        \"sku\": \"Enterprise\",\r\n        \"version\": \"latest\"\r\n      },\r\n      // \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016Core\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-Server-Core\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016small\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016Coresmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-Server-Core-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019-gen2\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"windowsserver-gen2preview\",\r\n        \"sku\": \"2019-Datacenter-gen2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2022\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2022-Datacenter-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"_plan\": {\r\n        \"name\": \"windows-server-2022\",\r\n        \"publisher\": \"microsoftwindowsserver\",\r\n        \"product\": \"microsoftserveroperatingsystems-previews\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2022Containerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"datacenter-core-20h2-with-containers-smalldisk-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Core\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-Core\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019small\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-datacenter-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Coresmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-Server-Core-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Containerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019CoreContainerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-datacenter-core-with-containers-smalldisk-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016SS\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-with-Containers\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SSgs\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers-gs\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SS\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"NetScaler\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"citrix\",\r\n        \"Offer\": \"netscalervpx-120\",\r\n        \"Sku\": \"netscalerbyol\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"netscalerbyol\",\r\n        \"publisher\": \"citrix\",\r\n        \"product\": \"netscalervpx-120\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"MaxLoadBalancer\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"loadbalancer\",\r\n        \"offer\": \"loadbalancer-org-load-balancer-for-azure\",\r\n        \"sku\": \"max_load_balancer\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"max_load_balancer\",\r\n        \"publisher\": \"loadbalancer\",\r\n        \"product\": \"loadbalancer-org-load-balancer-for-azure\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortigate\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet_fortigate-vm_v5\",\r\n        \"sku\": \"fortinet_fg-vm\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"fortinet_fg-vm\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet_fortigate-vm_v5\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortigatepayg\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet_fortigate-vm_v5\",\r\n        \"sku\": \"fortinet_fg-vm_payg\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"fortinet_fg-vm_payg\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet_fortigate-vm_v5\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortimngr\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet-fortimanager\",\r\n        \"sku\": \"fortinet-fortimanager\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 3,\r\n      \"plan\": {\r\n        \"name\": \"fortinet-fortimanager\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet-fortimanager\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"UbuntuServer1904\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"canonical\",\r\n        \"offer\": \"UbuntuServer\",\r\n        \"sku\": \"19.04\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"Antimalware\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 1,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0\r\n      }\r\n    },\r\n    \"Bus-debian\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"credativ\",\r\n        \"offer\": \"Debian\",\r\n        \"sku\": \"8\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 1,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"PROXY-UBUNTU\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"Canonical\",\r\n        \"offer\": \"UbuntuServer\",\r\n        \"sku\": \"16.04-LTS\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"fileUris\": \"[concat(parameters(''global'')._artifactsLocation, ''/scripts/pxy.zip\",\r\n      \"commandToExecute\": \"[concat(''sudo apt-get update && sudo apt-get install unzip && unzip Proxy.zip && sudo bash -x haproxyvm-configure.sh '', '' -a '', ''ilbIPAddress'', '' -r '', ''ilbRabbitMqPort'', '' -m '', ''ilbRabbitMqMgmtPort'', '' -b '', ''dnsName'', ''.'', ''location'', ''.cloudapp.azure.com -p '', ''vmNamePrefix'', ''0 -s '', ''vmNamePrefix'', ''1'')]\",\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"CentOS75\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"OpenLogic\",\r\n        \"Offer\": \"CentOS\",\r\n        \"sku\": \"7.5\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"Antimalware\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    }\r\n  },\r\n  \"ladCfg\": {\r\n    \"diagnosticMonitorConfiguration\": {\r\n      \"eventVolume\": \"Medium\",\r\n      \"metrics\": {\r\n        \"metricAggregation\": [\r\n          {\r\n            \"scheduledTransferPeriod\": \"PT1H\"\r\n          },\r\n          {\r\n            \"scheduledTransferPeriod\": \"PT1M\"\r\n          }\r\n        ],\r\n        \"resourceId\": \"__VM_RESOURCE_ID__\"\r\n      },\r\n      \"performanceCounters\": {\r\n        \"performanceCounterConfiguration\": [\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk read guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readbytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/readbytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk writes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/writespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk transfer time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagetransfertime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagetransfertime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk transfers\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"transferspersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/transferspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk write guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writebytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/writebytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk read time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagereadtime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagereadtime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk write time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagewritetime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagewritetime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk total bytes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/bytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk reads\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readspersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/readspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk queue length\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagediskqueuelength\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagediskqueuelength\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network in guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytesreceived\",\r\n            \"counterSpecifier\": \"/builtin/network/bytesreceived\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network total bytes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytestotal\",\r\n            \"counterSpecifier\": \"/builtin/network/bytestotal\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network out guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytestransmitted\",\r\n            \"counterSpecifier\": \"/builtin/network/bytestransmitted\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network collisions\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totalcollisions\",\r\n            \"counterSpecifier\": \"/builtin/network/totalcollisions\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets received errors\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totalrxerrors\",\r\n            \"counterSpecifier\": \"/builtin/network/totalrxerrors\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets sent\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"packetstransmitted\",\r\n            \"counterSpecifier\": \"/builtin/network/packetstransmitted\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets received\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"packetsreceived\",\r\n            \"counterSpecifier\": \"/builtin/network/packetsreceived\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets sent errors\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totaltxerrors\",\r\n            \"counterSpecifier\": \"/builtin/network/totaltxerrors\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem transfers/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"transferspersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/transferspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % free space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentfreespace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentfreespace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % used space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusedspace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentusedspace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem used space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"usedspace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/usedspace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem read bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytesreadpersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/bytesreadpersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem free space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"freespace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/freespace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % free inodes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentfreeinodes\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentfreeinodes\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/bytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem reads/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readspersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/readspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem write bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"byteswrittenpersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/byteswrittenpersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem writes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writespersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/writespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % used inodes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusedinodes\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentusedinodes\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU IO wait time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentiowaittime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentiowaittime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU user time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusertime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentusertime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU nice time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentnicetime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentnicetime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU percentage guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentprocessortime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentprocessortime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU interrupt time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentinterrupttime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentinterrupttime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU idle time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentidletime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentidletime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU privileged time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentprivilegedtime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentprivilegedtime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"availablememory\",\r\n            \"counterSpecifier\": \"/builtin/memory/availablememory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap percent used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentusedswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentusedswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"usedmemory\",\r\n            \"counterSpecifier\": \"/builtin/memory/usedmemory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Page reads\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pagesreadpersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pagesreadpersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"availableswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/availableswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap percent available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentavailableswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentavailableswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Mem. percent available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentavailablememory\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentavailablememory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Pages\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pagespersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pagespersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"usedswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/usedswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory percentage\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentusedmemory\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentusedmemory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Page writes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pageswrittenpersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pageswrittenpersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          }\r\n        ]\r\n      },\r\n      \"syslogEvents\": {\r\n        \"syslogEventConfiguration\": {\r\n          \"LOG_AUTH\": \"LOG_DEBUG\",\r\n          \"LOG_AUTHPRIV\": \"LOG_DEBUG\",\r\n          \"LOG_CRON\": \"LOG_DEBUG\",\r\n          \"LOG_DAEMON\": \"LOG_DEBUG\",\r\n          \"LOG_FTP\": \"LOG_DEBUG\",\r\n          \"LOG_KERN\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL0\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL1\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL2\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL3\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL4\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL5\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL6\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL7\": \"LOG_DEBUG\",\r\n          \"LOG_LPR\": \"LOG_DEBUG\",\r\n          \"LOG_MAIL\": \"LOG_DEBUG\",\r\n          \"LOG_NEWS\": \"LOG_DEBUG\",\r\n          \"LOG_SYSLOG\": \"LOG_DEBUG\",\r\n          \"LOG_USER\": \"LOG_DEBUG\",\r\n          \"LOG_UUCP\": \"LOG_DEBUG\"\r\n        }\r\n      }\r\n    },\r\n    \"sampleRateInSeconds\": 15\r\n  },\r\n  \"WadCfg\": {\r\n    \"DiagnosticMonitorConfiguration\": {\r\n      \"overallQuotaInMB\": 10000,\r\n      \"DiagnosticInfrastructureLogs\": {\r\n        \"scheduledTransferLogLevelFilter\": \"Error\"\r\n      },\r\n      \"PerformanceCounters\": {\r\n        \"scheduledTransferPeriod\": \"PT1M\",\r\n        \"PerformanceCounterConfiguration\": []\r\n      },\r\n      \"WindowsEventLog\": {\r\n        \"scheduledTransferPeriod\": \"PT5M\",\r\n        \"DataSource\": [\r\n          {\r\n            \"name\": \"Application!*[System[(Level = 1 or Level = 2)]]\"\r\n          },\r\n          {\r\n            \"name\": \"Security!*[System[(Level = 1 or Level = 2)]\"\r\n          },\r\n          {\r\n            \"name\": \"System!*[System[(Level = 1 or Level = 2)]]\"\r\n          },\r\n          {\r\n            \"name\": \"Microsoft-Windows-DSC/Operational!*[System[(EventID=4249 or EventID=4097)]]\"\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}')]",
                    "OSType": "[variables('computeGlobal').OSType]",
                    "WadCfg": "[variables('computeGlobal').WadCfg]",
                    "ladCfg": "[variables('computeGlobal').ladCfg]",
                    "DataDiskInfo": "[variables('computeGlobal').DataDiskInfo]",
                    "computeSizeLookupOptions": "[variables('computeGlobal').computeSizeLookupOptions]",
                    "RGName": "[format('{0}-{1}-{2}-RG-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').AppName, parameters('Environment'), parameters('DeploymentID'))]",
                    "GlobalRGJ": "[json(parameters('Global').GlobalRG)]",
                    "GlobalSAJ": "[json(parameters('Global').GlobalSA)]",
                    "HubKVJ": "[json(parameters('Global').hubKV)]",
                    "HubRGJ": "[json(parameters('Global').hubRG)]",
                    "HubAAJ": "[json(parameters('Global').hubAA)]",
                    "regionLookup": "[json('{\r\n  \"francecentral\": {\r\n    \"displayname\": \"France Central\",\r\n    \"location\": \"francecentral\",\r\n    \"PREFIX\": \"AFC1\",\r\n    \"pairedRegion\": \"francesouth\"\r\n  },\r\n  \"southeastasia\": {\r\n    \"displayname\": \"Southeast Asia\",\r\n    \"location\": \"southeastasia\",\r\n    \"PREFIX\": \"ASA1\",\r\n    \"pairedRegion\": \"eastasia\"\r\n  },\r\n  \"southafricawest\": {\r\n    \"displayname\": \"South Africa West\",\r\n    \"location\": \"southafricawest\",\r\n    \"PREFIX\": \"ASAW\",\r\n    \"pairedRegion\": \"southafricanorth\"\r\n  },\r\n  \"eastus2\": {\r\n    \"displayname\": \"East US 2\",\r\n    \"location\": \"eastus2\",\r\n    \"PREFIX\": \"AEU2\",\r\n    \"pairedRegion\": \"centralus\"\r\n  },\r\n  \"eastus\": {\r\n    \"displayname\": \"East US\",\r\n    \"location\": \"eastus\",\r\n    \"PREFIX\": \"AEU1\",\r\n    \"pairedRegion\": \"westus\"\r\n  },\r\n  \"jioindiawest\": {\r\n    \"displayname\": \"Jio India West\",\r\n    \"location\": \"jioindiawest\",\r\n    \"PREFIX\": \"AJIW\",\r\n    \"pairedRegion\": \"jioindiacentral\"\r\n  },\r\n  \"westcentralus\": {\r\n    \"displayname\": \"West Central US\",\r\n    \"location\": \"westcentralus\",\r\n    \"PREFIX\": \"AWCU\",\r\n    \"pairedRegion\": \"westus2\"\r\n  },\r\n  \"koreacentral\": {\r\n    \"displayname\": \"Korea Central\",\r\n    \"location\": \"koreacentral\",\r\n    \"PREFIX\": \"AKC1\",\r\n    \"pairedRegion\": \"koreasouth\"\r\n  },\r\n  \"uaecentral\": {\r\n    \"displayname\": \"UAE Central\",\r\n    \"location\": \"uaecentral\",\r\n    \"PREFIX\": \"AUC1\",\r\n    \"pairedRegion\": \"uaenorth\"\r\n  },\r\n  \"westus\": {\r\n    \"displayname\": \"West US\",\r\n    \"location\": \"westus\",\r\n    \"PREFIX\": \"AWU1\",\r\n    \"pairedRegion\": \"eastus\"\r\n  },\r\n  \"southafricanorth\": {\r\n    \"displayname\": \"South Africa North\",\r\n    \"location\": \"southafricanorth\",\r\n    \"PREFIX\": \"ASAN\",\r\n    \"pairedRegion\": \"southafricawest\"\r\n  },\r\n  \"australiacentral2\": {\r\n    \"displayname\": \"Australia Central 2\",\r\n    \"location\": \"australiacentral2\",\r\n    \"PREFIX\": \"AAC2\",\r\n    \"pairedRegion\": \"australiacentral2\"\r\n  },\r\n  \"francesouth\": {\r\n    \"displayname\": \"France South\",\r\n    \"location\": \"francesouth\",\r\n    \"PREFIX\": \"AFS1\",\r\n    \"pairedRegion\": \"francecentral\"\r\n  },\r\n  \"ukwest\": {\r\n    \"displayname\": \"UK West\",\r\n    \"location\": \"ukwest\",\r\n    \"PREFIX\": \"AUW1\",\r\n    \"pairedRegion\": \"uksouth\"\r\n  },\r\n  \"southindia\": {\r\n    \"displayname\": \"South India\",\r\n    \"location\": \"southindia\",\r\n    \"PREFIX\": \"ASI1\",\r\n    \"pairedRegion\": \"centralindia\"\r\n  },\r\n  \"centralus\": {\r\n    \"displayname\": \"Central US\",\r\n    \"location\": \"centralus\",\r\n    \"PREFIX\": \"ACU1\",\r\n    \"pairedRegion\": \"eastus2\"\r\n  },\r\n  \"germanynorth\": {\r\n    \"displayname\": \"Germany North\",\r\n    \"location\": \"germanynorth\",\r\n    \"PREFIX\": \"AGN1\",\r\n    \"pairedRegion\": \"germanywestcentral\"\r\n  },\r\n  \"koreasouth\": {\r\n    \"displayname\": \"Korea South\",\r\n    \"location\": \"koreasouth\",\r\n    \"PREFIX\": \"AKS1\",\r\n    \"pairedRegion\": \"koreacentral\"\r\n  },\r\n  \"westindia\": {\r\n    \"displayname\": \"West India\",\r\n    \"location\": \"westindia\",\r\n    \"PREFIX\": \"AWI1\",\r\n    \"pairedRegion\": \"southindia\"\r\n  },\r\n  \"westus2\": {\r\n    \"displayname\": \"West US 2\",\r\n    \"location\": \"westus2\",\r\n    \"PREFIX\": \"AWU2\",\r\n    \"pairedRegion\": \"westcentralus\"\r\n  },\r\n  \"northcentralus\": {\r\n    \"displayname\": \"North Central US\",\r\n    \"location\": \"northcentralus\",\r\n    \"PREFIX\": \"ANCU\",\r\n    \"pairedRegion\": \"southcentralus\"\r\n  },\r\n  \"westeurope\": {\r\n    \"displayname\": \"West Europe\",\r\n    \"location\": \"westeurope\",\r\n    \"PREFIX\": \"AWEU\",\r\n    \"pairedRegion\": \"northeurope\"\r\n  },\r\n  \"canadacentral\": {\r\n    \"displayname\": \"Canada Central\",\r\n    \"location\": \"canadacentral\",\r\n    \"PREFIX\": \"ACC1\",\r\n    \"pairedRegion\": \"canadaeast\"\r\n  },\r\n  \"southcentralus\": {\r\n    \"displayname\": \"South Central US\",\r\n    \"location\": \"southcentralus\",\r\n    \"PREFIX\": \"ASCU\",\r\n    \"pairedRegion\": \"northcentralus\"\r\n  },\r\n  \"norwayeast\": {\r\n    \"displayname\": \"Norway East\",\r\n    \"location\": \"norwayeast\",\r\n    \"PREFIX\": \"ANE1\",\r\n    \"pairedRegion\": \"norwaywest\"\r\n  },\r\n  \"japanwest\": {\r\n    \"displayname\": \"Japan West\",\r\n    \"location\": \"japanwest\",\r\n    \"PREFIX\": \"AJW1\",\r\n    \"pairedRegion\": \"japaneast\"\r\n  },\r\n  \"norwaywest\": {\r\n    \"displayname\": \"Norway West\",\r\n    \"location\": \"norwaywest\",\r\n    \"PREFIX\": \"ANW1\",\r\n    \"pairedRegion\": \"norwayeast\"\r\n  },\r\n  \"jioindiacentral\": {\r\n    \"displayname\": \"Jio India Central\",\r\n    \"location\": \"jioindiacentral\",\r\n    \"PREFIX\": \"AJIC\",\r\n    \"pairedRegion\": \"jioindiawest\"\r\n  },\r\n  \"centralindia\": {\r\n    \"displayname\": \"Central India\",\r\n    \"location\": \"centralindia\",\r\n    \"PREFIX\": \"ACI1\",\r\n    \"pairedRegion\": \"southindia\"\r\n  },\r\n  \"westus3\": {\r\n    \"displayname\": \"West US 3\",\r\n    \"location\": \"westus3\",\r\n    \"PREFIX\": \"AWU3\",\r\n    \"pairedRegion\": \"eastus\"\r\n  },\r\n  \"brazilsouth\": {\r\n    \"displayname\": \"Brazil South\",\r\n    \"location\": \"brazilsouth\",\r\n    \"PREFIX\": \"ABS1\",\r\n    \"pairedRegion\": \"southcentralus\"\r\n  },\r\n  \"eastasia\": {\r\n    \"displayname\": \"East Asia\",\r\n    \"location\": \"eastasia\",\r\n    \"PREFIX\": \"AEA1\",\r\n    \"pairedRegion\": \"southeastasia\"\r\n  },\r\n  \"swedencentral\": {\r\n    \"displayname\": \"Sweden Central\",\r\n    \"location\": \"swedencentral\",\r\n    \"PREFIX\": \"ASC1\",\r\n    \"pairedRegion\": \"swedensouth\"\r\n  },\r\n  \"uksouth\": {\r\n    \"displayname\": \"UK South\",\r\n    \"location\": \"uksouth\",\r\n    \"PREFIX\": \"AUS1\",\r\n    \"pairedRegion\": \"ukwest\"\r\n  },\r\n  \"switzerlandnorth\": {\r\n    \"displayname\": \"Switzerland North\",\r\n    \"location\": \"switzerlandnorth\",\r\n    \"PREFIX\": \"ASN1\",\r\n    \"pairedRegion\": \"switzerlandwest\"\r\n  },\r\n  \"canadaeast\": {\r\n    \"displayname\": \"Canada East\",\r\n    \"location\": \"canadaeast\",\r\n    \"PREFIX\": \"ACE1\",\r\n    \"pairedRegion\": \"canadacentral\"\r\n  },\r\n  \"australiasoutheast\": {\r\n    \"displayname\": \"Australia Southeast\",\r\n    \"location\": \"australiasoutheast\",\r\n    \"PREFIX\": \"AAS1\",\r\n    \"pairedRegion\": \"australiaeast\"\r\n  },\r\n  \"northeurope\": {\r\n    \"displayname\": \"North Europe\",\r\n    \"location\": \"northeurope\",\r\n    \"PREFIX\": \"ANEU\",\r\n    \"pairedRegion\": \"westeurope\"\r\n  },\r\n  \"germanywestcentral\": {\r\n    \"displayname\": \"Germany West Central\",\r\n    \"location\": \"germanywestcentral\",\r\n    \"PREFIX\": \"AGWC\",\r\n    \"pairedRegion\": \"germanynorth\"\r\n  },\r\n  \"japaneast\": {\r\n    \"displayname\": \"Japan East\",\r\n    \"location\": \"japaneast\",\r\n    \"PREFIX\": \"AJE1\",\r\n    \"pairedRegion\": \"japanwest\"\r\n  },\r\n  \"uaenorth\": {\r\n    \"displayname\": \"UAE North\",\r\n    \"location\": \"uaenorth\",\r\n    \"PREFIX\": \"AUN1\",\r\n    \"pairedRegion\": \"uaecentral\"\r\n  },\r\n  \"australiaeast\": {\r\n    \"displayname\": \"Australia East\",\r\n    \"location\": \"australiaeast\",\r\n    \"PREFIX\": \"AAE1\",\r\n    \"pairedRegion\": \"australiasoutheast\"\r\n  },\r\n  \"switzerlandwest\": {\r\n    \"displayname\": \"Switzerland West\",\r\n    \"location\": \"switzerlandwest\",\r\n    \"PREFIX\": \"ASW1\",\r\n    \"pairedRegion\": \"switzerlandnorth\"\r\n  },\r\n  \"australiacentral\": {\r\n    \"displayname\": \"Australia Central\",\r\n    \"location\": \"australiacentral\",\r\n    \"PREFIX\": \"AAC1\",\r\n    \"pairedRegion\": \"australiacentral\"\r\n  },\r\n  \"brazilsoutheast\": {\r\n    \"displayname\": \"Brazil Southeast\",\r\n    \"location\": \"brazilsoutheast\",\r\n    \"PREFIX\": \"ABSE\",\r\n    \"pairedRegion\": \"brazilsouth\"\r\n  }\r\n}\r\n')]",
                    "primaryPrefix": "[variables('regionLookup')[parameters('Global').PrimaryLocation].prefix]",
                    "gh": {
                      "globalRGPrefix": "[if(contains(variables('GlobalRGJ'), 'Prefix'), variables('GlobalRGJ').Prefix, variables('primaryPrefix'))]",
                      "globalRGOrgName": "[if(contains(variables('GlobalRGJ'), 'OrgName'), variables('GlobalRGJ').OrgName, parameters('Global').OrgName)]",
                      "globalRGAppName": "[if(contains(variables('GlobalRGJ'), 'AppName'), variables('GlobalRGJ').AppName, parameters('Global').AppName)]",
                      "globalRGName": "[if(contains(variables('GlobalRGJ'), 'name'), variables('GlobalRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID')))]",
                      "globalSAPrefix": "[if(contains(variables('GlobalSAJ'), 'Prefix'), variables('GlobalSAJ').Prefix, variables('primaryPrefix'))]",
                      "globalSAOrgName": "[if(contains(variables('GlobalSAJ'), 'OrgName'), variables('GlobalSAJ').OrgName, parameters('Global').OrgName)]",
                      "globalSAAppName": "[if(contains(variables('GlobalSAJ'), 'AppName'), variables('GlobalSAJ').AppName, parameters('Global').AppName)]",
                      "globalSARGName": "[if(contains(variables('GlobalSAJ'), 'RG'), variables('GlobalSAJ').RG, if(contains(variables('GlobalRGJ'), 'name'), variables('GlobalRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID'))))]",
                      "hubRGPrefix": "[if(contains(variables('HubRGJ'), 'Prefix'), variables('HubRGJ').Prefix, parameters('Prefix'))]",
                      "hubRGOrgName": "[if(contains(variables('HubRGJ'), 'OrgName'), variables('HubRGJ').OrgName, parameters('Global').OrgName)]",
                      "hubRGAppName": "[if(contains(variables('HubRGJ'), 'AppName'), variables('HubRGJ').AppName, parameters('Global').AppName)]",
                      "hubRGRGName": "[if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID'))))]",
                      "hubKVPrefix": "[if(contains(variables('HubKVJ'), 'Prefix'), variables('HubKVJ').Prefix, parameters('Prefix'))]",
                      "hubKVOrgName": "[if(contains(variables('HubKVJ'), 'OrgName'), variables('HubKVJ').OrgName, parameters('Global').OrgName)]",
                      "hubKVAppName": "[if(contains(variables('HubKVJ'), 'AppName'), variables('HubKVJ').AppName, parameters('Global').AppName)]",
                      "hubKVRGName": "[if(contains(variables('HubKVJ'), 'RG'), variables('HubKVJ').RG, variables('HubRGJ').name)]",
                      "hubAAPrefix": "[if(contains(variables('HubAAJ'), 'Prefix'), variables('HubAAJ').Prefix, parameters('Prefix'))]",
                      "hubAAOrgName": "[if(contains(variables('HubAAJ'), 'OrgName'), variables('HubAAJ').OrgName, parameters('Global').OrgName)]",
                      "hubAAAppName": "[if(contains(variables('HubAAJ'), 'AppName'), variables('HubAAJ').AppName, parameters('Global').AppName)]",
                      "hubAARGName": "[if(contains(variables('HubAAJ'), 'RG'), variables('HubAAJ').RG, variables('HubRGJ').name)]"
                    },
                    "globalRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').globalRGPrefix, variables('gh').globalRGOrgName, variables('gh').globalRGAppName, variables('gh').globalRGName)]",
                    "HubRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').hubRGPrefix, variables('gh').hubRGOrgName, variables('gh').hubRGAppName, variables('gh').hubRGRGName)]",
                    "globalSAName": "[toLower(format('{0}{1}{2}{3}sa{4}', variables('gh').globalSAPrefix, variables('gh').globalSAOrgName, variables('gh').globalSAAppName, variables('gh').globalSARGName, variables('GlobalRGJ').name))]",
                    "HubKVRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').hubKVPrefix, variables('gh').hubKVOrgName, variables('gh').hubKVAppName, variables('gh').hubKVRGName)]",
                    "HubKVName": "[toLower(format('{0}-{1}-{2}-{3}-kv{4}', variables('gh').hubKVPrefix, variables('gh').hubKVOrgName, variables('gh').hubKVAppName, variables('gh').hubKVRGName, variables('HubKVJ').name))]",
                    "AAName": "[toLower(format('{0}{1}{2}{3}{4}', variables('gh').hubAAPrefix, variables('gh').hubAAOrgName, variables('gh').hubAAAppName, variables('gh').hubAARGName, variables('HubAAJ').name))]",
                    "EnvironmentLookup": {
                      "D": "Dev",
                      "T": "Test",
                      "I": "Int",
                      "U": "UAT",
                      "P": "PROD",
                      "S": "SBX"
                    },
                    "DSCConfigLookup": {
                      "AppServers": "AppServers",
                      "InitialDOP": "AppServers",
                      "WVDServers": "AppServers"
                    },
                    "AppServerSizeLookup": {
                      "D": "D",
                      "T": "D",
                      "I": "D",
                      "U": "D",
                      "P": "P",
                      "S": "D"
                    },
                    "RebootNodeLookup": {
                      "D": true,
                      "Q": true,
                      "T": true,
                      "U": true,
                      "P": false
                    },
                    "ConfigurationMode": {
                      "D": "ApplyAndAutoCorrect",
                      "Q": "ApplyAndAutoCorrect",
                      "T": "ApplyAndAutoCorrect",
                      "U": "ApplyAndAutoCorrect",
                      "P": "ApplyAndMonitor"
                    },
                    "DSCConfigurationModeFrequencyMins": 15,
                    "networkId": "[format('{0}{1}', parameters('Global').networkid[0], string(sub(parameters('Global').networkid[1], mul(2, int(parameters('DeploymentID'))))))]",
                    "storageAccountType": "[if(equals(parameters('Environment'), 'P'), if(contains(parameters('AppServer'), 'Zone'), 'Premium_LRS', 'Premium_ZRS'), if(contains(parameters('AppServer'), 'Zone'), 'StandardSSD_ZRS', 'StandardSSD_LRS'))]",
                    "SADiagName": "[format('{0}sadiag', variables('DeploymentURI'))]",
                    "saaccountiddiag": "[resourceId('Microsoft.Storage/storageAccounts/', variables('SADiagName'))]",
                    "saSQLBackupName": "[format('{0}sasqlbackup', variables('DeploymentURI'))]",
                    "MSILookup": {
                      "SQL": "Cluster",
                      "UTL": "DefaultKeyVault",
                      "FIL": "Cluster",
                      "OCR": "Storage",
                      "WVD": "WVD"
                    },
                    "userAssignedIdentities": {
                      "Cluster": {
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiKeyVaultSecretsGet', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperator', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperatorGlobal', variables('Deployment'))))]": {}
                      },
                      "Default": {
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiKeyVaultSecretsGet', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperatorGlobal', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperator', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountFileContributor', variables('Deployment'))))]": {}
                      },
                      "DefaultKeyVault": {
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperatorGlobal', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiKeyVaultSecretsGetApp', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiAzureServiceBusDataOwner', variables('Deployment'))))]": {}
                      },
                      "WVD": {
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperatorGlobal', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountFileContributor', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiWVDRegKeyReader', variables('Deployment'))))]": {}
                      },
                      "Storage": {
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountContributor', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperatorGlobal', variables('Deployment'))))]": {}
                      },
                      "None": {}
                    },
                    "ASNAME": "[if(contains(parameters('AppServer'), 'Zone'), 'usingZones', parameters('AppServer').ASNAME)]"
                  },
                  "resources": [
                    {
                      "condition": "[not(equals(variables('ASNAME'), 'usingZones'))]",
                      "type": "Microsoft.Compute/availabilitySets",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}-as{1}', variables('Deployment'), variables('ASNAME'))]",
                      "location": "[resourceGroup().location]",
                      "sku": {
                        "name": "Aligned"
                      },
                      "properties": {
                        "platformUpdateDomainCount": 5,
                        "platformFaultDomainCount": 3
                      }
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines",
                      "apiVersion": "2021-04-01",
                      "name": "[format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "location": "[resourceGroup().location]",
                      "identity": {
                        "type": "SystemAssigned, UserAssigned",
                        "userAssignedIdentities": "[if(contains(variables('MSILookup'), parameters('AppServer').ROLE), variables('userAssignedIdentities')[variables('MSILookup')[parameters('AppServer').ROLE]], variables('userAssignedIdentities').Default)]"
                      },
                      "tags": {
                        "Environment": "[variables('EnvironmentLookup')[parameters('Environment')]]",
                        "Zone": "[if(contains(parameters('AppServer'), 'Zone'), parameters('AppServer').Zone, 1)]"
                      },
                      "zones": "[if(contains(parameters('AppServer'), 'Zone'), array(parameters('AppServer').Zone), null())]",
                      "plan": "[if(contains(variables('OSType')[parameters('AppServer').OSType], 'plan'), variables('OSType')[parameters('AppServer').OSType].plan, null())]",
                      "properties": {
                        "licenseType": "[if(contains(variables('OSType')[parameters('AppServer').OSType], 'licenseType'), variables('OSType')[parameters('AppServer').OSType].licenseType, null())]",
                        "availabilitySet": "[if(contains(parameters('AppServer'), 'Zone'), null(), createObject('id', format('{0}', resourceId('Microsoft.Compute/availabilitySets', format('{0}-as{1}', variables('Deployment'), parameters('AppServer').ASName)))))]",
                        "hardwareProfile": {
                          "vmSize": "[variables('computeSizeLookupOptions')[format('{0}-{1}', parameters('AppServer').ROLE, variables('AppServerSizeLookup')[parameters('Environment')])]]"
                        },
                        "osProfile": {
                          "computerName": "[parameters('VM').vmHostName]",
                          "adminUsername": "[if(contains(parameters('AppServer'), 'AdminUser'), parameters('AppServer').AdminUser, parameters('Global').vmAdminUserName)]",
                          "adminPassword": "[parameters('vmAdminPassword')]",
                          "customData": "[if(contains(parameters('AppServer'), 'customData'), base64(replace(parameters('AppServer').customData, '{0}', format('{0}.', variables('networkId')))), null())]",
                          "secrets": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), createArray(createObject('sourceVault', createObject('id', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults', variables('HubKVName'))), 'vaultCertificates', createArray(createObject('certificateUrl', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults/secrets', variables('HubKVName'), parameters('Global').CertName), '2021-06-01-preview').secretUriWithVersion, 'certificateStore', 'My'), createObject('certificateUrl', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults/secrets', variables('HubKVName'), parameters('Global').CertName), '2021-06-01-preview').secretUriWithVersion, 'certificateStore', 'Root'), createObject('certificateUrl', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults/secrets', variables('HubKVName'), parameters('Global').CertName), '2021-06-01-preview').secretUriWithVersion, 'certificateStore', 'CA')))), null())]",
                          "windowsConfiguration": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), parameters('VM').windowsConfiguration, null())]",
                          "linuxConfiguration": "[if(not(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows')), parameters('VM').linuxConfiguration, null())]"
                        },
                        "storageProfile": {
                          "imageReference": "[variables('OSType')[parameters('AppServer').OSType].imageReference]",
                          "osDisk": {
                            "name": "[format('{0}-{1}-OSDisk', variables('Deployment'), parameters('AppServer').Name)]",
                            "caching": "ReadWrite",
                            "diskSizeGB": "[variables('OSType')[parameters('AppServer').OSType].OSDiskGB]",
                            "createOption": "FromImage",
                            "managedDisk": {
                              "storageAccountType": "[if(contains(parameters('AppServer'), 'OSstorageAccountType'), parameters('AppServer').OSstorageAccountType, variables('storageAccountType'))]"
                            }
                          },
                          "dataDisks": "[reference(resourceId('Microsoft.Resources/deployments', format('dp{0}-AppServer-diskLookup{1}', variables('Deployment'), parameters('AppServer').Name))).outputs.DATADisks.value]"
                        },
                        "networkProfile": {
                          "copy": [
                            {
                              "name": "networkInterfaces",
                              "count": "[length(parameters('AppServer').NICs)]",
                              "input": {
                                "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}{1}{2}{3}', variables('Deployment'), if(contains(parameters('AppServer').NICs[copyIndex('networkInterfaces')], 'LB'), '-niclb', if(contains(parameters('AppServer').NICs[copyIndex('networkInterfaces')], 'PLB'), '-nicplb', if(contains(parameters('AppServer').NICs[copyIndex('networkInterfaces')], 'SLB'), '-nicslb', '-nic'))), if(equals(copyIndex('networkInterfaces'), 0), '', add(copyIndex('networkInterfaces'), 1)), parameters('AppServer').Name))]",
                                "properties": {
                                  "primary": "[contains(parameters('AppServer').NICs[copyIndex('networkInterfaces')], 'Primary')]",
                                  "deleteOption": "Delete"
                                }
                              }
                            }
                          ]
                        },
                        "diagnosticsProfile": {
                          "bootDiagnostics": {
                            "enabled": true,
                            "storageUri": "[format('https://{0}.blob.{1}', variables('SADiagName'), environment().suffixes.storage)]"
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-AppServer-nicDeployLoop{1}', variables('Deployment'), parameters('AppServer').Name))]",
                        "[resourceId('Microsoft.Compute/availabilitySets', format('{0}-as{1}', variables('Deployment'), variables('ASNAME')))]",
                        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-AppServer-diskLookup{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, contains(parameters('AppServer'), 'shutdown'))]",
                      "type": "Microsoft.DevTestLab/schedules",
                      "apiVersion": "2018-09-15",
                      "name": "[format('shutdown-computevm-{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "dailyRecurrence": {
                          "time": "[parameters('AppServer').shutdown.time]"
                        },
                        "notificationSettings": {
                          "status": "[if(and(contains(parameters('AppServer').shutdown, 'notification'), bool(parameters('AppServer').shutdown.notification)), 'Enabled', 'Disabled')]",
                          "emailRecipient": "[replace(replace(replace(string(parameters('Global').alertRecipients), '\",\"', ';'), '[\"', ''), '\"]', '')]",
                          "notificationLocale": "en",
                          "timeInMinutes": 30
                        },
                        "status": "[if(or(not(contains(parameters('AppServer').shutdown, 'enabled')), and(contains(parameters('AppServer').shutdown, 'enabled'), bool(parameters('AppServer').shutdown.enabled))), 'Enabled', 'Disabled')]",
                        "targetResourceId": "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]",
                        "taskType": "ComputeVmShutdownTask",
                        "timeZoneId": "[parameters('Global').shutdownSchedulerTimeZone]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.CertMgmt))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'KVAppServerExtensionForWindows')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.Azure.KeyVault.Edp",
                        "type": "KeyVaultForWindows",
                        "typeHandlerVersion": "0.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "secretsManagementSettings": {
                            "pollingIntervalInS": 3600,
                            "certificateStoreName": "MY",
                            "certificateStoreLocation": "LOCAL_MACHINE",
                            "observedCertificates": [
                              "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults/secrets', variables('HubKVName'), parameters('Global').CertName), '2021-06-01-preview').secretUri]"
                            ]
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(parameters('VM').match, bool(parameters('VM').Extensions.AADLogin)), and(contains(parameters('AppServer'), 'ExcludeAADLogin'), not(equals(parameters('AppServer').ExcludeAADLogin, 1))))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'AADLogin')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'Microsoft.Azure.ActiveDirectory', 'Microsoft.Azure.ActiveDirectory.LinuxSSH')]",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'AADLoginForWindows', 'AADLoginForLinux')]",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.AzureDefender))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'AzureDefenderForServers')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.Azure.AzureDefenderForServers",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'MDE.Windows', 'MDE.Linux')]",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "azureResourceId": "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]",
                          "defenderForServersWorkspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', variables('DeploymentURI')))]",
                          "forceReOnboarding": false
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.GuestConfig))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'AzureGuestConfig')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.GuestConfiguration",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'ConfigurationForWindows', 'ConfigurationForLinux')]",
                        "typeHandlerVersion": "1.2",
                        "autoUpgradeMinorVersion": true,
                        "settings": {}
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(parameters('VM').match, bool(parameters('VM').Extensions.AdminCenter)), and(contains(parameters('AppServer'), 'ExcludeAdminCenter'), not(equals(parameters('AppServer').ExcludeAdminCenter, 1))))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'AdminCenter')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "publisher": "Microsoft.AdminCenter",
                        "type": "AdminCenter",
                        "typeHandlerVersion": "0.0",
                        "settings": {
                          "port": "6516",
                          "cspFrameAncestors": [
                            "https://portal.azure.com",
                            "https://*.hosting.portal.azure.net",
                            "https://localhost:1340"
                          ],
                          "corsOrigins": [
                            "https://portal.azure.com",
                            "https://waconazure.com"
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(parameters('VM').match, bool(parameters('VM').Extensions.DomainJoin)), not(and(contains(parameters('AppServer'), 'ExcludeDomainJoin'), bool(parameters('AppServer').ExcludeDomainJoin))))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'joindomain')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.Compute",
                        "type": "JsonADDomainExtension",
                        "typeHandlerVersion": "1.3",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "Name": "[parameters('Global').ADDomainName]",
                          "OUPath": "[if(contains(parameters('AppServer'), 'OUPath'), parameters('AppServer').OUPath, '')]",
                          "User": "[format('{0}@{1}', parameters('Global').vmAdminUserName, parameters('Global').ADDomainName)]",
                          "Restart": "true",
                          "Options": 3
                        },
                        "protectedSettings": {
                          "Password": "[parameters('vmAdminPassword')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(parameters('VM').match, bool(parameters('VM').Extensions.DSC)), equals(parameters('AppServer').Role, 'PULL'))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'Microsoft.Powershell.DSC.Pull')]",
                      "location": "[resourceGroup().location]",
                      "tags": {
                        "displayName": "Powershell.DSC.Pull"
                      },
                      "properties": {
                        "publisher": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'Microsoft.Powershell', 'Microsoft.OSTCExtensions')]",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'DSC', 'DSCForLinux')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '2.77', '2.0')]",
                        "autoUpgradeMinorVersion": true,
                        "protectedSettings": {
                          "Items": {
                            "registrationKeyPrivate": "[listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubRGName')), 'Microsoft.Automation/automationAccounts', variables('AAName')), '2020-01-13-preview').keys[0].Value]"
                          }
                        },
                        "settings": {
                          "advancedOptions": {
                            "forcePullAndApply": true
                          },
                          "Properties": [
                            {
                              "Name": "RegistrationKey",
                              "Value": {
                                "UserName": "PLACEHOLDER_DONOTUSE",
                                "Password": "PrivateSettingsRef:registrationKeyPrivate"
                              },
                              "TypeName": "System.Management.Automation.PSCredential"
                            },
                            {
                              "Name": "RegistrationUrl",
                              "Value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubRGName')), 'Microsoft.Automation/automationAccounts', variables('AAName')), '2020-01-13-preview').RegistrationUrl]",
                              "TypeName": "System.String"
                            },
                            {
                              "Name": "NodeConfigurationName",
                              "Value": "[format('{0}.{1}_{2}_{3}_{4}{5}', if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], 'AppServers'), parameters('Global').OrgName, parameters('Global').Appname, parameters('AppServer').ROLE, parameters('Environment'), parameters('DeploymentID'))]",
                              "TypeName": "System.String"
                            },
                            {
                              "Name": "ConfigurationMode",
                              "Value": "[variables('ConfigurationMode')[parameters('Environment')]]",
                              "TypeName": "System.String"
                            },
                            {
                              "Name": "RebootNodeIfNeeded",
                              "Value": "[variables('RebootNodeLookup')[parameters('Environment')]]",
                              "TypeName": "System.Boolean"
                            },
                            {
                              "Name": "ConfigurationModeFrequencyMins",
                              "Value": "[variables('DSCConfigurationModeFrequencyMins')]",
                              "TypeName": "System.Int32"
                            },
                            {
                              "Name": "RefreshFrequencyMins",
                              "Value": 30,
                              "TypeName": "System.Int32"
                            },
                            {
                              "Name": "ActionAfterReboot",
                              "Value": "ContinueConfiguration",
                              "TypeName": "System.String"
                            },
                            {
                              "Name": "AllowModuleOverwrite",
                              "Value": true,
                              "TypeName": "System.Boolean"
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'joindomain')]",
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(and(parameters('VM').match, and(contains(parameters('VM').Extensions, 'DSC2'), bool(parameters('VM').Extensions.DSC2))), not(equals(parameters('AppServer').Role, 'PULL'))), or(or(equals(parameters('DeploymentName'), 'ConfigSQLAO'), equals(parameters('DeploymentName'), 'CreateADPDC')), equals(parameters('DeploymentName'), 'CreateADBDC')))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'Microsoft.Powershell.DSC2')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'Microsoft.Powershell', 'Microsoft.OSTCExtensions')]",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'DSC', 'DSCForLinux')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '2.24', '2.0')]",
                        "autoUpgradeMinorVersion": true,
                        "forceUpdateTag": "[parameters('deploymentTime')]",
                        "settings": {
                          "wmfVersion": "latest",
                          "configuration": {
                            "url": "[format('{0}/ext-DSC/DSC-{1}.zip', parameters('Global')._artifactsLocation, if(contains(parameters('AppServer'), 'DSConfig'), parameters('AppServer').DSConfig, if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], parameters('DeploymentName'))))]",
                            "script": "[format('DSC-{0}.ps1', if(contains(parameters('AppServer'), 'DSConfig'), parameters('AppServer').DSConfig, if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], parameters('DeploymentName'))))]",
                            "function": "[if(contains(parameters('AppServer'), 'DSConfig'), parameters('AppServer').DSConfig, if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], parameters('DeploymentName')))]"
                          },
                          "configurationArguments": {
                            "DomainName": "[parameters('Global').ADDomainName]"
                          }
                        },
                        "protectedSettings": {
                          "configurationArguments": {
                            "AdminCreds": {
                              "UserName": "[parameters('Global').vmAdminUserName]",
                              "Password": "[parameters('vmAdminPassword')]"
                            },
                            "SQLServiceCreds": {
                              "UserName": "sqladmin",
                              "Password": "[parameters('vmAdminPassword')]"
                            },
                            "witnessStorageKey": {
                              "UserName": "sakey",
                              "Password": "[parameters('saKey')]"
                            }
                          },
                          "configurationUrlSasToken": "[parameters('Global')._artifactsLocationSasToken]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'joindomain')]",
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(and(parameters('VM').match, bool(parameters('VM').Extensions.DSC)), not(equals(parameters('AppServer').Role, 'PULL'))), not(or(or(equals(parameters('DeploymentName'), 'ConfigSQLAO'), equals(parameters('DeploymentName'), 'CreateADPDC')), equals(parameters('DeploymentName'), 'CreateADBDC'))))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'Microsoft.Powershell.DSC')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'Microsoft.Powershell', 'Microsoft.OSTCExtensions')]",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'DSC', 'DSCForLinux')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '2.24', '2.0')]",
                        "autoUpgradeMinorVersion": true,
                        "forceUpdateTag": "[parameters('deploymentTime')]",
                        "settings": {
                          "wmfVersion": "latest",
                          "configuration": {
                            "url": "[format('{0}/ext-DSC/DSC-{1}.zip', parameters('Global')._artifactsLocation, if(contains(parameters('AppServer'), 'DSConfig'), parameters('AppServer').DSConfig, if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], parameters('DeploymentName'))))]",
                            "script": "[format('DSC-{0}.ps1', if(contains(parameters('AppServer'), 'DSConfig'), parameters('AppServer').DSConfig, if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], parameters('DeploymentName'))))]",
                            "function": "[if(contains(parameters('AppServer'), 'DSConfig'), parameters('AppServer').DSConfig, if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], parameters('DeploymentName')))]"
                          },
                          "configurationArguments": {
                            "DomainName": "[parameters('Global').ADDomainName]",
                            "Thumbprint": "[parameters('Global').CertThumbprint]",
                            "storageAccountId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('globalRGName')), 'Microsoft.Storage/storageAccounts', variables('globalSAName'))]",
                            "deployment": "[variables('Deployment')]",
                            "networkid": "[format('{0}.', variables('networkId'))]",
                            "appInfo": "[if(contains(parameters('AppServer'), 'AppInfo'), string(parameters('VM').AppInfo), '')]",
                            "DataDiskInfo": "[string(parameters('VM').DataDisk)]",
                            "clientIDLocal": "[if(equals(format('{0}{1}', parameters('Environment'), parameters('DeploymentID')), 'G0'), '', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('RGName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-uaiStorageAccountOperator', variables('Deployment'))), '2018-11-30').clientId)]",
                            "clientIDGlobal": "[if(equals(format('{0}{1}', parameters('Environment'), parameters('DeploymentID')), 'G0'), '', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('RGName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-uaiStorageAccountFileContributor', variables('Deployment'))), '2018-11-30').clientId)]"
                          },
                          "configurationData": {
                            "url": "[format('{0}/ext-CD/{1}-ConfigurationData.psd1', parameters('Global')._artifactsLocation, parameters('AppServer').Role)]"
                          }
                        },
                        "protectedSettings": {
                          "configurationArguments": {
                            "AdminCreds": {
                              "UserName": "[parameters('Global').vmAdminUserName]",
                              "Password": "[parameters('vmAdminPassword')]"
                            },
                            "sshPublic": {
                              "UserName": "ssh",
                              "Password": "[parameters('sshPublic')]"
                            },
                            "devOpsPat": {
                              "UserName": "pat",
                              "Password": "[parameters('devOpsPat')]"
                            }
                          },
                          "configurationUrlSasToken": "[parameters('Global')._artifactsLocationSasToken]",
                          "configurationDataUrlSasToken": "[parameters('Global')._artifactsLocationSasToken]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'joindomain')]",
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.IaaSDiagnostics))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2020-12-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'vmDiagnostics')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Diagnostics",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'IaaSDiagnostics', 'LinuxDiagnostic')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '1.9', '3.0')]",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "WadCfg": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), variables('WadCfg'), null())]",
                          "ladCfg": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), null(), variables('ladCfg'))]",
                          "StorageAccount": "[variables('saaccountiddiag')]",
                          "StorageType": "TableAndBlob"
                        },
                        "protectedSettings": {
                          "storageAccountName": "[variables('saaccountiddiag')]",
                          "storageAccountKey": "[listKeys(variables('saaccountiddiag'), '2016-01-01').keys[0].value]",
                          "storageAccountEndPoint": "[format('https://{0}/', environment().suffixes.storage)]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.DependencyAgent))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2020-12-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'DependencyAgent')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'DependencyAgentWindows', 'DependencyAgentLinux')]",
                        "typeHandlerVersion": "9.5",
                        "autoUpgradeMinorVersion": true
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.AzureMonitorAgent))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2020-12-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), format('{0}', if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'AzureMonitorWindowsAgent', 'AzureMonitorLinuxAgent')))]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "publisher": "Microsoft.Azure.Monitor",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'AzureMonitorWindowsAgent', 'AzureMonitorLinuxAgent')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '1.0', '1.5')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.MonitoringAgent))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2020-12-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'MonitoringAgent')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.EnterpriseCloud.Monitoring",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'MicrosoftMonitoringAgent', 'OmsAgentForLinux')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '1.0', '1.4')]",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "workspaceId": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', variables('DeploymentURI'))), '2021-06-01').customerId]"
                        },
                        "protectedSettings": {
                          "workspaceKey": "[listKeys(resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', variables('DeploymentURI'))), '2021-06-01').primarySharedKey]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.GuestHealthAgent))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2020-12-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), format('{0}', if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'GuestHealthWindowsAgent', 'GuestHealthLinuxAgent')))]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "publisher": "Microsoft.Azure.Monitor.VirtualMachines.GuestHealth",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'GuestHealthWindowsAgent', 'GuestHealthLinuxAgent')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '1.0', '1.0')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Insights/dataCollectionRuleAssociations",
                      "apiVersion": "2019-11-01-preview",
                      "scope": "[format('Microsoft.Compute/virtualMachines/{0}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]",
                      "name": "[format('{0}vmInsights', variables('DeploymentURI'))]",
                      "properties": {
                        "description": "Association of data collection rule for AppServer Insights Health.",
                        "dataCollectionRuleId": "[resourceId('Microsoft.Insights/dataCollectionRules', format('{0}vmInsights', variables('DeploymentURI')))]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.chefClient))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'chefClient')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Chef.Bootstrap.WindowsAzure",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'ChefClient', 'LinuxChefClient')]",
                        "typeHandlerVersion": "1210.12",
                        "settings": {
                          "bootstrap_options": {
                            "chef_server_url": "[parameters('Global').chef_server_url]",
                            "validation_client_name": "[parameters('Global').chef_validation_client_name]"
                          },
                          "runlist": "recipe[mycookbook::default]"
                        },
                        "protectedSettings": {
                          "validation_key": "[parameters('Global').chef_validation_key]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(parameters('VM').match, equals(parameters('AppServer').role, 'SQL')), bool(parameters('VM').Extensions.SqlIaasExtension))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'SqlIaasExtension')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "type": "SqlIaaSAgent",
                        "publisher": "Microsoft.SqlServer.Management",
                        "typeHandlerVersion": "1.2",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "AutoTelemetrySettings": {
                            "Region": "[resourceGroup().location]"
                          },
                          "KeyVaultCredentialSettings": {
                            "Enable": true,
                            "CredentialName": "[parameters('Global').sqlCredentialName]"
                          }
                        },
                        "protectedSettings": {
                          "PrivateKeyVaultCredentialSettings": {
                            "AzureKeyVaultUrl": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults', variables('HubKVName')), '2021-06-01-preview').vaultUri]",
                            "StorageUrl": "[reference(resourceId('Microsoft.Storage/storageAccounts', if(equals(parameters('AppServer').Role, 'SQL'), variables('saSQLBackupName'), variables('SADiagName'))), '2015-06-15').primaryEndpoints.blob]",
                            "StorageAccessKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', if(equals(parameters('AppServer').Role, 'SQL'), variables('saSQLBackupName'), variables('SADiagName'))), '2016-01-01').keys[0].value]",
                            "Password": "[parameters('vmAdminPassword')]"
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(parameters('VM').match, equals(parameters('AppServer').role, 'SQL')), bool(parameters('VM').Extensions.BackupWindowsWorkloadSQL))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'AzureBackupWindowsWorkload')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "locale": "en-us",
                          "AppServerType": "microsoft.compute/virtualmachines"
                        },
                        "publisher": "Microsoft.Azure.RecoveryServices.WorkloadBackup",
                        "type": "AzureBackupWindowsWorkload",
                        "typeHandlerVersion": "1.1"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.Antimalware))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'IaaSAntimalware')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Security",
                        "type": "IaaSAntimalware",
                        "typeHandlerVersion": "1.5",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "Monitoring": "ON",
                          "StorageAccountName": "[variables('SADiagName')]",
                          "AntimalwareEnabled": true,
                          "RealtimeProtectionEnabled": "true",
                          "ScheduledScanSettings": {
                            "isEnabled": "true",
                            "day": "1",
                            "time": "720",
                            "scanType": "Full"
                          },
                          "Exclusions": {
                            "Extensions": "",
                            "Paths": "",
                            "Processes": ""
                          }
                        },
                        "protectedSettings": null
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-AppServer-publicIPDeploy{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[variables('Deployment')]"
                          },
                          "DeploymentURI": {
                            "value": "[variables('DeploymentURI')]"
                          },
                          "NICs": {
                            "value": "[parameters('AppServer').NICs]"
                          },
                          "VM": {
                            "value": "[parameters('AppServer')]"
                          },
                          "PIPprefix": {
                            "value": "AppServer"
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "18109364379899578760"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "DeploymentURI": {
                              "type": "string"
                            },
                            "PIPprefix": {
                              "type": "string"
                            },
                            "NICs": {
                              "type": "array"
                            },
                            "VM": {
                              "type": "object"
                            },
                            "Global": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "condition": "[and(contains(parameters('NICs')[copyIndex()], 'PublicIP'), not(equals(parameters('NICs')[copyIndex()].PublicIP, null())))]",
                              "copy": {
                                "name": "PublicIP",
                                "count": "[length(parameters('NICs'))]"
                              },
                              "type": "Microsoft.Network/publicIPAddresses",
                              "apiVersion": "2021-02-01",
                              "name": "[format('{0}-{1}{2}-publicip{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1))]",
                              "location": "[resourceGroup().location]",
                              "sku": {
                                "name": "[if(contains(parameters('VM'), 'Zone'), 'Standard', 'Basic')]"
                              },
                              "properties": {
                                "publicIPAllocationMethod": "[parameters('NICs')[copyIndex()].PublicIP]",
                                "dnsSettings": {
                                  "domainNameLabel": "[toLower(format('{0}-{1}{2}-{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1)))]"
                                }
                              }
                            },
                            {
                              "condition": "[and(contains(parameters('NICs')[copyIndex()], 'PublicIP'), not(equals(parameters('NICs')[copyIndex()].PublicIP, null())))]",
                              "copy": {
                                "name": "PublicIPDiag",
                                "count": "[length(parameters('NICs'))]"
                              },
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2017-05-01-preview",
                              "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', format('{0}-{1}{2}-publicip{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1)))]",
                              "name": "service",
                              "properties": {
                                "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                                "logs": [
                                  {
                                    "category": "DDoSProtectionNotifications",
                                    "enabled": true
                                  }
                                ],
                                "metrics": [
                                  {
                                    "timeGrain": "PT5M",
                                    "enabled": true,
                                    "retentionPolicy": {
                                      "enabled": false,
                                      "days": 0
                                    }
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/publicIPAddresses', format('{0}-{1}{2}-publicip{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1)))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "PIPID": {
                              "type": "array",
                              "copy": {
                                "count": "[length(parameters('NICs'))]",
                                "input": "[if(and(contains(parameters('NICs')[copyIndex()], 'PublicIP'), not(equals(parameters('NICs')[copyIndex()].PublicIP, null()))), resourceId('Microsoft.Network/publicIPAddresses', format('{0}-{1}{2}-publicip{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1))), '')]"
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-AppServer-JITNSG-{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[variables('Deployment')]"
                          },
                          "VM": {
                            "value": "[parameters('AppServer')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "16183288891198554910"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "VM": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/networkSecurityGroups",
                              "apiVersion": "2021-05-01",
                              "name": "[format('{0}-vm{1}-JITNSG', parameters('Deployment'), parameters('VM').Name)]",
                              "location": "[resourceGroup().location]"
                            }
                          ]
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-AppServer-nicDeployLoop{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[variables('Deployment')]"
                          },
                          "DeploymentURI": {
                            "value": "[variables('DeploymentURI')]"
                          },
                          "DeploymentID": {
                            "value": "[parameters('DeploymentID')]"
                          },
                          "NICs": {
                            "value": "[parameters('AppServer').NICs]"
                          },
                          "VM": {
                            "value": "[parameters('AppServer')]"
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "15680478958950286894"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "DeploymentURI": {
                              "type": "string"
                            },
                            "DeploymentID": {
                              "type": "string"
                            },
                            "NICs": {
                              "type": "array"
                            },
                            "VM": {
                              "type": "object"
                            },
                            "Global": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "NIC",
                                "count": "[length(parameters('NICs'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('dp{0}-nicDeploy{1}{2}', parameters('Deployment'), parameters('VM').Name, add(copyIndex(), 1))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "Deployment": {
                                    "value": "[parameters('Deployment')]"
                                  },
                                  "DeploymentURI": {
                                    "value": "[parameters('DeploymentURI')]"
                                  },
                                  "DeploymentID": {
                                    "value": "[parameters('DeploymentID')]"
                                  },
                                  "NIC": {
                                    "value": "[parameters('NICs')[copyIndex()]]"
                                  },
                                  "NICNumber": {
                                    "value": "[string(add(copyIndex(), 1))]"
                                  },
                                  "VM": {
                                    "value": "[parameters('VM')]"
                                  },
                                  "Global": {
                                    "value": "[parameters('Global')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.4.1318.3566",
                                      "templateHash": "13928916846586964615"
                                    }
                                  },
                                  "parameters": {
                                    "Deployment": {
                                      "type": "string"
                                    },
                                    "DeploymentURI": {
                                      "type": "string"
                                    },
                                    "DeploymentID": {
                                      "type": "string"
                                    },
                                    "NIC": {
                                      "type": "object"
                                    },
                                    "NICNumber": {
                                      "type": "string"
                                    },
                                    "VM": {
                                      "type": "object"
                                    },
                                    "Global": {
                                      "type": "object"
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "loadBalancerInboundNatRules",
                                        "count": "[length(variables('rules'))]",
                                        "input": {
                                          "id": "[format('{0}/providers/Microsoft.Network/loadBalancers/{1}-lb{2}/inboundNatRules/{3}', resourceGroup().id, parameters('Deployment'), if(contains(parameters('NIC'), 'PLB'), parameters('NIC').PLB, 'none'), if(contains(parameters('NIC'), 'NATRules'), variables('rules')[copyIndex('loadBalancerInboundNatRules')], 'none'))]"
                                        }
                                      }
                                    ],
                                    "networkId": "[format('{0}{1}', parameters('Global').networkid[0], string(sub(parameters('Global').networkid[1], mul(2, int(parameters('DeploymentID'))))))]",
                                    "networkIdUpper": "[format('{0}{1}', parameters('Global').networkid[0], string(add(1, sub(parameters('Global').networkid[1], mul(2, int(parameters('DeploymentID')))))))]",
                                    "VNetID": "[resourceId('Microsoft.Network/VirtualNetworks', format('{0}-vn', parameters('Deployment')))]",
                                    "subnetID": "[format('{0}/subnets/sn{1}', variables('VNetID'), parameters('NIC').Subnet)]",
                                    "acceleratedNetworking": "[if(contains(parameters('NIC'), 'FastNic'), true(), false())]",
                                    "NICSuffix": "[if(equals(parameters('NICNumber'), '1'), '', parameters('NICNumber'))]",
                                    "IPAllocation": "[if(contains(parameters('NIC'), 'StaticIP'), 'Static', 'Dynamic')]",
                                    "privateIPAddress": "[if(contains(parameters('NIC'), 'StaticIP'), format('{0}.{1}', if(equals(parameters('NIC').Subnet, 'MT02'), variables('networkIdUpper'), variables('networkId')), parameters('NIC').StaticIP), null())]",
                                    "publicIPAddress": "[if(not(contains(parameters('NIC'), 'PublicIP')), null(), createObject('id', resourceId('Microsoft.Network/publicIPAddresses', format('{0}-vm{1}-publicip{2}', parameters('Deployment'), parameters('VM').Name, parameters('NICNumber')))))]",
                                    "JITNSG": {
                                      "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-vm{1}-JITNSG', parameters('Deployment'), parameters('VM').Name))]"
                                    },
                                    "rules": "[if(contains(parameters('NIC'), 'NatRules'), parameters('NIC').NatRules, createArray())]"
                                  },
                                  "resources": [
                                    {
                                      "condition": "[not(or(or(or(contains(parameters('NIC'), 'LB'), contains(parameters('NIC'), 'PLB')), contains(parameters('NIC'), 'SLB')), contains(parameters('NIC'), 'ISLB')))]",
                                      "type": "Microsoft.Network/networkInterfaces",
                                      "apiVersion": "2021-02-01",
                                      "name": "[format('{0}-nic{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name)]",
                                      "location": "[resourceGroup().location]",
                                      "properties": {
                                        "enableAcceleratedNetworking": "[variables('acceleratedNetworking')]",
                                        "ipConfigurations": [
                                          {
                                            "name": "ipconfig1",
                                            "properties": {
                                              "publicIPAddress": "[if(contains(parameters('NIC'), 'PublicIP'), variables('publicIPAddress'), null())]",
                                              "privateIPAllocationMethod": "[variables('IPAllocation')]",
                                              "privateIPAddress": "[variables('privateIPAddress')]",
                                              "subnet": {
                                                "id": "[variables('subnetID')]"
                                              }
                                            }
                                          }
                                        ],
                                        "networkSecurityGroup": "[variables('JITNSG')]"
                                      }
                                    },
                                    {
                                      "condition": "[not(or(contains(parameters('NIC'), 'LB'), or(contains(parameters('NIC'), 'PLB'), or(contains(parameters('NIC'), 'SLB'), contains(parameters('NIC'), 'ISLB')))))]",
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', format('{0}-nic{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]",
                                      "name": "service",
                                      "properties": {
                                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                                        "metrics": [
                                          {
                                            "timeGrain": "PT5M",
                                            "enabled": true,
                                            "retentionPolicy": {
                                              "enabled": false,
                                              "days": 0
                                            }
                                          }
                                        ]
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nic{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]"
                                      ]
                                    },
                                    {
                                      "condition": "[contains(parameters('NIC'), 'PLB')]",
                                      "type": "Microsoft.Network/networkInterfaces",
                                      "apiVersion": "2021-02-01",
                                      "name": "[format('{0}-nicplb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name)]",
                                      "location": "[resourceGroup().location]",
                                      "properties": {
                                        "enableAcceleratedNetworking": "[variables('acceleratedNetworking')]",
                                        "ipConfigurations": [
                                          {
                                            "name": "ipconfig1",
                                            "properties": {
                                              "loadBalancerBackendAddressPools": [
                                                {
                                                  "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', format('{0}-lb{1}', parameters('Deployment'), parameters('NIC').PLB), parameters('NIC').PLB)]"
                                                }
                                              ],
                                              "loadBalancerInboundNatRules": "[if(contains(parameters('NIC'), 'NATRules'), variables('loadBalancerInboundNatRules'), null())]",
                                              "privateIPAllocationMethod": "[variables('IPAllocation')]",
                                              "privateIPAddress": "[variables('privateIPAddress')]",
                                              "subnet": {
                                                "id": "[variables('subnetID')]"
                                              }
                                            }
                                          }
                                        ],
                                        "networkSecurityGroup": "[variables('JITNSG')]"
                                      }
                                    },
                                    {
                                      "condition": "[contains(parameters('NIC'), 'PLB')]",
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', format('{0}-nicplb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]",
                                      "name": "service",
                                      "properties": {
                                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                                        "metrics": [
                                          {
                                            "timeGrain": "PT5M",
                                            "enabled": true,
                                            "retentionPolicy": {
                                              "enabled": false,
                                              "days": 0
                                            }
                                          }
                                        ]
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nicplb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]"
                                      ]
                                    },
                                    {
                                      "condition": "[contains(parameters('NIC'), 'LB')]",
                                      "type": "Microsoft.Network/networkInterfaces",
                                      "apiVersion": "2021-02-01",
                                      "name": "[format('{0}-niclb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name)]",
                                      "location": "[resourceGroup().location]",
                                      "properties": {
                                        "enableAcceleratedNetworking": "[variables('acceleratedNetworking')]",
                                        "ipConfigurations": [
                                          {
                                            "name": "ipconfig1",
                                            "properties": {
                                              "loadBalancerBackendAddressPools": [
                                                {
                                                  "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', format('{0}-ilb{1}', parameters('Deployment'), parameters('NIC').LB), parameters('NIC').LB)]"
                                                }
                                              ],
                                              "privateIPAllocationMethod": "[variables('IPAllocation')]",
                                              "privateIPAddress": "[variables('privateIPAddress')]",
                                              "subnet": {
                                                "id": "[variables('subnetID')]"
                                              }
                                            }
                                          }
                                        ],
                                        "networkSecurityGroup": "[variables('JITNSG')]"
                                      }
                                    },
                                    {
                                      "condition": "[contains(parameters('NIC'), 'LB')]",
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', format('{0}-niclb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]",
                                      "name": "service",
                                      "properties": {
                                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                                        "metrics": [
                                          {
                                            "timeGrain": "PT5M",
                                            "enabled": true,
                                            "retentionPolicy": {
                                              "enabled": false,
                                              "days": 0
                                            }
                                          }
                                        ]
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-niclb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]"
                                      ]
                                    },
                                    {
                                      "condition": "[contains(parameters('NIC'), 'SLB')]",
                                      "type": "Microsoft.Network/networkInterfaces",
                                      "apiVersion": "2021-02-01",
                                      "name": "[format('{0}-nicslb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name)]",
                                      "location": "[resourceGroup().location]",
                                      "properties": {
                                        "enableAcceleratedNetworking": "[variables('acceleratedNetworking')]",
                                        "ipConfigurations": [
                                          {
                                            "name": "ipconfig1",
                                            "properties": {
                                              "loadBalancerBackendAddressPools": [
                                                {
                                                  "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', format('{0}-lb{1}', parameters('Deployment'), parameters('NIC').SLB), parameters('NIC').SLB)]"
                                                }
                                              ],
                                              "privateIPAllocationMethod": "[variables('IPAllocation')]",
                                              "privateIPAddress": "[variables('privateIPAddress')]",
                                              "subnet": {
                                                "id": "[variables('subnetID')]"
                                              }
                                            }
                                          }
                                        ],
                                        "networkSecurityGroup": "[variables('JITNSG')]"
                                      }
                                    },
                                    {
                                      "condition": "[contains(parameters('NIC'), 'SLB')]",
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', format('{0}-nicslb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]",
                                      "name": "service",
                                      "properties": {
                                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                                        "metrics": [
                                          {
                                            "timeGrain": "PT5M",
                                            "enabled": true,
                                            "retentionPolicy": {
                                              "enabled": false,
                                              "days": 0
                                            }
                                          }
                                        ]
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nicslb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]"
                                      ]
                                    }
                                  ],
                                  "outputs": {
                                    "foo7": {
                                      "type": "array",
                                      "value": "[variables('loadBalancerInboundNatRules')]"
                                    },
                                    "foo": {
                                      "type": "object",
                                      "value": "[parameters('NIC')]"
                                    }
                                  }
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-AppServer-publicIPDeploy{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-AppServer-diskLookup{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[variables('Deployment')]"
                          },
                          "DeploymentID": {
                            "value": "[parameters('DeploymentID')]"
                          },
                          "Name": {
                            "value": "[parameters('AppServer').Name]"
                          },
                          "SOFS": {
                            "value": "[if(contains(variables('DataDiskInfo')[parameters('AppServer').DDRole], 'SOFS'), variables('DataDiskInfo')[parameters('AppServer').DDRole].SOFS, json('{\"1\":1}'))]"
                          },
                          "DATA": {
                            "value": "[if(contains(variables('DataDiskInfo')[parameters('AppServer').DDRole], 'DATA'), variables('DataDiskInfo')[parameters('AppServer').DDRole].DATA, json('{\"1\":1}'))]"
                          },
                          "LOGS": {
                            "value": "[if(contains(variables('DataDiskInfo')[parameters('AppServer').DDRole], 'LOGS'), variables('DataDiskInfo')[parameters('AppServer').DDRole].LOGS, json('{\"1\":1}'))]"
                          },
                          "TEMPDB": {
                            "value": "[if(contains(variables('DataDiskInfo')[parameters('AppServer').DDRole], 'TEMPDB'), variables('DataDiskInfo')[parameters('AppServer').DDRole].TEMPDB, json('{\"1\":1}'))]"
                          },
                          "BACKUP": {
                            "value": "[if(contains(variables('DataDiskInfo')[parameters('AppServer').DDRole], 'BACKUP'), variables('DataDiskInfo')[parameters('AppServer').DDRole].BACKUP, json('{\"1\":1}'))]"
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "13688646372196984293"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "DeploymentID": {
                              "type": "string"
                            },
                            "Name": {
                              "type": "string"
                            },
                            "DATA": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "DATASS": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "SOFS": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "LOGS": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "TEMPDB": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "BACKUP": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "DISKS": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "Global": {
                              "type": "object"
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "Data_var",
                                "count": "[length(range(0, if(contains(parameters('DATA'), '1'), 1, length(parameters('DATA').LUNS))))]",
                                "input": {
                                  "name": "[if(contains(parameters('DATA'), '1'), 1, format('{0}-{1}-DATA-DATA{2}', parameters('Deployment'), parameters('Name'), padLeft(parameters('DATA').LUNS[range(0, if(contains(parameters('DATA'), '1'), 1, length(parameters('DATA').LUNS)))[copyIndex('Data_var')]][0], 2, '0')))]",
                                  "lun": "[if(contains(parameters('DATA'), '1'), 1, int(parameters('DATA').LUNS[range(0, if(contains(parameters('DATA'), '1'), 1, length(parameters('DATA').LUNS)))[copyIndex('Data_var')]][0]))]",
                                  "caching": "[if(contains(parameters('DATA'), '1'), 1, parameters('DATA').caching)]",
                                  "diskSizeGB": "[if(contains(parameters('DATA'), '1'), 1, int(parameters('DATA').LUNS[range(0, if(contains(parameters('DATA'), '1'), 1, length(parameters('DATA').LUNS)))[copyIndex('Data_var')]][1]))]",
                                  "createOption": "[if(contains(parameters('DATA'), '1'), 1, if(equals(length(parameters('DATA').LUNS[range(0, if(contains(parameters('DATA'), '1'), 1, length(parameters('DATA').LUNS)))[copyIndex('Data_var')]]), 3), parameters('DATA').LUNS[range(0, if(contains(parameters('DATA'), '1'), 1, length(parameters('DATA').LUNS)))[copyIndex('Data_var')]][2], 'Empty'))]",
                                  "managedDisk": "[if(contains(parameters('DATA'), '1'), 1, if(contains(parameters('DATA'), 'saType'), json(format('{{\"storageAccountType\":\"{0}\"}}', parameters('DATA').saType)), json('null')))]"
                                }
                              },
                              {
                                "name": "Datass_var",
                                "count": "[length(range(0, if(contains(parameters('DATASS'), '1'), 1, length(parameters('DATASS').LUNS))))]",
                                "input": {
                                  "lun": "[if(contains(parameters('DATASS'), '1'), 1, int(parameters('DATASS').LUNS[range(0, if(contains(parameters('DATASS'), '1'), 1, length(parameters('DATASS').LUNS)))[copyIndex('Datass_var')]][0]))]",
                                  "caching": "[if(contains(parameters('DATASS'), '1'), 1, parameters('DATASS').caching)]",
                                  "diskSizeGB": "[if(contains(parameters('DATASS'), '1'), 1, int(parameters('DATASS').LUNS[range(0, if(contains(parameters('DATASS'), '1'), 1, length(parameters('DATASS').LUNS)))[copyIndex('Datass_var')]][1]))]",
                                  "createOption": "[if(contains(parameters('DATASS'), '1'), 1, if(equals(length(parameters('DATASS').LUNS[range(0, if(contains(parameters('DATASS'), '1'), 1, length(parameters('DATASS').LUNS)))[copyIndex('Datass_var')]]), 3), parameters('DATASS').LUNS[range(0, if(contains(parameters('DATASS'), '1'), 1, length(parameters('DATASS').LUNS)))[copyIndex('Datass_var')]][2], 'Empty'))]",
                                  "managedDisk": "[if(contains(parameters('DATASS'), '1'), 1, if(contains(parameters('DATASS'), 'saType'), json(format('{{\"storageAccountType\":\"{0}\"}}', parameters('DATASS').saType)), json('null')))]"
                                }
                              },
                              {
                                "name": "SOFS_var",
                                "count": "[length(range(0, if(contains(parameters('SOFS'), '1'), 1, length(parameters('SOFS').LUNS))))]",
                                "input": {
                                  "name": "[if(contains(parameters('SOFS'), '1'), 1, format('{0}-{1}-DATA-SOFS{2}', parameters('Deployment'), parameters('Name'), padLeft(parameters('SOFS').LUNS[range(0, if(contains(parameters('SOFS'), '1'), 1, length(parameters('SOFS').LUNS)))[copyIndex('SOFS_var')]][0], 2, '0')))]",
                                  "lun": "[if(contains(parameters('SOFS'), '1'), 1, int(parameters('SOFS').LUNS[range(0, if(contains(parameters('SOFS'), '1'), 1, length(parameters('SOFS').LUNS)))[copyIndex('SOFS_var')]][0]))]",
                                  "caching": "[if(contains(parameters('SOFS'), '1'), 1, parameters('SOFS').caching)]",
                                  "diskSizeGB": "[if(contains(parameters('SOFS'), '1'), 1, int(parameters('SOFS').LUNS[range(0, if(contains(parameters('SOFS'), '1'), 1, length(parameters('SOFS').LUNS)))[copyIndex('SOFS_var')]][1]))]",
                                  "createOption": "[if(contains(parameters('SOFS'), '1'), 1, if(equals(length(parameters('SOFS').LUNS[range(0, if(contains(parameters('SOFS'), '1'), 1, length(parameters('SOFS').LUNS)))[copyIndex('SOFS_var')]]), 3), parameters('SOFS').LUNS[range(0, if(contains(parameters('SOFS'), '1'), 1, length(parameters('SOFS').LUNS)))[copyIndex('SOFS_var')]][2], 'Empty'))]",
                                  "managedDisk": "[if(contains(parameters('SOFS'), '1'), 1, if(contains(parameters('SOFS'), 'saType'), json(format('{{\"storageAccountType\":\"{0}\"}}', parameters('SOFS').saType)), json('null')))]"
                                }
                              },
                              {
                                "name": "LOGS_var",
                                "count": "[length(range(0, if(contains(parameters('LOGS'), '1'), 1, length(parameters('LOGS').LUNS))))]",
                                "input": {
                                  "name": "[if(contains(parameters('LOGS'), '1'), 1, format('{0}-{1}-DATA-LOGS{2}', parameters('Deployment'), parameters('Name'), padLeft(parameters('LOGS').LUNS[range(0, if(contains(parameters('LOGS'), '1'), 1, length(parameters('LOGS').LUNS)))[copyIndex('LOGS_var')]][0], 2, '0')))]",
                                  "lun": "[if(contains(parameters('LOGS'), '1'), 1, int(parameters('LOGS').LUNS[range(0, if(contains(parameters('LOGS'), '1'), 1, length(parameters('LOGS').LUNS)))[copyIndex('LOGS_var')]][0]))]",
                                  "caching": "[if(contains(parameters('LOGS'), '1'), 1, parameters('LOGS').caching)]",
                                  "diskSizeGB": "[if(contains(parameters('LOGS'), '1'), 1, int(parameters('LOGS').LUNS[range(0, if(contains(parameters('LOGS'), '1'), 1, length(parameters('LOGS').LUNS)))[copyIndex('LOGS_var')]][1]))]",
                                  "createOption": "[if(contains(parameters('LOGS'), '1'), 1, if(equals(length(parameters('LOGS').LUNS[range(0, if(contains(parameters('LOGS'), '1'), 1, length(parameters('LOGS').LUNS)))[copyIndex('LOGS_var')]]), 3), parameters('LOGS').LUNS[range(0, if(contains(parameters('LOGS'), '1'), 1, length(parameters('LOGS').LUNS)))[copyIndex('LOGS_var')]][2], 'Empty'))]",
                                  "managedDisk": "[if(contains(parameters('LOGS'), '1'), 1, if(contains(parameters('LOGS'), 'saType'), json(format('{{\"storageAccountType\":\"{0}\"}}', parameters('LOGS').saType)), json('null')))]"
                                }
                              },
                              {
                                "name": "TEMPDB_var",
                                "count": "[length(range(0, if(contains(parameters('TEMPDB'), '1'), 1, length(parameters('TEMPDB').LUNS))))]",
                                "input": {
                                  "name": "[if(contains(parameters('TEMPDB'), '1'), 1, format('{0}-{1}-DATA-TEMPDB{2}', parameters('Deployment'), parameters('Name'), padLeft(parameters('TEMPDB').LUNS[range(0, if(contains(parameters('TEMPDB'), '1'), 1, length(parameters('TEMPDB').LUNS)))[copyIndex('TEMPDB_var')]][0], 2, '0')))]",
                                  "lun": "[if(contains(parameters('TEMPDB'), '1'), 1, int(parameters('TEMPDB').LUNS[range(0, if(contains(parameters('TEMPDB'), '1'), 1, length(parameters('TEMPDB').LUNS)))[copyIndex('TEMPDB_var')]][0]))]",
                                  "caching": "[if(contains(parameters('TEMPDB'), '1'), 1, parameters('TEMPDB').caching)]",
                                  "diskSizeGB": "[if(contains(parameters('TEMPDB'), '1'), 1, int(parameters('TEMPDB').LUNS[range(0, if(contains(parameters('TEMPDB'), '1'), 1, length(parameters('TEMPDB').LUNS)))[copyIndex('TEMPDB_var')]][1]))]",
                                  "createOption": "[if(contains(parameters('TEMPDB'), '1'), 1, if(equals(length(parameters('TEMPDB').LUNS[range(0, if(contains(parameters('TEMPDB'), '1'), 1, length(parameters('TEMPDB').LUNS)))[copyIndex('TEMPDB_var')]]), 3), parameters('TEMPDB').LUNS[range(0, if(contains(parameters('TEMPDB'), '1'), 1, length(parameters('TEMPDB').LUNS)))[copyIndex('TEMPDB_var')]][2], 'Empty'))]",
                                  "managedDisk": "[if(contains(parameters('TEMPDB'), '1'), 1, if(contains(parameters('TEMPDB'), 'saType'), json(format('{{\"storageAccountType\":\"{0}\"}}', parameters('TEMPDB').saType)), json('null')))]"
                                }
                              },
                              {
                                "name": "BACKUP_var",
                                "count": "[length(range(0, if(contains(parameters('BACKUP'), '1'), 1, length(parameters('BACKUP').LUNS))))]",
                                "input": {
                                  "name": "[if(contains(parameters('BACKUP'), '1'), 1, format('{0}-{1}-DATA-BACKUP{2}', parameters('Deployment'), parameters('Name'), padLeft(parameters('BACKUP').LUNS[range(0, if(contains(parameters('BACKUP'), '1'), 1, length(parameters('BACKUP').LUNS)))[copyIndex('BACKUP_var')]][0], 2, '0')))]",
                                  "lun": "[if(contains(parameters('BACKUP'), '1'), 1, int(parameters('BACKUP').LUNS[range(0, if(contains(parameters('BACKUP'), '1'), 1, length(parameters('BACKUP').LUNS)))[copyIndex('BACKUP_var')]][0]))]",
                                  "caching": "[if(contains(parameters('BACKUP'), '1'), 1, parameters('BACKUP').caching)]",
                                  "diskSizeGB": "[if(contains(parameters('BACKUP'), '1'), 1, int(parameters('BACKUP').LUNS[range(0, if(contains(parameters('BACKUP'), '1'), 1, length(parameters('BACKUP').LUNS)))[copyIndex('BACKUP_var')]][1]))]",
                                  "createOption": "[if(contains(parameters('BACKUP'), '1'), 1, if(equals(length(parameters('BACKUP').LUNS[range(0, if(contains(parameters('BACKUP'), '1'), 1, length(parameters('BACKUP').LUNS)))[copyIndex('BACKUP_var')]]), 3), parameters('BACKUP').LUNS[range(0, if(contains(parameters('BACKUP'), '1'), 1, length(parameters('BACKUP').LUNS)))[copyIndex('BACKUP_var')]][2], 'Empty'))]",
                                  "managedDisk": "[if(contains(parameters('BACKUP'), '1'), 1, if(contains(parameters('BACKUP'), 'saType'), json(format('{{\"storageAccountType\":\"{0}\"}}', parameters('BACKUP').saType)), json('null')))]"
                                }
                              }
                            ]
                          },
                          "resources": [],
                          "outputs": {
                            "SOFS": {
                              "type": "array",
                              "value": "[if(contains(parameters('SOFS'), '1'), array('no SOFS disks'), variables('SOFS_var'))]"
                            },
                            "DATA": {
                              "type": "array",
                              "value": "[if(contains(parameters('DATA'), '1'), array('no DATA disks'), variables('Data_var'))]"
                            },
                            "DATASS": {
                              "type": "array",
                              "value": "[if(contains(parameters('DATASS'), '1'), array('no DATA disks'), variables('Datass_var'))]"
                            },
                            "LOGS": {
                              "type": "array",
                              "value": "[if(contains(parameters('LOGS'), '1'), array('no LOGS disks'), variables('LOGS_var'))]"
                            },
                            "TEMPDB": {
                              "type": "array",
                              "value": "[if(contains(parameters('TEMPDB'), '1'), array('no TEMPDB disks'), variables('TEMPDB_var'))]"
                            },
                            "BACKUP": {
                              "type": "array",
                              "value": "[if(contains(parameters('BACKUP'), '1'), array('no BACKUP disks'), variables('BACKUP_var'))]"
                            },
                            "DATADisks": {
                              "type": "array",
                              "value": "[union(if(contains(parameters('SOFS'), '1'), createArray(), variables('SOFS_var')), if(contains(parameters('DATA'), '1'), createArray(), variables('Data_var')), if(contains(parameters('DATASS'), '1'), createArray(), variables('Datass_var')), if(contains(parameters('LOGS'), '1'), createArray(), variables('LOGS_var')), if(contains(parameters('TEMPDB'), '1'), createArray(), variables('TEMPDB_var')), if(contains(parameters('BACKUP'), '1'), createArray(), variables('BACKUP_var')))]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "condition": "[bool(parameters('AppServer').DeployJIT)]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-AppServer-JIT-{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[variables('Deployment')]"
                          },
                          "VM": {
                            "value": "[parameters('AppServer')]"
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          },
                          "DeploymentID": {
                            "value": "[parameters('DeploymentID')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "17671050488544287828"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "VM": {
                              "type": "object"
                            },
                            "Global": {
                              "type": "object"
                            },
                            "DeploymentID": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "ports",
                                "count": "[length(variables('portList'))]",
                                "input": {
                                  "number": "[variables('portList')[copyIndex('ports')]]",
                                  "protocol": "TCP",
                                  "allowedSourceAddressPrefixes": "[union(parameters('Global').IPAddressforRemoteAccess, variables('addressPrefixes'))]",
                                  "maxRequestAccessDuration": "PT3H"
                                }
                              }
                            ],
                            "portList": [
                              3389,
                              22,
                              5985,
                              5986
                            ],
                            "networkId": "[format('{0}{1}', parameters('Global').networkid[0], string(sub(parameters('Global').networkid[1], mul(2, int(parameters('DeploymentID'))))))]",
                            "addressPrefixes": [
                              "[format('{0}.0/23', variables('networkId'))]"
                            ]
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Security/locations/jitNetworkAccessPolicies",
                              "apiVersion": "2020-01-01",
                              "name": "[format('{0}/JIT_{1}', resourceGroup().location, format('{0}-vm{1}', parameters('Deployment'), parameters('VM').name))]",
                              "kind": "Basic",
                              "properties": {
                                "virtualMachines": [
                                  {
                                    "id": "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', parameters('Deployment'), parameters('VM').name))]",
                                    "ports": "[variables('ports')]"
                                  }
                                ],
                                "appendMode": true
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "Disks": {
                      "type": "array",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('dp{0}-AppServer-diskLookup{1}', variables('Deployment'), parameters('AppServer').Name))).outputs.DATADisks.value]"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-LB', variables('Deployment')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-OMS', variables('Deployment')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-SA', variables('Deployment')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-VNETDNSDC1', variables('Deployment')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-VNETDNSDC2', variables('Deployment')))]"
      ]
    },
    {
      "condition": "[bool(parameters('Stage').VMFILE)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "VMFile",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "DeploymentID": {
            "value": "[parameters('DeploymentID')]"
          },
          "DeploymentInfo": {
            "value": "[parameters('DeploymentInfo')]"
          },
          "Environment": {
            "value": "[parameters('Environment')]"
          },
          "Extensions": {
            "value": "[parameters('Extensions')]"
          },
          "Global": {
            "value": "[parameters('Global')]"
          },
          "Prefix": {
            "value": "[parameters('Prefix')]"
          },
          "Stage": {
            "value": "[parameters('Stage')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "13874993644946453761"
            }
          },
          "parameters": {
            "Prefix": {
              "type": "string"
            },
            "Environment": {
              "type": "string",
              "defaultValue": "D",
              "allowedValues": [
                "I",
                "D",
                "T",
                "U",
                "P",
                "S",
                "G",
                "A"
              ]
            },
            "DeploymentID": {
              "type": "string",
              "defaultValue": "1",
              "allowedValues": [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9"
              ]
            },
            "Stage": {
              "type": "object"
            },
            "Extensions": {
              "type": "object"
            },
            "Global": {
              "type": "object"
            },
            "DeploymentInfo": {
              "type": "object"
            }
          },
          "variables": {
            "copy": [
              {
                "name": "VMs",
                "count": "[length(variables('AppServers'))]",
                "input": {
                  "name": "[variables('AppServers')[copyIndex('VMs')].Name]",
                  "match": "[or(equals(parameters('Global').CN, '.'), contains(array(parameters('Global').CN), variables('AppServers')[copyIndex('VMs')].Name))]",
                  "Extensions": "[if(contains(variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType], 'RoleExtensions'), union(parameters('Extensions'), variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType].RoleExtensions), parameters('Extensions'))]",
                  "DataDisk": "[if(contains(variables('AppServers')[copyIndex('VMs')], 'DDRole'), variables('DataDiskInfo')[variables('AppServers')[copyIndex('VMs')].DDRole], null())]",
                  "vmHostName": "[toLower(format('{0}{1}{2}{3}{4}', parameters('Prefix'), parameters('Global').AppName, parameters('Environment'), parameters('DeploymentID'), variables('AppServers')[copyIndex('VMs')].Name))]",
                  "AppInfo": "[if(contains(variables('AppServers')[copyIndex('VMs')], 'AppInfo'), variables('AppServers')[copyIndex('VMs')].AppInfo, null())]",
                  "windowsConfiguration": {
                    "enableAutomaticUpdates": true,
                    "provisionVmAgent": true,
                    "patchSettings": {
                      "enableHotpatching": "[if(contains(variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType], 'HotPatch'), variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType].HotPatch, false())]",
                      "patchMode": "[if(contains(variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType], 'patchMode'), variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType].patchMode, 'AutomaticByOS')]"
                    }
                  },
                  "linuxConfiguration": {
                    "enableAutomaticUpdates": true,
                    "provisionVmAgent": true,
                    "patchSettings": {
                      "enableHotpatching": "[if(contains(variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType], 'HotPatch'), variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType].HotPatch, false())]",
                      "patchMode": "[if(contains(variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType], 'patchMode'), variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType].patchMode, 'AutomaticByOS')]"
                    }
                  }
                }
              }
            ],
            "Deployment": "[format('{0}-{1}-{2}-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID'))]",
            "computeGlobal": "[json('{\r\n  \"DataDiskInfo\": {\r\n    \"0GB\": {},\r\n    \"32GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            32\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GBSS\": {\r\n      \"DATASS\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GB-2\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ],\r\n          [\r\n            1,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"128GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            128\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"FIL64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"SOFS\": {\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            1,\r\n            32\r\n          ],\r\n          [\r\n            2,\r\n            32\r\n          ],\r\n          [\r\n            3,\r\n            32\r\n          ]\r\n        ],\r\n        \"FileSystem\": \"ReFS\",\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"SQL64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"LOGS\": {\r\n        \"DriveLetter\": \"G\",\r\n        \"caching\": \"None\",\r\n        \"LUNS\": [\r\n          [\r\n            8,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"TEMPDB\": {\r\n        \"DriveLetter\": \"H\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            12,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"BACKUP\": {\r\n        \"DriveLetter\": \"I\",\r\n        \"caching\": \"None\",\r\n        \"LUNS\": [\r\n          [\r\n            15,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    }\r\n  },\r\n  \"computeSizeLookupOptions\": {\r\n    \"API-P\": \"Standard_D4s_v3\",\r\n    \"API-D\": \"Standard_D4s_v3\",\r\n    \"API-S\": \"Standard_D2s_v3\",\r\n    \"SF-P\": \"Standard_D4s_v3\",\r\n    \"SF-D\": \"Standard_D2s_v3\",\r\n    \"SF-S\": \"Standard_D2s_v3\",\r\n    \"CTNR-P\": \"Standard_D4s_v3\",\r\n    \"CTNR-D\": \"Standard_D2s_v3\",\r\n    \"ADp-P\": \"Standard_D2s_v3\",\r\n    \"ADp-D\": \"Standard_A2m_v2\",\r\n    \"ADs-P\": \"Standard_D2s_v3\",\r\n    \"ADs-D\": \"Standard_A2m_v2\",\r\n    \"AAP-P\": \"Standard_D2s_v3\",\r\n    \"AAP-D\": \"Standard_D2s_v3\",\r\n    \"DNS-P\": \"Standard_D2s_v3\",\r\n    \"DNS-D\": \"Standard_D2s_v3\",\r\n    \"BUS-P\": \"Standard_DS2_v2\",\r\n    \"BUS-D\": \"Standard_DS2_v2\",\r\n    \"LIN-P\": \"Standard_DS2_v2\",\r\n    \"LIN-D\": \"Standard_DS2_v2\",\r\n    \"FIL-P\": \"Standard_D4s_v3\",\r\n    \"FIL-D\": \"Standard_D4s_v3\",\r\n    \"DFS-P\": \"Standard_D4s_v3\",\r\n    \"DFS-D\": \"Standard_D4s_v3\",\r\n    \"JMP-P\": \"Standard_D4s_v3\",\r\n    \"JMP-D\": \"Standard_D4s_v3\",\r\n    \"CLT-P\": \"Standard_D4s_v3\",\r\n    \"CLT-D\": \"Standard_D4s_v3\",\r\n    \"PXY-P\": \"Standard_D4s_v3\",\r\n    \"PXY-D\": \"Standard_D2s_v3\",\r\n    \"CLS01-D\": \"Standard_D4s_v3\",\r\n    \"CLS02-D\": \"Standard_D4s_v3\",\r\n    \"CLS01-P\": \"Standard_D4s_v3\",\r\n    \"CLS02-P\": \"Standard_D4s_v3\",\r\n    \"FW-P\": \"Standard_F4\",\r\n    \"FW-D\": \"Standard_F2\"\r\n  },\r\n  \"OSType\": {\r\n    \"Server2022SSIMG\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/b8f402aa-20f7-4888-b45c-3cf086dad9c3/resourceGroups/ACU1-BRW-AOA-RG-G1/providers/Microsoft.Compute/galleries/acu1brwaoag1gallery01/images/vmss2022\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SSIMG\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/b8f402aa-20f7-4888-b45c-3cf086dad9c3/resourceGroups/ACU1-BRW-AOA-RG-G1/providers/Microsoft.Compute/galleries/acu1brwaoag1gallery01/images/vmss2019webnetcore27\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"cbld10\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/27b750cd-ed43-42fd-9044-8d75e124ae55/resourceGroups/SBID-Build-Test/providers/Microsoft.Compute/galleries/cbldtest/images/cbld10-ext\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 1,\r\n        \"IaaSDiagnostics\": 1,\r\n        \"Antimalware\": 0,\r\n        \"DependencyAgent\": 1,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Win10O365\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsDesktop\",\r\n        \"offer\": \"office-365\",\r\n        \"sku\": \"rs5-evd-o365pp\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Client\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Win10\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsDesktop\",\r\n        \"offer\": \"Windows-10\",\r\n        \"sku\": \"21h1-pro-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Client\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"SQLServer2016\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftSQLServer\",\r\n        \"Offer\": \"SQL2016SP2-WS2016\",\r\n        \"sku\": \"Enterprise\",\r\n        \"version\": \"latest\"\r\n      },\r\n      // \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016Core\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-Server-Core\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016small\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016Coresmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-Server-Core-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019-gen2\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"windowsserver-gen2preview\",\r\n        \"sku\": \"2019-Datacenter-gen2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2022\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2022-Datacenter-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"_plan\": {\r\n        \"name\": \"windows-server-2022\",\r\n        \"publisher\": \"microsoftwindowsserver\",\r\n        \"product\": \"microsoftserveroperatingsystems-previews\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2022Containerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"datacenter-core-20h2-with-containers-smalldisk-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Core\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-Core\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019small\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-datacenter-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Coresmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-Server-Core-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Containerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019CoreContainerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-datacenter-core-with-containers-smalldisk-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016SS\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-with-Containers\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SSgs\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers-gs\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SS\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"NetScaler\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"citrix\",\r\n        \"Offer\": \"netscalervpx-120\",\r\n        \"Sku\": \"netscalerbyol\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"netscalerbyol\",\r\n        \"publisher\": \"citrix\",\r\n        \"product\": \"netscalervpx-120\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"MaxLoadBalancer\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"loadbalancer\",\r\n        \"offer\": \"loadbalancer-org-load-balancer-for-azure\",\r\n        \"sku\": \"max_load_balancer\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"max_load_balancer\",\r\n        \"publisher\": \"loadbalancer\",\r\n        \"product\": \"loadbalancer-org-load-balancer-for-azure\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortigate\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet_fortigate-vm_v5\",\r\n        \"sku\": \"fortinet_fg-vm\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"fortinet_fg-vm\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet_fortigate-vm_v5\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortigatepayg\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet_fortigate-vm_v5\",\r\n        \"sku\": \"fortinet_fg-vm_payg\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"fortinet_fg-vm_payg\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet_fortigate-vm_v5\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortimngr\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet-fortimanager\",\r\n        \"sku\": \"fortinet-fortimanager\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 3,\r\n      \"plan\": {\r\n        \"name\": \"fortinet-fortimanager\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet-fortimanager\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"UbuntuServer1904\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"canonical\",\r\n        \"offer\": \"UbuntuServer\",\r\n        \"sku\": \"19.04\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"Antimalware\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 1,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0\r\n      }\r\n    },\r\n    \"Bus-debian\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"credativ\",\r\n        \"offer\": \"Debian\",\r\n        \"sku\": \"8\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 1,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"PROXY-UBUNTU\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"Canonical\",\r\n        \"offer\": \"UbuntuServer\",\r\n        \"sku\": \"16.04-LTS\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"fileUris\": \"[concat(parameters(''global'')._artifactsLocation, ''/scripts/pxy.zip\",\r\n      \"commandToExecute\": \"[concat(''sudo apt-get update && sudo apt-get install unzip && unzip Proxy.zip && sudo bash -x haproxyvm-configure.sh '', '' -a '', ''ilbIPAddress'', '' -r '', ''ilbRabbitMqPort'', '' -m '', ''ilbRabbitMqMgmtPort'', '' -b '', ''dnsName'', ''.'', ''location'', ''.cloudapp.azure.com -p '', ''vmNamePrefix'', ''0 -s '', ''vmNamePrefix'', ''1'')]\",\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"CentOS75\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"OpenLogic\",\r\n        \"Offer\": \"CentOS\",\r\n        \"sku\": \"7.5\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"Antimalware\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    }\r\n  },\r\n  \"ladCfg\": {\r\n    \"diagnosticMonitorConfiguration\": {\r\n      \"eventVolume\": \"Medium\",\r\n      \"metrics\": {\r\n        \"metricAggregation\": [\r\n          {\r\n            \"scheduledTransferPeriod\": \"PT1H\"\r\n          },\r\n          {\r\n            \"scheduledTransferPeriod\": \"PT1M\"\r\n          }\r\n        ],\r\n        \"resourceId\": \"__VM_RESOURCE_ID__\"\r\n      },\r\n      \"performanceCounters\": {\r\n        \"performanceCounterConfiguration\": [\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk read guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readbytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/readbytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk writes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/writespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk transfer time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagetransfertime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagetransfertime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk transfers\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"transferspersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/transferspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk write guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writebytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/writebytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk read time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagereadtime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagereadtime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk write time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagewritetime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagewritetime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk total bytes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/bytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk reads\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readspersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/readspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk queue length\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagediskqueuelength\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagediskqueuelength\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network in guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytesreceived\",\r\n            \"counterSpecifier\": \"/builtin/network/bytesreceived\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network total bytes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytestotal\",\r\n            \"counterSpecifier\": \"/builtin/network/bytestotal\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network out guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytestransmitted\",\r\n            \"counterSpecifier\": \"/builtin/network/bytestransmitted\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network collisions\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totalcollisions\",\r\n            \"counterSpecifier\": \"/builtin/network/totalcollisions\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets received errors\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totalrxerrors\",\r\n            \"counterSpecifier\": \"/builtin/network/totalrxerrors\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets sent\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"packetstransmitted\",\r\n            \"counterSpecifier\": \"/builtin/network/packetstransmitted\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets received\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"packetsreceived\",\r\n            \"counterSpecifier\": \"/builtin/network/packetsreceived\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets sent errors\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totaltxerrors\",\r\n            \"counterSpecifier\": \"/builtin/network/totaltxerrors\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem transfers/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"transferspersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/transferspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % free space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentfreespace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentfreespace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % used space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusedspace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentusedspace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem used space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"usedspace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/usedspace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem read bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytesreadpersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/bytesreadpersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem free space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"freespace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/freespace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % free inodes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentfreeinodes\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentfreeinodes\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/bytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem reads/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readspersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/readspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem write bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"byteswrittenpersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/byteswrittenpersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem writes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writespersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/writespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % used inodes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusedinodes\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentusedinodes\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU IO wait time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentiowaittime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentiowaittime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU user time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusertime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentusertime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU nice time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentnicetime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentnicetime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU percentage guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentprocessortime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentprocessortime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU interrupt time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentinterrupttime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentinterrupttime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU idle time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentidletime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentidletime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU privileged time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentprivilegedtime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentprivilegedtime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"availablememory\",\r\n            \"counterSpecifier\": \"/builtin/memory/availablememory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap percent used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentusedswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentusedswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"usedmemory\",\r\n            \"counterSpecifier\": \"/builtin/memory/usedmemory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Page reads\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pagesreadpersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pagesreadpersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"availableswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/availableswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap percent available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentavailableswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentavailableswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Mem. percent available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentavailablememory\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentavailablememory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Pages\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pagespersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pagespersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"usedswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/usedswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory percentage\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentusedmemory\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentusedmemory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Page writes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pageswrittenpersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pageswrittenpersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          }\r\n        ]\r\n      },\r\n      \"syslogEvents\": {\r\n        \"syslogEventConfiguration\": {\r\n          \"LOG_AUTH\": \"LOG_DEBUG\",\r\n          \"LOG_AUTHPRIV\": \"LOG_DEBUG\",\r\n          \"LOG_CRON\": \"LOG_DEBUG\",\r\n          \"LOG_DAEMON\": \"LOG_DEBUG\",\r\n          \"LOG_FTP\": \"LOG_DEBUG\",\r\n          \"LOG_KERN\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL0\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL1\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL2\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL3\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL4\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL5\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL6\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL7\": \"LOG_DEBUG\",\r\n          \"LOG_LPR\": \"LOG_DEBUG\",\r\n          \"LOG_MAIL\": \"LOG_DEBUG\",\r\n          \"LOG_NEWS\": \"LOG_DEBUG\",\r\n          \"LOG_SYSLOG\": \"LOG_DEBUG\",\r\n          \"LOG_USER\": \"LOG_DEBUG\",\r\n          \"LOG_UUCP\": \"LOG_DEBUG\"\r\n        }\r\n      }\r\n    },\r\n    \"sampleRateInSeconds\": 15\r\n  },\r\n  \"WadCfg\": {\r\n    \"DiagnosticMonitorConfiguration\": {\r\n      \"overallQuotaInMB\": 10000,\r\n      \"DiagnosticInfrastructureLogs\": {\r\n        \"scheduledTransferLogLevelFilter\": \"Error\"\r\n      },\r\n      \"PerformanceCounters\": {\r\n        \"scheduledTransferPeriod\": \"PT1M\",\r\n        \"PerformanceCounterConfiguration\": []\r\n      },\r\n      \"WindowsEventLog\": {\r\n        \"scheduledTransferPeriod\": \"PT5M\",\r\n        \"DataSource\": [\r\n          {\r\n            \"name\": \"Application!*[System[(Level = 1 or Level = 2)]]\"\r\n          },\r\n          {\r\n            \"name\": \"Security!*[System[(Level = 1 or Level = 2)]\"\r\n          },\r\n          {\r\n            \"name\": \"System!*[System[(Level = 1 or Level = 2)]]\"\r\n          },\r\n          {\r\n            \"name\": \"Microsoft-Windows-DSC/Operational!*[System[(EventID=4249 or EventID=4097)]]\"\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}')]",
            "OSType": "[variables('computeGlobal').OSType]",
            "DataDiskInfo": "[variables('computeGlobal').DataDiskInfo]",
            "DeploymentName": "[if(contains(toLower(deployment().name), 'vmapp'), 'AppServers', replace(deployment().name, format('dp{0}-', variables('Deployment')), ''))]",
            "AppServers": "[parameters('DeploymentInfo').AppServers[variables('DeploymentName')]]",
            "HubKVJ": "[json(parameters('Global').hubKV)]",
            "HubRGJ": "[json(parameters('Global').hubRG)]",
            "gh": {
              "hubKVPrefix": "[if(contains(variables('HubKVJ'), 'Prefix'), variables('HubKVJ').Prefix, parameters('Prefix'))]",
              "hubKVOrgName": "[if(contains(variables('HubKVJ'), 'OrgName'), variables('HubKVJ').OrgName, parameters('Global').OrgName)]",
              "hubKVAppName": "[if(contains(variables('HubKVJ'), 'AppName'), variables('HubKVJ').AppName, parameters('Global').AppName)]",
              "hubKVRGName": "[if(contains(variables('HubKVJ'), 'RG'), variables('HubKVJ').RG, variables('HubRGJ').name)]"
            },
            "HubKVRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').hubKVPrefix, variables('gh').hubKVOrgName, variables('gh').hubKVAppName, variables('gh').hubKVRGName)]",
            "HubKVName": "[toLower(format('{0}-{1}-{2}-{3}-kv{4}', variables('gh').hubKVPrefix, variables('gh').hubKVOrgName, variables('gh').hubKVAppName, variables('gh').hubKVRGName, variables('HubKVJ').name))]"
          },
          "resources": [
            {
              "condition": "[variables('VMs')[copyIndex()].match]",
              "copy": {
                "name": "VM",
                "count": "[length(variables('AppServers'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dp{0}-VM-Deploy-{1}', variables('Deployment'), variables('AppServers')[copyIndex()].Name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "Prefix": {
                    "value": "[parameters('Prefix')]"
                  },
                  "DeploymentID": {
                    "value": "[parameters('DeploymentID')]"
                  },
                  "Environment": {
                    "value": "[parameters('Environment')]"
                  },
                  "AppServer": {
                    "value": "[variables('AppServers')[copyIndex()]]"
                  },
                  "VM": {
                    "value": "[variables('VMs')[copyIndex()]]"
                  },
                  "DeploymentName": {
                    "value": "[variables('DeploymentName')]"
                  },
                  "Global": {
                    "value": "[parameters('Global')]"
                  },
                  "vmAdminPassword": {
                    "reference": {
                      "keyVault": {
                        "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults', variables('HubKVName'))]"
                      },
                      "secretName": "localadmin"
                    }
                  },
                  "devOpsPat": {
                    "reference": {
                      "keyVault": {
                        "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults', variables('HubKVName'))]"
                      },
                      "secretName": "devOpsPat"
                    }
                  },
                  "sshPublic": {
                    "reference": {
                      "keyVault": {
                        "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults', variables('HubKVName'))]"
                      },
                      "secretName": "sshPublic"
                    }
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1318.3566",
                      "templateHash": "10183346640093717410"
                    }
                  },
                  "parameters": {
                    "Prefix": {
                      "type": "string"
                    },
                    "DeploymentID": {
                      "type": "string"
                    },
                    "Environment": {
                      "type": "string"
                    },
                    "VM": {
                      "type": "object"
                    },
                    "AppServer": {
                      "type": "object"
                    },
                    "Global": {
                      "type": "object"
                    },
                    "DeploymentName": {
                      "type": "string"
                    },
                    "vmAdminPassword": {
                      "type": "secureString"
                    },
                    "devOpsPat": {
                      "type": "secureString"
                    },
                    "sshPublic": {
                      "type": "secureString"
                    },
                    "saKey": {
                      "type": "secureString",
                      "defaultValue": "[newGuid()]"
                    },
                    "deploymentTime": {
                      "type": "string",
                      "defaultValue": "[utcNow()]"
                    }
                  },
                  "variables": {
                    "Deployment": "[format('{0}-{1}-{2}-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID'))]",
                    "DeploymentURI": "[toLower(format('{0}{1}{2}{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID')))]",
                    "computeGlobal": "[json('{\r\n  \"DataDiskInfo\": {\r\n    \"0GB\": {},\r\n    \"32GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            32\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GBSS\": {\r\n      \"DATASS\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GB-2\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ],\r\n          [\r\n            1,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"128GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            128\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"FIL64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"SOFS\": {\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            1,\r\n            32\r\n          ],\r\n          [\r\n            2,\r\n            32\r\n          ],\r\n          [\r\n            3,\r\n            32\r\n          ]\r\n        ],\r\n        \"FileSystem\": \"ReFS\",\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"SQL64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"LOGS\": {\r\n        \"DriveLetter\": \"G\",\r\n        \"caching\": \"None\",\r\n        \"LUNS\": [\r\n          [\r\n            8,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"TEMPDB\": {\r\n        \"DriveLetter\": \"H\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            12,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"BACKUP\": {\r\n        \"DriveLetter\": \"I\",\r\n        \"caching\": \"None\",\r\n        \"LUNS\": [\r\n          [\r\n            15,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    }\r\n  },\r\n  \"computeSizeLookupOptions\": {\r\n    \"API-P\": \"Standard_D4s_v3\",\r\n    \"API-D\": \"Standard_D4s_v3\",\r\n    \"API-S\": \"Standard_D2s_v3\",\r\n    \"SF-P\": \"Standard_D4s_v3\",\r\n    \"SF-D\": \"Standard_D2s_v3\",\r\n    \"SF-S\": \"Standard_D2s_v3\",\r\n    \"CTNR-P\": \"Standard_D4s_v3\",\r\n    \"CTNR-D\": \"Standard_D2s_v3\",\r\n    \"ADp-P\": \"Standard_D2s_v3\",\r\n    \"ADp-D\": \"Standard_A2m_v2\",\r\n    \"ADs-P\": \"Standard_D2s_v3\",\r\n    \"ADs-D\": \"Standard_A2m_v2\",\r\n    \"AAP-P\": \"Standard_D2s_v3\",\r\n    \"AAP-D\": \"Standard_D2s_v3\",\r\n    \"DNS-P\": \"Standard_D2s_v3\",\r\n    \"DNS-D\": \"Standard_D2s_v3\",\r\n    \"BUS-P\": \"Standard_DS2_v2\",\r\n    \"BUS-D\": \"Standard_DS2_v2\",\r\n    \"LIN-P\": \"Standard_DS2_v2\",\r\n    \"LIN-D\": \"Standard_DS2_v2\",\r\n    \"FIL-P\": \"Standard_D4s_v3\",\r\n    \"FIL-D\": \"Standard_D4s_v3\",\r\n    \"DFS-P\": \"Standard_D4s_v3\",\r\n    \"DFS-D\": \"Standard_D4s_v3\",\r\n    \"JMP-P\": \"Standard_D4s_v3\",\r\n    \"JMP-D\": \"Standard_D4s_v3\",\r\n    \"CLT-P\": \"Standard_D4s_v3\",\r\n    \"CLT-D\": \"Standard_D4s_v3\",\r\n    \"PXY-P\": \"Standard_D4s_v3\",\r\n    \"PXY-D\": \"Standard_D2s_v3\",\r\n    \"CLS01-D\": \"Standard_D4s_v3\",\r\n    \"CLS02-D\": \"Standard_D4s_v3\",\r\n    \"CLS01-P\": \"Standard_D4s_v3\",\r\n    \"CLS02-P\": \"Standard_D4s_v3\",\r\n    \"FW-P\": \"Standard_F4\",\r\n    \"FW-D\": \"Standard_F2\"\r\n  },\r\n  \"OSType\": {\r\n    \"Server2022SSIMG\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/b8f402aa-20f7-4888-b45c-3cf086dad9c3/resourceGroups/ACU1-BRW-AOA-RG-G1/providers/Microsoft.Compute/galleries/acu1brwaoag1gallery01/images/vmss2022\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SSIMG\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/b8f402aa-20f7-4888-b45c-3cf086dad9c3/resourceGroups/ACU1-BRW-AOA-RG-G1/providers/Microsoft.Compute/galleries/acu1brwaoag1gallery01/images/vmss2019webnetcore27\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"cbld10\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/27b750cd-ed43-42fd-9044-8d75e124ae55/resourceGroups/SBID-Build-Test/providers/Microsoft.Compute/galleries/cbldtest/images/cbld10-ext\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 1,\r\n        \"IaaSDiagnostics\": 1,\r\n        \"Antimalware\": 0,\r\n        \"DependencyAgent\": 1,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Win10O365\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsDesktop\",\r\n        \"offer\": \"office-365\",\r\n        \"sku\": \"rs5-evd-o365pp\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Client\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Win10\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsDesktop\",\r\n        \"offer\": \"Windows-10\",\r\n        \"sku\": \"21h1-pro-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Client\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"SQLServer2016\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftSQLServer\",\r\n        \"Offer\": \"SQL2016SP2-WS2016\",\r\n        \"sku\": \"Enterprise\",\r\n        \"version\": \"latest\"\r\n      },\r\n      // \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016Core\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-Server-Core\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016small\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016Coresmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-Server-Core-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019-gen2\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"windowsserver-gen2preview\",\r\n        \"sku\": \"2019-Datacenter-gen2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2022\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2022-Datacenter-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"_plan\": {\r\n        \"name\": \"windows-server-2022\",\r\n        \"publisher\": \"microsoftwindowsserver\",\r\n        \"product\": \"microsoftserveroperatingsystems-previews\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2022Containerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"datacenter-core-20h2-with-containers-smalldisk-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Core\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-Core\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019small\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-datacenter-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Coresmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-Server-Core-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Containerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019CoreContainerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-datacenter-core-with-containers-smalldisk-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016SS\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-with-Containers\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SSgs\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers-gs\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SS\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"NetScaler\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"citrix\",\r\n        \"Offer\": \"netscalervpx-120\",\r\n        \"Sku\": \"netscalerbyol\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"netscalerbyol\",\r\n        \"publisher\": \"citrix\",\r\n        \"product\": \"netscalervpx-120\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"MaxLoadBalancer\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"loadbalancer\",\r\n        \"offer\": \"loadbalancer-org-load-balancer-for-azure\",\r\n        \"sku\": \"max_load_balancer\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"max_load_balancer\",\r\n        \"publisher\": \"loadbalancer\",\r\n        \"product\": \"loadbalancer-org-load-balancer-for-azure\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortigate\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet_fortigate-vm_v5\",\r\n        \"sku\": \"fortinet_fg-vm\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"fortinet_fg-vm\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet_fortigate-vm_v5\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortigatepayg\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet_fortigate-vm_v5\",\r\n        \"sku\": \"fortinet_fg-vm_payg\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"fortinet_fg-vm_payg\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet_fortigate-vm_v5\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortimngr\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet-fortimanager\",\r\n        \"sku\": \"fortinet-fortimanager\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 3,\r\n      \"plan\": {\r\n        \"name\": \"fortinet-fortimanager\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet-fortimanager\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"UbuntuServer1904\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"canonical\",\r\n        \"offer\": \"UbuntuServer\",\r\n        \"sku\": \"19.04\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"Antimalware\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 1,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0\r\n      }\r\n    },\r\n    \"Bus-debian\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"credativ\",\r\n        \"offer\": \"Debian\",\r\n        \"sku\": \"8\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 1,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"PROXY-UBUNTU\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"Canonical\",\r\n        \"offer\": \"UbuntuServer\",\r\n        \"sku\": \"16.04-LTS\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"fileUris\": \"[concat(parameters(''global'')._artifactsLocation, ''/scripts/pxy.zip\",\r\n      \"commandToExecute\": \"[concat(''sudo apt-get update && sudo apt-get install unzip && unzip Proxy.zip && sudo bash -x haproxyvm-configure.sh '', '' -a '', ''ilbIPAddress'', '' -r '', ''ilbRabbitMqPort'', '' -m '', ''ilbRabbitMqMgmtPort'', '' -b '', ''dnsName'', ''.'', ''location'', ''.cloudapp.azure.com -p '', ''vmNamePrefix'', ''0 -s '', ''vmNamePrefix'', ''1'')]\",\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"CentOS75\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"OpenLogic\",\r\n        \"Offer\": \"CentOS\",\r\n        \"sku\": \"7.5\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"Antimalware\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    }\r\n  },\r\n  \"ladCfg\": {\r\n    \"diagnosticMonitorConfiguration\": {\r\n      \"eventVolume\": \"Medium\",\r\n      \"metrics\": {\r\n        \"metricAggregation\": [\r\n          {\r\n            \"scheduledTransferPeriod\": \"PT1H\"\r\n          },\r\n          {\r\n            \"scheduledTransferPeriod\": \"PT1M\"\r\n          }\r\n        ],\r\n        \"resourceId\": \"__VM_RESOURCE_ID__\"\r\n      },\r\n      \"performanceCounters\": {\r\n        \"performanceCounterConfiguration\": [\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk read guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readbytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/readbytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk writes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/writespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk transfer time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagetransfertime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagetransfertime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk transfers\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"transferspersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/transferspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk write guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writebytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/writebytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk read time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagereadtime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagereadtime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk write time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagewritetime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagewritetime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk total bytes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/bytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk reads\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readspersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/readspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk queue length\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagediskqueuelength\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagediskqueuelength\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network in guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytesreceived\",\r\n            \"counterSpecifier\": \"/builtin/network/bytesreceived\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network total bytes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytestotal\",\r\n            \"counterSpecifier\": \"/builtin/network/bytestotal\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network out guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytestransmitted\",\r\n            \"counterSpecifier\": \"/builtin/network/bytestransmitted\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network collisions\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totalcollisions\",\r\n            \"counterSpecifier\": \"/builtin/network/totalcollisions\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets received errors\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totalrxerrors\",\r\n            \"counterSpecifier\": \"/builtin/network/totalrxerrors\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets sent\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"packetstransmitted\",\r\n            \"counterSpecifier\": \"/builtin/network/packetstransmitted\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets received\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"packetsreceived\",\r\n            \"counterSpecifier\": \"/builtin/network/packetsreceived\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets sent errors\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totaltxerrors\",\r\n            \"counterSpecifier\": \"/builtin/network/totaltxerrors\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem transfers/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"transferspersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/transferspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % free space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentfreespace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentfreespace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % used space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusedspace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentusedspace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem used space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"usedspace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/usedspace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem read bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytesreadpersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/bytesreadpersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem free space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"freespace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/freespace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % free inodes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentfreeinodes\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentfreeinodes\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/bytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem reads/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readspersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/readspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem write bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"byteswrittenpersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/byteswrittenpersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem writes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writespersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/writespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % used inodes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusedinodes\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentusedinodes\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU IO wait time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentiowaittime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentiowaittime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU user time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusertime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentusertime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU nice time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentnicetime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentnicetime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU percentage guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentprocessortime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentprocessortime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU interrupt time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentinterrupttime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentinterrupttime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU idle time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentidletime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentidletime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU privileged time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentprivilegedtime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentprivilegedtime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"availablememory\",\r\n            \"counterSpecifier\": \"/builtin/memory/availablememory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap percent used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentusedswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentusedswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"usedmemory\",\r\n            \"counterSpecifier\": \"/builtin/memory/usedmemory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Page reads\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pagesreadpersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pagesreadpersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"availableswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/availableswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap percent available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentavailableswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentavailableswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Mem. percent available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentavailablememory\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentavailablememory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Pages\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pagespersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pagespersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"usedswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/usedswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory percentage\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentusedmemory\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentusedmemory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Page writes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pageswrittenpersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pageswrittenpersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          }\r\n        ]\r\n      },\r\n      \"syslogEvents\": {\r\n        \"syslogEventConfiguration\": {\r\n          \"LOG_AUTH\": \"LOG_DEBUG\",\r\n          \"LOG_AUTHPRIV\": \"LOG_DEBUG\",\r\n          \"LOG_CRON\": \"LOG_DEBUG\",\r\n          \"LOG_DAEMON\": \"LOG_DEBUG\",\r\n          \"LOG_FTP\": \"LOG_DEBUG\",\r\n          \"LOG_KERN\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL0\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL1\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL2\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL3\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL4\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL5\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL6\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL7\": \"LOG_DEBUG\",\r\n          \"LOG_LPR\": \"LOG_DEBUG\",\r\n          \"LOG_MAIL\": \"LOG_DEBUG\",\r\n          \"LOG_NEWS\": \"LOG_DEBUG\",\r\n          \"LOG_SYSLOG\": \"LOG_DEBUG\",\r\n          \"LOG_USER\": \"LOG_DEBUG\",\r\n          \"LOG_UUCP\": \"LOG_DEBUG\"\r\n        }\r\n      }\r\n    },\r\n    \"sampleRateInSeconds\": 15\r\n  },\r\n  \"WadCfg\": {\r\n    \"DiagnosticMonitorConfiguration\": {\r\n      \"overallQuotaInMB\": 10000,\r\n      \"DiagnosticInfrastructureLogs\": {\r\n        \"scheduledTransferLogLevelFilter\": \"Error\"\r\n      },\r\n      \"PerformanceCounters\": {\r\n        \"scheduledTransferPeriod\": \"PT1M\",\r\n        \"PerformanceCounterConfiguration\": []\r\n      },\r\n      \"WindowsEventLog\": {\r\n        \"scheduledTransferPeriod\": \"PT5M\",\r\n        \"DataSource\": [\r\n          {\r\n            \"name\": \"Application!*[System[(Level = 1 or Level = 2)]]\"\r\n          },\r\n          {\r\n            \"name\": \"Security!*[System[(Level = 1 or Level = 2)]\"\r\n          },\r\n          {\r\n            \"name\": \"System!*[System[(Level = 1 or Level = 2)]]\"\r\n          },\r\n          {\r\n            \"name\": \"Microsoft-Windows-DSC/Operational!*[System[(EventID=4249 or EventID=4097)]]\"\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}')]",
                    "OSType": "[variables('computeGlobal').OSType]",
                    "WadCfg": "[variables('computeGlobal').WadCfg]",
                    "ladCfg": "[variables('computeGlobal').ladCfg]",
                    "DataDiskInfo": "[variables('computeGlobal').DataDiskInfo]",
                    "computeSizeLookupOptions": "[variables('computeGlobal').computeSizeLookupOptions]",
                    "RGName": "[format('{0}-{1}-{2}-RG-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').AppName, parameters('Environment'), parameters('DeploymentID'))]",
                    "GlobalRGJ": "[json(parameters('Global').GlobalRG)]",
                    "GlobalSAJ": "[json(parameters('Global').GlobalSA)]",
                    "HubKVJ": "[json(parameters('Global').hubKV)]",
                    "HubRGJ": "[json(parameters('Global').hubRG)]",
                    "HubAAJ": "[json(parameters('Global').hubAA)]",
                    "regionLookup": "[json('{\r\n  \"francecentral\": {\r\n    \"displayname\": \"France Central\",\r\n    \"location\": \"francecentral\",\r\n    \"PREFIX\": \"AFC1\",\r\n    \"pairedRegion\": \"francesouth\"\r\n  },\r\n  \"southeastasia\": {\r\n    \"displayname\": \"Southeast Asia\",\r\n    \"location\": \"southeastasia\",\r\n    \"PREFIX\": \"ASA1\",\r\n    \"pairedRegion\": \"eastasia\"\r\n  },\r\n  \"southafricawest\": {\r\n    \"displayname\": \"South Africa West\",\r\n    \"location\": \"southafricawest\",\r\n    \"PREFIX\": \"ASAW\",\r\n    \"pairedRegion\": \"southafricanorth\"\r\n  },\r\n  \"eastus2\": {\r\n    \"displayname\": \"East US 2\",\r\n    \"location\": \"eastus2\",\r\n    \"PREFIX\": \"AEU2\",\r\n    \"pairedRegion\": \"centralus\"\r\n  },\r\n  \"eastus\": {\r\n    \"displayname\": \"East US\",\r\n    \"location\": \"eastus\",\r\n    \"PREFIX\": \"AEU1\",\r\n    \"pairedRegion\": \"westus\"\r\n  },\r\n  \"jioindiawest\": {\r\n    \"displayname\": \"Jio India West\",\r\n    \"location\": \"jioindiawest\",\r\n    \"PREFIX\": \"AJIW\",\r\n    \"pairedRegion\": \"jioindiacentral\"\r\n  },\r\n  \"westcentralus\": {\r\n    \"displayname\": \"West Central US\",\r\n    \"location\": \"westcentralus\",\r\n    \"PREFIX\": \"AWCU\",\r\n    \"pairedRegion\": \"westus2\"\r\n  },\r\n  \"koreacentral\": {\r\n    \"displayname\": \"Korea Central\",\r\n    \"location\": \"koreacentral\",\r\n    \"PREFIX\": \"AKC1\",\r\n    \"pairedRegion\": \"koreasouth\"\r\n  },\r\n  \"uaecentral\": {\r\n    \"displayname\": \"UAE Central\",\r\n    \"location\": \"uaecentral\",\r\n    \"PREFIX\": \"AUC1\",\r\n    \"pairedRegion\": \"uaenorth\"\r\n  },\r\n  \"westus\": {\r\n    \"displayname\": \"West US\",\r\n    \"location\": \"westus\",\r\n    \"PREFIX\": \"AWU1\",\r\n    \"pairedRegion\": \"eastus\"\r\n  },\r\n  \"southafricanorth\": {\r\n    \"displayname\": \"South Africa North\",\r\n    \"location\": \"southafricanorth\",\r\n    \"PREFIX\": \"ASAN\",\r\n    \"pairedRegion\": \"southafricawest\"\r\n  },\r\n  \"australiacentral2\": {\r\n    \"displayname\": \"Australia Central 2\",\r\n    \"location\": \"australiacentral2\",\r\n    \"PREFIX\": \"AAC2\",\r\n    \"pairedRegion\": \"australiacentral2\"\r\n  },\r\n  \"francesouth\": {\r\n    \"displayname\": \"France South\",\r\n    \"location\": \"francesouth\",\r\n    \"PREFIX\": \"AFS1\",\r\n    \"pairedRegion\": \"francecentral\"\r\n  },\r\n  \"ukwest\": {\r\n    \"displayname\": \"UK West\",\r\n    \"location\": \"ukwest\",\r\n    \"PREFIX\": \"AUW1\",\r\n    \"pairedRegion\": \"uksouth\"\r\n  },\r\n  \"southindia\": {\r\n    \"displayname\": \"South India\",\r\n    \"location\": \"southindia\",\r\n    \"PREFIX\": \"ASI1\",\r\n    \"pairedRegion\": \"centralindia\"\r\n  },\r\n  \"centralus\": {\r\n    \"displayname\": \"Central US\",\r\n    \"location\": \"centralus\",\r\n    \"PREFIX\": \"ACU1\",\r\n    \"pairedRegion\": \"eastus2\"\r\n  },\r\n  \"germanynorth\": {\r\n    \"displayname\": \"Germany North\",\r\n    \"location\": \"germanynorth\",\r\n    \"PREFIX\": \"AGN1\",\r\n    \"pairedRegion\": \"germanywestcentral\"\r\n  },\r\n  \"koreasouth\": {\r\n    \"displayname\": \"Korea South\",\r\n    \"location\": \"koreasouth\",\r\n    \"PREFIX\": \"AKS1\",\r\n    \"pairedRegion\": \"koreacentral\"\r\n  },\r\n  \"westindia\": {\r\n    \"displayname\": \"West India\",\r\n    \"location\": \"westindia\",\r\n    \"PREFIX\": \"AWI1\",\r\n    \"pairedRegion\": \"southindia\"\r\n  },\r\n  \"westus2\": {\r\n    \"displayname\": \"West US 2\",\r\n    \"location\": \"westus2\",\r\n    \"PREFIX\": \"AWU2\",\r\n    \"pairedRegion\": \"westcentralus\"\r\n  },\r\n  \"northcentralus\": {\r\n    \"displayname\": \"North Central US\",\r\n    \"location\": \"northcentralus\",\r\n    \"PREFIX\": \"ANCU\",\r\n    \"pairedRegion\": \"southcentralus\"\r\n  },\r\n  \"westeurope\": {\r\n    \"displayname\": \"West Europe\",\r\n    \"location\": \"westeurope\",\r\n    \"PREFIX\": \"AWEU\",\r\n    \"pairedRegion\": \"northeurope\"\r\n  },\r\n  \"canadacentral\": {\r\n    \"displayname\": \"Canada Central\",\r\n    \"location\": \"canadacentral\",\r\n    \"PREFIX\": \"ACC1\",\r\n    \"pairedRegion\": \"canadaeast\"\r\n  },\r\n  \"southcentralus\": {\r\n    \"displayname\": \"South Central US\",\r\n    \"location\": \"southcentralus\",\r\n    \"PREFIX\": \"ASCU\",\r\n    \"pairedRegion\": \"northcentralus\"\r\n  },\r\n  \"norwayeast\": {\r\n    \"displayname\": \"Norway East\",\r\n    \"location\": \"norwayeast\",\r\n    \"PREFIX\": \"ANE1\",\r\n    \"pairedRegion\": \"norwaywest\"\r\n  },\r\n  \"japanwest\": {\r\n    \"displayname\": \"Japan West\",\r\n    \"location\": \"japanwest\",\r\n    \"PREFIX\": \"AJW1\",\r\n    \"pairedRegion\": \"japaneast\"\r\n  },\r\n  \"norwaywest\": {\r\n    \"displayname\": \"Norway West\",\r\n    \"location\": \"norwaywest\",\r\n    \"PREFIX\": \"ANW1\",\r\n    \"pairedRegion\": \"norwayeast\"\r\n  },\r\n  \"jioindiacentral\": {\r\n    \"displayname\": \"Jio India Central\",\r\n    \"location\": \"jioindiacentral\",\r\n    \"PREFIX\": \"AJIC\",\r\n    \"pairedRegion\": \"jioindiawest\"\r\n  },\r\n  \"centralindia\": {\r\n    \"displayname\": \"Central India\",\r\n    \"location\": \"centralindia\",\r\n    \"PREFIX\": \"ACI1\",\r\n    \"pairedRegion\": \"southindia\"\r\n  },\r\n  \"westus3\": {\r\n    \"displayname\": \"West US 3\",\r\n    \"location\": \"westus3\",\r\n    \"PREFIX\": \"AWU3\",\r\n    \"pairedRegion\": \"eastus\"\r\n  },\r\n  \"brazilsouth\": {\r\n    \"displayname\": \"Brazil South\",\r\n    \"location\": \"brazilsouth\",\r\n    \"PREFIX\": \"ABS1\",\r\n    \"pairedRegion\": \"southcentralus\"\r\n  },\r\n  \"eastasia\": {\r\n    \"displayname\": \"East Asia\",\r\n    \"location\": \"eastasia\",\r\n    \"PREFIX\": \"AEA1\",\r\n    \"pairedRegion\": \"southeastasia\"\r\n  },\r\n  \"swedencentral\": {\r\n    \"displayname\": \"Sweden Central\",\r\n    \"location\": \"swedencentral\",\r\n    \"PREFIX\": \"ASC1\",\r\n    \"pairedRegion\": \"swedensouth\"\r\n  },\r\n  \"uksouth\": {\r\n    \"displayname\": \"UK South\",\r\n    \"location\": \"uksouth\",\r\n    \"PREFIX\": \"AUS1\",\r\n    \"pairedRegion\": \"ukwest\"\r\n  },\r\n  \"switzerlandnorth\": {\r\n    \"displayname\": \"Switzerland North\",\r\n    \"location\": \"switzerlandnorth\",\r\n    \"PREFIX\": \"ASN1\",\r\n    \"pairedRegion\": \"switzerlandwest\"\r\n  },\r\n  \"canadaeast\": {\r\n    \"displayname\": \"Canada East\",\r\n    \"location\": \"canadaeast\",\r\n    \"PREFIX\": \"ACE1\",\r\n    \"pairedRegion\": \"canadacentral\"\r\n  },\r\n  \"australiasoutheast\": {\r\n    \"displayname\": \"Australia Southeast\",\r\n    \"location\": \"australiasoutheast\",\r\n    \"PREFIX\": \"AAS1\",\r\n    \"pairedRegion\": \"australiaeast\"\r\n  },\r\n  \"northeurope\": {\r\n    \"displayname\": \"North Europe\",\r\n    \"location\": \"northeurope\",\r\n    \"PREFIX\": \"ANEU\",\r\n    \"pairedRegion\": \"westeurope\"\r\n  },\r\n  \"germanywestcentral\": {\r\n    \"displayname\": \"Germany West Central\",\r\n    \"location\": \"germanywestcentral\",\r\n    \"PREFIX\": \"AGWC\",\r\n    \"pairedRegion\": \"germanynorth\"\r\n  },\r\n  \"japaneast\": {\r\n    \"displayname\": \"Japan East\",\r\n    \"location\": \"japaneast\",\r\n    \"PREFIX\": \"AJE1\",\r\n    \"pairedRegion\": \"japanwest\"\r\n  },\r\n  \"uaenorth\": {\r\n    \"displayname\": \"UAE North\",\r\n    \"location\": \"uaenorth\",\r\n    \"PREFIX\": \"AUN1\",\r\n    \"pairedRegion\": \"uaecentral\"\r\n  },\r\n  \"australiaeast\": {\r\n    \"displayname\": \"Australia East\",\r\n    \"location\": \"australiaeast\",\r\n    \"PREFIX\": \"AAE1\",\r\n    \"pairedRegion\": \"australiasoutheast\"\r\n  },\r\n  \"switzerlandwest\": {\r\n    \"displayname\": \"Switzerland West\",\r\n    \"location\": \"switzerlandwest\",\r\n    \"PREFIX\": \"ASW1\",\r\n    \"pairedRegion\": \"switzerlandnorth\"\r\n  },\r\n  \"australiacentral\": {\r\n    \"displayname\": \"Australia Central\",\r\n    \"location\": \"australiacentral\",\r\n    \"PREFIX\": \"AAC1\",\r\n    \"pairedRegion\": \"australiacentral\"\r\n  },\r\n  \"brazilsoutheast\": {\r\n    \"displayname\": \"Brazil Southeast\",\r\n    \"location\": \"brazilsoutheast\",\r\n    \"PREFIX\": \"ABSE\",\r\n    \"pairedRegion\": \"brazilsouth\"\r\n  }\r\n}\r\n')]",
                    "primaryPrefix": "[variables('regionLookup')[parameters('Global').PrimaryLocation].prefix]",
                    "gh": {
                      "globalRGPrefix": "[if(contains(variables('GlobalRGJ'), 'Prefix'), variables('GlobalRGJ').Prefix, variables('primaryPrefix'))]",
                      "globalRGOrgName": "[if(contains(variables('GlobalRGJ'), 'OrgName'), variables('GlobalRGJ').OrgName, parameters('Global').OrgName)]",
                      "globalRGAppName": "[if(contains(variables('GlobalRGJ'), 'AppName'), variables('GlobalRGJ').AppName, parameters('Global').AppName)]",
                      "globalRGName": "[if(contains(variables('GlobalRGJ'), 'name'), variables('GlobalRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID')))]",
                      "globalSAPrefix": "[if(contains(variables('GlobalSAJ'), 'Prefix'), variables('GlobalSAJ').Prefix, variables('primaryPrefix'))]",
                      "globalSAOrgName": "[if(contains(variables('GlobalSAJ'), 'OrgName'), variables('GlobalSAJ').OrgName, parameters('Global').OrgName)]",
                      "globalSAAppName": "[if(contains(variables('GlobalSAJ'), 'AppName'), variables('GlobalSAJ').AppName, parameters('Global').AppName)]",
                      "globalSARGName": "[if(contains(variables('GlobalSAJ'), 'RG'), variables('GlobalSAJ').RG, if(contains(variables('GlobalRGJ'), 'name'), variables('GlobalRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID'))))]",
                      "hubRGPrefix": "[if(contains(variables('HubRGJ'), 'Prefix'), variables('HubRGJ').Prefix, parameters('Prefix'))]",
                      "hubRGOrgName": "[if(contains(variables('HubRGJ'), 'OrgName'), variables('HubRGJ').OrgName, parameters('Global').OrgName)]",
                      "hubRGAppName": "[if(contains(variables('HubRGJ'), 'AppName'), variables('HubRGJ').AppName, parameters('Global').AppName)]",
                      "hubRGRGName": "[if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID'))))]",
                      "hubKVPrefix": "[if(contains(variables('HubKVJ'), 'Prefix'), variables('HubKVJ').Prefix, parameters('Prefix'))]",
                      "hubKVOrgName": "[if(contains(variables('HubKVJ'), 'OrgName'), variables('HubKVJ').OrgName, parameters('Global').OrgName)]",
                      "hubKVAppName": "[if(contains(variables('HubKVJ'), 'AppName'), variables('HubKVJ').AppName, parameters('Global').AppName)]",
                      "hubKVRGName": "[if(contains(variables('HubKVJ'), 'RG'), variables('HubKVJ').RG, variables('HubRGJ').name)]",
                      "hubAAPrefix": "[if(contains(variables('HubAAJ'), 'Prefix'), variables('HubAAJ').Prefix, parameters('Prefix'))]",
                      "hubAAOrgName": "[if(contains(variables('HubAAJ'), 'OrgName'), variables('HubAAJ').OrgName, parameters('Global').OrgName)]",
                      "hubAAAppName": "[if(contains(variables('HubAAJ'), 'AppName'), variables('HubAAJ').AppName, parameters('Global').AppName)]",
                      "hubAARGName": "[if(contains(variables('HubAAJ'), 'RG'), variables('HubAAJ').RG, variables('HubRGJ').name)]"
                    },
                    "globalRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').globalRGPrefix, variables('gh').globalRGOrgName, variables('gh').globalRGAppName, variables('gh').globalRGName)]",
                    "HubRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').hubRGPrefix, variables('gh').hubRGOrgName, variables('gh').hubRGAppName, variables('gh').hubRGRGName)]",
                    "globalSAName": "[toLower(format('{0}{1}{2}{3}sa{4}', variables('gh').globalSAPrefix, variables('gh').globalSAOrgName, variables('gh').globalSAAppName, variables('gh').globalSARGName, variables('GlobalRGJ').name))]",
                    "HubKVRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').hubKVPrefix, variables('gh').hubKVOrgName, variables('gh').hubKVAppName, variables('gh').hubKVRGName)]",
                    "HubKVName": "[toLower(format('{0}-{1}-{2}-{3}-kv{4}', variables('gh').hubKVPrefix, variables('gh').hubKVOrgName, variables('gh').hubKVAppName, variables('gh').hubKVRGName, variables('HubKVJ').name))]",
                    "AAName": "[toLower(format('{0}{1}{2}{3}{4}', variables('gh').hubAAPrefix, variables('gh').hubAAOrgName, variables('gh').hubAAAppName, variables('gh').hubAARGName, variables('HubAAJ').name))]",
                    "EnvironmentLookup": {
                      "D": "Dev",
                      "T": "Test",
                      "I": "Int",
                      "U": "UAT",
                      "P": "PROD",
                      "S": "SBX"
                    },
                    "DSCConfigLookup": {
                      "AppServers": "AppServers",
                      "InitialDOP": "AppServers",
                      "WVDServers": "AppServers"
                    },
                    "AppServerSizeLookup": {
                      "D": "D",
                      "T": "D",
                      "I": "D",
                      "U": "D",
                      "P": "P",
                      "S": "D"
                    },
                    "RebootNodeLookup": {
                      "D": true,
                      "Q": true,
                      "T": true,
                      "U": true,
                      "P": false
                    },
                    "ConfigurationMode": {
                      "D": "ApplyAndAutoCorrect",
                      "Q": "ApplyAndAutoCorrect",
                      "T": "ApplyAndAutoCorrect",
                      "U": "ApplyAndAutoCorrect",
                      "P": "ApplyAndMonitor"
                    },
                    "DSCConfigurationModeFrequencyMins": 15,
                    "networkId": "[format('{0}{1}', parameters('Global').networkid[0], string(sub(parameters('Global').networkid[1], mul(2, int(parameters('DeploymentID'))))))]",
                    "storageAccountType": "[if(equals(parameters('Environment'), 'P'), if(contains(parameters('AppServer'), 'Zone'), 'Premium_LRS', 'Premium_ZRS'), if(contains(parameters('AppServer'), 'Zone'), 'StandardSSD_ZRS', 'StandardSSD_LRS'))]",
                    "SADiagName": "[format('{0}sadiag', variables('DeploymentURI'))]",
                    "saaccountiddiag": "[resourceId('Microsoft.Storage/storageAccounts/', variables('SADiagName'))]",
                    "saSQLBackupName": "[format('{0}sasqlbackup', variables('DeploymentURI'))]",
                    "MSILookup": {
                      "SQL": "Cluster",
                      "UTL": "DefaultKeyVault",
                      "FIL": "Cluster",
                      "OCR": "Storage",
                      "WVD": "WVD"
                    },
                    "userAssignedIdentities": {
                      "Cluster": {
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiKeyVaultSecretsGet', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperator', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperatorGlobal', variables('Deployment'))))]": {}
                      },
                      "Default": {
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiKeyVaultSecretsGet', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperatorGlobal', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperator', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountFileContributor', variables('Deployment'))))]": {}
                      },
                      "DefaultKeyVault": {
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperatorGlobal', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiKeyVaultSecretsGetApp', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiAzureServiceBusDataOwner', variables('Deployment'))))]": {}
                      },
                      "WVD": {
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperatorGlobal', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountFileContributor', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiWVDRegKeyReader', variables('Deployment'))))]": {}
                      },
                      "Storage": {
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountContributor', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperatorGlobal', variables('Deployment'))))]": {}
                      },
                      "None": {}
                    },
                    "ASNAME": "[if(contains(parameters('AppServer'), 'Zone'), 'usingZones', parameters('AppServer').ASNAME)]"
                  },
                  "resources": [
                    {
                      "condition": "[not(equals(variables('ASNAME'), 'usingZones'))]",
                      "type": "Microsoft.Compute/availabilitySets",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}-as{1}', variables('Deployment'), variables('ASNAME'))]",
                      "location": "[resourceGroup().location]",
                      "sku": {
                        "name": "Aligned"
                      },
                      "properties": {
                        "platformUpdateDomainCount": 5,
                        "platformFaultDomainCount": 3
                      }
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines",
                      "apiVersion": "2021-04-01",
                      "name": "[format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "location": "[resourceGroup().location]",
                      "identity": {
                        "type": "SystemAssigned, UserAssigned",
                        "userAssignedIdentities": "[if(contains(variables('MSILookup'), parameters('AppServer').ROLE), variables('userAssignedIdentities')[variables('MSILookup')[parameters('AppServer').ROLE]], variables('userAssignedIdentities').Default)]"
                      },
                      "tags": {
                        "Environment": "[variables('EnvironmentLookup')[parameters('Environment')]]",
                        "Zone": "[if(contains(parameters('AppServer'), 'Zone'), parameters('AppServer').Zone, 1)]"
                      },
                      "zones": "[if(contains(parameters('AppServer'), 'Zone'), array(parameters('AppServer').Zone), null())]",
                      "plan": "[if(contains(variables('OSType')[parameters('AppServer').OSType], 'plan'), variables('OSType')[parameters('AppServer').OSType].plan, null())]",
                      "properties": {
                        "licenseType": "[if(contains(variables('OSType')[parameters('AppServer').OSType], 'licenseType'), variables('OSType')[parameters('AppServer').OSType].licenseType, null())]",
                        "availabilitySet": "[if(contains(parameters('AppServer'), 'Zone'), null(), createObject('id', format('{0}', resourceId('Microsoft.Compute/availabilitySets', format('{0}-as{1}', variables('Deployment'), parameters('AppServer').ASName)))))]",
                        "hardwareProfile": {
                          "vmSize": "[variables('computeSizeLookupOptions')[format('{0}-{1}', parameters('AppServer').ROLE, variables('AppServerSizeLookup')[parameters('Environment')])]]"
                        },
                        "osProfile": {
                          "computerName": "[parameters('VM').vmHostName]",
                          "adminUsername": "[if(contains(parameters('AppServer'), 'AdminUser'), parameters('AppServer').AdminUser, parameters('Global').vmAdminUserName)]",
                          "adminPassword": "[parameters('vmAdminPassword')]",
                          "customData": "[if(contains(parameters('AppServer'), 'customData'), base64(replace(parameters('AppServer').customData, '{0}', format('{0}.', variables('networkId')))), null())]",
                          "secrets": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), createArray(createObject('sourceVault', createObject('id', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults', variables('HubKVName'))), 'vaultCertificates', createArray(createObject('certificateUrl', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults/secrets', variables('HubKVName'), parameters('Global').CertName), '2021-06-01-preview').secretUriWithVersion, 'certificateStore', 'My'), createObject('certificateUrl', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults/secrets', variables('HubKVName'), parameters('Global').CertName), '2021-06-01-preview').secretUriWithVersion, 'certificateStore', 'Root'), createObject('certificateUrl', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults/secrets', variables('HubKVName'), parameters('Global').CertName), '2021-06-01-preview').secretUriWithVersion, 'certificateStore', 'CA')))), null())]",
                          "windowsConfiguration": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), parameters('VM').windowsConfiguration, null())]",
                          "linuxConfiguration": "[if(not(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows')), parameters('VM').linuxConfiguration, null())]"
                        },
                        "storageProfile": {
                          "imageReference": "[variables('OSType')[parameters('AppServer').OSType].imageReference]",
                          "osDisk": {
                            "name": "[format('{0}-{1}-OSDisk', variables('Deployment'), parameters('AppServer').Name)]",
                            "caching": "ReadWrite",
                            "diskSizeGB": "[variables('OSType')[parameters('AppServer').OSType].OSDiskGB]",
                            "createOption": "FromImage",
                            "managedDisk": {
                              "storageAccountType": "[if(contains(parameters('AppServer'), 'OSstorageAccountType'), parameters('AppServer').OSstorageAccountType, variables('storageAccountType'))]"
                            }
                          },
                          "dataDisks": "[reference(resourceId('Microsoft.Resources/deployments', format('dp{0}-AppServer-diskLookup{1}', variables('Deployment'), parameters('AppServer').Name))).outputs.DATADisks.value]"
                        },
                        "networkProfile": {
                          "copy": [
                            {
                              "name": "networkInterfaces",
                              "count": "[length(parameters('AppServer').NICs)]",
                              "input": {
                                "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}{1}{2}{3}', variables('Deployment'), if(contains(parameters('AppServer').NICs[copyIndex('networkInterfaces')], 'LB'), '-niclb', if(contains(parameters('AppServer').NICs[copyIndex('networkInterfaces')], 'PLB'), '-nicplb', if(contains(parameters('AppServer').NICs[copyIndex('networkInterfaces')], 'SLB'), '-nicslb', '-nic'))), if(equals(copyIndex('networkInterfaces'), 0), '', add(copyIndex('networkInterfaces'), 1)), parameters('AppServer').Name))]",
                                "properties": {
                                  "primary": "[contains(parameters('AppServer').NICs[copyIndex('networkInterfaces')], 'Primary')]",
                                  "deleteOption": "Delete"
                                }
                              }
                            }
                          ]
                        },
                        "diagnosticsProfile": {
                          "bootDiagnostics": {
                            "enabled": true,
                            "storageUri": "[format('https://{0}.blob.{1}', variables('SADiagName'), environment().suffixes.storage)]"
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-AppServer-nicDeployLoop{1}', variables('Deployment'), parameters('AppServer').Name))]",
                        "[resourceId('Microsoft.Compute/availabilitySets', format('{0}-as{1}', variables('Deployment'), variables('ASNAME')))]",
                        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-AppServer-diskLookup{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, contains(parameters('AppServer'), 'shutdown'))]",
                      "type": "Microsoft.DevTestLab/schedules",
                      "apiVersion": "2018-09-15",
                      "name": "[format('shutdown-computevm-{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "dailyRecurrence": {
                          "time": "[parameters('AppServer').shutdown.time]"
                        },
                        "notificationSettings": {
                          "status": "[if(and(contains(parameters('AppServer').shutdown, 'notification'), bool(parameters('AppServer').shutdown.notification)), 'Enabled', 'Disabled')]",
                          "emailRecipient": "[replace(replace(replace(string(parameters('Global').alertRecipients), '\",\"', ';'), '[\"', ''), '\"]', '')]",
                          "notificationLocale": "en",
                          "timeInMinutes": 30
                        },
                        "status": "[if(or(not(contains(parameters('AppServer').shutdown, 'enabled')), and(contains(parameters('AppServer').shutdown, 'enabled'), bool(parameters('AppServer').shutdown.enabled))), 'Enabled', 'Disabled')]",
                        "targetResourceId": "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]",
                        "taskType": "ComputeVmShutdownTask",
                        "timeZoneId": "[parameters('Global').shutdownSchedulerTimeZone]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.CertMgmt))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'KVAppServerExtensionForWindows')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.Azure.KeyVault.Edp",
                        "type": "KeyVaultForWindows",
                        "typeHandlerVersion": "0.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "secretsManagementSettings": {
                            "pollingIntervalInS": 3600,
                            "certificateStoreName": "MY",
                            "certificateStoreLocation": "LOCAL_MACHINE",
                            "observedCertificates": [
                              "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults/secrets', variables('HubKVName'), parameters('Global').CertName), '2021-06-01-preview').secretUri]"
                            ]
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(parameters('VM').match, bool(parameters('VM').Extensions.AADLogin)), and(contains(parameters('AppServer'), 'ExcludeAADLogin'), not(equals(parameters('AppServer').ExcludeAADLogin, 1))))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'AADLogin')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'Microsoft.Azure.ActiveDirectory', 'Microsoft.Azure.ActiveDirectory.LinuxSSH')]",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'AADLoginForWindows', 'AADLoginForLinux')]",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.AzureDefender))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'AzureDefenderForServers')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.Azure.AzureDefenderForServers",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'MDE.Windows', 'MDE.Linux')]",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "azureResourceId": "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]",
                          "defenderForServersWorkspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', variables('DeploymentURI')))]",
                          "forceReOnboarding": false
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.GuestConfig))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'AzureGuestConfig')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.GuestConfiguration",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'ConfigurationForWindows', 'ConfigurationForLinux')]",
                        "typeHandlerVersion": "1.2",
                        "autoUpgradeMinorVersion": true,
                        "settings": {}
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(parameters('VM').match, bool(parameters('VM').Extensions.AdminCenter)), and(contains(parameters('AppServer'), 'ExcludeAdminCenter'), not(equals(parameters('AppServer').ExcludeAdminCenter, 1))))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'AdminCenter')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "publisher": "Microsoft.AdminCenter",
                        "type": "AdminCenter",
                        "typeHandlerVersion": "0.0",
                        "settings": {
                          "port": "6516",
                          "cspFrameAncestors": [
                            "https://portal.azure.com",
                            "https://*.hosting.portal.azure.net",
                            "https://localhost:1340"
                          ],
                          "corsOrigins": [
                            "https://portal.azure.com",
                            "https://waconazure.com"
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(parameters('VM').match, bool(parameters('VM').Extensions.DomainJoin)), not(and(contains(parameters('AppServer'), 'ExcludeDomainJoin'), bool(parameters('AppServer').ExcludeDomainJoin))))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'joindomain')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.Compute",
                        "type": "JsonADDomainExtension",
                        "typeHandlerVersion": "1.3",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "Name": "[parameters('Global').ADDomainName]",
                          "OUPath": "[if(contains(parameters('AppServer'), 'OUPath'), parameters('AppServer').OUPath, '')]",
                          "User": "[format('{0}@{1}', parameters('Global').vmAdminUserName, parameters('Global').ADDomainName)]",
                          "Restart": "true",
                          "Options": 3
                        },
                        "protectedSettings": {
                          "Password": "[parameters('vmAdminPassword')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(parameters('VM').match, bool(parameters('VM').Extensions.DSC)), equals(parameters('AppServer').Role, 'PULL'))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'Microsoft.Powershell.DSC.Pull')]",
                      "location": "[resourceGroup().location]",
                      "tags": {
                        "displayName": "Powershell.DSC.Pull"
                      },
                      "properties": {
                        "publisher": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'Microsoft.Powershell', 'Microsoft.OSTCExtensions')]",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'DSC', 'DSCForLinux')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '2.77', '2.0')]",
                        "autoUpgradeMinorVersion": true,
                        "protectedSettings": {
                          "Items": {
                            "registrationKeyPrivate": "[listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubRGName')), 'Microsoft.Automation/automationAccounts', variables('AAName')), '2020-01-13-preview').keys[0].Value]"
                          }
                        },
                        "settings": {
                          "advancedOptions": {
                            "forcePullAndApply": true
                          },
                          "Properties": [
                            {
                              "Name": "RegistrationKey",
                              "Value": {
                                "UserName": "PLACEHOLDER_DONOTUSE",
                                "Password": "PrivateSettingsRef:registrationKeyPrivate"
                              },
                              "TypeName": "System.Management.Automation.PSCredential"
                            },
                            {
                              "Name": "RegistrationUrl",
                              "Value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubRGName')), 'Microsoft.Automation/automationAccounts', variables('AAName')), '2020-01-13-preview').RegistrationUrl]",
                              "TypeName": "System.String"
                            },
                            {
                              "Name": "NodeConfigurationName",
                              "Value": "[format('{0}.{1}_{2}_{3}_{4}{5}', if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], 'AppServers'), parameters('Global').OrgName, parameters('Global').Appname, parameters('AppServer').ROLE, parameters('Environment'), parameters('DeploymentID'))]",
                              "TypeName": "System.String"
                            },
                            {
                              "Name": "ConfigurationMode",
                              "Value": "[variables('ConfigurationMode')[parameters('Environment')]]",
                              "TypeName": "System.String"
                            },
                            {
                              "Name": "RebootNodeIfNeeded",
                              "Value": "[variables('RebootNodeLookup')[parameters('Environment')]]",
                              "TypeName": "System.Boolean"
                            },
                            {
                              "Name": "ConfigurationModeFrequencyMins",
                              "Value": "[variables('DSCConfigurationModeFrequencyMins')]",
                              "TypeName": "System.Int32"
                            },
                            {
                              "Name": "RefreshFrequencyMins",
                              "Value": 30,
                              "TypeName": "System.Int32"
                            },
                            {
                              "Name": "ActionAfterReboot",
                              "Value": "ContinueConfiguration",
                              "TypeName": "System.String"
                            },
                            {
                              "Name": "AllowModuleOverwrite",
                              "Value": true,
                              "TypeName": "System.Boolean"
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'joindomain')]",
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(and(parameters('VM').match, and(contains(parameters('VM').Extensions, 'DSC2'), bool(parameters('VM').Extensions.DSC2))), not(equals(parameters('AppServer').Role, 'PULL'))), or(or(equals(parameters('DeploymentName'), 'ConfigSQLAO'), equals(parameters('DeploymentName'), 'CreateADPDC')), equals(parameters('DeploymentName'), 'CreateADBDC')))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'Microsoft.Powershell.DSC2')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'Microsoft.Powershell', 'Microsoft.OSTCExtensions')]",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'DSC', 'DSCForLinux')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '2.24', '2.0')]",
                        "autoUpgradeMinorVersion": true,
                        "forceUpdateTag": "[parameters('deploymentTime')]",
                        "settings": {
                          "wmfVersion": "latest",
                          "configuration": {
                            "url": "[format('{0}/ext-DSC/DSC-{1}.zip', parameters('Global')._artifactsLocation, if(contains(parameters('AppServer'), 'DSConfig'), parameters('AppServer').DSConfig, if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], parameters('DeploymentName'))))]",
                            "script": "[format('DSC-{0}.ps1', if(contains(parameters('AppServer'), 'DSConfig'), parameters('AppServer').DSConfig, if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], parameters('DeploymentName'))))]",
                            "function": "[if(contains(parameters('AppServer'), 'DSConfig'), parameters('AppServer').DSConfig, if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], parameters('DeploymentName')))]"
                          },
                          "configurationArguments": {
                            "DomainName": "[parameters('Global').ADDomainName]"
                          }
                        },
                        "protectedSettings": {
                          "configurationArguments": {
                            "AdminCreds": {
                              "UserName": "[parameters('Global').vmAdminUserName]",
                              "Password": "[parameters('vmAdminPassword')]"
                            },
                            "SQLServiceCreds": {
                              "UserName": "sqladmin",
                              "Password": "[parameters('vmAdminPassword')]"
                            },
                            "witnessStorageKey": {
                              "UserName": "sakey",
                              "Password": "[parameters('saKey')]"
                            }
                          },
                          "configurationUrlSasToken": "[parameters('Global')._artifactsLocationSasToken]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'joindomain')]",
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(and(parameters('VM').match, bool(parameters('VM').Extensions.DSC)), not(equals(parameters('AppServer').Role, 'PULL'))), not(or(or(equals(parameters('DeploymentName'), 'ConfigSQLAO'), equals(parameters('DeploymentName'), 'CreateADPDC')), equals(parameters('DeploymentName'), 'CreateADBDC'))))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'Microsoft.Powershell.DSC')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'Microsoft.Powershell', 'Microsoft.OSTCExtensions')]",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'DSC', 'DSCForLinux')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '2.24', '2.0')]",
                        "autoUpgradeMinorVersion": true,
                        "forceUpdateTag": "[parameters('deploymentTime')]",
                        "settings": {
                          "wmfVersion": "latest",
                          "configuration": {
                            "url": "[format('{0}/ext-DSC/DSC-{1}.zip', parameters('Global')._artifactsLocation, if(contains(parameters('AppServer'), 'DSConfig'), parameters('AppServer').DSConfig, if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], parameters('DeploymentName'))))]",
                            "script": "[format('DSC-{0}.ps1', if(contains(parameters('AppServer'), 'DSConfig'), parameters('AppServer').DSConfig, if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], parameters('DeploymentName'))))]",
                            "function": "[if(contains(parameters('AppServer'), 'DSConfig'), parameters('AppServer').DSConfig, if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], parameters('DeploymentName')))]"
                          },
                          "configurationArguments": {
                            "DomainName": "[parameters('Global').ADDomainName]",
                            "Thumbprint": "[parameters('Global').CertThumbprint]",
                            "storageAccountId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('globalRGName')), 'Microsoft.Storage/storageAccounts', variables('globalSAName'))]",
                            "deployment": "[variables('Deployment')]",
                            "networkid": "[format('{0}.', variables('networkId'))]",
                            "appInfo": "[if(contains(parameters('AppServer'), 'AppInfo'), string(parameters('VM').AppInfo), '')]",
                            "DataDiskInfo": "[string(parameters('VM').DataDisk)]",
                            "clientIDLocal": "[if(equals(format('{0}{1}', parameters('Environment'), parameters('DeploymentID')), 'G0'), '', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('RGName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-uaiStorageAccountOperator', variables('Deployment'))), '2018-11-30').clientId)]",
                            "clientIDGlobal": "[if(equals(format('{0}{1}', parameters('Environment'), parameters('DeploymentID')), 'G0'), '', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('RGName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-uaiStorageAccountFileContributor', variables('Deployment'))), '2018-11-30').clientId)]"
                          },
                          "configurationData": {
                            "url": "[format('{0}/ext-CD/{1}-ConfigurationData.psd1', parameters('Global')._artifactsLocation, parameters('AppServer').Role)]"
                          }
                        },
                        "protectedSettings": {
                          "configurationArguments": {
                            "AdminCreds": {
                              "UserName": "[parameters('Global').vmAdminUserName]",
                              "Password": "[parameters('vmAdminPassword')]"
                            },
                            "sshPublic": {
                              "UserName": "ssh",
                              "Password": "[parameters('sshPublic')]"
                            },
                            "devOpsPat": {
                              "UserName": "pat",
                              "Password": "[parameters('devOpsPat')]"
                            }
                          },
                          "configurationUrlSasToken": "[parameters('Global')._artifactsLocationSasToken]",
                          "configurationDataUrlSasToken": "[parameters('Global')._artifactsLocationSasToken]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'joindomain')]",
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.IaaSDiagnostics))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2020-12-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'vmDiagnostics')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Diagnostics",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'IaaSDiagnostics', 'LinuxDiagnostic')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '1.9', '3.0')]",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "WadCfg": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), variables('WadCfg'), null())]",
                          "ladCfg": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), null(), variables('ladCfg'))]",
                          "StorageAccount": "[variables('saaccountiddiag')]",
                          "StorageType": "TableAndBlob"
                        },
                        "protectedSettings": {
                          "storageAccountName": "[variables('saaccountiddiag')]",
                          "storageAccountKey": "[listKeys(variables('saaccountiddiag'), '2016-01-01').keys[0].value]",
                          "storageAccountEndPoint": "[format('https://{0}/', environment().suffixes.storage)]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.DependencyAgent))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2020-12-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'DependencyAgent')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'DependencyAgentWindows', 'DependencyAgentLinux')]",
                        "typeHandlerVersion": "9.5",
                        "autoUpgradeMinorVersion": true
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.AzureMonitorAgent))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2020-12-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), format('{0}', if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'AzureMonitorWindowsAgent', 'AzureMonitorLinuxAgent')))]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "publisher": "Microsoft.Azure.Monitor",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'AzureMonitorWindowsAgent', 'AzureMonitorLinuxAgent')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '1.0', '1.5')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.MonitoringAgent))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2020-12-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'MonitoringAgent')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.EnterpriseCloud.Monitoring",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'MicrosoftMonitoringAgent', 'OmsAgentForLinux')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '1.0', '1.4')]",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "workspaceId": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', variables('DeploymentURI'))), '2021-06-01').customerId]"
                        },
                        "protectedSettings": {
                          "workspaceKey": "[listKeys(resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', variables('DeploymentURI'))), '2021-06-01').primarySharedKey]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.GuestHealthAgent))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2020-12-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), format('{0}', if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'GuestHealthWindowsAgent', 'GuestHealthLinuxAgent')))]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "publisher": "Microsoft.Azure.Monitor.VirtualMachines.GuestHealth",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'GuestHealthWindowsAgent', 'GuestHealthLinuxAgent')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '1.0', '1.0')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Insights/dataCollectionRuleAssociations",
                      "apiVersion": "2019-11-01-preview",
                      "scope": "[format('Microsoft.Compute/virtualMachines/{0}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]",
                      "name": "[format('{0}vmInsights', variables('DeploymentURI'))]",
                      "properties": {
                        "description": "Association of data collection rule for AppServer Insights Health.",
                        "dataCollectionRuleId": "[resourceId('Microsoft.Insights/dataCollectionRules', format('{0}vmInsights', variables('DeploymentURI')))]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.chefClient))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'chefClient')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Chef.Bootstrap.WindowsAzure",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'ChefClient', 'LinuxChefClient')]",
                        "typeHandlerVersion": "1210.12",
                        "settings": {
                          "bootstrap_options": {
                            "chef_server_url": "[parameters('Global').chef_server_url]",
                            "validation_client_name": "[parameters('Global').chef_validation_client_name]"
                          },
                          "runlist": "recipe[mycookbook::default]"
                        },
                        "protectedSettings": {
                          "validation_key": "[parameters('Global').chef_validation_key]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(parameters('VM').match, equals(parameters('AppServer').role, 'SQL')), bool(parameters('VM').Extensions.SqlIaasExtension))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'SqlIaasExtension')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "type": "SqlIaaSAgent",
                        "publisher": "Microsoft.SqlServer.Management",
                        "typeHandlerVersion": "1.2",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "AutoTelemetrySettings": {
                            "Region": "[resourceGroup().location]"
                          },
                          "KeyVaultCredentialSettings": {
                            "Enable": true,
                            "CredentialName": "[parameters('Global').sqlCredentialName]"
                          }
                        },
                        "protectedSettings": {
                          "PrivateKeyVaultCredentialSettings": {
                            "AzureKeyVaultUrl": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults', variables('HubKVName')), '2021-06-01-preview').vaultUri]",
                            "StorageUrl": "[reference(resourceId('Microsoft.Storage/storageAccounts', if(equals(parameters('AppServer').Role, 'SQL'), variables('saSQLBackupName'), variables('SADiagName'))), '2015-06-15').primaryEndpoints.blob]",
                            "StorageAccessKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', if(equals(parameters('AppServer').Role, 'SQL'), variables('saSQLBackupName'), variables('SADiagName'))), '2016-01-01').keys[0].value]",
                            "Password": "[parameters('vmAdminPassword')]"
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(parameters('VM').match, equals(parameters('AppServer').role, 'SQL')), bool(parameters('VM').Extensions.BackupWindowsWorkloadSQL))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'AzureBackupWindowsWorkload')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "locale": "en-us",
                          "AppServerType": "microsoft.compute/virtualmachines"
                        },
                        "publisher": "Microsoft.Azure.RecoveryServices.WorkloadBackup",
                        "type": "AzureBackupWindowsWorkload",
                        "typeHandlerVersion": "1.1"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.Antimalware))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'IaaSAntimalware')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Security",
                        "type": "IaaSAntimalware",
                        "typeHandlerVersion": "1.5",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "Monitoring": "ON",
                          "StorageAccountName": "[variables('SADiagName')]",
                          "AntimalwareEnabled": true,
                          "RealtimeProtectionEnabled": "true",
                          "ScheduledScanSettings": {
                            "isEnabled": "true",
                            "day": "1",
                            "time": "720",
                            "scanType": "Full"
                          },
                          "Exclusions": {
                            "Extensions": "",
                            "Paths": "",
                            "Processes": ""
                          }
                        },
                        "protectedSettings": null
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-AppServer-publicIPDeploy{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[variables('Deployment')]"
                          },
                          "DeploymentURI": {
                            "value": "[variables('DeploymentURI')]"
                          },
                          "NICs": {
                            "value": "[parameters('AppServer').NICs]"
                          },
                          "VM": {
                            "value": "[parameters('AppServer')]"
                          },
                          "PIPprefix": {
                            "value": "AppServer"
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "18109364379899578760"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "DeploymentURI": {
                              "type": "string"
                            },
                            "PIPprefix": {
                              "type": "string"
                            },
                            "NICs": {
                              "type": "array"
                            },
                            "VM": {
                              "type": "object"
                            },
                            "Global": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "condition": "[and(contains(parameters('NICs')[copyIndex()], 'PublicIP'), not(equals(parameters('NICs')[copyIndex()].PublicIP, null())))]",
                              "copy": {
                                "name": "PublicIP",
                                "count": "[length(parameters('NICs'))]"
                              },
                              "type": "Microsoft.Network/publicIPAddresses",
                              "apiVersion": "2021-02-01",
                              "name": "[format('{0}-{1}{2}-publicip{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1))]",
                              "location": "[resourceGroup().location]",
                              "sku": {
                                "name": "[if(contains(parameters('VM'), 'Zone'), 'Standard', 'Basic')]"
                              },
                              "properties": {
                                "publicIPAllocationMethod": "[parameters('NICs')[copyIndex()].PublicIP]",
                                "dnsSettings": {
                                  "domainNameLabel": "[toLower(format('{0}-{1}{2}-{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1)))]"
                                }
                              }
                            },
                            {
                              "condition": "[and(contains(parameters('NICs')[copyIndex()], 'PublicIP'), not(equals(parameters('NICs')[copyIndex()].PublicIP, null())))]",
                              "copy": {
                                "name": "PublicIPDiag",
                                "count": "[length(parameters('NICs'))]"
                              },
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2017-05-01-preview",
                              "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', format('{0}-{1}{2}-publicip{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1)))]",
                              "name": "service",
                              "properties": {
                                "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                                "logs": [
                                  {
                                    "category": "DDoSProtectionNotifications",
                                    "enabled": true
                                  }
                                ],
                                "metrics": [
                                  {
                                    "timeGrain": "PT5M",
                                    "enabled": true,
                                    "retentionPolicy": {
                                      "enabled": false,
                                      "days": 0
                                    }
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/publicIPAddresses', format('{0}-{1}{2}-publicip{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1)))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "PIPID": {
                              "type": "array",
                              "copy": {
                                "count": "[length(parameters('NICs'))]",
                                "input": "[if(and(contains(parameters('NICs')[copyIndex()], 'PublicIP'), not(equals(parameters('NICs')[copyIndex()].PublicIP, null()))), resourceId('Microsoft.Network/publicIPAddresses', format('{0}-{1}{2}-publicip{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1))), '')]"
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-AppServer-JITNSG-{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[variables('Deployment')]"
                          },
                          "VM": {
                            "value": "[parameters('AppServer')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "16183288891198554910"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "VM": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/networkSecurityGroups",
                              "apiVersion": "2021-05-01",
                              "name": "[format('{0}-vm{1}-JITNSG', parameters('Deployment'), parameters('VM').Name)]",
                              "location": "[resourceGroup().location]"
                            }
                          ]
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-AppServer-nicDeployLoop{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[variables('Deployment')]"
                          },
                          "DeploymentURI": {
                            "value": "[variables('DeploymentURI')]"
                          },
                          "DeploymentID": {
                            "value": "[parameters('DeploymentID')]"
                          },
                          "NICs": {
                            "value": "[parameters('AppServer').NICs]"
                          },
                          "VM": {
                            "value": "[parameters('AppServer')]"
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "15680478958950286894"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "DeploymentURI": {
                              "type": "string"
                            },
                            "DeploymentID": {
                              "type": "string"
                            },
                            "NICs": {
                              "type": "array"
                            },
                            "VM": {
                              "type": "object"
                            },
                            "Global": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "NIC",
                                "count": "[length(parameters('NICs'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('dp{0}-nicDeploy{1}{2}', parameters('Deployment'), parameters('VM').Name, add(copyIndex(), 1))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "Deployment": {
                                    "value": "[parameters('Deployment')]"
                                  },
                                  "DeploymentURI": {
                                    "value": "[parameters('DeploymentURI')]"
                                  },
                                  "DeploymentID": {
                                    "value": "[parameters('DeploymentID')]"
                                  },
                                  "NIC": {
                                    "value": "[parameters('NICs')[copyIndex()]]"
                                  },
                                  "NICNumber": {
                                    "value": "[string(add(copyIndex(), 1))]"
                                  },
                                  "VM": {
                                    "value": "[parameters('VM')]"
                                  },
                                  "Global": {
                                    "value": "[parameters('Global')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.4.1318.3566",
                                      "templateHash": "13928916846586964615"
                                    }
                                  },
                                  "parameters": {
                                    "Deployment": {
                                      "type": "string"
                                    },
                                    "DeploymentURI": {
                                      "type": "string"
                                    },
                                    "DeploymentID": {
                                      "type": "string"
                                    },
                                    "NIC": {
                                      "type": "object"
                                    },
                                    "NICNumber": {
                                      "type": "string"
                                    },
                                    "VM": {
                                      "type": "object"
                                    },
                                    "Global": {
                                      "type": "object"
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "loadBalancerInboundNatRules",
                                        "count": "[length(variables('rules'))]",
                                        "input": {
                                          "id": "[format('{0}/providers/Microsoft.Network/loadBalancers/{1}-lb{2}/inboundNatRules/{3}', resourceGroup().id, parameters('Deployment'), if(contains(parameters('NIC'), 'PLB'), parameters('NIC').PLB, 'none'), if(contains(parameters('NIC'), 'NATRules'), variables('rules')[copyIndex('loadBalancerInboundNatRules')], 'none'))]"
                                        }
                                      }
                                    ],
                                    "networkId": "[format('{0}{1}', parameters('Global').networkid[0], string(sub(parameters('Global').networkid[1], mul(2, int(parameters('DeploymentID'))))))]",
                                    "networkIdUpper": "[format('{0}{1}', parameters('Global').networkid[0], string(add(1, sub(parameters('Global').networkid[1], mul(2, int(parameters('DeploymentID')))))))]",
                                    "VNetID": "[resourceId('Microsoft.Network/VirtualNetworks', format('{0}-vn', parameters('Deployment')))]",
                                    "subnetID": "[format('{0}/subnets/sn{1}', variables('VNetID'), parameters('NIC').Subnet)]",
                                    "acceleratedNetworking": "[if(contains(parameters('NIC'), 'FastNic'), true(), false())]",
                                    "NICSuffix": "[if(equals(parameters('NICNumber'), '1'), '', parameters('NICNumber'))]",
                                    "IPAllocation": "[if(contains(parameters('NIC'), 'StaticIP'), 'Static', 'Dynamic')]",
                                    "privateIPAddress": "[if(contains(parameters('NIC'), 'StaticIP'), format('{0}.{1}', if(equals(parameters('NIC').Subnet, 'MT02'), variables('networkIdUpper'), variables('networkId')), parameters('NIC').StaticIP), null())]",
                                    "publicIPAddress": "[if(not(contains(parameters('NIC'), 'PublicIP')), null(), createObject('id', resourceId('Microsoft.Network/publicIPAddresses', format('{0}-vm{1}-publicip{2}', parameters('Deployment'), parameters('VM').Name, parameters('NICNumber')))))]",
                                    "JITNSG": {
                                      "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-vm{1}-JITNSG', parameters('Deployment'), parameters('VM').Name))]"
                                    },
                                    "rules": "[if(contains(parameters('NIC'), 'NatRules'), parameters('NIC').NatRules, createArray())]"
                                  },
                                  "resources": [
                                    {
                                      "condition": "[not(or(or(or(contains(parameters('NIC'), 'LB'), contains(parameters('NIC'), 'PLB')), contains(parameters('NIC'), 'SLB')), contains(parameters('NIC'), 'ISLB')))]",
                                      "type": "Microsoft.Network/networkInterfaces",
                                      "apiVersion": "2021-02-01",
                                      "name": "[format('{0}-nic{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name)]",
                                      "location": "[resourceGroup().location]",
                                      "properties": {
                                        "enableAcceleratedNetworking": "[variables('acceleratedNetworking')]",
                                        "ipConfigurations": [
                                          {
                                            "name": "ipconfig1",
                                            "properties": {
                                              "publicIPAddress": "[if(contains(parameters('NIC'), 'PublicIP'), variables('publicIPAddress'), null())]",
                                              "privateIPAllocationMethod": "[variables('IPAllocation')]",
                                              "privateIPAddress": "[variables('privateIPAddress')]",
                                              "subnet": {
                                                "id": "[variables('subnetID')]"
                                              }
                                            }
                                          }
                                        ],
                                        "networkSecurityGroup": "[variables('JITNSG')]"
                                      }
                                    },
                                    {
                                      "condition": "[not(or(contains(parameters('NIC'), 'LB'), or(contains(parameters('NIC'), 'PLB'), or(contains(parameters('NIC'), 'SLB'), contains(parameters('NIC'), 'ISLB')))))]",
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', format('{0}-nic{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]",
                                      "name": "service",
                                      "properties": {
                                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                                        "metrics": [
                                          {
                                            "timeGrain": "PT5M",
                                            "enabled": true,
                                            "retentionPolicy": {
                                              "enabled": false,
                                              "days": 0
                                            }
                                          }
                                        ]
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nic{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]"
                                      ]
                                    },
                                    {
                                      "condition": "[contains(parameters('NIC'), 'PLB')]",
                                      "type": "Microsoft.Network/networkInterfaces",
                                      "apiVersion": "2021-02-01",
                                      "name": "[format('{0}-nicplb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name)]",
                                      "location": "[resourceGroup().location]",
                                      "properties": {
                                        "enableAcceleratedNetworking": "[variables('acceleratedNetworking')]",
                                        "ipConfigurations": [
                                          {
                                            "name": "ipconfig1",
                                            "properties": {
                                              "loadBalancerBackendAddressPools": [
                                                {
                                                  "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', format('{0}-lb{1}', parameters('Deployment'), parameters('NIC').PLB), parameters('NIC').PLB)]"
                                                }
                                              ],
                                              "loadBalancerInboundNatRules": "[if(contains(parameters('NIC'), 'NATRules'), variables('loadBalancerInboundNatRules'), null())]",
                                              "privateIPAllocationMethod": "[variables('IPAllocation')]",
                                              "privateIPAddress": "[variables('privateIPAddress')]",
                                              "subnet": {
                                                "id": "[variables('subnetID')]"
                                              }
                                            }
                                          }
                                        ],
                                        "networkSecurityGroup": "[variables('JITNSG')]"
                                      }
                                    },
                                    {
                                      "condition": "[contains(parameters('NIC'), 'PLB')]",
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', format('{0}-nicplb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]",
                                      "name": "service",
                                      "properties": {
                                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                                        "metrics": [
                                          {
                                            "timeGrain": "PT5M",
                                            "enabled": true,
                                            "retentionPolicy": {
                                              "enabled": false,
                                              "days": 0
                                            }
                                          }
                                        ]
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nicplb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]"
                                      ]
                                    },
                                    {
                                      "condition": "[contains(parameters('NIC'), 'LB')]",
                                      "type": "Microsoft.Network/networkInterfaces",
                                      "apiVersion": "2021-02-01",
                                      "name": "[format('{0}-niclb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name)]",
                                      "location": "[resourceGroup().location]",
                                      "properties": {
                                        "enableAcceleratedNetworking": "[variables('acceleratedNetworking')]",
                                        "ipConfigurations": [
                                          {
                                            "name": "ipconfig1",
                                            "properties": {
                                              "loadBalancerBackendAddressPools": [
                                                {
                                                  "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', format('{0}-ilb{1}', parameters('Deployment'), parameters('NIC').LB), parameters('NIC').LB)]"
                                                }
                                              ],
                                              "privateIPAllocationMethod": "[variables('IPAllocation')]",
                                              "privateIPAddress": "[variables('privateIPAddress')]",
                                              "subnet": {
                                                "id": "[variables('subnetID')]"
                                              }
                                            }
                                          }
                                        ],
                                        "networkSecurityGroup": "[variables('JITNSG')]"
                                      }
                                    },
                                    {
                                      "condition": "[contains(parameters('NIC'), 'LB')]",
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', format('{0}-niclb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]",
                                      "name": "service",
                                      "properties": {
                                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                                        "metrics": [
                                          {
                                            "timeGrain": "PT5M",
                                            "enabled": true,
                                            "retentionPolicy": {
                                              "enabled": false,
                                              "days": 0
                                            }
                                          }
                                        ]
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-niclb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]"
                                      ]
                                    },
                                    {
                                      "condition": "[contains(parameters('NIC'), 'SLB')]",
                                      "type": "Microsoft.Network/networkInterfaces",
                                      "apiVersion": "2021-02-01",
                                      "name": "[format('{0}-nicslb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name)]",
                                      "location": "[resourceGroup().location]",
                                      "properties": {
                                        "enableAcceleratedNetworking": "[variables('acceleratedNetworking')]",
                                        "ipConfigurations": [
                                          {
                                            "name": "ipconfig1",
                                            "properties": {
                                              "loadBalancerBackendAddressPools": [
                                                {
                                                  "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', format('{0}-lb{1}', parameters('Deployment'), parameters('NIC').SLB), parameters('NIC').SLB)]"
                                                }
                                              ],
                                              "privateIPAllocationMethod": "[variables('IPAllocation')]",
                                              "privateIPAddress": "[variables('privateIPAddress')]",
                                              "subnet": {
                                                "id": "[variables('subnetID')]"
                                              }
                                            }
                                          }
                                        ],
                                        "networkSecurityGroup": "[variables('JITNSG')]"
                                      }
                                    },
                                    {
                                      "condition": "[contains(parameters('NIC'), 'SLB')]",
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', format('{0}-nicslb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]",
                                      "name": "service",
                                      "properties": {
                                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                                        "metrics": [
                                          {
                                            "timeGrain": "PT5M",
                                            "enabled": true,
                                            "retentionPolicy": {
                                              "enabled": false,
                                              "days": 0
                                            }
                                          }
                                        ]
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nicslb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]"
                                      ]
                                    }
                                  ],
                                  "outputs": {
                                    "foo7": {
                                      "type": "array",
                                      "value": "[variables('loadBalancerInboundNatRules')]"
                                    },
                                    "foo": {
                                      "type": "object",
                                      "value": "[parameters('NIC')]"
                                    }
                                  }
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-AppServer-publicIPDeploy{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-AppServer-diskLookup{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[variables('Deployment')]"
                          },
                          "DeploymentID": {
                            "value": "[parameters('DeploymentID')]"
                          },
                          "Name": {
                            "value": "[parameters('AppServer').Name]"
                          },
                          "SOFS": {
                            "value": "[if(contains(variables('DataDiskInfo')[parameters('AppServer').DDRole], 'SOFS'), variables('DataDiskInfo')[parameters('AppServer').DDRole].SOFS, json('{\"1\":1}'))]"
                          },
                          "DATA": {
                            "value": "[if(contains(variables('DataDiskInfo')[parameters('AppServer').DDRole], 'DATA'), variables('DataDiskInfo')[parameters('AppServer').DDRole].DATA, json('{\"1\":1}'))]"
                          },
                          "LOGS": {
                            "value": "[if(contains(variables('DataDiskInfo')[parameters('AppServer').DDRole], 'LOGS'), variables('DataDiskInfo')[parameters('AppServer').DDRole].LOGS, json('{\"1\":1}'))]"
                          },
                          "TEMPDB": {
                            "value": "[if(contains(variables('DataDiskInfo')[parameters('AppServer').DDRole], 'TEMPDB'), variables('DataDiskInfo')[parameters('AppServer').DDRole].TEMPDB, json('{\"1\":1}'))]"
                          },
                          "BACKUP": {
                            "value": "[if(contains(variables('DataDiskInfo')[parameters('AppServer').DDRole], 'BACKUP'), variables('DataDiskInfo')[parameters('AppServer').DDRole].BACKUP, json('{\"1\":1}'))]"
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "13688646372196984293"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "DeploymentID": {
                              "type": "string"
                            },
                            "Name": {
                              "type": "string"
                            },
                            "DATA": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "DATASS": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "SOFS": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "LOGS": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "TEMPDB": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "BACKUP": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "DISKS": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "Global": {
                              "type": "object"
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "Data_var",
                                "count": "[length(range(0, if(contains(parameters('DATA'), '1'), 1, length(parameters('DATA').LUNS))))]",
                                "input": {
                                  "name": "[if(contains(parameters('DATA'), '1'), 1, format('{0}-{1}-DATA-DATA{2}', parameters('Deployment'), parameters('Name'), padLeft(parameters('DATA').LUNS[range(0, if(contains(parameters('DATA'), '1'), 1, length(parameters('DATA').LUNS)))[copyIndex('Data_var')]][0], 2, '0')))]",
                                  "lun": "[if(contains(parameters('DATA'), '1'), 1, int(parameters('DATA').LUNS[range(0, if(contains(parameters('DATA'), '1'), 1, length(parameters('DATA').LUNS)))[copyIndex('Data_var')]][0]))]",
                                  "caching": "[if(contains(parameters('DATA'), '1'), 1, parameters('DATA').caching)]",
                                  "diskSizeGB": "[if(contains(parameters('DATA'), '1'), 1, int(parameters('DATA').LUNS[range(0, if(contains(parameters('DATA'), '1'), 1, length(parameters('DATA').LUNS)))[copyIndex('Data_var')]][1]))]",
                                  "createOption": "[if(contains(parameters('DATA'), '1'), 1, if(equals(length(parameters('DATA').LUNS[range(0, if(contains(parameters('DATA'), '1'), 1, length(parameters('DATA').LUNS)))[copyIndex('Data_var')]]), 3), parameters('DATA').LUNS[range(0, if(contains(parameters('DATA'), '1'), 1, length(parameters('DATA').LUNS)))[copyIndex('Data_var')]][2], 'Empty'))]",
                                  "managedDisk": "[if(contains(parameters('DATA'), '1'), 1, if(contains(parameters('DATA'), 'saType'), json(format('{{\"storageAccountType\":\"{0}\"}}', parameters('DATA').saType)), json('null')))]"
                                }
                              },
                              {
                                "name": "Datass_var",
                                "count": "[length(range(0, if(contains(parameters('DATASS'), '1'), 1, length(parameters('DATASS').LUNS))))]",
                                "input": {
                                  "lun": "[if(contains(parameters('DATASS'), '1'), 1, int(parameters('DATASS').LUNS[range(0, if(contains(parameters('DATASS'), '1'), 1, length(parameters('DATASS').LUNS)))[copyIndex('Datass_var')]][0]))]",
                                  "caching": "[if(contains(parameters('DATASS'), '1'), 1, parameters('DATASS').caching)]",
                                  "diskSizeGB": "[if(contains(parameters('DATASS'), '1'), 1, int(parameters('DATASS').LUNS[range(0, if(contains(parameters('DATASS'), '1'), 1, length(parameters('DATASS').LUNS)))[copyIndex('Datass_var')]][1]))]",
                                  "createOption": "[if(contains(parameters('DATASS'), '1'), 1, if(equals(length(parameters('DATASS').LUNS[range(0, if(contains(parameters('DATASS'), '1'), 1, length(parameters('DATASS').LUNS)))[copyIndex('Datass_var')]]), 3), parameters('DATASS').LUNS[range(0, if(contains(parameters('DATASS'), '1'), 1, length(parameters('DATASS').LUNS)))[copyIndex('Datass_var')]][2], 'Empty'))]",
                                  "managedDisk": "[if(contains(parameters('DATASS'), '1'), 1, if(contains(parameters('DATASS'), 'saType'), json(format('{{\"storageAccountType\":\"{0}\"}}', parameters('DATASS').saType)), json('null')))]"
                                }
                              },
                              {
                                "name": "SOFS_var",
                                "count": "[length(range(0, if(contains(parameters('SOFS'), '1'), 1, length(parameters('SOFS').LUNS))))]",
                                "input": {
                                  "name": "[if(contains(parameters('SOFS'), '1'), 1, format('{0}-{1}-DATA-SOFS{2}', parameters('Deployment'), parameters('Name'), padLeft(parameters('SOFS').LUNS[range(0, if(contains(parameters('SOFS'), '1'), 1, length(parameters('SOFS').LUNS)))[copyIndex('SOFS_var')]][0], 2, '0')))]",
                                  "lun": "[if(contains(parameters('SOFS'), '1'), 1, int(parameters('SOFS').LUNS[range(0, if(contains(parameters('SOFS'), '1'), 1, length(parameters('SOFS').LUNS)))[copyIndex('SOFS_var')]][0]))]",
                                  "caching": "[if(contains(parameters('SOFS'), '1'), 1, parameters('SOFS').caching)]",
                                  "diskSizeGB": "[if(contains(parameters('SOFS'), '1'), 1, int(parameters('SOFS').LUNS[range(0, if(contains(parameters('SOFS'), '1'), 1, length(parameters('SOFS').LUNS)))[copyIndex('SOFS_var')]][1]))]",
                                  "createOption": "[if(contains(parameters('SOFS'), '1'), 1, if(equals(length(parameters('SOFS').LUNS[range(0, if(contains(parameters('SOFS'), '1'), 1, length(parameters('SOFS').LUNS)))[copyIndex('SOFS_var')]]), 3), parameters('SOFS').LUNS[range(0, if(contains(parameters('SOFS'), '1'), 1, length(parameters('SOFS').LUNS)))[copyIndex('SOFS_var')]][2], 'Empty'))]",
                                  "managedDisk": "[if(contains(parameters('SOFS'), '1'), 1, if(contains(parameters('SOFS'), 'saType'), json(format('{{\"storageAccountType\":\"{0}\"}}', parameters('SOFS').saType)), json('null')))]"
                                }
                              },
                              {
                                "name": "LOGS_var",
                                "count": "[length(range(0, if(contains(parameters('LOGS'), '1'), 1, length(parameters('LOGS').LUNS))))]",
                                "input": {
                                  "name": "[if(contains(parameters('LOGS'), '1'), 1, format('{0}-{1}-DATA-LOGS{2}', parameters('Deployment'), parameters('Name'), padLeft(parameters('LOGS').LUNS[range(0, if(contains(parameters('LOGS'), '1'), 1, length(parameters('LOGS').LUNS)))[copyIndex('LOGS_var')]][0], 2, '0')))]",
                                  "lun": "[if(contains(parameters('LOGS'), '1'), 1, int(parameters('LOGS').LUNS[range(0, if(contains(parameters('LOGS'), '1'), 1, length(parameters('LOGS').LUNS)))[copyIndex('LOGS_var')]][0]))]",
                                  "caching": "[if(contains(parameters('LOGS'), '1'), 1, parameters('LOGS').caching)]",
                                  "diskSizeGB": "[if(contains(parameters('LOGS'), '1'), 1, int(parameters('LOGS').LUNS[range(0, if(contains(parameters('LOGS'), '1'), 1, length(parameters('LOGS').LUNS)))[copyIndex('LOGS_var')]][1]))]",
                                  "createOption": "[if(contains(parameters('LOGS'), '1'), 1, if(equals(length(parameters('LOGS').LUNS[range(0, if(contains(parameters('LOGS'), '1'), 1, length(parameters('LOGS').LUNS)))[copyIndex('LOGS_var')]]), 3), parameters('LOGS').LUNS[range(0, if(contains(parameters('LOGS'), '1'), 1, length(parameters('LOGS').LUNS)))[copyIndex('LOGS_var')]][2], 'Empty'))]",
                                  "managedDisk": "[if(contains(parameters('LOGS'), '1'), 1, if(contains(parameters('LOGS'), 'saType'), json(format('{{\"storageAccountType\":\"{0}\"}}', parameters('LOGS').saType)), json('null')))]"
                                }
                              },
                              {
                                "name": "TEMPDB_var",
                                "count": "[length(range(0, if(contains(parameters('TEMPDB'), '1'), 1, length(parameters('TEMPDB').LUNS))))]",
                                "input": {
                                  "name": "[if(contains(parameters('TEMPDB'), '1'), 1, format('{0}-{1}-DATA-TEMPDB{2}', parameters('Deployment'), parameters('Name'), padLeft(parameters('TEMPDB').LUNS[range(0, if(contains(parameters('TEMPDB'), '1'), 1, length(parameters('TEMPDB').LUNS)))[copyIndex('TEMPDB_var')]][0], 2, '0')))]",
                                  "lun": "[if(contains(parameters('TEMPDB'), '1'), 1, int(parameters('TEMPDB').LUNS[range(0, if(contains(parameters('TEMPDB'), '1'), 1, length(parameters('TEMPDB').LUNS)))[copyIndex('TEMPDB_var')]][0]))]",
                                  "caching": "[if(contains(parameters('TEMPDB'), '1'), 1, parameters('TEMPDB').caching)]",
                                  "diskSizeGB": "[if(contains(parameters('TEMPDB'), '1'), 1, int(parameters('TEMPDB').LUNS[range(0, if(contains(parameters('TEMPDB'), '1'), 1, length(parameters('TEMPDB').LUNS)))[copyIndex('TEMPDB_var')]][1]))]",
                                  "createOption": "[if(contains(parameters('TEMPDB'), '1'), 1, if(equals(length(parameters('TEMPDB').LUNS[range(0, if(contains(parameters('TEMPDB'), '1'), 1, length(parameters('TEMPDB').LUNS)))[copyIndex('TEMPDB_var')]]), 3), parameters('TEMPDB').LUNS[range(0, if(contains(parameters('TEMPDB'), '1'), 1, length(parameters('TEMPDB').LUNS)))[copyIndex('TEMPDB_var')]][2], 'Empty'))]",
                                  "managedDisk": "[if(contains(parameters('TEMPDB'), '1'), 1, if(contains(parameters('TEMPDB'), 'saType'), json(format('{{\"storageAccountType\":\"{0}\"}}', parameters('TEMPDB').saType)), json('null')))]"
                                }
                              },
                              {
                                "name": "BACKUP_var",
                                "count": "[length(range(0, if(contains(parameters('BACKUP'), '1'), 1, length(parameters('BACKUP').LUNS))))]",
                                "input": {
                                  "name": "[if(contains(parameters('BACKUP'), '1'), 1, format('{0}-{1}-DATA-BACKUP{2}', parameters('Deployment'), parameters('Name'), padLeft(parameters('BACKUP').LUNS[range(0, if(contains(parameters('BACKUP'), '1'), 1, length(parameters('BACKUP').LUNS)))[copyIndex('BACKUP_var')]][0], 2, '0')))]",
                                  "lun": "[if(contains(parameters('BACKUP'), '1'), 1, int(parameters('BACKUP').LUNS[range(0, if(contains(parameters('BACKUP'), '1'), 1, length(parameters('BACKUP').LUNS)))[copyIndex('BACKUP_var')]][0]))]",
                                  "caching": "[if(contains(parameters('BACKUP'), '1'), 1, parameters('BACKUP').caching)]",
                                  "diskSizeGB": "[if(contains(parameters('BACKUP'), '1'), 1, int(parameters('BACKUP').LUNS[range(0, if(contains(parameters('BACKUP'), '1'), 1, length(parameters('BACKUP').LUNS)))[copyIndex('BACKUP_var')]][1]))]",
                                  "createOption": "[if(contains(parameters('BACKUP'), '1'), 1, if(equals(length(parameters('BACKUP').LUNS[range(0, if(contains(parameters('BACKUP'), '1'), 1, length(parameters('BACKUP').LUNS)))[copyIndex('BACKUP_var')]]), 3), parameters('BACKUP').LUNS[range(0, if(contains(parameters('BACKUP'), '1'), 1, length(parameters('BACKUP').LUNS)))[copyIndex('BACKUP_var')]][2], 'Empty'))]",
                                  "managedDisk": "[if(contains(parameters('BACKUP'), '1'), 1, if(contains(parameters('BACKUP'), 'saType'), json(format('{{\"storageAccountType\":\"{0}\"}}', parameters('BACKUP').saType)), json('null')))]"
                                }
                              }
                            ]
                          },
                          "resources": [],
                          "outputs": {
                            "SOFS": {
                              "type": "array",
                              "value": "[if(contains(parameters('SOFS'), '1'), array('no SOFS disks'), variables('SOFS_var'))]"
                            },
                            "DATA": {
                              "type": "array",
                              "value": "[if(contains(parameters('DATA'), '1'), array('no DATA disks'), variables('Data_var'))]"
                            },
                            "DATASS": {
                              "type": "array",
                              "value": "[if(contains(parameters('DATASS'), '1'), array('no DATA disks'), variables('Datass_var'))]"
                            },
                            "LOGS": {
                              "type": "array",
                              "value": "[if(contains(parameters('LOGS'), '1'), array('no LOGS disks'), variables('LOGS_var'))]"
                            },
                            "TEMPDB": {
                              "type": "array",
                              "value": "[if(contains(parameters('TEMPDB'), '1'), array('no TEMPDB disks'), variables('TEMPDB_var'))]"
                            },
                            "BACKUP": {
                              "type": "array",
                              "value": "[if(contains(parameters('BACKUP'), '1'), array('no BACKUP disks'), variables('BACKUP_var'))]"
                            },
                            "DATADisks": {
                              "type": "array",
                              "value": "[union(if(contains(parameters('SOFS'), '1'), createArray(), variables('SOFS_var')), if(contains(parameters('DATA'), '1'), createArray(), variables('Data_var')), if(contains(parameters('DATASS'), '1'), createArray(), variables('Datass_var')), if(contains(parameters('LOGS'), '1'), createArray(), variables('LOGS_var')), if(contains(parameters('TEMPDB'), '1'), createArray(), variables('TEMPDB_var')), if(contains(parameters('BACKUP'), '1'), createArray(), variables('BACKUP_var')))]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "condition": "[bool(parameters('AppServer').DeployJIT)]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-AppServer-JIT-{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[variables('Deployment')]"
                          },
                          "VM": {
                            "value": "[parameters('AppServer')]"
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          },
                          "DeploymentID": {
                            "value": "[parameters('DeploymentID')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "17671050488544287828"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "VM": {
                              "type": "object"
                            },
                            "Global": {
                              "type": "object"
                            },
                            "DeploymentID": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "ports",
                                "count": "[length(variables('portList'))]",
                                "input": {
                                  "number": "[variables('portList')[copyIndex('ports')]]",
                                  "protocol": "TCP",
                                  "allowedSourceAddressPrefixes": "[union(parameters('Global').IPAddressforRemoteAccess, variables('addressPrefixes'))]",
                                  "maxRequestAccessDuration": "PT3H"
                                }
                              }
                            ],
                            "portList": [
                              3389,
                              22,
                              5985,
                              5986
                            ],
                            "networkId": "[format('{0}{1}', parameters('Global').networkid[0], string(sub(parameters('Global').networkid[1], mul(2, int(parameters('DeploymentID'))))))]",
                            "addressPrefixes": [
                              "[format('{0}.0/23', variables('networkId'))]"
                            ]
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Security/locations/jitNetworkAccessPolicies",
                              "apiVersion": "2020-01-01",
                              "name": "[format('{0}/JIT_{1}', resourceGroup().location, format('{0}-vm{1}', parameters('Deployment'), parameters('VM').name))]",
                              "kind": "Basic",
                              "properties": {
                                "virtualMachines": [
                                  {
                                    "id": "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', parameters('Deployment'), parameters('VM').name))]",
                                    "ports": "[variables('ports')]"
                                  }
                                ],
                                "appendMode": true
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "Disks": {
                      "type": "array",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('dp{0}-AppServer-diskLookup{1}', variables('Deployment'), parameters('AppServer').Name))).outputs.DATADisks.value]"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-LB', variables('Deployment')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-OMS', variables('Deployment')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-SA', variables('Deployment')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-VNETDNSDC1', variables('Deployment')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-VNETDNSDC2', variables('Deployment')))]"
      ]
    },
    {
      "condition": "[bool(parameters('Stage').VMAppLinux)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "AppServersLinux",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "DeploymentID": {
            "value": "[parameters('DeploymentID')]"
          },
          "DeploymentInfo": {
            "value": "[parameters('DeploymentInfo')]"
          },
          "Environment": {
            "value": "[parameters('Environment')]"
          },
          "Extensions": {
            "value": "[parameters('Extensions')]"
          },
          "Global": {
            "value": "[parameters('Global')]"
          },
          "Prefix": {
            "value": "[parameters('Prefix')]"
          },
          "Stage": {
            "value": "[parameters('Stage')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "13874993644946453761"
            }
          },
          "parameters": {
            "Prefix": {
              "type": "string"
            },
            "Environment": {
              "type": "string",
              "defaultValue": "D",
              "allowedValues": [
                "I",
                "D",
                "T",
                "U",
                "P",
                "S",
                "G",
                "A"
              ]
            },
            "DeploymentID": {
              "type": "string",
              "defaultValue": "1",
              "allowedValues": [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9"
              ]
            },
            "Stage": {
              "type": "object"
            },
            "Extensions": {
              "type": "object"
            },
            "Global": {
              "type": "object"
            },
            "DeploymentInfo": {
              "type": "object"
            }
          },
          "variables": {
            "copy": [
              {
                "name": "VMs",
                "count": "[length(variables('AppServers'))]",
                "input": {
                  "name": "[variables('AppServers')[copyIndex('VMs')].Name]",
                  "match": "[or(equals(parameters('Global').CN, '.'), contains(array(parameters('Global').CN), variables('AppServers')[copyIndex('VMs')].Name))]",
                  "Extensions": "[if(contains(variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType], 'RoleExtensions'), union(parameters('Extensions'), variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType].RoleExtensions), parameters('Extensions'))]",
                  "DataDisk": "[if(contains(variables('AppServers')[copyIndex('VMs')], 'DDRole'), variables('DataDiskInfo')[variables('AppServers')[copyIndex('VMs')].DDRole], null())]",
                  "vmHostName": "[toLower(format('{0}{1}{2}{3}{4}', parameters('Prefix'), parameters('Global').AppName, parameters('Environment'), parameters('DeploymentID'), variables('AppServers')[copyIndex('VMs')].Name))]",
                  "AppInfo": "[if(contains(variables('AppServers')[copyIndex('VMs')], 'AppInfo'), variables('AppServers')[copyIndex('VMs')].AppInfo, null())]",
                  "windowsConfiguration": {
                    "enableAutomaticUpdates": true,
                    "provisionVmAgent": true,
                    "patchSettings": {
                      "enableHotpatching": "[if(contains(variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType], 'HotPatch'), variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType].HotPatch, false())]",
                      "patchMode": "[if(contains(variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType], 'patchMode'), variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType].patchMode, 'AutomaticByOS')]"
                    }
                  },
                  "linuxConfiguration": {
                    "enableAutomaticUpdates": true,
                    "provisionVmAgent": true,
                    "patchSettings": {
                      "enableHotpatching": "[if(contains(variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType], 'HotPatch'), variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType].HotPatch, false())]",
                      "patchMode": "[if(contains(variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType], 'patchMode'), variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType].patchMode, 'AutomaticByOS')]"
                    }
                  }
                }
              }
            ],
            "Deployment": "[format('{0}-{1}-{2}-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID'))]",
            "computeGlobal": "[json('{\r\n  \"DataDiskInfo\": {\r\n    \"0GB\": {},\r\n    \"32GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            32\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GBSS\": {\r\n      \"DATASS\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GB-2\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ],\r\n          [\r\n            1,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"128GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            128\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"FIL64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"SOFS\": {\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            1,\r\n            32\r\n          ],\r\n          [\r\n            2,\r\n            32\r\n          ],\r\n          [\r\n            3,\r\n            32\r\n          ]\r\n        ],\r\n        \"FileSystem\": \"ReFS\",\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"SQL64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"LOGS\": {\r\n        \"DriveLetter\": \"G\",\r\n        \"caching\": \"None\",\r\n        \"LUNS\": [\r\n          [\r\n            8,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"TEMPDB\": {\r\n        \"DriveLetter\": \"H\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            12,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"BACKUP\": {\r\n        \"DriveLetter\": \"I\",\r\n        \"caching\": \"None\",\r\n        \"LUNS\": [\r\n          [\r\n            15,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    }\r\n  },\r\n  \"computeSizeLookupOptions\": {\r\n    \"API-P\": \"Standard_D4s_v3\",\r\n    \"API-D\": \"Standard_D4s_v3\",\r\n    \"API-S\": \"Standard_D2s_v3\",\r\n    \"SF-P\": \"Standard_D4s_v3\",\r\n    \"SF-D\": \"Standard_D2s_v3\",\r\n    \"SF-S\": \"Standard_D2s_v3\",\r\n    \"CTNR-P\": \"Standard_D4s_v3\",\r\n    \"CTNR-D\": \"Standard_D2s_v3\",\r\n    \"ADp-P\": \"Standard_D2s_v3\",\r\n    \"ADp-D\": \"Standard_A2m_v2\",\r\n    \"ADs-P\": \"Standard_D2s_v3\",\r\n    \"ADs-D\": \"Standard_A2m_v2\",\r\n    \"AAP-P\": \"Standard_D2s_v3\",\r\n    \"AAP-D\": \"Standard_D2s_v3\",\r\n    \"DNS-P\": \"Standard_D2s_v3\",\r\n    \"DNS-D\": \"Standard_D2s_v3\",\r\n    \"BUS-P\": \"Standard_DS2_v2\",\r\n    \"BUS-D\": \"Standard_DS2_v2\",\r\n    \"LIN-P\": \"Standard_DS2_v2\",\r\n    \"LIN-D\": \"Standard_DS2_v2\",\r\n    \"FIL-P\": \"Standard_D4s_v3\",\r\n    \"FIL-D\": \"Standard_D4s_v3\",\r\n    \"DFS-P\": \"Standard_D4s_v3\",\r\n    \"DFS-D\": \"Standard_D4s_v3\",\r\n    \"JMP-P\": \"Standard_D4s_v3\",\r\n    \"JMP-D\": \"Standard_D4s_v3\",\r\n    \"CLT-P\": \"Standard_D4s_v3\",\r\n    \"CLT-D\": \"Standard_D4s_v3\",\r\n    \"PXY-P\": \"Standard_D4s_v3\",\r\n    \"PXY-D\": \"Standard_D2s_v3\",\r\n    \"CLS01-D\": \"Standard_D4s_v3\",\r\n    \"CLS02-D\": \"Standard_D4s_v3\",\r\n    \"CLS01-P\": \"Standard_D4s_v3\",\r\n    \"CLS02-P\": \"Standard_D4s_v3\",\r\n    \"FW-P\": \"Standard_F4\",\r\n    \"FW-D\": \"Standard_F2\"\r\n  },\r\n  \"OSType\": {\r\n    \"Server2022SSIMG\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/b8f402aa-20f7-4888-b45c-3cf086dad9c3/resourceGroups/ACU1-BRW-AOA-RG-G1/providers/Microsoft.Compute/galleries/acu1brwaoag1gallery01/images/vmss2022\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SSIMG\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/b8f402aa-20f7-4888-b45c-3cf086dad9c3/resourceGroups/ACU1-BRW-AOA-RG-G1/providers/Microsoft.Compute/galleries/acu1brwaoag1gallery01/images/vmss2019webnetcore27\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"cbld10\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/27b750cd-ed43-42fd-9044-8d75e124ae55/resourceGroups/SBID-Build-Test/providers/Microsoft.Compute/galleries/cbldtest/images/cbld10-ext\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 1,\r\n        \"IaaSDiagnostics\": 1,\r\n        \"Antimalware\": 0,\r\n        \"DependencyAgent\": 1,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Win10O365\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsDesktop\",\r\n        \"offer\": \"office-365\",\r\n        \"sku\": \"rs5-evd-o365pp\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Client\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Win10\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsDesktop\",\r\n        \"offer\": \"Windows-10\",\r\n        \"sku\": \"21h1-pro-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Client\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"SQLServer2016\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftSQLServer\",\r\n        \"Offer\": \"SQL2016SP2-WS2016\",\r\n        \"sku\": \"Enterprise\",\r\n        \"version\": \"latest\"\r\n      },\r\n      // \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016Core\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-Server-Core\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016small\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016Coresmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-Server-Core-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019-gen2\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"windowsserver-gen2preview\",\r\n        \"sku\": \"2019-Datacenter-gen2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2022\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2022-Datacenter-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"_plan\": {\r\n        \"name\": \"windows-server-2022\",\r\n        \"publisher\": \"microsoftwindowsserver\",\r\n        \"product\": \"microsoftserveroperatingsystems-previews\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2022Containerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"datacenter-core-20h2-with-containers-smalldisk-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Core\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-Core\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019small\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-datacenter-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Coresmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-Server-Core-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Containerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019CoreContainerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-datacenter-core-with-containers-smalldisk-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016SS\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-with-Containers\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SSgs\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers-gs\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SS\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"NetScaler\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"citrix\",\r\n        \"Offer\": \"netscalervpx-120\",\r\n        \"Sku\": \"netscalerbyol\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"netscalerbyol\",\r\n        \"publisher\": \"citrix\",\r\n        \"product\": \"netscalervpx-120\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"MaxLoadBalancer\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"loadbalancer\",\r\n        \"offer\": \"loadbalancer-org-load-balancer-for-azure\",\r\n        \"sku\": \"max_load_balancer\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"max_load_balancer\",\r\n        \"publisher\": \"loadbalancer\",\r\n        \"product\": \"loadbalancer-org-load-balancer-for-azure\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortigate\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet_fortigate-vm_v5\",\r\n        \"sku\": \"fortinet_fg-vm\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"fortinet_fg-vm\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet_fortigate-vm_v5\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortigatepayg\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet_fortigate-vm_v5\",\r\n        \"sku\": \"fortinet_fg-vm_payg\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"fortinet_fg-vm_payg\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet_fortigate-vm_v5\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortimngr\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet-fortimanager\",\r\n        \"sku\": \"fortinet-fortimanager\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 3,\r\n      \"plan\": {\r\n        \"name\": \"fortinet-fortimanager\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet-fortimanager\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"UbuntuServer1904\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"canonical\",\r\n        \"offer\": \"UbuntuServer\",\r\n        \"sku\": \"19.04\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"Antimalware\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 1,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0\r\n      }\r\n    },\r\n    \"Bus-debian\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"credativ\",\r\n        \"offer\": \"Debian\",\r\n        \"sku\": \"8\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 1,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"PROXY-UBUNTU\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"Canonical\",\r\n        \"offer\": \"UbuntuServer\",\r\n        \"sku\": \"16.04-LTS\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"fileUris\": \"[concat(parameters(''global'')._artifactsLocation, ''/scripts/pxy.zip\",\r\n      \"commandToExecute\": \"[concat(''sudo apt-get update && sudo apt-get install unzip && unzip Proxy.zip && sudo bash -x haproxyvm-configure.sh '', '' -a '', ''ilbIPAddress'', '' -r '', ''ilbRabbitMqPort'', '' -m '', ''ilbRabbitMqMgmtPort'', '' -b '', ''dnsName'', ''.'', ''location'', ''.cloudapp.azure.com -p '', ''vmNamePrefix'', ''0 -s '', ''vmNamePrefix'', ''1'')]\",\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"CentOS75\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"OpenLogic\",\r\n        \"Offer\": \"CentOS\",\r\n        \"sku\": \"7.5\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"Antimalware\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    }\r\n  },\r\n  \"ladCfg\": {\r\n    \"diagnosticMonitorConfiguration\": {\r\n      \"eventVolume\": \"Medium\",\r\n      \"metrics\": {\r\n        \"metricAggregation\": [\r\n          {\r\n            \"scheduledTransferPeriod\": \"PT1H\"\r\n          },\r\n          {\r\n            \"scheduledTransferPeriod\": \"PT1M\"\r\n          }\r\n        ],\r\n        \"resourceId\": \"__VM_RESOURCE_ID__\"\r\n      },\r\n      \"performanceCounters\": {\r\n        \"performanceCounterConfiguration\": [\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk read guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readbytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/readbytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk writes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/writespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk transfer time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagetransfertime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagetransfertime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk transfers\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"transferspersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/transferspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk write guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writebytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/writebytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk read time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagereadtime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagereadtime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk write time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagewritetime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagewritetime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk total bytes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/bytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk reads\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readspersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/readspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk queue length\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagediskqueuelength\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagediskqueuelength\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network in guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytesreceived\",\r\n            \"counterSpecifier\": \"/builtin/network/bytesreceived\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network total bytes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytestotal\",\r\n            \"counterSpecifier\": \"/builtin/network/bytestotal\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network out guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytestransmitted\",\r\n            \"counterSpecifier\": \"/builtin/network/bytestransmitted\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network collisions\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totalcollisions\",\r\n            \"counterSpecifier\": \"/builtin/network/totalcollisions\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets received errors\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totalrxerrors\",\r\n            \"counterSpecifier\": \"/builtin/network/totalrxerrors\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets sent\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"packetstransmitted\",\r\n            \"counterSpecifier\": \"/builtin/network/packetstransmitted\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets received\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"packetsreceived\",\r\n            \"counterSpecifier\": \"/builtin/network/packetsreceived\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets sent errors\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totaltxerrors\",\r\n            \"counterSpecifier\": \"/builtin/network/totaltxerrors\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem transfers/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"transferspersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/transferspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % free space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentfreespace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentfreespace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % used space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusedspace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentusedspace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem used space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"usedspace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/usedspace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem read bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytesreadpersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/bytesreadpersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem free space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"freespace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/freespace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % free inodes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentfreeinodes\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentfreeinodes\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/bytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem reads/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readspersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/readspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem write bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"byteswrittenpersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/byteswrittenpersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem writes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writespersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/writespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % used inodes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusedinodes\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentusedinodes\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU IO wait time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentiowaittime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentiowaittime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU user time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusertime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentusertime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU nice time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentnicetime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentnicetime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU percentage guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentprocessortime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentprocessortime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU interrupt time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentinterrupttime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentinterrupttime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU idle time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentidletime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentidletime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU privileged time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentprivilegedtime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentprivilegedtime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"availablememory\",\r\n            \"counterSpecifier\": \"/builtin/memory/availablememory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap percent used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentusedswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentusedswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"usedmemory\",\r\n            \"counterSpecifier\": \"/builtin/memory/usedmemory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Page reads\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pagesreadpersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pagesreadpersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"availableswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/availableswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap percent available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentavailableswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentavailableswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Mem. percent available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentavailablememory\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentavailablememory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Pages\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pagespersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pagespersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"usedswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/usedswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory percentage\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentusedmemory\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentusedmemory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Page writes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pageswrittenpersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pageswrittenpersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          }\r\n        ]\r\n      },\r\n      \"syslogEvents\": {\r\n        \"syslogEventConfiguration\": {\r\n          \"LOG_AUTH\": \"LOG_DEBUG\",\r\n          \"LOG_AUTHPRIV\": \"LOG_DEBUG\",\r\n          \"LOG_CRON\": \"LOG_DEBUG\",\r\n          \"LOG_DAEMON\": \"LOG_DEBUG\",\r\n          \"LOG_FTP\": \"LOG_DEBUG\",\r\n          \"LOG_KERN\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL0\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL1\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL2\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL3\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL4\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL5\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL6\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL7\": \"LOG_DEBUG\",\r\n          \"LOG_LPR\": \"LOG_DEBUG\",\r\n          \"LOG_MAIL\": \"LOG_DEBUG\",\r\n          \"LOG_NEWS\": \"LOG_DEBUG\",\r\n          \"LOG_SYSLOG\": \"LOG_DEBUG\",\r\n          \"LOG_USER\": \"LOG_DEBUG\",\r\n          \"LOG_UUCP\": \"LOG_DEBUG\"\r\n        }\r\n      }\r\n    },\r\n    \"sampleRateInSeconds\": 15\r\n  },\r\n  \"WadCfg\": {\r\n    \"DiagnosticMonitorConfiguration\": {\r\n      \"overallQuotaInMB\": 10000,\r\n      \"DiagnosticInfrastructureLogs\": {\r\n        \"scheduledTransferLogLevelFilter\": \"Error\"\r\n      },\r\n      \"PerformanceCounters\": {\r\n        \"scheduledTransferPeriod\": \"PT1M\",\r\n        \"PerformanceCounterConfiguration\": []\r\n      },\r\n      \"WindowsEventLog\": {\r\n        \"scheduledTransferPeriod\": \"PT5M\",\r\n        \"DataSource\": [\r\n          {\r\n            \"name\": \"Application!*[System[(Level = 1 or Level = 2)]]\"\r\n          },\r\n          {\r\n            \"name\": \"Security!*[System[(Level = 1 or Level = 2)]\"\r\n          },\r\n          {\r\n            \"name\": \"System!*[System[(Level = 1 or Level = 2)]]\"\r\n          },\r\n          {\r\n            \"name\": \"Microsoft-Windows-DSC/Operational!*[System[(EventID=4249 or EventID=4097)]]\"\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}')]",
            "OSType": "[variables('computeGlobal').OSType]",
            "DataDiskInfo": "[variables('computeGlobal').DataDiskInfo]",
            "DeploymentName": "[if(contains(toLower(deployment().name), 'vmapp'), 'AppServers', replace(deployment().name, format('dp{0}-', variables('Deployment')), ''))]",
            "AppServers": "[parameters('DeploymentInfo').AppServers[variables('DeploymentName')]]",
            "HubKVJ": "[json(parameters('Global').hubKV)]",
            "HubRGJ": "[json(parameters('Global').hubRG)]",
            "gh": {
              "hubKVPrefix": "[if(contains(variables('HubKVJ'), 'Prefix'), variables('HubKVJ').Prefix, parameters('Prefix'))]",
              "hubKVOrgName": "[if(contains(variables('HubKVJ'), 'OrgName'), variables('HubKVJ').OrgName, parameters('Global').OrgName)]",
              "hubKVAppName": "[if(contains(variables('HubKVJ'), 'AppName'), variables('HubKVJ').AppName, parameters('Global').AppName)]",
              "hubKVRGName": "[if(contains(variables('HubKVJ'), 'RG'), variables('HubKVJ').RG, variables('HubRGJ').name)]"
            },
            "HubKVRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').hubKVPrefix, variables('gh').hubKVOrgName, variables('gh').hubKVAppName, variables('gh').hubKVRGName)]",
            "HubKVName": "[toLower(format('{0}-{1}-{2}-{3}-kv{4}', variables('gh').hubKVPrefix, variables('gh').hubKVOrgName, variables('gh').hubKVAppName, variables('gh').hubKVRGName, variables('HubKVJ').name))]"
          },
          "resources": [
            {
              "condition": "[variables('VMs')[copyIndex()].match]",
              "copy": {
                "name": "VM",
                "count": "[length(variables('AppServers'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dp{0}-VM-Deploy-{1}', variables('Deployment'), variables('AppServers')[copyIndex()].Name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "Prefix": {
                    "value": "[parameters('Prefix')]"
                  },
                  "DeploymentID": {
                    "value": "[parameters('DeploymentID')]"
                  },
                  "Environment": {
                    "value": "[parameters('Environment')]"
                  },
                  "AppServer": {
                    "value": "[variables('AppServers')[copyIndex()]]"
                  },
                  "VM": {
                    "value": "[variables('VMs')[copyIndex()]]"
                  },
                  "DeploymentName": {
                    "value": "[variables('DeploymentName')]"
                  },
                  "Global": {
                    "value": "[parameters('Global')]"
                  },
                  "vmAdminPassword": {
                    "reference": {
                      "keyVault": {
                        "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults', variables('HubKVName'))]"
                      },
                      "secretName": "localadmin"
                    }
                  },
                  "devOpsPat": {
                    "reference": {
                      "keyVault": {
                        "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults', variables('HubKVName'))]"
                      },
                      "secretName": "devOpsPat"
                    }
                  },
                  "sshPublic": {
                    "reference": {
                      "keyVault": {
                        "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults', variables('HubKVName'))]"
                      },
                      "secretName": "sshPublic"
                    }
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1318.3566",
                      "templateHash": "10183346640093717410"
                    }
                  },
                  "parameters": {
                    "Prefix": {
                      "type": "string"
                    },
                    "DeploymentID": {
                      "type": "string"
                    },
                    "Environment": {
                      "type": "string"
                    },
                    "VM": {
                      "type": "object"
                    },
                    "AppServer": {
                      "type": "object"
                    },
                    "Global": {
                      "type": "object"
                    },
                    "DeploymentName": {
                      "type": "string"
                    },
                    "vmAdminPassword": {
                      "type": "secureString"
                    },
                    "devOpsPat": {
                      "type": "secureString"
                    },
                    "sshPublic": {
                      "type": "secureString"
                    },
                    "saKey": {
                      "type": "secureString",
                      "defaultValue": "[newGuid()]"
                    },
                    "deploymentTime": {
                      "type": "string",
                      "defaultValue": "[utcNow()]"
                    }
                  },
                  "variables": {
                    "Deployment": "[format('{0}-{1}-{2}-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID'))]",
                    "DeploymentURI": "[toLower(format('{0}{1}{2}{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID')))]",
                    "computeGlobal": "[json('{\r\n  \"DataDiskInfo\": {\r\n    \"0GB\": {},\r\n    \"32GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            32\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GBSS\": {\r\n      \"DATASS\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GB-2\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ],\r\n          [\r\n            1,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"128GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            128\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"FIL64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"SOFS\": {\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            1,\r\n            32\r\n          ],\r\n          [\r\n            2,\r\n            32\r\n          ],\r\n          [\r\n            3,\r\n            32\r\n          ]\r\n        ],\r\n        \"FileSystem\": \"ReFS\",\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"SQL64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"LOGS\": {\r\n        \"DriveLetter\": \"G\",\r\n        \"caching\": \"None\",\r\n        \"LUNS\": [\r\n          [\r\n            8,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"TEMPDB\": {\r\n        \"DriveLetter\": \"H\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            12,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"BACKUP\": {\r\n        \"DriveLetter\": \"I\",\r\n        \"caching\": \"None\",\r\n        \"LUNS\": [\r\n          [\r\n            15,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    }\r\n  },\r\n  \"computeSizeLookupOptions\": {\r\n    \"API-P\": \"Standard_D4s_v3\",\r\n    \"API-D\": \"Standard_D4s_v3\",\r\n    \"API-S\": \"Standard_D2s_v3\",\r\n    \"SF-P\": \"Standard_D4s_v3\",\r\n    \"SF-D\": \"Standard_D2s_v3\",\r\n    \"SF-S\": \"Standard_D2s_v3\",\r\n    \"CTNR-P\": \"Standard_D4s_v3\",\r\n    \"CTNR-D\": \"Standard_D2s_v3\",\r\n    \"ADp-P\": \"Standard_D2s_v3\",\r\n    \"ADp-D\": \"Standard_A2m_v2\",\r\n    \"ADs-P\": \"Standard_D2s_v3\",\r\n    \"ADs-D\": \"Standard_A2m_v2\",\r\n    \"AAP-P\": \"Standard_D2s_v3\",\r\n    \"AAP-D\": \"Standard_D2s_v3\",\r\n    \"DNS-P\": \"Standard_D2s_v3\",\r\n    \"DNS-D\": \"Standard_D2s_v3\",\r\n    \"BUS-P\": \"Standard_DS2_v2\",\r\n    \"BUS-D\": \"Standard_DS2_v2\",\r\n    \"LIN-P\": \"Standard_DS2_v2\",\r\n    \"LIN-D\": \"Standard_DS2_v2\",\r\n    \"FIL-P\": \"Standard_D4s_v3\",\r\n    \"FIL-D\": \"Standard_D4s_v3\",\r\n    \"DFS-P\": \"Standard_D4s_v3\",\r\n    \"DFS-D\": \"Standard_D4s_v3\",\r\n    \"JMP-P\": \"Standard_D4s_v3\",\r\n    \"JMP-D\": \"Standard_D4s_v3\",\r\n    \"CLT-P\": \"Standard_D4s_v3\",\r\n    \"CLT-D\": \"Standard_D4s_v3\",\r\n    \"PXY-P\": \"Standard_D4s_v3\",\r\n    \"PXY-D\": \"Standard_D2s_v3\",\r\n    \"CLS01-D\": \"Standard_D4s_v3\",\r\n    \"CLS02-D\": \"Standard_D4s_v3\",\r\n    \"CLS01-P\": \"Standard_D4s_v3\",\r\n    \"CLS02-P\": \"Standard_D4s_v3\",\r\n    \"FW-P\": \"Standard_F4\",\r\n    \"FW-D\": \"Standard_F2\"\r\n  },\r\n  \"OSType\": {\r\n    \"Server2022SSIMG\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/b8f402aa-20f7-4888-b45c-3cf086dad9c3/resourceGroups/ACU1-BRW-AOA-RG-G1/providers/Microsoft.Compute/galleries/acu1brwaoag1gallery01/images/vmss2022\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SSIMG\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/b8f402aa-20f7-4888-b45c-3cf086dad9c3/resourceGroups/ACU1-BRW-AOA-RG-G1/providers/Microsoft.Compute/galleries/acu1brwaoag1gallery01/images/vmss2019webnetcore27\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"cbld10\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/27b750cd-ed43-42fd-9044-8d75e124ae55/resourceGroups/SBID-Build-Test/providers/Microsoft.Compute/galleries/cbldtest/images/cbld10-ext\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 1,\r\n        \"IaaSDiagnostics\": 1,\r\n        \"Antimalware\": 0,\r\n        \"DependencyAgent\": 1,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Win10O365\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsDesktop\",\r\n        \"offer\": \"office-365\",\r\n        \"sku\": \"rs5-evd-o365pp\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Client\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Win10\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsDesktop\",\r\n        \"offer\": \"Windows-10\",\r\n        \"sku\": \"21h1-pro-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Client\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"SQLServer2016\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftSQLServer\",\r\n        \"Offer\": \"SQL2016SP2-WS2016\",\r\n        \"sku\": \"Enterprise\",\r\n        \"version\": \"latest\"\r\n      },\r\n      // \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016Core\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-Server-Core\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016small\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016Coresmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-Server-Core-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019-gen2\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"windowsserver-gen2preview\",\r\n        \"sku\": \"2019-Datacenter-gen2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2022\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2022-Datacenter-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"_plan\": {\r\n        \"name\": \"windows-server-2022\",\r\n        \"publisher\": \"microsoftwindowsserver\",\r\n        \"product\": \"microsoftserveroperatingsystems-previews\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2022Containerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"datacenter-core-20h2-with-containers-smalldisk-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Core\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-Core\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019small\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-datacenter-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Coresmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-Server-Core-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Containerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019CoreContainerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-datacenter-core-with-containers-smalldisk-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016SS\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-with-Containers\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SSgs\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers-gs\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SS\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"NetScaler\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"citrix\",\r\n        \"Offer\": \"netscalervpx-120\",\r\n        \"Sku\": \"netscalerbyol\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"netscalerbyol\",\r\n        \"publisher\": \"citrix\",\r\n        \"product\": \"netscalervpx-120\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"MaxLoadBalancer\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"loadbalancer\",\r\n        \"offer\": \"loadbalancer-org-load-balancer-for-azure\",\r\n        \"sku\": \"max_load_balancer\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"max_load_balancer\",\r\n        \"publisher\": \"loadbalancer\",\r\n        \"product\": \"loadbalancer-org-load-balancer-for-azure\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortigate\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet_fortigate-vm_v5\",\r\n        \"sku\": \"fortinet_fg-vm\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"fortinet_fg-vm\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet_fortigate-vm_v5\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortigatepayg\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet_fortigate-vm_v5\",\r\n        \"sku\": \"fortinet_fg-vm_payg\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"fortinet_fg-vm_payg\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet_fortigate-vm_v5\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortimngr\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet-fortimanager\",\r\n        \"sku\": \"fortinet-fortimanager\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 3,\r\n      \"plan\": {\r\n        \"name\": \"fortinet-fortimanager\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet-fortimanager\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"UbuntuServer1904\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"canonical\",\r\n        \"offer\": \"UbuntuServer\",\r\n        \"sku\": \"19.04\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"Antimalware\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 1,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0\r\n      }\r\n    },\r\n    \"Bus-debian\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"credativ\",\r\n        \"offer\": \"Debian\",\r\n        \"sku\": \"8\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 1,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"PROXY-UBUNTU\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"Canonical\",\r\n        \"offer\": \"UbuntuServer\",\r\n        \"sku\": \"16.04-LTS\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"fileUris\": \"[concat(parameters(''global'')._artifactsLocation, ''/scripts/pxy.zip\",\r\n      \"commandToExecute\": \"[concat(''sudo apt-get update && sudo apt-get install unzip && unzip Proxy.zip && sudo bash -x haproxyvm-configure.sh '', '' -a '', ''ilbIPAddress'', '' -r '', ''ilbRabbitMqPort'', '' -m '', ''ilbRabbitMqMgmtPort'', '' -b '', ''dnsName'', ''.'', ''location'', ''.cloudapp.azure.com -p '', ''vmNamePrefix'', ''0 -s '', ''vmNamePrefix'', ''1'')]\",\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"CentOS75\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"OpenLogic\",\r\n        \"Offer\": \"CentOS\",\r\n        \"sku\": \"7.5\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"Antimalware\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    }\r\n  },\r\n  \"ladCfg\": {\r\n    \"diagnosticMonitorConfiguration\": {\r\n      \"eventVolume\": \"Medium\",\r\n      \"metrics\": {\r\n        \"metricAggregation\": [\r\n          {\r\n            \"scheduledTransferPeriod\": \"PT1H\"\r\n          },\r\n          {\r\n            \"scheduledTransferPeriod\": \"PT1M\"\r\n          }\r\n        ],\r\n        \"resourceId\": \"__VM_RESOURCE_ID__\"\r\n      },\r\n      \"performanceCounters\": {\r\n        \"performanceCounterConfiguration\": [\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk read guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readbytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/readbytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk writes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/writespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk transfer time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagetransfertime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagetransfertime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk transfers\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"transferspersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/transferspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk write guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writebytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/writebytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk read time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagereadtime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagereadtime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk write time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagewritetime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagewritetime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk total bytes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/bytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk reads\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readspersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/readspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk queue length\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagediskqueuelength\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagediskqueuelength\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network in guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytesreceived\",\r\n            \"counterSpecifier\": \"/builtin/network/bytesreceived\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network total bytes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytestotal\",\r\n            \"counterSpecifier\": \"/builtin/network/bytestotal\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network out guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytestransmitted\",\r\n            \"counterSpecifier\": \"/builtin/network/bytestransmitted\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network collisions\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totalcollisions\",\r\n            \"counterSpecifier\": \"/builtin/network/totalcollisions\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets received errors\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totalrxerrors\",\r\n            \"counterSpecifier\": \"/builtin/network/totalrxerrors\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets sent\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"packetstransmitted\",\r\n            \"counterSpecifier\": \"/builtin/network/packetstransmitted\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets received\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"packetsreceived\",\r\n            \"counterSpecifier\": \"/builtin/network/packetsreceived\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets sent errors\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totaltxerrors\",\r\n            \"counterSpecifier\": \"/builtin/network/totaltxerrors\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem transfers/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"transferspersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/transferspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % free space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentfreespace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentfreespace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % used space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusedspace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentusedspace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem used space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"usedspace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/usedspace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem read bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytesreadpersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/bytesreadpersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem free space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"freespace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/freespace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % free inodes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentfreeinodes\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentfreeinodes\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/bytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem reads/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readspersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/readspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem write bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"byteswrittenpersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/byteswrittenpersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem writes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writespersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/writespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % used inodes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusedinodes\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentusedinodes\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU IO wait time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentiowaittime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentiowaittime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU user time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusertime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentusertime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU nice time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentnicetime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentnicetime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU percentage guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentprocessortime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentprocessortime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU interrupt time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentinterrupttime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentinterrupttime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU idle time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentidletime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentidletime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU privileged time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentprivilegedtime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentprivilegedtime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"availablememory\",\r\n            \"counterSpecifier\": \"/builtin/memory/availablememory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap percent used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentusedswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentusedswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"usedmemory\",\r\n            \"counterSpecifier\": \"/builtin/memory/usedmemory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Page reads\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pagesreadpersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pagesreadpersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"availableswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/availableswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap percent available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentavailableswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentavailableswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Mem. percent available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentavailablememory\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentavailablememory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Pages\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pagespersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pagespersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"usedswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/usedswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory percentage\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentusedmemory\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentusedmemory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Page writes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pageswrittenpersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pageswrittenpersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          }\r\n        ]\r\n      },\r\n      \"syslogEvents\": {\r\n        \"syslogEventConfiguration\": {\r\n          \"LOG_AUTH\": \"LOG_DEBUG\",\r\n          \"LOG_AUTHPRIV\": \"LOG_DEBUG\",\r\n          \"LOG_CRON\": \"LOG_DEBUG\",\r\n          \"LOG_DAEMON\": \"LOG_DEBUG\",\r\n          \"LOG_FTP\": \"LOG_DEBUG\",\r\n          \"LOG_KERN\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL0\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL1\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL2\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL3\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL4\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL5\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL6\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL7\": \"LOG_DEBUG\",\r\n          \"LOG_LPR\": \"LOG_DEBUG\",\r\n          \"LOG_MAIL\": \"LOG_DEBUG\",\r\n          \"LOG_NEWS\": \"LOG_DEBUG\",\r\n          \"LOG_SYSLOG\": \"LOG_DEBUG\",\r\n          \"LOG_USER\": \"LOG_DEBUG\",\r\n          \"LOG_UUCP\": \"LOG_DEBUG\"\r\n        }\r\n      }\r\n    },\r\n    \"sampleRateInSeconds\": 15\r\n  },\r\n  \"WadCfg\": {\r\n    \"DiagnosticMonitorConfiguration\": {\r\n      \"overallQuotaInMB\": 10000,\r\n      \"DiagnosticInfrastructureLogs\": {\r\n        \"scheduledTransferLogLevelFilter\": \"Error\"\r\n      },\r\n      \"PerformanceCounters\": {\r\n        \"scheduledTransferPeriod\": \"PT1M\",\r\n        \"PerformanceCounterConfiguration\": []\r\n      },\r\n      \"WindowsEventLog\": {\r\n        \"scheduledTransferPeriod\": \"PT5M\",\r\n        \"DataSource\": [\r\n          {\r\n            \"name\": \"Application!*[System[(Level = 1 or Level = 2)]]\"\r\n          },\r\n          {\r\n            \"name\": \"Security!*[System[(Level = 1 or Level = 2)]\"\r\n          },\r\n          {\r\n            \"name\": \"System!*[System[(Level = 1 or Level = 2)]]\"\r\n          },\r\n          {\r\n            \"name\": \"Microsoft-Windows-DSC/Operational!*[System[(EventID=4249 or EventID=4097)]]\"\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}')]",
                    "OSType": "[variables('computeGlobal').OSType]",
                    "WadCfg": "[variables('computeGlobal').WadCfg]",
                    "ladCfg": "[variables('computeGlobal').ladCfg]",
                    "DataDiskInfo": "[variables('computeGlobal').DataDiskInfo]",
                    "computeSizeLookupOptions": "[variables('computeGlobal').computeSizeLookupOptions]",
                    "RGName": "[format('{0}-{1}-{2}-RG-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').AppName, parameters('Environment'), parameters('DeploymentID'))]",
                    "GlobalRGJ": "[json(parameters('Global').GlobalRG)]",
                    "GlobalSAJ": "[json(parameters('Global').GlobalSA)]",
                    "HubKVJ": "[json(parameters('Global').hubKV)]",
                    "HubRGJ": "[json(parameters('Global').hubRG)]",
                    "HubAAJ": "[json(parameters('Global').hubAA)]",
                    "regionLookup": "[json('{\r\n  \"francecentral\": {\r\n    \"displayname\": \"France Central\",\r\n    \"location\": \"francecentral\",\r\n    \"PREFIX\": \"AFC1\",\r\n    \"pairedRegion\": \"francesouth\"\r\n  },\r\n  \"southeastasia\": {\r\n    \"displayname\": \"Southeast Asia\",\r\n    \"location\": \"southeastasia\",\r\n    \"PREFIX\": \"ASA1\",\r\n    \"pairedRegion\": \"eastasia\"\r\n  },\r\n  \"southafricawest\": {\r\n    \"displayname\": \"South Africa West\",\r\n    \"location\": \"southafricawest\",\r\n    \"PREFIX\": \"ASAW\",\r\n    \"pairedRegion\": \"southafricanorth\"\r\n  },\r\n  \"eastus2\": {\r\n    \"displayname\": \"East US 2\",\r\n    \"location\": \"eastus2\",\r\n    \"PREFIX\": \"AEU2\",\r\n    \"pairedRegion\": \"centralus\"\r\n  },\r\n  \"eastus\": {\r\n    \"displayname\": \"East US\",\r\n    \"location\": \"eastus\",\r\n    \"PREFIX\": \"AEU1\",\r\n    \"pairedRegion\": \"westus\"\r\n  },\r\n  \"jioindiawest\": {\r\n    \"displayname\": \"Jio India West\",\r\n    \"location\": \"jioindiawest\",\r\n    \"PREFIX\": \"AJIW\",\r\n    \"pairedRegion\": \"jioindiacentral\"\r\n  },\r\n  \"westcentralus\": {\r\n    \"displayname\": \"West Central US\",\r\n    \"location\": \"westcentralus\",\r\n    \"PREFIX\": \"AWCU\",\r\n    \"pairedRegion\": \"westus2\"\r\n  },\r\n  \"koreacentral\": {\r\n    \"displayname\": \"Korea Central\",\r\n    \"location\": \"koreacentral\",\r\n    \"PREFIX\": \"AKC1\",\r\n    \"pairedRegion\": \"koreasouth\"\r\n  },\r\n  \"uaecentral\": {\r\n    \"displayname\": \"UAE Central\",\r\n    \"location\": \"uaecentral\",\r\n    \"PREFIX\": \"AUC1\",\r\n    \"pairedRegion\": \"uaenorth\"\r\n  },\r\n  \"westus\": {\r\n    \"displayname\": \"West US\",\r\n    \"location\": \"westus\",\r\n    \"PREFIX\": \"AWU1\",\r\n    \"pairedRegion\": \"eastus\"\r\n  },\r\n  \"southafricanorth\": {\r\n    \"displayname\": \"South Africa North\",\r\n    \"location\": \"southafricanorth\",\r\n    \"PREFIX\": \"ASAN\",\r\n    \"pairedRegion\": \"southafricawest\"\r\n  },\r\n  \"australiacentral2\": {\r\n    \"displayname\": \"Australia Central 2\",\r\n    \"location\": \"australiacentral2\",\r\n    \"PREFIX\": \"AAC2\",\r\n    \"pairedRegion\": \"australiacentral2\"\r\n  },\r\n  \"francesouth\": {\r\n    \"displayname\": \"France South\",\r\n    \"location\": \"francesouth\",\r\n    \"PREFIX\": \"AFS1\",\r\n    \"pairedRegion\": \"francecentral\"\r\n  },\r\n  \"ukwest\": {\r\n    \"displayname\": \"UK West\",\r\n    \"location\": \"ukwest\",\r\n    \"PREFIX\": \"AUW1\",\r\n    \"pairedRegion\": \"uksouth\"\r\n  },\r\n  \"southindia\": {\r\n    \"displayname\": \"South India\",\r\n    \"location\": \"southindia\",\r\n    \"PREFIX\": \"ASI1\",\r\n    \"pairedRegion\": \"centralindia\"\r\n  },\r\n  \"centralus\": {\r\n    \"displayname\": \"Central US\",\r\n    \"location\": \"centralus\",\r\n    \"PREFIX\": \"ACU1\",\r\n    \"pairedRegion\": \"eastus2\"\r\n  },\r\n  \"germanynorth\": {\r\n    \"displayname\": \"Germany North\",\r\n    \"location\": \"germanynorth\",\r\n    \"PREFIX\": \"AGN1\",\r\n    \"pairedRegion\": \"germanywestcentral\"\r\n  },\r\n  \"koreasouth\": {\r\n    \"displayname\": \"Korea South\",\r\n    \"location\": \"koreasouth\",\r\n    \"PREFIX\": \"AKS1\",\r\n    \"pairedRegion\": \"koreacentral\"\r\n  },\r\n  \"westindia\": {\r\n    \"displayname\": \"West India\",\r\n    \"location\": \"westindia\",\r\n    \"PREFIX\": \"AWI1\",\r\n    \"pairedRegion\": \"southindia\"\r\n  },\r\n  \"westus2\": {\r\n    \"displayname\": \"West US 2\",\r\n    \"location\": \"westus2\",\r\n    \"PREFIX\": \"AWU2\",\r\n    \"pairedRegion\": \"westcentralus\"\r\n  },\r\n  \"northcentralus\": {\r\n    \"displayname\": \"North Central US\",\r\n    \"location\": \"northcentralus\",\r\n    \"PREFIX\": \"ANCU\",\r\n    \"pairedRegion\": \"southcentralus\"\r\n  },\r\n  \"westeurope\": {\r\n    \"displayname\": \"West Europe\",\r\n    \"location\": \"westeurope\",\r\n    \"PREFIX\": \"AWEU\",\r\n    \"pairedRegion\": \"northeurope\"\r\n  },\r\n  \"canadacentral\": {\r\n    \"displayname\": \"Canada Central\",\r\n    \"location\": \"canadacentral\",\r\n    \"PREFIX\": \"ACC1\",\r\n    \"pairedRegion\": \"canadaeast\"\r\n  },\r\n  \"southcentralus\": {\r\n    \"displayname\": \"South Central US\",\r\n    \"location\": \"southcentralus\",\r\n    \"PREFIX\": \"ASCU\",\r\n    \"pairedRegion\": \"northcentralus\"\r\n  },\r\n  \"norwayeast\": {\r\n    \"displayname\": \"Norway East\",\r\n    \"location\": \"norwayeast\",\r\n    \"PREFIX\": \"ANE1\",\r\n    \"pairedRegion\": \"norwaywest\"\r\n  },\r\n  \"japanwest\": {\r\n    \"displayname\": \"Japan West\",\r\n    \"location\": \"japanwest\",\r\n    \"PREFIX\": \"AJW1\",\r\n    \"pairedRegion\": \"japaneast\"\r\n  },\r\n  \"norwaywest\": {\r\n    \"displayname\": \"Norway West\",\r\n    \"location\": \"norwaywest\",\r\n    \"PREFIX\": \"ANW1\",\r\n    \"pairedRegion\": \"norwayeast\"\r\n  },\r\n  \"jioindiacentral\": {\r\n    \"displayname\": \"Jio India Central\",\r\n    \"location\": \"jioindiacentral\",\r\n    \"PREFIX\": \"AJIC\",\r\n    \"pairedRegion\": \"jioindiawest\"\r\n  },\r\n  \"centralindia\": {\r\n    \"displayname\": \"Central India\",\r\n    \"location\": \"centralindia\",\r\n    \"PREFIX\": \"ACI1\",\r\n    \"pairedRegion\": \"southindia\"\r\n  },\r\n  \"westus3\": {\r\n    \"displayname\": \"West US 3\",\r\n    \"location\": \"westus3\",\r\n    \"PREFIX\": \"AWU3\",\r\n    \"pairedRegion\": \"eastus\"\r\n  },\r\n  \"brazilsouth\": {\r\n    \"displayname\": \"Brazil South\",\r\n    \"location\": \"brazilsouth\",\r\n    \"PREFIX\": \"ABS1\",\r\n    \"pairedRegion\": \"southcentralus\"\r\n  },\r\n  \"eastasia\": {\r\n    \"displayname\": \"East Asia\",\r\n    \"location\": \"eastasia\",\r\n    \"PREFIX\": \"AEA1\",\r\n    \"pairedRegion\": \"southeastasia\"\r\n  },\r\n  \"swedencentral\": {\r\n    \"displayname\": \"Sweden Central\",\r\n    \"location\": \"swedencentral\",\r\n    \"PREFIX\": \"ASC1\",\r\n    \"pairedRegion\": \"swedensouth\"\r\n  },\r\n  \"uksouth\": {\r\n    \"displayname\": \"UK South\",\r\n    \"location\": \"uksouth\",\r\n    \"PREFIX\": \"AUS1\",\r\n    \"pairedRegion\": \"ukwest\"\r\n  },\r\n  \"switzerlandnorth\": {\r\n    \"displayname\": \"Switzerland North\",\r\n    \"location\": \"switzerlandnorth\",\r\n    \"PREFIX\": \"ASN1\",\r\n    \"pairedRegion\": \"switzerlandwest\"\r\n  },\r\n  \"canadaeast\": {\r\n    \"displayname\": \"Canada East\",\r\n    \"location\": \"canadaeast\",\r\n    \"PREFIX\": \"ACE1\",\r\n    \"pairedRegion\": \"canadacentral\"\r\n  },\r\n  \"australiasoutheast\": {\r\n    \"displayname\": \"Australia Southeast\",\r\n    \"location\": \"australiasoutheast\",\r\n    \"PREFIX\": \"AAS1\",\r\n    \"pairedRegion\": \"australiaeast\"\r\n  },\r\n  \"northeurope\": {\r\n    \"displayname\": \"North Europe\",\r\n    \"location\": \"northeurope\",\r\n    \"PREFIX\": \"ANEU\",\r\n    \"pairedRegion\": \"westeurope\"\r\n  },\r\n  \"germanywestcentral\": {\r\n    \"displayname\": \"Germany West Central\",\r\n    \"location\": \"germanywestcentral\",\r\n    \"PREFIX\": \"AGWC\",\r\n    \"pairedRegion\": \"germanynorth\"\r\n  },\r\n  \"japaneast\": {\r\n    \"displayname\": \"Japan East\",\r\n    \"location\": \"japaneast\",\r\n    \"PREFIX\": \"AJE1\",\r\n    \"pairedRegion\": \"japanwest\"\r\n  },\r\n  \"uaenorth\": {\r\n    \"displayname\": \"UAE North\",\r\n    \"location\": \"uaenorth\",\r\n    \"PREFIX\": \"AUN1\",\r\n    \"pairedRegion\": \"uaecentral\"\r\n  },\r\n  \"australiaeast\": {\r\n    \"displayname\": \"Australia East\",\r\n    \"location\": \"australiaeast\",\r\n    \"PREFIX\": \"AAE1\",\r\n    \"pairedRegion\": \"australiasoutheast\"\r\n  },\r\n  \"switzerlandwest\": {\r\n    \"displayname\": \"Switzerland West\",\r\n    \"location\": \"switzerlandwest\",\r\n    \"PREFIX\": \"ASW1\",\r\n    \"pairedRegion\": \"switzerlandnorth\"\r\n  },\r\n  \"australiacentral\": {\r\n    \"displayname\": \"Australia Central\",\r\n    \"location\": \"australiacentral\",\r\n    \"PREFIX\": \"AAC1\",\r\n    \"pairedRegion\": \"australiacentral\"\r\n  },\r\n  \"brazilsoutheast\": {\r\n    \"displayname\": \"Brazil Southeast\",\r\n    \"location\": \"brazilsoutheast\",\r\n    \"PREFIX\": \"ABSE\",\r\n    \"pairedRegion\": \"brazilsouth\"\r\n  }\r\n}\r\n')]",
                    "primaryPrefix": "[variables('regionLookup')[parameters('Global').PrimaryLocation].prefix]",
                    "gh": {
                      "globalRGPrefix": "[if(contains(variables('GlobalRGJ'), 'Prefix'), variables('GlobalRGJ').Prefix, variables('primaryPrefix'))]",
                      "globalRGOrgName": "[if(contains(variables('GlobalRGJ'), 'OrgName'), variables('GlobalRGJ').OrgName, parameters('Global').OrgName)]",
                      "globalRGAppName": "[if(contains(variables('GlobalRGJ'), 'AppName'), variables('GlobalRGJ').AppName, parameters('Global').AppName)]",
                      "globalRGName": "[if(contains(variables('GlobalRGJ'), 'name'), variables('GlobalRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID')))]",
                      "globalSAPrefix": "[if(contains(variables('GlobalSAJ'), 'Prefix'), variables('GlobalSAJ').Prefix, variables('primaryPrefix'))]",
                      "globalSAOrgName": "[if(contains(variables('GlobalSAJ'), 'OrgName'), variables('GlobalSAJ').OrgName, parameters('Global').OrgName)]",
                      "globalSAAppName": "[if(contains(variables('GlobalSAJ'), 'AppName'), variables('GlobalSAJ').AppName, parameters('Global').AppName)]",
                      "globalSARGName": "[if(contains(variables('GlobalSAJ'), 'RG'), variables('GlobalSAJ').RG, if(contains(variables('GlobalRGJ'), 'name'), variables('GlobalRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID'))))]",
                      "hubRGPrefix": "[if(contains(variables('HubRGJ'), 'Prefix'), variables('HubRGJ').Prefix, parameters('Prefix'))]",
                      "hubRGOrgName": "[if(contains(variables('HubRGJ'), 'OrgName'), variables('HubRGJ').OrgName, parameters('Global').OrgName)]",
                      "hubRGAppName": "[if(contains(variables('HubRGJ'), 'AppName'), variables('HubRGJ').AppName, parameters('Global').AppName)]",
                      "hubRGRGName": "[if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID'))))]",
                      "hubKVPrefix": "[if(contains(variables('HubKVJ'), 'Prefix'), variables('HubKVJ').Prefix, parameters('Prefix'))]",
                      "hubKVOrgName": "[if(contains(variables('HubKVJ'), 'OrgName'), variables('HubKVJ').OrgName, parameters('Global').OrgName)]",
                      "hubKVAppName": "[if(contains(variables('HubKVJ'), 'AppName'), variables('HubKVJ').AppName, parameters('Global').AppName)]",
                      "hubKVRGName": "[if(contains(variables('HubKVJ'), 'RG'), variables('HubKVJ').RG, variables('HubRGJ').name)]",
                      "hubAAPrefix": "[if(contains(variables('HubAAJ'), 'Prefix'), variables('HubAAJ').Prefix, parameters('Prefix'))]",
                      "hubAAOrgName": "[if(contains(variables('HubAAJ'), 'OrgName'), variables('HubAAJ').OrgName, parameters('Global').OrgName)]",
                      "hubAAAppName": "[if(contains(variables('HubAAJ'), 'AppName'), variables('HubAAJ').AppName, parameters('Global').AppName)]",
                      "hubAARGName": "[if(contains(variables('HubAAJ'), 'RG'), variables('HubAAJ').RG, variables('HubRGJ').name)]"
                    },
                    "globalRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').globalRGPrefix, variables('gh').globalRGOrgName, variables('gh').globalRGAppName, variables('gh').globalRGName)]",
                    "HubRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').hubRGPrefix, variables('gh').hubRGOrgName, variables('gh').hubRGAppName, variables('gh').hubRGRGName)]",
                    "globalSAName": "[toLower(format('{0}{1}{2}{3}sa{4}', variables('gh').globalSAPrefix, variables('gh').globalSAOrgName, variables('gh').globalSAAppName, variables('gh').globalSARGName, variables('GlobalRGJ').name))]",
                    "HubKVRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').hubKVPrefix, variables('gh').hubKVOrgName, variables('gh').hubKVAppName, variables('gh').hubKVRGName)]",
                    "HubKVName": "[toLower(format('{0}-{1}-{2}-{3}-kv{4}', variables('gh').hubKVPrefix, variables('gh').hubKVOrgName, variables('gh').hubKVAppName, variables('gh').hubKVRGName, variables('HubKVJ').name))]",
                    "AAName": "[toLower(format('{0}{1}{2}{3}{4}', variables('gh').hubAAPrefix, variables('gh').hubAAOrgName, variables('gh').hubAAAppName, variables('gh').hubAARGName, variables('HubAAJ').name))]",
                    "EnvironmentLookup": {
                      "D": "Dev",
                      "T": "Test",
                      "I": "Int",
                      "U": "UAT",
                      "P": "PROD",
                      "S": "SBX"
                    },
                    "DSCConfigLookup": {
                      "AppServers": "AppServers",
                      "InitialDOP": "AppServers",
                      "WVDServers": "AppServers"
                    },
                    "AppServerSizeLookup": {
                      "D": "D",
                      "T": "D",
                      "I": "D",
                      "U": "D",
                      "P": "P",
                      "S": "D"
                    },
                    "RebootNodeLookup": {
                      "D": true,
                      "Q": true,
                      "T": true,
                      "U": true,
                      "P": false
                    },
                    "ConfigurationMode": {
                      "D": "ApplyAndAutoCorrect",
                      "Q": "ApplyAndAutoCorrect",
                      "T": "ApplyAndAutoCorrect",
                      "U": "ApplyAndAutoCorrect",
                      "P": "ApplyAndMonitor"
                    },
                    "DSCConfigurationModeFrequencyMins": 15,
                    "networkId": "[format('{0}{1}', parameters('Global').networkid[0], string(sub(parameters('Global').networkid[1], mul(2, int(parameters('DeploymentID'))))))]",
                    "storageAccountType": "[if(equals(parameters('Environment'), 'P'), if(contains(parameters('AppServer'), 'Zone'), 'Premium_LRS', 'Premium_ZRS'), if(contains(parameters('AppServer'), 'Zone'), 'StandardSSD_ZRS', 'StandardSSD_LRS'))]",
                    "SADiagName": "[format('{0}sadiag', variables('DeploymentURI'))]",
                    "saaccountiddiag": "[resourceId('Microsoft.Storage/storageAccounts/', variables('SADiagName'))]",
                    "saSQLBackupName": "[format('{0}sasqlbackup', variables('DeploymentURI'))]",
                    "MSILookup": {
                      "SQL": "Cluster",
                      "UTL": "DefaultKeyVault",
                      "FIL": "Cluster",
                      "OCR": "Storage",
                      "WVD": "WVD"
                    },
                    "userAssignedIdentities": {
                      "Cluster": {
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiKeyVaultSecretsGet', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperator', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperatorGlobal', variables('Deployment'))))]": {}
                      },
                      "Default": {
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiKeyVaultSecretsGet', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperatorGlobal', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperator', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountFileContributor', variables('Deployment'))))]": {}
                      },
                      "DefaultKeyVault": {
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperatorGlobal', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiKeyVaultSecretsGetApp', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiAzureServiceBusDataOwner', variables('Deployment'))))]": {}
                      },
                      "WVD": {
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperatorGlobal', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountFileContributor', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiWVDRegKeyReader', variables('Deployment'))))]": {}
                      },
                      "Storage": {
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountContributor', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperatorGlobal', variables('Deployment'))))]": {}
                      },
                      "None": {}
                    },
                    "ASNAME": "[if(contains(parameters('AppServer'), 'Zone'), 'usingZones', parameters('AppServer').ASNAME)]"
                  },
                  "resources": [
                    {
                      "condition": "[not(equals(variables('ASNAME'), 'usingZones'))]",
                      "type": "Microsoft.Compute/availabilitySets",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}-as{1}', variables('Deployment'), variables('ASNAME'))]",
                      "location": "[resourceGroup().location]",
                      "sku": {
                        "name": "Aligned"
                      },
                      "properties": {
                        "platformUpdateDomainCount": 5,
                        "platformFaultDomainCount": 3
                      }
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines",
                      "apiVersion": "2021-04-01",
                      "name": "[format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "location": "[resourceGroup().location]",
                      "identity": {
                        "type": "SystemAssigned, UserAssigned",
                        "userAssignedIdentities": "[if(contains(variables('MSILookup'), parameters('AppServer').ROLE), variables('userAssignedIdentities')[variables('MSILookup')[parameters('AppServer').ROLE]], variables('userAssignedIdentities').Default)]"
                      },
                      "tags": {
                        "Environment": "[variables('EnvironmentLookup')[parameters('Environment')]]",
                        "Zone": "[if(contains(parameters('AppServer'), 'Zone'), parameters('AppServer').Zone, 1)]"
                      },
                      "zones": "[if(contains(parameters('AppServer'), 'Zone'), array(parameters('AppServer').Zone), null())]",
                      "plan": "[if(contains(variables('OSType')[parameters('AppServer').OSType], 'plan'), variables('OSType')[parameters('AppServer').OSType].plan, null())]",
                      "properties": {
                        "licenseType": "[if(contains(variables('OSType')[parameters('AppServer').OSType], 'licenseType'), variables('OSType')[parameters('AppServer').OSType].licenseType, null())]",
                        "availabilitySet": "[if(contains(parameters('AppServer'), 'Zone'), null(), createObject('id', format('{0}', resourceId('Microsoft.Compute/availabilitySets', format('{0}-as{1}', variables('Deployment'), parameters('AppServer').ASName)))))]",
                        "hardwareProfile": {
                          "vmSize": "[variables('computeSizeLookupOptions')[format('{0}-{1}', parameters('AppServer').ROLE, variables('AppServerSizeLookup')[parameters('Environment')])]]"
                        },
                        "osProfile": {
                          "computerName": "[parameters('VM').vmHostName]",
                          "adminUsername": "[if(contains(parameters('AppServer'), 'AdminUser'), parameters('AppServer').AdminUser, parameters('Global').vmAdminUserName)]",
                          "adminPassword": "[parameters('vmAdminPassword')]",
                          "customData": "[if(contains(parameters('AppServer'), 'customData'), base64(replace(parameters('AppServer').customData, '{0}', format('{0}.', variables('networkId')))), null())]",
                          "secrets": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), createArray(createObject('sourceVault', createObject('id', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults', variables('HubKVName'))), 'vaultCertificates', createArray(createObject('certificateUrl', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults/secrets', variables('HubKVName'), parameters('Global').CertName), '2021-06-01-preview').secretUriWithVersion, 'certificateStore', 'My'), createObject('certificateUrl', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults/secrets', variables('HubKVName'), parameters('Global').CertName), '2021-06-01-preview').secretUriWithVersion, 'certificateStore', 'Root'), createObject('certificateUrl', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults/secrets', variables('HubKVName'), parameters('Global').CertName), '2021-06-01-preview').secretUriWithVersion, 'certificateStore', 'CA')))), null())]",
                          "windowsConfiguration": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), parameters('VM').windowsConfiguration, null())]",
                          "linuxConfiguration": "[if(not(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows')), parameters('VM').linuxConfiguration, null())]"
                        },
                        "storageProfile": {
                          "imageReference": "[variables('OSType')[parameters('AppServer').OSType].imageReference]",
                          "osDisk": {
                            "name": "[format('{0}-{1}-OSDisk', variables('Deployment'), parameters('AppServer').Name)]",
                            "caching": "ReadWrite",
                            "diskSizeGB": "[variables('OSType')[parameters('AppServer').OSType].OSDiskGB]",
                            "createOption": "FromImage",
                            "managedDisk": {
                              "storageAccountType": "[if(contains(parameters('AppServer'), 'OSstorageAccountType'), parameters('AppServer').OSstorageAccountType, variables('storageAccountType'))]"
                            }
                          },
                          "dataDisks": "[reference(resourceId('Microsoft.Resources/deployments', format('dp{0}-AppServer-diskLookup{1}', variables('Deployment'), parameters('AppServer').Name))).outputs.DATADisks.value]"
                        },
                        "networkProfile": {
                          "copy": [
                            {
                              "name": "networkInterfaces",
                              "count": "[length(parameters('AppServer').NICs)]",
                              "input": {
                                "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}{1}{2}{3}', variables('Deployment'), if(contains(parameters('AppServer').NICs[copyIndex('networkInterfaces')], 'LB'), '-niclb', if(contains(parameters('AppServer').NICs[copyIndex('networkInterfaces')], 'PLB'), '-nicplb', if(contains(parameters('AppServer').NICs[copyIndex('networkInterfaces')], 'SLB'), '-nicslb', '-nic'))), if(equals(copyIndex('networkInterfaces'), 0), '', add(copyIndex('networkInterfaces'), 1)), parameters('AppServer').Name))]",
                                "properties": {
                                  "primary": "[contains(parameters('AppServer').NICs[copyIndex('networkInterfaces')], 'Primary')]",
                                  "deleteOption": "Delete"
                                }
                              }
                            }
                          ]
                        },
                        "diagnosticsProfile": {
                          "bootDiagnostics": {
                            "enabled": true,
                            "storageUri": "[format('https://{0}.blob.{1}', variables('SADiagName'), environment().suffixes.storage)]"
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-AppServer-nicDeployLoop{1}', variables('Deployment'), parameters('AppServer').Name))]",
                        "[resourceId('Microsoft.Compute/availabilitySets', format('{0}-as{1}', variables('Deployment'), variables('ASNAME')))]",
                        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-AppServer-diskLookup{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, contains(parameters('AppServer'), 'shutdown'))]",
                      "type": "Microsoft.DevTestLab/schedules",
                      "apiVersion": "2018-09-15",
                      "name": "[format('shutdown-computevm-{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "dailyRecurrence": {
                          "time": "[parameters('AppServer').shutdown.time]"
                        },
                        "notificationSettings": {
                          "status": "[if(and(contains(parameters('AppServer').shutdown, 'notification'), bool(parameters('AppServer').shutdown.notification)), 'Enabled', 'Disabled')]",
                          "emailRecipient": "[replace(replace(replace(string(parameters('Global').alertRecipients), '\",\"', ';'), '[\"', ''), '\"]', '')]",
                          "notificationLocale": "en",
                          "timeInMinutes": 30
                        },
                        "status": "[if(or(not(contains(parameters('AppServer').shutdown, 'enabled')), and(contains(parameters('AppServer').shutdown, 'enabled'), bool(parameters('AppServer').shutdown.enabled))), 'Enabled', 'Disabled')]",
                        "targetResourceId": "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]",
                        "taskType": "ComputeVmShutdownTask",
                        "timeZoneId": "[parameters('Global').shutdownSchedulerTimeZone]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.CertMgmt))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'KVAppServerExtensionForWindows')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.Azure.KeyVault.Edp",
                        "type": "KeyVaultForWindows",
                        "typeHandlerVersion": "0.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "secretsManagementSettings": {
                            "pollingIntervalInS": 3600,
                            "certificateStoreName": "MY",
                            "certificateStoreLocation": "LOCAL_MACHINE",
                            "observedCertificates": [
                              "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults/secrets', variables('HubKVName'), parameters('Global').CertName), '2021-06-01-preview').secretUri]"
                            ]
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(parameters('VM').match, bool(parameters('VM').Extensions.AADLogin)), and(contains(parameters('AppServer'), 'ExcludeAADLogin'), not(equals(parameters('AppServer').ExcludeAADLogin, 1))))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'AADLogin')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'Microsoft.Azure.ActiveDirectory', 'Microsoft.Azure.ActiveDirectory.LinuxSSH')]",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'AADLoginForWindows', 'AADLoginForLinux')]",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.AzureDefender))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'AzureDefenderForServers')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.Azure.AzureDefenderForServers",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'MDE.Windows', 'MDE.Linux')]",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "azureResourceId": "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]",
                          "defenderForServersWorkspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', variables('DeploymentURI')))]",
                          "forceReOnboarding": false
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.GuestConfig))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'AzureGuestConfig')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.GuestConfiguration",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'ConfigurationForWindows', 'ConfigurationForLinux')]",
                        "typeHandlerVersion": "1.2",
                        "autoUpgradeMinorVersion": true,
                        "settings": {}
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(parameters('VM').match, bool(parameters('VM').Extensions.AdminCenter)), and(contains(parameters('AppServer'), 'ExcludeAdminCenter'), not(equals(parameters('AppServer').ExcludeAdminCenter, 1))))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'AdminCenter')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "publisher": "Microsoft.AdminCenter",
                        "type": "AdminCenter",
                        "typeHandlerVersion": "0.0",
                        "settings": {
                          "port": "6516",
                          "cspFrameAncestors": [
                            "https://portal.azure.com",
                            "https://*.hosting.portal.azure.net",
                            "https://localhost:1340"
                          ],
                          "corsOrigins": [
                            "https://portal.azure.com",
                            "https://waconazure.com"
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(parameters('VM').match, bool(parameters('VM').Extensions.DomainJoin)), not(and(contains(parameters('AppServer'), 'ExcludeDomainJoin'), bool(parameters('AppServer').ExcludeDomainJoin))))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'joindomain')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.Compute",
                        "type": "JsonADDomainExtension",
                        "typeHandlerVersion": "1.3",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "Name": "[parameters('Global').ADDomainName]",
                          "OUPath": "[if(contains(parameters('AppServer'), 'OUPath'), parameters('AppServer').OUPath, '')]",
                          "User": "[format('{0}@{1}', parameters('Global').vmAdminUserName, parameters('Global').ADDomainName)]",
                          "Restart": "true",
                          "Options": 3
                        },
                        "protectedSettings": {
                          "Password": "[parameters('vmAdminPassword')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(parameters('VM').match, bool(parameters('VM').Extensions.DSC)), equals(parameters('AppServer').Role, 'PULL'))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'Microsoft.Powershell.DSC.Pull')]",
                      "location": "[resourceGroup().location]",
                      "tags": {
                        "displayName": "Powershell.DSC.Pull"
                      },
                      "properties": {
                        "publisher": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'Microsoft.Powershell', 'Microsoft.OSTCExtensions')]",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'DSC', 'DSCForLinux')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '2.77', '2.0')]",
                        "autoUpgradeMinorVersion": true,
                        "protectedSettings": {
                          "Items": {
                            "registrationKeyPrivate": "[listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubRGName')), 'Microsoft.Automation/automationAccounts', variables('AAName')), '2020-01-13-preview').keys[0].Value]"
                          }
                        },
                        "settings": {
                          "advancedOptions": {
                            "forcePullAndApply": true
                          },
                          "Properties": [
                            {
                              "Name": "RegistrationKey",
                              "Value": {
                                "UserName": "PLACEHOLDER_DONOTUSE",
                                "Password": "PrivateSettingsRef:registrationKeyPrivate"
                              },
                              "TypeName": "System.Management.Automation.PSCredential"
                            },
                            {
                              "Name": "RegistrationUrl",
                              "Value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubRGName')), 'Microsoft.Automation/automationAccounts', variables('AAName')), '2020-01-13-preview').RegistrationUrl]",
                              "TypeName": "System.String"
                            },
                            {
                              "Name": "NodeConfigurationName",
                              "Value": "[format('{0}.{1}_{2}_{3}_{4}{5}', if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], 'AppServers'), parameters('Global').OrgName, parameters('Global').Appname, parameters('AppServer').ROLE, parameters('Environment'), parameters('DeploymentID'))]",
                              "TypeName": "System.String"
                            },
                            {
                              "Name": "ConfigurationMode",
                              "Value": "[variables('ConfigurationMode')[parameters('Environment')]]",
                              "TypeName": "System.String"
                            },
                            {
                              "Name": "RebootNodeIfNeeded",
                              "Value": "[variables('RebootNodeLookup')[parameters('Environment')]]",
                              "TypeName": "System.Boolean"
                            },
                            {
                              "Name": "ConfigurationModeFrequencyMins",
                              "Value": "[variables('DSCConfigurationModeFrequencyMins')]",
                              "TypeName": "System.Int32"
                            },
                            {
                              "Name": "RefreshFrequencyMins",
                              "Value": 30,
                              "TypeName": "System.Int32"
                            },
                            {
                              "Name": "ActionAfterReboot",
                              "Value": "ContinueConfiguration",
                              "TypeName": "System.String"
                            },
                            {
                              "Name": "AllowModuleOverwrite",
                              "Value": true,
                              "TypeName": "System.Boolean"
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'joindomain')]",
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(and(parameters('VM').match, and(contains(parameters('VM').Extensions, 'DSC2'), bool(parameters('VM').Extensions.DSC2))), not(equals(parameters('AppServer').Role, 'PULL'))), or(or(equals(parameters('DeploymentName'), 'ConfigSQLAO'), equals(parameters('DeploymentName'), 'CreateADPDC')), equals(parameters('DeploymentName'), 'CreateADBDC')))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'Microsoft.Powershell.DSC2')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'Microsoft.Powershell', 'Microsoft.OSTCExtensions')]",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'DSC', 'DSCForLinux')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '2.24', '2.0')]",
                        "autoUpgradeMinorVersion": true,
                        "forceUpdateTag": "[parameters('deploymentTime')]",
                        "settings": {
                          "wmfVersion": "latest",
                          "configuration": {
                            "url": "[format('{0}/ext-DSC/DSC-{1}.zip', parameters('Global')._artifactsLocation, if(contains(parameters('AppServer'), 'DSConfig'), parameters('AppServer').DSConfig, if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], parameters('DeploymentName'))))]",
                            "script": "[format('DSC-{0}.ps1', if(contains(parameters('AppServer'), 'DSConfig'), parameters('AppServer').DSConfig, if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], parameters('DeploymentName'))))]",
                            "function": "[if(contains(parameters('AppServer'), 'DSConfig'), parameters('AppServer').DSConfig, if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], parameters('DeploymentName')))]"
                          },
                          "configurationArguments": {
                            "DomainName": "[parameters('Global').ADDomainName]"
                          }
                        },
                        "protectedSettings": {
                          "configurationArguments": {
                            "AdminCreds": {
                              "UserName": "[parameters('Global').vmAdminUserName]",
                              "Password": "[parameters('vmAdminPassword')]"
                            },
                            "SQLServiceCreds": {
                              "UserName": "sqladmin",
                              "Password": "[parameters('vmAdminPassword')]"
                            },
                            "witnessStorageKey": {
                              "UserName": "sakey",
                              "Password": "[parameters('saKey')]"
                            }
                          },
                          "configurationUrlSasToken": "[parameters('Global')._artifactsLocationSasToken]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'joindomain')]",
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(and(parameters('VM').match, bool(parameters('VM').Extensions.DSC)), not(equals(parameters('AppServer').Role, 'PULL'))), not(or(or(equals(parameters('DeploymentName'), 'ConfigSQLAO'), equals(parameters('DeploymentName'), 'CreateADPDC')), equals(parameters('DeploymentName'), 'CreateADBDC'))))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'Microsoft.Powershell.DSC')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'Microsoft.Powershell', 'Microsoft.OSTCExtensions')]",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'DSC', 'DSCForLinux')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '2.24', '2.0')]",
                        "autoUpgradeMinorVersion": true,
                        "forceUpdateTag": "[parameters('deploymentTime')]",
                        "settings": {
                          "wmfVersion": "latest",
                          "configuration": {
                            "url": "[format('{0}/ext-DSC/DSC-{1}.zip', parameters('Global')._artifactsLocation, if(contains(parameters('AppServer'), 'DSConfig'), parameters('AppServer').DSConfig, if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], parameters('DeploymentName'))))]",
                            "script": "[format('DSC-{0}.ps1', if(contains(parameters('AppServer'), 'DSConfig'), parameters('AppServer').DSConfig, if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], parameters('DeploymentName'))))]",
                            "function": "[if(contains(parameters('AppServer'), 'DSConfig'), parameters('AppServer').DSConfig, if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], parameters('DeploymentName')))]"
                          },
                          "configurationArguments": {
                            "DomainName": "[parameters('Global').ADDomainName]",
                            "Thumbprint": "[parameters('Global').CertThumbprint]",
                            "storageAccountId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('globalRGName')), 'Microsoft.Storage/storageAccounts', variables('globalSAName'))]",
                            "deployment": "[variables('Deployment')]",
                            "networkid": "[format('{0}.', variables('networkId'))]",
                            "appInfo": "[if(contains(parameters('AppServer'), 'AppInfo'), string(parameters('VM').AppInfo), '')]",
                            "DataDiskInfo": "[string(parameters('VM').DataDisk)]",
                            "clientIDLocal": "[if(equals(format('{0}{1}', parameters('Environment'), parameters('DeploymentID')), 'G0'), '', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('RGName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-uaiStorageAccountOperator', variables('Deployment'))), '2018-11-30').clientId)]",
                            "clientIDGlobal": "[if(equals(format('{0}{1}', parameters('Environment'), parameters('DeploymentID')), 'G0'), '', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('RGName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-uaiStorageAccountFileContributor', variables('Deployment'))), '2018-11-30').clientId)]"
                          },
                          "configurationData": {
                            "url": "[format('{0}/ext-CD/{1}-ConfigurationData.psd1', parameters('Global')._artifactsLocation, parameters('AppServer').Role)]"
                          }
                        },
                        "protectedSettings": {
                          "configurationArguments": {
                            "AdminCreds": {
                              "UserName": "[parameters('Global').vmAdminUserName]",
                              "Password": "[parameters('vmAdminPassword')]"
                            },
                            "sshPublic": {
                              "UserName": "ssh",
                              "Password": "[parameters('sshPublic')]"
                            },
                            "devOpsPat": {
                              "UserName": "pat",
                              "Password": "[parameters('devOpsPat')]"
                            }
                          },
                          "configurationUrlSasToken": "[parameters('Global')._artifactsLocationSasToken]",
                          "configurationDataUrlSasToken": "[parameters('Global')._artifactsLocationSasToken]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'joindomain')]",
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.IaaSDiagnostics))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2020-12-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'vmDiagnostics')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Diagnostics",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'IaaSDiagnostics', 'LinuxDiagnostic')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '1.9', '3.0')]",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "WadCfg": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), variables('WadCfg'), null())]",
                          "ladCfg": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), null(), variables('ladCfg'))]",
                          "StorageAccount": "[variables('saaccountiddiag')]",
                          "StorageType": "TableAndBlob"
                        },
                        "protectedSettings": {
                          "storageAccountName": "[variables('saaccountiddiag')]",
                          "storageAccountKey": "[listKeys(variables('saaccountiddiag'), '2016-01-01').keys[0].value]",
                          "storageAccountEndPoint": "[format('https://{0}/', environment().suffixes.storage)]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.DependencyAgent))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2020-12-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'DependencyAgent')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'DependencyAgentWindows', 'DependencyAgentLinux')]",
                        "typeHandlerVersion": "9.5",
                        "autoUpgradeMinorVersion": true
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.AzureMonitorAgent))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2020-12-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), format('{0}', if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'AzureMonitorWindowsAgent', 'AzureMonitorLinuxAgent')))]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "publisher": "Microsoft.Azure.Monitor",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'AzureMonitorWindowsAgent', 'AzureMonitorLinuxAgent')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '1.0', '1.5')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.MonitoringAgent))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2020-12-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'MonitoringAgent')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.EnterpriseCloud.Monitoring",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'MicrosoftMonitoringAgent', 'OmsAgentForLinux')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '1.0', '1.4')]",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "workspaceId": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', variables('DeploymentURI'))), '2021-06-01').customerId]"
                        },
                        "protectedSettings": {
                          "workspaceKey": "[listKeys(resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', variables('DeploymentURI'))), '2021-06-01').primarySharedKey]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.GuestHealthAgent))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2020-12-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), format('{0}', if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'GuestHealthWindowsAgent', 'GuestHealthLinuxAgent')))]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "publisher": "Microsoft.Azure.Monitor.VirtualMachines.GuestHealth",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'GuestHealthWindowsAgent', 'GuestHealthLinuxAgent')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '1.0', '1.0')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Insights/dataCollectionRuleAssociations",
                      "apiVersion": "2019-11-01-preview",
                      "scope": "[format('Microsoft.Compute/virtualMachines/{0}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]",
                      "name": "[format('{0}vmInsights', variables('DeploymentURI'))]",
                      "properties": {
                        "description": "Association of data collection rule for AppServer Insights Health.",
                        "dataCollectionRuleId": "[resourceId('Microsoft.Insights/dataCollectionRules', format('{0}vmInsights', variables('DeploymentURI')))]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.chefClient))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'chefClient')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Chef.Bootstrap.WindowsAzure",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'ChefClient', 'LinuxChefClient')]",
                        "typeHandlerVersion": "1210.12",
                        "settings": {
                          "bootstrap_options": {
                            "chef_server_url": "[parameters('Global').chef_server_url]",
                            "validation_client_name": "[parameters('Global').chef_validation_client_name]"
                          },
                          "runlist": "recipe[mycookbook::default]"
                        },
                        "protectedSettings": {
                          "validation_key": "[parameters('Global').chef_validation_key]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(parameters('VM').match, equals(parameters('AppServer').role, 'SQL')), bool(parameters('VM').Extensions.SqlIaasExtension))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'SqlIaasExtension')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "type": "SqlIaaSAgent",
                        "publisher": "Microsoft.SqlServer.Management",
                        "typeHandlerVersion": "1.2",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "AutoTelemetrySettings": {
                            "Region": "[resourceGroup().location]"
                          },
                          "KeyVaultCredentialSettings": {
                            "Enable": true,
                            "CredentialName": "[parameters('Global').sqlCredentialName]"
                          }
                        },
                        "protectedSettings": {
                          "PrivateKeyVaultCredentialSettings": {
                            "AzureKeyVaultUrl": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults', variables('HubKVName')), '2021-06-01-preview').vaultUri]",
                            "StorageUrl": "[reference(resourceId('Microsoft.Storage/storageAccounts', if(equals(parameters('AppServer').Role, 'SQL'), variables('saSQLBackupName'), variables('SADiagName'))), '2015-06-15').primaryEndpoints.blob]",
                            "StorageAccessKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', if(equals(parameters('AppServer').Role, 'SQL'), variables('saSQLBackupName'), variables('SADiagName'))), '2016-01-01').keys[0].value]",
                            "Password": "[parameters('vmAdminPassword')]"
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(parameters('VM').match, equals(parameters('AppServer').role, 'SQL')), bool(parameters('VM').Extensions.BackupWindowsWorkloadSQL))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'AzureBackupWindowsWorkload')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "locale": "en-us",
                          "AppServerType": "microsoft.compute/virtualmachines"
                        },
                        "publisher": "Microsoft.Azure.RecoveryServices.WorkloadBackup",
                        "type": "AzureBackupWindowsWorkload",
                        "typeHandlerVersion": "1.1"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.Antimalware))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'IaaSAntimalware')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Security",
                        "type": "IaaSAntimalware",
                        "typeHandlerVersion": "1.5",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "Monitoring": "ON",
                          "StorageAccountName": "[variables('SADiagName')]",
                          "AntimalwareEnabled": true,
                          "RealtimeProtectionEnabled": "true",
                          "ScheduledScanSettings": {
                            "isEnabled": "true",
                            "day": "1",
                            "time": "720",
                            "scanType": "Full"
                          },
                          "Exclusions": {
                            "Extensions": "",
                            "Paths": "",
                            "Processes": ""
                          }
                        },
                        "protectedSettings": null
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-AppServer-publicIPDeploy{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[variables('Deployment')]"
                          },
                          "DeploymentURI": {
                            "value": "[variables('DeploymentURI')]"
                          },
                          "NICs": {
                            "value": "[parameters('AppServer').NICs]"
                          },
                          "VM": {
                            "value": "[parameters('AppServer')]"
                          },
                          "PIPprefix": {
                            "value": "AppServer"
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "18109364379899578760"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "DeploymentURI": {
                              "type": "string"
                            },
                            "PIPprefix": {
                              "type": "string"
                            },
                            "NICs": {
                              "type": "array"
                            },
                            "VM": {
                              "type": "object"
                            },
                            "Global": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "condition": "[and(contains(parameters('NICs')[copyIndex()], 'PublicIP'), not(equals(parameters('NICs')[copyIndex()].PublicIP, null())))]",
                              "copy": {
                                "name": "PublicIP",
                                "count": "[length(parameters('NICs'))]"
                              },
                              "type": "Microsoft.Network/publicIPAddresses",
                              "apiVersion": "2021-02-01",
                              "name": "[format('{0}-{1}{2}-publicip{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1))]",
                              "location": "[resourceGroup().location]",
                              "sku": {
                                "name": "[if(contains(parameters('VM'), 'Zone'), 'Standard', 'Basic')]"
                              },
                              "properties": {
                                "publicIPAllocationMethod": "[parameters('NICs')[copyIndex()].PublicIP]",
                                "dnsSettings": {
                                  "domainNameLabel": "[toLower(format('{0}-{1}{2}-{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1)))]"
                                }
                              }
                            },
                            {
                              "condition": "[and(contains(parameters('NICs')[copyIndex()], 'PublicIP'), not(equals(parameters('NICs')[copyIndex()].PublicIP, null())))]",
                              "copy": {
                                "name": "PublicIPDiag",
                                "count": "[length(parameters('NICs'))]"
                              },
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2017-05-01-preview",
                              "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', format('{0}-{1}{2}-publicip{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1)))]",
                              "name": "service",
                              "properties": {
                                "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                                "logs": [
                                  {
                                    "category": "DDoSProtectionNotifications",
                                    "enabled": true
                                  }
                                ],
                                "metrics": [
                                  {
                                    "timeGrain": "PT5M",
                                    "enabled": true,
                                    "retentionPolicy": {
                                      "enabled": false,
                                      "days": 0
                                    }
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/publicIPAddresses', format('{0}-{1}{2}-publicip{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1)))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "PIPID": {
                              "type": "array",
                              "copy": {
                                "count": "[length(parameters('NICs'))]",
                                "input": "[if(and(contains(parameters('NICs')[copyIndex()], 'PublicIP'), not(equals(parameters('NICs')[copyIndex()].PublicIP, null()))), resourceId('Microsoft.Network/publicIPAddresses', format('{0}-{1}{2}-publicip{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1))), '')]"
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-AppServer-JITNSG-{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[variables('Deployment')]"
                          },
                          "VM": {
                            "value": "[parameters('AppServer')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "16183288891198554910"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "VM": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/networkSecurityGroups",
                              "apiVersion": "2021-05-01",
                              "name": "[format('{0}-vm{1}-JITNSG', parameters('Deployment'), parameters('VM').Name)]",
                              "location": "[resourceGroup().location]"
                            }
                          ]
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-AppServer-nicDeployLoop{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[variables('Deployment')]"
                          },
                          "DeploymentURI": {
                            "value": "[variables('DeploymentURI')]"
                          },
                          "DeploymentID": {
                            "value": "[parameters('DeploymentID')]"
                          },
                          "NICs": {
                            "value": "[parameters('AppServer').NICs]"
                          },
                          "VM": {
                            "value": "[parameters('AppServer')]"
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "15680478958950286894"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "DeploymentURI": {
                              "type": "string"
                            },
                            "DeploymentID": {
                              "type": "string"
                            },
                            "NICs": {
                              "type": "array"
                            },
                            "VM": {
                              "type": "object"
                            },
                            "Global": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "NIC",
                                "count": "[length(parameters('NICs'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('dp{0}-nicDeploy{1}{2}', parameters('Deployment'), parameters('VM').Name, add(copyIndex(), 1))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "Deployment": {
                                    "value": "[parameters('Deployment')]"
                                  },
                                  "DeploymentURI": {
                                    "value": "[parameters('DeploymentURI')]"
                                  },
                                  "DeploymentID": {
                                    "value": "[parameters('DeploymentID')]"
                                  },
                                  "NIC": {
                                    "value": "[parameters('NICs')[copyIndex()]]"
                                  },
                                  "NICNumber": {
                                    "value": "[string(add(copyIndex(), 1))]"
                                  },
                                  "VM": {
                                    "value": "[parameters('VM')]"
                                  },
                                  "Global": {
                                    "value": "[parameters('Global')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.4.1318.3566",
                                      "templateHash": "13928916846586964615"
                                    }
                                  },
                                  "parameters": {
                                    "Deployment": {
                                      "type": "string"
                                    },
                                    "DeploymentURI": {
                                      "type": "string"
                                    },
                                    "DeploymentID": {
                                      "type": "string"
                                    },
                                    "NIC": {
                                      "type": "object"
                                    },
                                    "NICNumber": {
                                      "type": "string"
                                    },
                                    "VM": {
                                      "type": "object"
                                    },
                                    "Global": {
                                      "type": "object"
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "loadBalancerInboundNatRules",
                                        "count": "[length(variables('rules'))]",
                                        "input": {
                                          "id": "[format('{0}/providers/Microsoft.Network/loadBalancers/{1}-lb{2}/inboundNatRules/{3}', resourceGroup().id, parameters('Deployment'), if(contains(parameters('NIC'), 'PLB'), parameters('NIC').PLB, 'none'), if(contains(parameters('NIC'), 'NATRules'), variables('rules')[copyIndex('loadBalancerInboundNatRules')], 'none'))]"
                                        }
                                      }
                                    ],
                                    "networkId": "[format('{0}{1}', parameters('Global').networkid[0], string(sub(parameters('Global').networkid[1], mul(2, int(parameters('DeploymentID'))))))]",
                                    "networkIdUpper": "[format('{0}{1}', parameters('Global').networkid[0], string(add(1, sub(parameters('Global').networkid[1], mul(2, int(parameters('DeploymentID')))))))]",
                                    "VNetID": "[resourceId('Microsoft.Network/VirtualNetworks', format('{0}-vn', parameters('Deployment')))]",
                                    "subnetID": "[format('{0}/subnets/sn{1}', variables('VNetID'), parameters('NIC').Subnet)]",
                                    "acceleratedNetworking": "[if(contains(parameters('NIC'), 'FastNic'), true(), false())]",
                                    "NICSuffix": "[if(equals(parameters('NICNumber'), '1'), '', parameters('NICNumber'))]",
                                    "IPAllocation": "[if(contains(parameters('NIC'), 'StaticIP'), 'Static', 'Dynamic')]",
                                    "privateIPAddress": "[if(contains(parameters('NIC'), 'StaticIP'), format('{0}.{1}', if(equals(parameters('NIC').Subnet, 'MT02'), variables('networkIdUpper'), variables('networkId')), parameters('NIC').StaticIP), null())]",
                                    "publicIPAddress": "[if(not(contains(parameters('NIC'), 'PublicIP')), null(), createObject('id', resourceId('Microsoft.Network/publicIPAddresses', format('{0}-vm{1}-publicip{2}', parameters('Deployment'), parameters('VM').Name, parameters('NICNumber')))))]",
                                    "JITNSG": {
                                      "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-vm{1}-JITNSG', parameters('Deployment'), parameters('VM').Name))]"
                                    },
                                    "rules": "[if(contains(parameters('NIC'), 'NatRules'), parameters('NIC').NatRules, createArray())]"
                                  },
                                  "resources": [
                                    {
                                      "condition": "[not(or(or(or(contains(parameters('NIC'), 'LB'), contains(parameters('NIC'), 'PLB')), contains(parameters('NIC'), 'SLB')), contains(parameters('NIC'), 'ISLB')))]",
                                      "type": "Microsoft.Network/networkInterfaces",
                                      "apiVersion": "2021-02-01",
                                      "name": "[format('{0}-nic{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name)]",
                                      "location": "[resourceGroup().location]",
                                      "properties": {
                                        "enableAcceleratedNetworking": "[variables('acceleratedNetworking')]",
                                        "ipConfigurations": [
                                          {
                                            "name": "ipconfig1",
                                            "properties": {
                                              "publicIPAddress": "[if(contains(parameters('NIC'), 'PublicIP'), variables('publicIPAddress'), null())]",
                                              "privateIPAllocationMethod": "[variables('IPAllocation')]",
                                              "privateIPAddress": "[variables('privateIPAddress')]",
                                              "subnet": {
                                                "id": "[variables('subnetID')]"
                                              }
                                            }
                                          }
                                        ],
                                        "networkSecurityGroup": "[variables('JITNSG')]"
                                      }
                                    },
                                    {
                                      "condition": "[not(or(contains(parameters('NIC'), 'LB'), or(contains(parameters('NIC'), 'PLB'), or(contains(parameters('NIC'), 'SLB'), contains(parameters('NIC'), 'ISLB')))))]",
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', format('{0}-nic{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]",
                                      "name": "service",
                                      "properties": {
                                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                                        "metrics": [
                                          {
                                            "timeGrain": "PT5M",
                                            "enabled": true,
                                            "retentionPolicy": {
                                              "enabled": false,
                                              "days": 0
                                            }
                                          }
                                        ]
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nic{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]"
                                      ]
                                    },
                                    {
                                      "condition": "[contains(parameters('NIC'), 'PLB')]",
                                      "type": "Microsoft.Network/networkInterfaces",
                                      "apiVersion": "2021-02-01",
                                      "name": "[format('{0}-nicplb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name)]",
                                      "location": "[resourceGroup().location]",
                                      "properties": {
                                        "enableAcceleratedNetworking": "[variables('acceleratedNetworking')]",
                                        "ipConfigurations": [
                                          {
                                            "name": "ipconfig1",
                                            "properties": {
                                              "loadBalancerBackendAddressPools": [
                                                {
                                                  "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', format('{0}-lb{1}', parameters('Deployment'), parameters('NIC').PLB), parameters('NIC').PLB)]"
                                                }
                                              ],
                                              "loadBalancerInboundNatRules": "[if(contains(parameters('NIC'), 'NATRules'), variables('loadBalancerInboundNatRules'), null())]",
                                              "privateIPAllocationMethod": "[variables('IPAllocation')]",
                                              "privateIPAddress": "[variables('privateIPAddress')]",
                                              "subnet": {
                                                "id": "[variables('subnetID')]"
                                              }
                                            }
                                          }
                                        ],
                                        "networkSecurityGroup": "[variables('JITNSG')]"
                                      }
                                    },
                                    {
                                      "condition": "[contains(parameters('NIC'), 'PLB')]",
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', format('{0}-nicplb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]",
                                      "name": "service",
                                      "properties": {
                                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                                        "metrics": [
                                          {
                                            "timeGrain": "PT5M",
                                            "enabled": true,
                                            "retentionPolicy": {
                                              "enabled": false,
                                              "days": 0
                                            }
                                          }
                                        ]
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nicplb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]"
                                      ]
                                    },
                                    {
                                      "condition": "[contains(parameters('NIC'), 'LB')]",
                                      "type": "Microsoft.Network/networkInterfaces",
                                      "apiVersion": "2021-02-01",
                                      "name": "[format('{0}-niclb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name)]",
                                      "location": "[resourceGroup().location]",
                                      "properties": {
                                        "enableAcceleratedNetworking": "[variables('acceleratedNetworking')]",
                                        "ipConfigurations": [
                                          {
                                            "name": "ipconfig1",
                                            "properties": {
                                              "loadBalancerBackendAddressPools": [
                                                {
                                                  "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', format('{0}-ilb{1}', parameters('Deployment'), parameters('NIC').LB), parameters('NIC').LB)]"
                                                }
                                              ],
                                              "privateIPAllocationMethod": "[variables('IPAllocation')]",
                                              "privateIPAddress": "[variables('privateIPAddress')]",
                                              "subnet": {
                                                "id": "[variables('subnetID')]"
                                              }
                                            }
                                          }
                                        ],
                                        "networkSecurityGroup": "[variables('JITNSG')]"
                                      }
                                    },
                                    {
                                      "condition": "[contains(parameters('NIC'), 'LB')]",
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', format('{0}-niclb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]",
                                      "name": "service",
                                      "properties": {
                                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                                        "metrics": [
                                          {
                                            "timeGrain": "PT5M",
                                            "enabled": true,
                                            "retentionPolicy": {
                                              "enabled": false,
                                              "days": 0
                                            }
                                          }
                                        ]
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-niclb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]"
                                      ]
                                    },
                                    {
                                      "condition": "[contains(parameters('NIC'), 'SLB')]",
                                      "type": "Microsoft.Network/networkInterfaces",
                                      "apiVersion": "2021-02-01",
                                      "name": "[format('{0}-nicslb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name)]",
                                      "location": "[resourceGroup().location]",
                                      "properties": {
                                        "enableAcceleratedNetworking": "[variables('acceleratedNetworking')]",
                                        "ipConfigurations": [
                                          {
                                            "name": "ipconfig1",
                                            "properties": {
                                              "loadBalancerBackendAddressPools": [
                                                {
                                                  "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', format('{0}-lb{1}', parameters('Deployment'), parameters('NIC').SLB), parameters('NIC').SLB)]"
                                                }
                                              ],
                                              "privateIPAllocationMethod": "[variables('IPAllocation')]",
                                              "privateIPAddress": "[variables('privateIPAddress')]",
                                              "subnet": {
                                                "id": "[variables('subnetID')]"
                                              }
                                            }
                                          }
                                        ],
                                        "networkSecurityGroup": "[variables('JITNSG')]"
                                      }
                                    },
                                    {
                                      "condition": "[contains(parameters('NIC'), 'SLB')]",
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', format('{0}-nicslb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]",
                                      "name": "service",
                                      "properties": {
                                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                                        "metrics": [
                                          {
                                            "timeGrain": "PT5M",
                                            "enabled": true,
                                            "retentionPolicy": {
                                              "enabled": false,
                                              "days": 0
                                            }
                                          }
                                        ]
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nicslb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]"
                                      ]
                                    }
                                  ],
                                  "outputs": {
                                    "foo7": {
                                      "type": "array",
                                      "value": "[variables('loadBalancerInboundNatRules')]"
                                    },
                                    "foo": {
                                      "type": "object",
                                      "value": "[parameters('NIC')]"
                                    }
                                  }
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-AppServer-publicIPDeploy{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-AppServer-diskLookup{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[variables('Deployment')]"
                          },
                          "DeploymentID": {
                            "value": "[parameters('DeploymentID')]"
                          },
                          "Name": {
                            "value": "[parameters('AppServer').Name]"
                          },
                          "SOFS": {
                            "value": "[if(contains(variables('DataDiskInfo')[parameters('AppServer').DDRole], 'SOFS'), variables('DataDiskInfo')[parameters('AppServer').DDRole].SOFS, json('{\"1\":1}'))]"
                          },
                          "DATA": {
                            "value": "[if(contains(variables('DataDiskInfo')[parameters('AppServer').DDRole], 'DATA'), variables('DataDiskInfo')[parameters('AppServer').DDRole].DATA, json('{\"1\":1}'))]"
                          },
                          "LOGS": {
                            "value": "[if(contains(variables('DataDiskInfo')[parameters('AppServer').DDRole], 'LOGS'), variables('DataDiskInfo')[parameters('AppServer').DDRole].LOGS, json('{\"1\":1}'))]"
                          },
                          "TEMPDB": {
                            "value": "[if(contains(variables('DataDiskInfo')[parameters('AppServer').DDRole], 'TEMPDB'), variables('DataDiskInfo')[parameters('AppServer').DDRole].TEMPDB, json('{\"1\":1}'))]"
                          },
                          "BACKUP": {
                            "value": "[if(contains(variables('DataDiskInfo')[parameters('AppServer').DDRole], 'BACKUP'), variables('DataDiskInfo')[parameters('AppServer').DDRole].BACKUP, json('{\"1\":1}'))]"
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "13688646372196984293"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "DeploymentID": {
                              "type": "string"
                            },
                            "Name": {
                              "type": "string"
                            },
                            "DATA": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "DATASS": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "SOFS": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "LOGS": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "TEMPDB": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "BACKUP": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "DISKS": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "Global": {
                              "type": "object"
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "Data_var",
                                "count": "[length(range(0, if(contains(parameters('DATA'), '1'), 1, length(parameters('DATA').LUNS))))]",
                                "input": {
                                  "name": "[if(contains(parameters('DATA'), '1'), 1, format('{0}-{1}-DATA-DATA{2}', parameters('Deployment'), parameters('Name'), padLeft(parameters('DATA').LUNS[range(0, if(contains(parameters('DATA'), '1'), 1, length(parameters('DATA').LUNS)))[copyIndex('Data_var')]][0], 2, '0')))]",
                                  "lun": "[if(contains(parameters('DATA'), '1'), 1, int(parameters('DATA').LUNS[range(0, if(contains(parameters('DATA'), '1'), 1, length(parameters('DATA').LUNS)))[copyIndex('Data_var')]][0]))]",
                                  "caching": "[if(contains(parameters('DATA'), '1'), 1, parameters('DATA').caching)]",
                                  "diskSizeGB": "[if(contains(parameters('DATA'), '1'), 1, int(parameters('DATA').LUNS[range(0, if(contains(parameters('DATA'), '1'), 1, length(parameters('DATA').LUNS)))[copyIndex('Data_var')]][1]))]",
                                  "createOption": "[if(contains(parameters('DATA'), '1'), 1, if(equals(length(parameters('DATA').LUNS[range(0, if(contains(parameters('DATA'), '1'), 1, length(parameters('DATA').LUNS)))[copyIndex('Data_var')]]), 3), parameters('DATA').LUNS[range(0, if(contains(parameters('DATA'), '1'), 1, length(parameters('DATA').LUNS)))[copyIndex('Data_var')]][2], 'Empty'))]",
                                  "managedDisk": "[if(contains(parameters('DATA'), '1'), 1, if(contains(parameters('DATA'), 'saType'), json(format('{{\"storageAccountType\":\"{0}\"}}', parameters('DATA').saType)), json('null')))]"
                                }
                              },
                              {
                                "name": "Datass_var",
                                "count": "[length(range(0, if(contains(parameters('DATASS'), '1'), 1, length(parameters('DATASS').LUNS))))]",
                                "input": {
                                  "lun": "[if(contains(parameters('DATASS'), '1'), 1, int(parameters('DATASS').LUNS[range(0, if(contains(parameters('DATASS'), '1'), 1, length(parameters('DATASS').LUNS)))[copyIndex('Datass_var')]][0]))]",
                                  "caching": "[if(contains(parameters('DATASS'), '1'), 1, parameters('DATASS').caching)]",
                                  "diskSizeGB": "[if(contains(parameters('DATASS'), '1'), 1, int(parameters('DATASS').LUNS[range(0, if(contains(parameters('DATASS'), '1'), 1, length(parameters('DATASS').LUNS)))[copyIndex('Datass_var')]][1]))]",
                                  "createOption": "[if(contains(parameters('DATASS'), '1'), 1, if(equals(length(parameters('DATASS').LUNS[range(0, if(contains(parameters('DATASS'), '1'), 1, length(parameters('DATASS').LUNS)))[copyIndex('Datass_var')]]), 3), parameters('DATASS').LUNS[range(0, if(contains(parameters('DATASS'), '1'), 1, length(parameters('DATASS').LUNS)))[copyIndex('Datass_var')]][2], 'Empty'))]",
                                  "managedDisk": "[if(contains(parameters('DATASS'), '1'), 1, if(contains(parameters('DATASS'), 'saType'), json(format('{{\"storageAccountType\":\"{0}\"}}', parameters('DATASS').saType)), json('null')))]"
                                }
                              },
                              {
                                "name": "SOFS_var",
                                "count": "[length(range(0, if(contains(parameters('SOFS'), '1'), 1, length(parameters('SOFS').LUNS))))]",
                                "input": {
                                  "name": "[if(contains(parameters('SOFS'), '1'), 1, format('{0}-{1}-DATA-SOFS{2}', parameters('Deployment'), parameters('Name'), padLeft(parameters('SOFS').LUNS[range(0, if(contains(parameters('SOFS'), '1'), 1, length(parameters('SOFS').LUNS)))[copyIndex('SOFS_var')]][0], 2, '0')))]",
                                  "lun": "[if(contains(parameters('SOFS'), '1'), 1, int(parameters('SOFS').LUNS[range(0, if(contains(parameters('SOFS'), '1'), 1, length(parameters('SOFS').LUNS)))[copyIndex('SOFS_var')]][0]))]",
                                  "caching": "[if(contains(parameters('SOFS'), '1'), 1, parameters('SOFS').caching)]",
                                  "diskSizeGB": "[if(contains(parameters('SOFS'), '1'), 1, int(parameters('SOFS').LUNS[range(0, if(contains(parameters('SOFS'), '1'), 1, length(parameters('SOFS').LUNS)))[copyIndex('SOFS_var')]][1]))]",
                                  "createOption": "[if(contains(parameters('SOFS'), '1'), 1, if(equals(length(parameters('SOFS').LUNS[range(0, if(contains(parameters('SOFS'), '1'), 1, length(parameters('SOFS').LUNS)))[copyIndex('SOFS_var')]]), 3), parameters('SOFS').LUNS[range(0, if(contains(parameters('SOFS'), '1'), 1, length(parameters('SOFS').LUNS)))[copyIndex('SOFS_var')]][2], 'Empty'))]",
                                  "managedDisk": "[if(contains(parameters('SOFS'), '1'), 1, if(contains(parameters('SOFS'), 'saType'), json(format('{{\"storageAccountType\":\"{0}\"}}', parameters('SOFS').saType)), json('null')))]"
                                }
                              },
                              {
                                "name": "LOGS_var",
                                "count": "[length(range(0, if(contains(parameters('LOGS'), '1'), 1, length(parameters('LOGS').LUNS))))]",
                                "input": {
                                  "name": "[if(contains(parameters('LOGS'), '1'), 1, format('{0}-{1}-DATA-LOGS{2}', parameters('Deployment'), parameters('Name'), padLeft(parameters('LOGS').LUNS[range(0, if(contains(parameters('LOGS'), '1'), 1, length(parameters('LOGS').LUNS)))[copyIndex('LOGS_var')]][0], 2, '0')))]",
                                  "lun": "[if(contains(parameters('LOGS'), '1'), 1, int(parameters('LOGS').LUNS[range(0, if(contains(parameters('LOGS'), '1'), 1, length(parameters('LOGS').LUNS)))[copyIndex('LOGS_var')]][0]))]",
                                  "caching": "[if(contains(parameters('LOGS'), '1'), 1, parameters('LOGS').caching)]",
                                  "diskSizeGB": "[if(contains(parameters('LOGS'), '1'), 1, int(parameters('LOGS').LUNS[range(0, if(contains(parameters('LOGS'), '1'), 1, length(parameters('LOGS').LUNS)))[copyIndex('LOGS_var')]][1]))]",
                                  "createOption": "[if(contains(parameters('LOGS'), '1'), 1, if(equals(length(parameters('LOGS').LUNS[range(0, if(contains(parameters('LOGS'), '1'), 1, length(parameters('LOGS').LUNS)))[copyIndex('LOGS_var')]]), 3), parameters('LOGS').LUNS[range(0, if(contains(parameters('LOGS'), '1'), 1, length(parameters('LOGS').LUNS)))[copyIndex('LOGS_var')]][2], 'Empty'))]",
                                  "managedDisk": "[if(contains(parameters('LOGS'), '1'), 1, if(contains(parameters('LOGS'), 'saType'), json(format('{{\"storageAccountType\":\"{0}\"}}', parameters('LOGS').saType)), json('null')))]"
                                }
                              },
                              {
                                "name": "TEMPDB_var",
                                "count": "[length(range(0, if(contains(parameters('TEMPDB'), '1'), 1, length(parameters('TEMPDB').LUNS))))]",
                                "input": {
                                  "name": "[if(contains(parameters('TEMPDB'), '1'), 1, format('{0}-{1}-DATA-TEMPDB{2}', parameters('Deployment'), parameters('Name'), padLeft(parameters('TEMPDB').LUNS[range(0, if(contains(parameters('TEMPDB'), '1'), 1, length(parameters('TEMPDB').LUNS)))[copyIndex('TEMPDB_var')]][0], 2, '0')))]",
                                  "lun": "[if(contains(parameters('TEMPDB'), '1'), 1, int(parameters('TEMPDB').LUNS[range(0, if(contains(parameters('TEMPDB'), '1'), 1, length(parameters('TEMPDB').LUNS)))[copyIndex('TEMPDB_var')]][0]))]",
                                  "caching": "[if(contains(parameters('TEMPDB'), '1'), 1, parameters('TEMPDB').caching)]",
                                  "diskSizeGB": "[if(contains(parameters('TEMPDB'), '1'), 1, int(parameters('TEMPDB').LUNS[range(0, if(contains(parameters('TEMPDB'), '1'), 1, length(parameters('TEMPDB').LUNS)))[copyIndex('TEMPDB_var')]][1]))]",
                                  "createOption": "[if(contains(parameters('TEMPDB'), '1'), 1, if(equals(length(parameters('TEMPDB').LUNS[range(0, if(contains(parameters('TEMPDB'), '1'), 1, length(parameters('TEMPDB').LUNS)))[copyIndex('TEMPDB_var')]]), 3), parameters('TEMPDB').LUNS[range(0, if(contains(parameters('TEMPDB'), '1'), 1, length(parameters('TEMPDB').LUNS)))[copyIndex('TEMPDB_var')]][2], 'Empty'))]",
                                  "managedDisk": "[if(contains(parameters('TEMPDB'), '1'), 1, if(contains(parameters('TEMPDB'), 'saType'), json(format('{{\"storageAccountType\":\"{0}\"}}', parameters('TEMPDB').saType)), json('null')))]"
                                }
                              },
                              {
                                "name": "BACKUP_var",
                                "count": "[length(range(0, if(contains(parameters('BACKUP'), '1'), 1, length(parameters('BACKUP').LUNS))))]",
                                "input": {
                                  "name": "[if(contains(parameters('BACKUP'), '1'), 1, format('{0}-{1}-DATA-BACKUP{2}', parameters('Deployment'), parameters('Name'), padLeft(parameters('BACKUP').LUNS[range(0, if(contains(parameters('BACKUP'), '1'), 1, length(parameters('BACKUP').LUNS)))[copyIndex('BACKUP_var')]][0], 2, '0')))]",
                                  "lun": "[if(contains(parameters('BACKUP'), '1'), 1, int(parameters('BACKUP').LUNS[range(0, if(contains(parameters('BACKUP'), '1'), 1, length(parameters('BACKUP').LUNS)))[copyIndex('BACKUP_var')]][0]))]",
                                  "caching": "[if(contains(parameters('BACKUP'), '1'), 1, parameters('BACKUP').caching)]",
                                  "diskSizeGB": "[if(contains(parameters('BACKUP'), '1'), 1, int(parameters('BACKUP').LUNS[range(0, if(contains(parameters('BACKUP'), '1'), 1, length(parameters('BACKUP').LUNS)))[copyIndex('BACKUP_var')]][1]))]",
                                  "createOption": "[if(contains(parameters('BACKUP'), '1'), 1, if(equals(length(parameters('BACKUP').LUNS[range(0, if(contains(parameters('BACKUP'), '1'), 1, length(parameters('BACKUP').LUNS)))[copyIndex('BACKUP_var')]]), 3), parameters('BACKUP').LUNS[range(0, if(contains(parameters('BACKUP'), '1'), 1, length(parameters('BACKUP').LUNS)))[copyIndex('BACKUP_var')]][2], 'Empty'))]",
                                  "managedDisk": "[if(contains(parameters('BACKUP'), '1'), 1, if(contains(parameters('BACKUP'), 'saType'), json(format('{{\"storageAccountType\":\"{0}\"}}', parameters('BACKUP').saType)), json('null')))]"
                                }
                              }
                            ]
                          },
                          "resources": [],
                          "outputs": {
                            "SOFS": {
                              "type": "array",
                              "value": "[if(contains(parameters('SOFS'), '1'), array('no SOFS disks'), variables('SOFS_var'))]"
                            },
                            "DATA": {
                              "type": "array",
                              "value": "[if(contains(parameters('DATA'), '1'), array('no DATA disks'), variables('Data_var'))]"
                            },
                            "DATASS": {
                              "type": "array",
                              "value": "[if(contains(parameters('DATASS'), '1'), array('no DATA disks'), variables('Datass_var'))]"
                            },
                            "LOGS": {
                              "type": "array",
                              "value": "[if(contains(parameters('LOGS'), '1'), array('no LOGS disks'), variables('LOGS_var'))]"
                            },
                            "TEMPDB": {
                              "type": "array",
                              "value": "[if(contains(parameters('TEMPDB'), '1'), array('no TEMPDB disks'), variables('TEMPDB_var'))]"
                            },
                            "BACKUP": {
                              "type": "array",
                              "value": "[if(contains(parameters('BACKUP'), '1'), array('no BACKUP disks'), variables('BACKUP_var'))]"
                            },
                            "DATADisks": {
                              "type": "array",
                              "value": "[union(if(contains(parameters('SOFS'), '1'), createArray(), variables('SOFS_var')), if(contains(parameters('DATA'), '1'), createArray(), variables('Data_var')), if(contains(parameters('DATASS'), '1'), createArray(), variables('Datass_var')), if(contains(parameters('LOGS'), '1'), createArray(), variables('LOGS_var')), if(contains(parameters('TEMPDB'), '1'), createArray(), variables('TEMPDB_var')), if(contains(parameters('BACKUP'), '1'), createArray(), variables('BACKUP_var')))]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "condition": "[bool(parameters('AppServer').DeployJIT)]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-AppServer-JIT-{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[variables('Deployment')]"
                          },
                          "VM": {
                            "value": "[parameters('AppServer')]"
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          },
                          "DeploymentID": {
                            "value": "[parameters('DeploymentID')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "17671050488544287828"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "VM": {
                              "type": "object"
                            },
                            "Global": {
                              "type": "object"
                            },
                            "DeploymentID": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "ports",
                                "count": "[length(variables('portList'))]",
                                "input": {
                                  "number": "[variables('portList')[copyIndex('ports')]]",
                                  "protocol": "TCP",
                                  "allowedSourceAddressPrefixes": "[union(parameters('Global').IPAddressforRemoteAccess, variables('addressPrefixes'))]",
                                  "maxRequestAccessDuration": "PT3H"
                                }
                              }
                            ],
                            "portList": [
                              3389,
                              22,
                              5985,
                              5986
                            ],
                            "networkId": "[format('{0}{1}', parameters('Global').networkid[0], string(sub(parameters('Global').networkid[1], mul(2, int(parameters('DeploymentID'))))))]",
                            "addressPrefixes": [
                              "[format('{0}.0/23', variables('networkId'))]"
                            ]
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Security/locations/jitNetworkAccessPolicies",
                              "apiVersion": "2020-01-01",
                              "name": "[format('{0}/JIT_{1}', resourceGroup().location, format('{0}-vm{1}', parameters('Deployment'), parameters('VM').name))]",
                              "kind": "Basic",
                              "properties": {
                                "virtualMachines": [
                                  {
                                    "id": "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', parameters('Deployment'), parameters('VM').name))]",
                                    "ports": "[variables('ports')]"
                                  }
                                ],
                                "appendMode": true
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "Disks": {
                      "type": "array",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('dp{0}-AppServer-diskLookup{1}', variables('Deployment'), parameters('AppServer').Name))).outputs.DATADisks.value]"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-LB', variables('Deployment')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-OMS', variables('Deployment')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-SA', variables('Deployment')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-VNET', variables('Deployment')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-VNETDNSDC1', variables('Deployment')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-VNETDNSDC2', variables('Deployment')))]"
      ]
    },
    {
      "condition": "[bool(parameters('Stage').VMSQL)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "SQLServers",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "DeploymentID": {
            "value": "[parameters('DeploymentID')]"
          },
          "DeploymentInfo": {
            "value": "[parameters('DeploymentInfo')]"
          },
          "Environment": {
            "value": "[parameters('Environment')]"
          },
          "Extensions": {
            "value": "[parameters('Extensions')]"
          },
          "Global": {
            "value": "[parameters('Global')]"
          },
          "Prefix": {
            "value": "[parameters('Prefix')]"
          },
          "Stage": {
            "value": "[parameters('Stage')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "13874993644946453761"
            }
          },
          "parameters": {
            "Prefix": {
              "type": "string"
            },
            "Environment": {
              "type": "string",
              "defaultValue": "D",
              "allowedValues": [
                "I",
                "D",
                "T",
                "U",
                "P",
                "S",
                "G",
                "A"
              ]
            },
            "DeploymentID": {
              "type": "string",
              "defaultValue": "1",
              "allowedValues": [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9"
              ]
            },
            "Stage": {
              "type": "object"
            },
            "Extensions": {
              "type": "object"
            },
            "Global": {
              "type": "object"
            },
            "DeploymentInfo": {
              "type": "object"
            }
          },
          "variables": {
            "copy": [
              {
                "name": "VMs",
                "count": "[length(variables('AppServers'))]",
                "input": {
                  "name": "[variables('AppServers')[copyIndex('VMs')].Name]",
                  "match": "[or(equals(parameters('Global').CN, '.'), contains(array(parameters('Global').CN), variables('AppServers')[copyIndex('VMs')].Name))]",
                  "Extensions": "[if(contains(variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType], 'RoleExtensions'), union(parameters('Extensions'), variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType].RoleExtensions), parameters('Extensions'))]",
                  "DataDisk": "[if(contains(variables('AppServers')[copyIndex('VMs')], 'DDRole'), variables('DataDiskInfo')[variables('AppServers')[copyIndex('VMs')].DDRole], null())]",
                  "vmHostName": "[toLower(format('{0}{1}{2}{3}{4}', parameters('Prefix'), parameters('Global').AppName, parameters('Environment'), parameters('DeploymentID'), variables('AppServers')[copyIndex('VMs')].Name))]",
                  "AppInfo": "[if(contains(variables('AppServers')[copyIndex('VMs')], 'AppInfo'), variables('AppServers')[copyIndex('VMs')].AppInfo, null())]",
                  "windowsConfiguration": {
                    "enableAutomaticUpdates": true,
                    "provisionVmAgent": true,
                    "patchSettings": {
                      "enableHotpatching": "[if(contains(variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType], 'HotPatch'), variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType].HotPatch, false())]",
                      "patchMode": "[if(contains(variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType], 'patchMode'), variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType].patchMode, 'AutomaticByOS')]"
                    }
                  },
                  "linuxConfiguration": {
                    "enableAutomaticUpdates": true,
                    "provisionVmAgent": true,
                    "patchSettings": {
                      "enableHotpatching": "[if(contains(variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType], 'HotPatch'), variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType].HotPatch, false())]",
                      "patchMode": "[if(contains(variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType], 'patchMode'), variables('OSType')[variables('AppServers')[copyIndex('VMs')].OSType].patchMode, 'AutomaticByOS')]"
                    }
                  }
                }
              }
            ],
            "Deployment": "[format('{0}-{1}-{2}-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID'))]",
            "computeGlobal": "[json('{\r\n  \"DataDiskInfo\": {\r\n    \"0GB\": {},\r\n    \"32GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            32\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GBSS\": {\r\n      \"DATASS\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GB-2\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ],\r\n          [\r\n            1,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"128GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            128\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"FIL64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"SOFS\": {\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            1,\r\n            32\r\n          ],\r\n          [\r\n            2,\r\n            32\r\n          ],\r\n          [\r\n            3,\r\n            32\r\n          ]\r\n        ],\r\n        \"FileSystem\": \"ReFS\",\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"SQL64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"LOGS\": {\r\n        \"DriveLetter\": \"G\",\r\n        \"caching\": \"None\",\r\n        \"LUNS\": [\r\n          [\r\n            8,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"TEMPDB\": {\r\n        \"DriveLetter\": \"H\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            12,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"BACKUP\": {\r\n        \"DriveLetter\": \"I\",\r\n        \"caching\": \"None\",\r\n        \"LUNS\": [\r\n          [\r\n            15,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    }\r\n  },\r\n  \"computeSizeLookupOptions\": {\r\n    \"API-P\": \"Standard_D4s_v3\",\r\n    \"API-D\": \"Standard_D4s_v3\",\r\n    \"API-S\": \"Standard_D2s_v3\",\r\n    \"SF-P\": \"Standard_D4s_v3\",\r\n    \"SF-D\": \"Standard_D2s_v3\",\r\n    \"SF-S\": \"Standard_D2s_v3\",\r\n    \"CTNR-P\": \"Standard_D4s_v3\",\r\n    \"CTNR-D\": \"Standard_D2s_v3\",\r\n    \"ADp-P\": \"Standard_D2s_v3\",\r\n    \"ADp-D\": \"Standard_A2m_v2\",\r\n    \"ADs-P\": \"Standard_D2s_v3\",\r\n    \"ADs-D\": \"Standard_A2m_v2\",\r\n    \"AAP-P\": \"Standard_D2s_v3\",\r\n    \"AAP-D\": \"Standard_D2s_v3\",\r\n    \"DNS-P\": \"Standard_D2s_v3\",\r\n    \"DNS-D\": \"Standard_D2s_v3\",\r\n    \"BUS-P\": \"Standard_DS2_v2\",\r\n    \"BUS-D\": \"Standard_DS2_v2\",\r\n    \"LIN-P\": \"Standard_DS2_v2\",\r\n    \"LIN-D\": \"Standard_DS2_v2\",\r\n    \"FIL-P\": \"Standard_D4s_v3\",\r\n    \"FIL-D\": \"Standard_D4s_v3\",\r\n    \"DFS-P\": \"Standard_D4s_v3\",\r\n    \"DFS-D\": \"Standard_D4s_v3\",\r\n    \"JMP-P\": \"Standard_D4s_v3\",\r\n    \"JMP-D\": \"Standard_D4s_v3\",\r\n    \"CLT-P\": \"Standard_D4s_v3\",\r\n    \"CLT-D\": \"Standard_D4s_v3\",\r\n    \"PXY-P\": \"Standard_D4s_v3\",\r\n    \"PXY-D\": \"Standard_D2s_v3\",\r\n    \"CLS01-D\": \"Standard_D4s_v3\",\r\n    \"CLS02-D\": \"Standard_D4s_v3\",\r\n    \"CLS01-P\": \"Standard_D4s_v3\",\r\n    \"CLS02-P\": \"Standard_D4s_v3\",\r\n    \"FW-P\": \"Standard_F4\",\r\n    \"FW-D\": \"Standard_F2\"\r\n  },\r\n  \"OSType\": {\r\n    \"Server2022SSIMG\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/b8f402aa-20f7-4888-b45c-3cf086dad9c3/resourceGroups/ACU1-BRW-AOA-RG-G1/providers/Microsoft.Compute/galleries/acu1brwaoag1gallery01/images/vmss2022\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SSIMG\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/b8f402aa-20f7-4888-b45c-3cf086dad9c3/resourceGroups/ACU1-BRW-AOA-RG-G1/providers/Microsoft.Compute/galleries/acu1brwaoag1gallery01/images/vmss2019webnetcore27\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"cbld10\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/27b750cd-ed43-42fd-9044-8d75e124ae55/resourceGroups/SBID-Build-Test/providers/Microsoft.Compute/galleries/cbldtest/images/cbld10-ext\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 1,\r\n        \"IaaSDiagnostics\": 1,\r\n        \"Antimalware\": 0,\r\n        \"DependencyAgent\": 1,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Win10O365\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsDesktop\",\r\n        \"offer\": \"office-365\",\r\n        \"sku\": \"rs5-evd-o365pp\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Client\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Win10\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsDesktop\",\r\n        \"offer\": \"Windows-10\",\r\n        \"sku\": \"21h1-pro-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Client\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"SQLServer2016\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftSQLServer\",\r\n        \"Offer\": \"SQL2016SP2-WS2016\",\r\n        \"sku\": \"Enterprise\",\r\n        \"version\": \"latest\"\r\n      },\r\n      // \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016Core\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-Server-Core\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016small\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016Coresmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-Server-Core-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019-gen2\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"windowsserver-gen2preview\",\r\n        \"sku\": \"2019-Datacenter-gen2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2022\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2022-Datacenter-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"_plan\": {\r\n        \"name\": \"windows-server-2022\",\r\n        \"publisher\": \"microsoftwindowsserver\",\r\n        \"product\": \"microsoftserveroperatingsystems-previews\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2022Containerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"datacenter-core-20h2-with-containers-smalldisk-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Core\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-Core\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019small\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-datacenter-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Coresmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-Server-Core-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Containerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019CoreContainerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-datacenter-core-with-containers-smalldisk-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016SS\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-with-Containers\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SSgs\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers-gs\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SS\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"NetScaler\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"citrix\",\r\n        \"Offer\": \"netscalervpx-120\",\r\n        \"Sku\": \"netscalerbyol\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"netscalerbyol\",\r\n        \"publisher\": \"citrix\",\r\n        \"product\": \"netscalervpx-120\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"MaxLoadBalancer\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"loadbalancer\",\r\n        \"offer\": \"loadbalancer-org-load-balancer-for-azure\",\r\n        \"sku\": \"max_load_balancer\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"max_load_balancer\",\r\n        \"publisher\": \"loadbalancer\",\r\n        \"product\": \"loadbalancer-org-load-balancer-for-azure\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortigate\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet_fortigate-vm_v5\",\r\n        \"sku\": \"fortinet_fg-vm\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"fortinet_fg-vm\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet_fortigate-vm_v5\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortigatepayg\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet_fortigate-vm_v5\",\r\n        \"sku\": \"fortinet_fg-vm_payg\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"fortinet_fg-vm_payg\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet_fortigate-vm_v5\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortimngr\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet-fortimanager\",\r\n        \"sku\": \"fortinet-fortimanager\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 3,\r\n      \"plan\": {\r\n        \"name\": \"fortinet-fortimanager\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet-fortimanager\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"UbuntuServer1904\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"canonical\",\r\n        \"offer\": \"UbuntuServer\",\r\n        \"sku\": \"19.04\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"Antimalware\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 1,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0\r\n      }\r\n    },\r\n    \"Bus-debian\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"credativ\",\r\n        \"offer\": \"Debian\",\r\n        \"sku\": \"8\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 1,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"PROXY-UBUNTU\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"Canonical\",\r\n        \"offer\": \"UbuntuServer\",\r\n        \"sku\": \"16.04-LTS\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"fileUris\": \"[concat(parameters(''global'')._artifactsLocation, ''/scripts/pxy.zip\",\r\n      \"commandToExecute\": \"[concat(''sudo apt-get update && sudo apt-get install unzip && unzip Proxy.zip && sudo bash -x haproxyvm-configure.sh '', '' -a '', ''ilbIPAddress'', '' -r '', ''ilbRabbitMqPort'', '' -m '', ''ilbRabbitMqMgmtPort'', '' -b '', ''dnsName'', ''.'', ''location'', ''.cloudapp.azure.com -p '', ''vmNamePrefix'', ''0 -s '', ''vmNamePrefix'', ''1'')]\",\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"CentOS75\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"OpenLogic\",\r\n        \"Offer\": \"CentOS\",\r\n        \"sku\": \"7.5\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"Antimalware\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    }\r\n  },\r\n  \"ladCfg\": {\r\n    \"diagnosticMonitorConfiguration\": {\r\n      \"eventVolume\": \"Medium\",\r\n      \"metrics\": {\r\n        \"metricAggregation\": [\r\n          {\r\n            \"scheduledTransferPeriod\": \"PT1H\"\r\n          },\r\n          {\r\n            \"scheduledTransferPeriod\": \"PT1M\"\r\n          }\r\n        ],\r\n        \"resourceId\": \"__VM_RESOURCE_ID__\"\r\n      },\r\n      \"performanceCounters\": {\r\n        \"performanceCounterConfiguration\": [\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk read guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readbytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/readbytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk writes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/writespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk transfer time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagetransfertime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagetransfertime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk transfers\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"transferspersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/transferspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk write guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writebytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/writebytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk read time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagereadtime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagereadtime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk write time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagewritetime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagewritetime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk total bytes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/bytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk reads\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readspersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/readspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk queue length\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagediskqueuelength\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagediskqueuelength\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network in guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytesreceived\",\r\n            \"counterSpecifier\": \"/builtin/network/bytesreceived\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network total bytes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytestotal\",\r\n            \"counterSpecifier\": \"/builtin/network/bytestotal\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network out guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytestransmitted\",\r\n            \"counterSpecifier\": \"/builtin/network/bytestransmitted\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network collisions\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totalcollisions\",\r\n            \"counterSpecifier\": \"/builtin/network/totalcollisions\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets received errors\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totalrxerrors\",\r\n            \"counterSpecifier\": \"/builtin/network/totalrxerrors\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets sent\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"packetstransmitted\",\r\n            \"counterSpecifier\": \"/builtin/network/packetstransmitted\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets received\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"packetsreceived\",\r\n            \"counterSpecifier\": \"/builtin/network/packetsreceived\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets sent errors\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totaltxerrors\",\r\n            \"counterSpecifier\": \"/builtin/network/totaltxerrors\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem transfers/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"transferspersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/transferspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % free space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentfreespace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentfreespace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % used space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusedspace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentusedspace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem used space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"usedspace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/usedspace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem read bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytesreadpersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/bytesreadpersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem free space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"freespace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/freespace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % free inodes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentfreeinodes\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentfreeinodes\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/bytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem reads/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readspersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/readspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem write bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"byteswrittenpersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/byteswrittenpersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem writes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writespersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/writespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % used inodes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusedinodes\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentusedinodes\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU IO wait time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentiowaittime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentiowaittime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU user time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusertime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentusertime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU nice time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentnicetime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentnicetime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU percentage guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentprocessortime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentprocessortime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU interrupt time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentinterrupttime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentinterrupttime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU idle time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentidletime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentidletime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU privileged time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentprivilegedtime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentprivilegedtime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"availablememory\",\r\n            \"counterSpecifier\": \"/builtin/memory/availablememory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap percent used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentusedswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentusedswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"usedmemory\",\r\n            \"counterSpecifier\": \"/builtin/memory/usedmemory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Page reads\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pagesreadpersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pagesreadpersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"availableswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/availableswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap percent available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentavailableswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentavailableswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Mem. percent available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentavailablememory\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentavailablememory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Pages\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pagespersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pagespersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"usedswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/usedswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory percentage\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentusedmemory\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentusedmemory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Page writes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pageswrittenpersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pageswrittenpersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          }\r\n        ]\r\n      },\r\n      \"syslogEvents\": {\r\n        \"syslogEventConfiguration\": {\r\n          \"LOG_AUTH\": \"LOG_DEBUG\",\r\n          \"LOG_AUTHPRIV\": \"LOG_DEBUG\",\r\n          \"LOG_CRON\": \"LOG_DEBUG\",\r\n          \"LOG_DAEMON\": \"LOG_DEBUG\",\r\n          \"LOG_FTP\": \"LOG_DEBUG\",\r\n          \"LOG_KERN\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL0\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL1\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL2\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL3\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL4\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL5\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL6\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL7\": \"LOG_DEBUG\",\r\n          \"LOG_LPR\": \"LOG_DEBUG\",\r\n          \"LOG_MAIL\": \"LOG_DEBUG\",\r\n          \"LOG_NEWS\": \"LOG_DEBUG\",\r\n          \"LOG_SYSLOG\": \"LOG_DEBUG\",\r\n          \"LOG_USER\": \"LOG_DEBUG\",\r\n          \"LOG_UUCP\": \"LOG_DEBUG\"\r\n        }\r\n      }\r\n    },\r\n    \"sampleRateInSeconds\": 15\r\n  },\r\n  \"WadCfg\": {\r\n    \"DiagnosticMonitorConfiguration\": {\r\n      \"overallQuotaInMB\": 10000,\r\n      \"DiagnosticInfrastructureLogs\": {\r\n        \"scheduledTransferLogLevelFilter\": \"Error\"\r\n      },\r\n      \"PerformanceCounters\": {\r\n        \"scheduledTransferPeriod\": \"PT1M\",\r\n        \"PerformanceCounterConfiguration\": []\r\n      },\r\n      \"WindowsEventLog\": {\r\n        \"scheduledTransferPeriod\": \"PT5M\",\r\n        \"DataSource\": [\r\n          {\r\n            \"name\": \"Application!*[System[(Level = 1 or Level = 2)]]\"\r\n          },\r\n          {\r\n            \"name\": \"Security!*[System[(Level = 1 or Level = 2)]\"\r\n          },\r\n          {\r\n            \"name\": \"System!*[System[(Level = 1 or Level = 2)]]\"\r\n          },\r\n          {\r\n            \"name\": \"Microsoft-Windows-DSC/Operational!*[System[(EventID=4249 or EventID=4097)]]\"\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}')]",
            "OSType": "[variables('computeGlobal').OSType]",
            "DataDiskInfo": "[variables('computeGlobal').DataDiskInfo]",
            "DeploymentName": "[if(contains(toLower(deployment().name), 'vmapp'), 'AppServers', replace(deployment().name, format('dp{0}-', variables('Deployment')), ''))]",
            "AppServers": "[parameters('DeploymentInfo').AppServers[variables('DeploymentName')]]",
            "HubKVJ": "[json(parameters('Global').hubKV)]",
            "HubRGJ": "[json(parameters('Global').hubRG)]",
            "gh": {
              "hubKVPrefix": "[if(contains(variables('HubKVJ'), 'Prefix'), variables('HubKVJ').Prefix, parameters('Prefix'))]",
              "hubKVOrgName": "[if(contains(variables('HubKVJ'), 'OrgName'), variables('HubKVJ').OrgName, parameters('Global').OrgName)]",
              "hubKVAppName": "[if(contains(variables('HubKVJ'), 'AppName'), variables('HubKVJ').AppName, parameters('Global').AppName)]",
              "hubKVRGName": "[if(contains(variables('HubKVJ'), 'RG'), variables('HubKVJ').RG, variables('HubRGJ').name)]"
            },
            "HubKVRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').hubKVPrefix, variables('gh').hubKVOrgName, variables('gh').hubKVAppName, variables('gh').hubKVRGName)]",
            "HubKVName": "[toLower(format('{0}-{1}-{2}-{3}-kv{4}', variables('gh').hubKVPrefix, variables('gh').hubKVOrgName, variables('gh').hubKVAppName, variables('gh').hubKVRGName, variables('HubKVJ').name))]"
          },
          "resources": [
            {
              "condition": "[variables('VMs')[copyIndex()].match]",
              "copy": {
                "name": "VM",
                "count": "[length(variables('AppServers'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dp{0}-VM-Deploy-{1}', variables('Deployment'), variables('AppServers')[copyIndex()].Name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "Prefix": {
                    "value": "[parameters('Prefix')]"
                  },
                  "DeploymentID": {
                    "value": "[parameters('DeploymentID')]"
                  },
                  "Environment": {
                    "value": "[parameters('Environment')]"
                  },
                  "AppServer": {
                    "value": "[variables('AppServers')[copyIndex()]]"
                  },
                  "VM": {
                    "value": "[variables('VMs')[copyIndex()]]"
                  },
                  "DeploymentName": {
                    "value": "[variables('DeploymentName')]"
                  },
                  "Global": {
                    "value": "[parameters('Global')]"
                  },
                  "vmAdminPassword": {
                    "reference": {
                      "keyVault": {
                        "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults', variables('HubKVName'))]"
                      },
                      "secretName": "localadmin"
                    }
                  },
                  "devOpsPat": {
                    "reference": {
                      "keyVault": {
                        "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults', variables('HubKVName'))]"
                      },
                      "secretName": "devOpsPat"
                    }
                  },
                  "sshPublic": {
                    "reference": {
                      "keyVault": {
                        "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults', variables('HubKVName'))]"
                      },
                      "secretName": "sshPublic"
                    }
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1318.3566",
                      "templateHash": "10183346640093717410"
                    }
                  },
                  "parameters": {
                    "Prefix": {
                      "type": "string"
                    },
                    "DeploymentID": {
                      "type": "string"
                    },
                    "Environment": {
                      "type": "string"
                    },
                    "VM": {
                      "type": "object"
                    },
                    "AppServer": {
                      "type": "object"
                    },
                    "Global": {
                      "type": "object"
                    },
                    "DeploymentName": {
                      "type": "string"
                    },
                    "vmAdminPassword": {
                      "type": "secureString"
                    },
                    "devOpsPat": {
                      "type": "secureString"
                    },
                    "sshPublic": {
                      "type": "secureString"
                    },
                    "saKey": {
                      "type": "secureString",
                      "defaultValue": "[newGuid()]"
                    },
                    "deploymentTime": {
                      "type": "string",
                      "defaultValue": "[utcNow()]"
                    }
                  },
                  "variables": {
                    "Deployment": "[format('{0}-{1}-{2}-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID'))]",
                    "DeploymentURI": "[toLower(format('{0}{1}{2}{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID')))]",
                    "computeGlobal": "[json('{\r\n  \"DataDiskInfo\": {\r\n    \"0GB\": {},\r\n    \"32GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            32\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GBSS\": {\r\n      \"DATASS\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GB-2\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ],\r\n          [\r\n            1,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"128GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            128\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"FIL64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"SOFS\": {\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            1,\r\n            32\r\n          ],\r\n          [\r\n            2,\r\n            32\r\n          ],\r\n          [\r\n            3,\r\n            32\r\n          ]\r\n        ],\r\n        \"FileSystem\": \"ReFS\",\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"SQL64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"LOGS\": {\r\n        \"DriveLetter\": \"G\",\r\n        \"caching\": \"None\",\r\n        \"LUNS\": [\r\n          [\r\n            8,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"TEMPDB\": {\r\n        \"DriveLetter\": \"H\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            12,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"BACKUP\": {\r\n        \"DriveLetter\": \"I\",\r\n        \"caching\": \"None\",\r\n        \"LUNS\": [\r\n          [\r\n            15,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    }\r\n  },\r\n  \"computeSizeLookupOptions\": {\r\n    \"API-P\": \"Standard_D4s_v3\",\r\n    \"API-D\": \"Standard_D4s_v3\",\r\n    \"API-S\": \"Standard_D2s_v3\",\r\n    \"SF-P\": \"Standard_D4s_v3\",\r\n    \"SF-D\": \"Standard_D2s_v3\",\r\n    \"SF-S\": \"Standard_D2s_v3\",\r\n    \"CTNR-P\": \"Standard_D4s_v3\",\r\n    \"CTNR-D\": \"Standard_D2s_v3\",\r\n    \"ADp-P\": \"Standard_D2s_v3\",\r\n    \"ADp-D\": \"Standard_A2m_v2\",\r\n    \"ADs-P\": \"Standard_D2s_v3\",\r\n    \"ADs-D\": \"Standard_A2m_v2\",\r\n    \"AAP-P\": \"Standard_D2s_v3\",\r\n    \"AAP-D\": \"Standard_D2s_v3\",\r\n    \"DNS-P\": \"Standard_D2s_v3\",\r\n    \"DNS-D\": \"Standard_D2s_v3\",\r\n    \"BUS-P\": \"Standard_DS2_v2\",\r\n    \"BUS-D\": \"Standard_DS2_v2\",\r\n    \"LIN-P\": \"Standard_DS2_v2\",\r\n    \"LIN-D\": \"Standard_DS2_v2\",\r\n    \"FIL-P\": \"Standard_D4s_v3\",\r\n    \"FIL-D\": \"Standard_D4s_v3\",\r\n    \"DFS-P\": \"Standard_D4s_v3\",\r\n    \"DFS-D\": \"Standard_D4s_v3\",\r\n    \"JMP-P\": \"Standard_D4s_v3\",\r\n    \"JMP-D\": \"Standard_D4s_v3\",\r\n    \"CLT-P\": \"Standard_D4s_v3\",\r\n    \"CLT-D\": \"Standard_D4s_v3\",\r\n    \"PXY-P\": \"Standard_D4s_v3\",\r\n    \"PXY-D\": \"Standard_D2s_v3\",\r\n    \"CLS01-D\": \"Standard_D4s_v3\",\r\n    \"CLS02-D\": \"Standard_D4s_v3\",\r\n    \"CLS01-P\": \"Standard_D4s_v3\",\r\n    \"CLS02-P\": \"Standard_D4s_v3\",\r\n    \"FW-P\": \"Standard_F4\",\r\n    \"FW-D\": \"Standard_F2\"\r\n  },\r\n  \"OSType\": {\r\n    \"Server2022SSIMG\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/b8f402aa-20f7-4888-b45c-3cf086dad9c3/resourceGroups/ACU1-BRW-AOA-RG-G1/providers/Microsoft.Compute/galleries/acu1brwaoag1gallery01/images/vmss2022\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SSIMG\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/b8f402aa-20f7-4888-b45c-3cf086dad9c3/resourceGroups/ACU1-BRW-AOA-RG-G1/providers/Microsoft.Compute/galleries/acu1brwaoag1gallery01/images/vmss2019webnetcore27\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"cbld10\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/27b750cd-ed43-42fd-9044-8d75e124ae55/resourceGroups/SBID-Build-Test/providers/Microsoft.Compute/galleries/cbldtest/images/cbld10-ext\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 1,\r\n        \"IaaSDiagnostics\": 1,\r\n        \"Antimalware\": 0,\r\n        \"DependencyAgent\": 1,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Win10O365\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsDesktop\",\r\n        \"offer\": \"office-365\",\r\n        \"sku\": \"rs5-evd-o365pp\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Client\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Win10\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsDesktop\",\r\n        \"offer\": \"Windows-10\",\r\n        \"sku\": \"21h1-pro-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Client\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"SQLServer2016\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftSQLServer\",\r\n        \"Offer\": \"SQL2016SP2-WS2016\",\r\n        \"sku\": \"Enterprise\",\r\n        \"version\": \"latest\"\r\n      },\r\n      // \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016Core\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-Server-Core\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016small\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016Coresmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-Server-Core-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019-gen2\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"windowsserver-gen2preview\",\r\n        \"sku\": \"2019-Datacenter-gen2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2022\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2022-Datacenter-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"_plan\": {\r\n        \"name\": \"windows-server-2022\",\r\n        \"publisher\": \"microsoftwindowsserver\",\r\n        \"product\": \"microsoftserveroperatingsystems-previews\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2022Containerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"datacenter-core-20h2-with-containers-smalldisk-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Core\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-Core\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019small\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-datacenter-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Coresmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-Server-Core-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Containerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019CoreContainerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-datacenter-core-with-containers-smalldisk-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016SS\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-with-Containers\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SSgs\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers-gs\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SS\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"NetScaler\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"citrix\",\r\n        \"Offer\": \"netscalervpx-120\",\r\n        \"Sku\": \"netscalerbyol\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"netscalerbyol\",\r\n        \"publisher\": \"citrix\",\r\n        \"product\": \"netscalervpx-120\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"MaxLoadBalancer\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"loadbalancer\",\r\n        \"offer\": \"loadbalancer-org-load-balancer-for-azure\",\r\n        \"sku\": \"max_load_balancer\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"max_load_balancer\",\r\n        \"publisher\": \"loadbalancer\",\r\n        \"product\": \"loadbalancer-org-load-balancer-for-azure\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortigate\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet_fortigate-vm_v5\",\r\n        \"sku\": \"fortinet_fg-vm\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"fortinet_fg-vm\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet_fortigate-vm_v5\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortigatepayg\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet_fortigate-vm_v5\",\r\n        \"sku\": \"fortinet_fg-vm_payg\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"fortinet_fg-vm_payg\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet_fortigate-vm_v5\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortimngr\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet-fortimanager\",\r\n        \"sku\": \"fortinet-fortimanager\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 3,\r\n      \"plan\": {\r\n        \"name\": \"fortinet-fortimanager\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet-fortimanager\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"UbuntuServer1904\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"canonical\",\r\n        \"offer\": \"UbuntuServer\",\r\n        \"sku\": \"19.04\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"Antimalware\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 1,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0\r\n      }\r\n    },\r\n    \"Bus-debian\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"credativ\",\r\n        \"offer\": \"Debian\",\r\n        \"sku\": \"8\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 1,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"PROXY-UBUNTU\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"Canonical\",\r\n        \"offer\": \"UbuntuServer\",\r\n        \"sku\": \"16.04-LTS\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"fileUris\": \"[concat(parameters(''global'')._artifactsLocation, ''/scripts/pxy.zip\",\r\n      \"commandToExecute\": \"[concat(''sudo apt-get update && sudo apt-get install unzip && unzip Proxy.zip && sudo bash -x haproxyvm-configure.sh '', '' -a '', ''ilbIPAddress'', '' -r '', ''ilbRabbitMqPort'', '' -m '', ''ilbRabbitMqMgmtPort'', '' -b '', ''dnsName'', ''.'', ''location'', ''.cloudapp.azure.com -p '', ''vmNamePrefix'', ''0 -s '', ''vmNamePrefix'', ''1'')]\",\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"CentOS75\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"OpenLogic\",\r\n        \"Offer\": \"CentOS\",\r\n        \"sku\": \"7.5\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"Antimalware\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    }\r\n  },\r\n  \"ladCfg\": {\r\n    \"diagnosticMonitorConfiguration\": {\r\n      \"eventVolume\": \"Medium\",\r\n      \"metrics\": {\r\n        \"metricAggregation\": [\r\n          {\r\n            \"scheduledTransferPeriod\": \"PT1H\"\r\n          },\r\n          {\r\n            \"scheduledTransferPeriod\": \"PT1M\"\r\n          }\r\n        ],\r\n        \"resourceId\": \"__VM_RESOURCE_ID__\"\r\n      },\r\n      \"performanceCounters\": {\r\n        \"performanceCounterConfiguration\": [\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk read guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readbytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/readbytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk writes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/writespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk transfer time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagetransfertime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagetransfertime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk transfers\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"transferspersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/transferspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk write guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writebytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/writebytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk read time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagereadtime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagereadtime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk write time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagewritetime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagewritetime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk total bytes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/bytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk reads\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readspersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/readspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk queue length\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagediskqueuelength\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagediskqueuelength\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network in guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytesreceived\",\r\n            \"counterSpecifier\": \"/builtin/network/bytesreceived\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network total bytes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytestotal\",\r\n            \"counterSpecifier\": \"/builtin/network/bytestotal\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network out guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytestransmitted\",\r\n            \"counterSpecifier\": \"/builtin/network/bytestransmitted\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network collisions\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totalcollisions\",\r\n            \"counterSpecifier\": \"/builtin/network/totalcollisions\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets received errors\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totalrxerrors\",\r\n            \"counterSpecifier\": \"/builtin/network/totalrxerrors\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets sent\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"packetstransmitted\",\r\n            \"counterSpecifier\": \"/builtin/network/packetstransmitted\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets received\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"packetsreceived\",\r\n            \"counterSpecifier\": \"/builtin/network/packetsreceived\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets sent errors\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totaltxerrors\",\r\n            \"counterSpecifier\": \"/builtin/network/totaltxerrors\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem transfers/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"transferspersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/transferspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % free space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentfreespace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentfreespace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % used space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusedspace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentusedspace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem used space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"usedspace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/usedspace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem read bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytesreadpersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/bytesreadpersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem free space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"freespace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/freespace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % free inodes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentfreeinodes\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentfreeinodes\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/bytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem reads/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readspersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/readspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem write bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"byteswrittenpersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/byteswrittenpersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem writes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writespersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/writespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % used inodes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusedinodes\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentusedinodes\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU IO wait time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentiowaittime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentiowaittime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU user time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusertime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentusertime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU nice time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentnicetime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentnicetime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU percentage guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentprocessortime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentprocessortime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU interrupt time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentinterrupttime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentinterrupttime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU idle time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentidletime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentidletime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU privileged time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentprivilegedtime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentprivilegedtime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"availablememory\",\r\n            \"counterSpecifier\": \"/builtin/memory/availablememory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap percent used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentusedswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentusedswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"usedmemory\",\r\n            \"counterSpecifier\": \"/builtin/memory/usedmemory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Page reads\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pagesreadpersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pagesreadpersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"availableswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/availableswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap percent available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentavailableswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentavailableswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Mem. percent available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentavailablememory\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentavailablememory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Pages\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pagespersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pagespersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"usedswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/usedswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory percentage\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentusedmemory\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentusedmemory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Page writes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pageswrittenpersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pageswrittenpersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          }\r\n        ]\r\n      },\r\n      \"syslogEvents\": {\r\n        \"syslogEventConfiguration\": {\r\n          \"LOG_AUTH\": \"LOG_DEBUG\",\r\n          \"LOG_AUTHPRIV\": \"LOG_DEBUG\",\r\n          \"LOG_CRON\": \"LOG_DEBUG\",\r\n          \"LOG_DAEMON\": \"LOG_DEBUG\",\r\n          \"LOG_FTP\": \"LOG_DEBUG\",\r\n          \"LOG_KERN\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL0\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL1\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL2\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL3\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL4\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL5\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL6\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL7\": \"LOG_DEBUG\",\r\n          \"LOG_LPR\": \"LOG_DEBUG\",\r\n          \"LOG_MAIL\": \"LOG_DEBUG\",\r\n          \"LOG_NEWS\": \"LOG_DEBUG\",\r\n          \"LOG_SYSLOG\": \"LOG_DEBUG\",\r\n          \"LOG_USER\": \"LOG_DEBUG\",\r\n          \"LOG_UUCP\": \"LOG_DEBUG\"\r\n        }\r\n      }\r\n    },\r\n    \"sampleRateInSeconds\": 15\r\n  },\r\n  \"WadCfg\": {\r\n    \"DiagnosticMonitorConfiguration\": {\r\n      \"overallQuotaInMB\": 10000,\r\n      \"DiagnosticInfrastructureLogs\": {\r\n        \"scheduledTransferLogLevelFilter\": \"Error\"\r\n      },\r\n      \"PerformanceCounters\": {\r\n        \"scheduledTransferPeriod\": \"PT1M\",\r\n        \"PerformanceCounterConfiguration\": []\r\n      },\r\n      \"WindowsEventLog\": {\r\n        \"scheduledTransferPeriod\": \"PT5M\",\r\n        \"DataSource\": [\r\n          {\r\n            \"name\": \"Application!*[System[(Level = 1 or Level = 2)]]\"\r\n          },\r\n          {\r\n            \"name\": \"Security!*[System[(Level = 1 or Level = 2)]\"\r\n          },\r\n          {\r\n            \"name\": \"System!*[System[(Level = 1 or Level = 2)]]\"\r\n          },\r\n          {\r\n            \"name\": \"Microsoft-Windows-DSC/Operational!*[System[(EventID=4249 or EventID=4097)]]\"\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}')]",
                    "OSType": "[variables('computeGlobal').OSType]",
                    "WadCfg": "[variables('computeGlobal').WadCfg]",
                    "ladCfg": "[variables('computeGlobal').ladCfg]",
                    "DataDiskInfo": "[variables('computeGlobal').DataDiskInfo]",
                    "computeSizeLookupOptions": "[variables('computeGlobal').computeSizeLookupOptions]",
                    "RGName": "[format('{0}-{1}-{2}-RG-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').AppName, parameters('Environment'), parameters('DeploymentID'))]",
                    "GlobalRGJ": "[json(parameters('Global').GlobalRG)]",
                    "GlobalSAJ": "[json(parameters('Global').GlobalSA)]",
                    "HubKVJ": "[json(parameters('Global').hubKV)]",
                    "HubRGJ": "[json(parameters('Global').hubRG)]",
                    "HubAAJ": "[json(parameters('Global').hubAA)]",
                    "regionLookup": "[json('{\r\n  \"francecentral\": {\r\n    \"displayname\": \"France Central\",\r\n    \"location\": \"francecentral\",\r\n    \"PREFIX\": \"AFC1\",\r\n    \"pairedRegion\": \"francesouth\"\r\n  },\r\n  \"southeastasia\": {\r\n    \"displayname\": \"Southeast Asia\",\r\n    \"location\": \"southeastasia\",\r\n    \"PREFIX\": \"ASA1\",\r\n    \"pairedRegion\": \"eastasia\"\r\n  },\r\n  \"southafricawest\": {\r\n    \"displayname\": \"South Africa West\",\r\n    \"location\": \"southafricawest\",\r\n    \"PREFIX\": \"ASAW\",\r\n    \"pairedRegion\": \"southafricanorth\"\r\n  },\r\n  \"eastus2\": {\r\n    \"displayname\": \"East US 2\",\r\n    \"location\": \"eastus2\",\r\n    \"PREFIX\": \"AEU2\",\r\n    \"pairedRegion\": \"centralus\"\r\n  },\r\n  \"eastus\": {\r\n    \"displayname\": \"East US\",\r\n    \"location\": \"eastus\",\r\n    \"PREFIX\": \"AEU1\",\r\n    \"pairedRegion\": \"westus\"\r\n  },\r\n  \"jioindiawest\": {\r\n    \"displayname\": \"Jio India West\",\r\n    \"location\": \"jioindiawest\",\r\n    \"PREFIX\": \"AJIW\",\r\n    \"pairedRegion\": \"jioindiacentral\"\r\n  },\r\n  \"westcentralus\": {\r\n    \"displayname\": \"West Central US\",\r\n    \"location\": \"westcentralus\",\r\n    \"PREFIX\": \"AWCU\",\r\n    \"pairedRegion\": \"westus2\"\r\n  },\r\n  \"koreacentral\": {\r\n    \"displayname\": \"Korea Central\",\r\n    \"location\": \"koreacentral\",\r\n    \"PREFIX\": \"AKC1\",\r\n    \"pairedRegion\": \"koreasouth\"\r\n  },\r\n  \"uaecentral\": {\r\n    \"displayname\": \"UAE Central\",\r\n    \"location\": \"uaecentral\",\r\n    \"PREFIX\": \"AUC1\",\r\n    \"pairedRegion\": \"uaenorth\"\r\n  },\r\n  \"westus\": {\r\n    \"displayname\": \"West US\",\r\n    \"location\": \"westus\",\r\n    \"PREFIX\": \"AWU1\",\r\n    \"pairedRegion\": \"eastus\"\r\n  },\r\n  \"southafricanorth\": {\r\n    \"displayname\": \"South Africa North\",\r\n    \"location\": \"southafricanorth\",\r\n    \"PREFIX\": \"ASAN\",\r\n    \"pairedRegion\": \"southafricawest\"\r\n  },\r\n  \"australiacentral2\": {\r\n    \"displayname\": \"Australia Central 2\",\r\n    \"location\": \"australiacentral2\",\r\n    \"PREFIX\": \"AAC2\",\r\n    \"pairedRegion\": \"australiacentral2\"\r\n  },\r\n  \"francesouth\": {\r\n    \"displayname\": \"France South\",\r\n    \"location\": \"francesouth\",\r\n    \"PREFIX\": \"AFS1\",\r\n    \"pairedRegion\": \"francecentral\"\r\n  },\r\n  \"ukwest\": {\r\n    \"displayname\": \"UK West\",\r\n    \"location\": \"ukwest\",\r\n    \"PREFIX\": \"AUW1\",\r\n    \"pairedRegion\": \"uksouth\"\r\n  },\r\n  \"southindia\": {\r\n    \"displayname\": \"South India\",\r\n    \"location\": \"southindia\",\r\n    \"PREFIX\": \"ASI1\",\r\n    \"pairedRegion\": \"centralindia\"\r\n  },\r\n  \"centralus\": {\r\n    \"displayname\": \"Central US\",\r\n    \"location\": \"centralus\",\r\n    \"PREFIX\": \"ACU1\",\r\n    \"pairedRegion\": \"eastus2\"\r\n  },\r\n  \"germanynorth\": {\r\n    \"displayname\": \"Germany North\",\r\n    \"location\": \"germanynorth\",\r\n    \"PREFIX\": \"AGN1\",\r\n    \"pairedRegion\": \"germanywestcentral\"\r\n  },\r\n  \"koreasouth\": {\r\n    \"displayname\": \"Korea South\",\r\n    \"location\": \"koreasouth\",\r\n    \"PREFIX\": \"AKS1\",\r\n    \"pairedRegion\": \"koreacentral\"\r\n  },\r\n  \"westindia\": {\r\n    \"displayname\": \"West India\",\r\n    \"location\": \"westindia\",\r\n    \"PREFIX\": \"AWI1\",\r\n    \"pairedRegion\": \"southindia\"\r\n  },\r\n  \"westus2\": {\r\n    \"displayname\": \"West US 2\",\r\n    \"location\": \"westus2\",\r\n    \"PREFIX\": \"AWU2\",\r\n    \"pairedRegion\": \"westcentralus\"\r\n  },\r\n  \"northcentralus\": {\r\n    \"displayname\": \"North Central US\",\r\n    \"location\": \"northcentralus\",\r\n    \"PREFIX\": \"ANCU\",\r\n    \"pairedRegion\": \"southcentralus\"\r\n  },\r\n  \"westeurope\": {\r\n    \"displayname\": \"West Europe\",\r\n    \"location\": \"westeurope\",\r\n    \"PREFIX\": \"AWEU\",\r\n    \"pairedRegion\": \"northeurope\"\r\n  },\r\n  \"canadacentral\": {\r\n    \"displayname\": \"Canada Central\",\r\n    \"location\": \"canadacentral\",\r\n    \"PREFIX\": \"ACC1\",\r\n    \"pairedRegion\": \"canadaeast\"\r\n  },\r\n  \"southcentralus\": {\r\n    \"displayname\": \"South Central US\",\r\n    \"location\": \"southcentralus\",\r\n    \"PREFIX\": \"ASCU\",\r\n    \"pairedRegion\": \"northcentralus\"\r\n  },\r\n  \"norwayeast\": {\r\n    \"displayname\": \"Norway East\",\r\n    \"location\": \"norwayeast\",\r\n    \"PREFIX\": \"ANE1\",\r\n    \"pairedRegion\": \"norwaywest\"\r\n  },\r\n  \"japanwest\": {\r\n    \"displayname\": \"Japan West\",\r\n    \"location\": \"japanwest\",\r\n    \"PREFIX\": \"AJW1\",\r\n    \"pairedRegion\": \"japaneast\"\r\n  },\r\n  \"norwaywest\": {\r\n    \"displayname\": \"Norway West\",\r\n    \"location\": \"norwaywest\",\r\n    \"PREFIX\": \"ANW1\",\r\n    \"pairedRegion\": \"norwayeast\"\r\n  },\r\n  \"jioindiacentral\": {\r\n    \"displayname\": \"Jio India Central\",\r\n    \"location\": \"jioindiacentral\",\r\n    \"PREFIX\": \"AJIC\",\r\n    \"pairedRegion\": \"jioindiawest\"\r\n  },\r\n  \"centralindia\": {\r\n    \"displayname\": \"Central India\",\r\n    \"location\": \"centralindia\",\r\n    \"PREFIX\": \"ACI1\",\r\n    \"pairedRegion\": \"southindia\"\r\n  },\r\n  \"westus3\": {\r\n    \"displayname\": \"West US 3\",\r\n    \"location\": \"westus3\",\r\n    \"PREFIX\": \"AWU3\",\r\n    \"pairedRegion\": \"eastus\"\r\n  },\r\n  \"brazilsouth\": {\r\n    \"displayname\": \"Brazil South\",\r\n    \"location\": \"brazilsouth\",\r\n    \"PREFIX\": \"ABS1\",\r\n    \"pairedRegion\": \"southcentralus\"\r\n  },\r\n  \"eastasia\": {\r\n    \"displayname\": \"East Asia\",\r\n    \"location\": \"eastasia\",\r\n    \"PREFIX\": \"AEA1\",\r\n    \"pairedRegion\": \"southeastasia\"\r\n  },\r\n  \"swedencentral\": {\r\n    \"displayname\": \"Sweden Central\",\r\n    \"location\": \"swedencentral\",\r\n    \"PREFIX\": \"ASC1\",\r\n    \"pairedRegion\": \"swedensouth\"\r\n  },\r\n  \"uksouth\": {\r\n    \"displayname\": \"UK South\",\r\n    \"location\": \"uksouth\",\r\n    \"PREFIX\": \"AUS1\",\r\n    \"pairedRegion\": \"ukwest\"\r\n  },\r\n  \"switzerlandnorth\": {\r\n    \"displayname\": \"Switzerland North\",\r\n    \"location\": \"switzerlandnorth\",\r\n    \"PREFIX\": \"ASN1\",\r\n    \"pairedRegion\": \"switzerlandwest\"\r\n  },\r\n  \"canadaeast\": {\r\n    \"displayname\": \"Canada East\",\r\n    \"location\": \"canadaeast\",\r\n    \"PREFIX\": \"ACE1\",\r\n    \"pairedRegion\": \"canadacentral\"\r\n  },\r\n  \"australiasoutheast\": {\r\n    \"displayname\": \"Australia Southeast\",\r\n    \"location\": \"australiasoutheast\",\r\n    \"PREFIX\": \"AAS1\",\r\n    \"pairedRegion\": \"australiaeast\"\r\n  },\r\n  \"northeurope\": {\r\n    \"displayname\": \"North Europe\",\r\n    \"location\": \"northeurope\",\r\n    \"PREFIX\": \"ANEU\",\r\n    \"pairedRegion\": \"westeurope\"\r\n  },\r\n  \"germanywestcentral\": {\r\n    \"displayname\": \"Germany West Central\",\r\n    \"location\": \"germanywestcentral\",\r\n    \"PREFIX\": \"AGWC\",\r\n    \"pairedRegion\": \"germanynorth\"\r\n  },\r\n  \"japaneast\": {\r\n    \"displayname\": \"Japan East\",\r\n    \"location\": \"japaneast\",\r\n    \"PREFIX\": \"AJE1\",\r\n    \"pairedRegion\": \"japanwest\"\r\n  },\r\n  \"uaenorth\": {\r\n    \"displayname\": \"UAE North\",\r\n    \"location\": \"uaenorth\",\r\n    \"PREFIX\": \"AUN1\",\r\n    \"pairedRegion\": \"uaecentral\"\r\n  },\r\n  \"australiaeast\": {\r\n    \"displayname\": \"Australia East\",\r\n    \"location\": \"australiaeast\",\r\n    \"PREFIX\": \"AAE1\",\r\n    \"pairedRegion\": \"australiasoutheast\"\r\n  },\r\n  \"switzerlandwest\": {\r\n    \"displayname\": \"Switzerland West\",\r\n    \"location\": \"switzerlandwest\",\r\n    \"PREFIX\": \"ASW1\",\r\n    \"pairedRegion\": \"switzerlandnorth\"\r\n  },\r\n  \"australiacentral\": {\r\n    \"displayname\": \"Australia Central\",\r\n    \"location\": \"australiacentral\",\r\n    \"PREFIX\": \"AAC1\",\r\n    \"pairedRegion\": \"australiacentral\"\r\n  },\r\n  \"brazilsoutheast\": {\r\n    \"displayname\": \"Brazil Southeast\",\r\n    \"location\": \"brazilsoutheast\",\r\n    \"PREFIX\": \"ABSE\",\r\n    \"pairedRegion\": \"brazilsouth\"\r\n  }\r\n}\r\n')]",
                    "primaryPrefix": "[variables('regionLookup')[parameters('Global').PrimaryLocation].prefix]",
                    "gh": {
                      "globalRGPrefix": "[if(contains(variables('GlobalRGJ'), 'Prefix'), variables('GlobalRGJ').Prefix, variables('primaryPrefix'))]",
                      "globalRGOrgName": "[if(contains(variables('GlobalRGJ'), 'OrgName'), variables('GlobalRGJ').OrgName, parameters('Global').OrgName)]",
                      "globalRGAppName": "[if(contains(variables('GlobalRGJ'), 'AppName'), variables('GlobalRGJ').AppName, parameters('Global').AppName)]",
                      "globalRGName": "[if(contains(variables('GlobalRGJ'), 'name'), variables('GlobalRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID')))]",
                      "globalSAPrefix": "[if(contains(variables('GlobalSAJ'), 'Prefix'), variables('GlobalSAJ').Prefix, variables('primaryPrefix'))]",
                      "globalSAOrgName": "[if(contains(variables('GlobalSAJ'), 'OrgName'), variables('GlobalSAJ').OrgName, parameters('Global').OrgName)]",
                      "globalSAAppName": "[if(contains(variables('GlobalSAJ'), 'AppName'), variables('GlobalSAJ').AppName, parameters('Global').AppName)]",
                      "globalSARGName": "[if(contains(variables('GlobalSAJ'), 'RG'), variables('GlobalSAJ').RG, if(contains(variables('GlobalRGJ'), 'name'), variables('GlobalRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID'))))]",
                      "hubRGPrefix": "[if(contains(variables('HubRGJ'), 'Prefix'), variables('HubRGJ').Prefix, parameters('Prefix'))]",
                      "hubRGOrgName": "[if(contains(variables('HubRGJ'), 'OrgName'), variables('HubRGJ').OrgName, parameters('Global').OrgName)]",
                      "hubRGAppName": "[if(contains(variables('HubRGJ'), 'AppName'), variables('HubRGJ').AppName, parameters('Global').AppName)]",
                      "hubRGRGName": "[if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID'))))]",
                      "hubKVPrefix": "[if(contains(variables('HubKVJ'), 'Prefix'), variables('HubKVJ').Prefix, parameters('Prefix'))]",
                      "hubKVOrgName": "[if(contains(variables('HubKVJ'), 'OrgName'), variables('HubKVJ').OrgName, parameters('Global').OrgName)]",
                      "hubKVAppName": "[if(contains(variables('HubKVJ'), 'AppName'), variables('HubKVJ').AppName, parameters('Global').AppName)]",
                      "hubKVRGName": "[if(contains(variables('HubKVJ'), 'RG'), variables('HubKVJ').RG, variables('HubRGJ').name)]",
                      "hubAAPrefix": "[if(contains(variables('HubAAJ'), 'Prefix'), variables('HubAAJ').Prefix, parameters('Prefix'))]",
                      "hubAAOrgName": "[if(contains(variables('HubAAJ'), 'OrgName'), variables('HubAAJ').OrgName, parameters('Global').OrgName)]",
                      "hubAAAppName": "[if(contains(variables('HubAAJ'), 'AppName'), variables('HubAAJ').AppName, parameters('Global').AppName)]",
                      "hubAARGName": "[if(contains(variables('HubAAJ'), 'RG'), variables('HubAAJ').RG, variables('HubRGJ').name)]"
                    },
                    "globalRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').globalRGPrefix, variables('gh').globalRGOrgName, variables('gh').globalRGAppName, variables('gh').globalRGName)]",
                    "HubRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').hubRGPrefix, variables('gh').hubRGOrgName, variables('gh').hubRGAppName, variables('gh').hubRGRGName)]",
                    "globalSAName": "[toLower(format('{0}{1}{2}{3}sa{4}', variables('gh').globalSAPrefix, variables('gh').globalSAOrgName, variables('gh').globalSAAppName, variables('gh').globalSARGName, variables('GlobalRGJ').name))]",
                    "HubKVRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').hubKVPrefix, variables('gh').hubKVOrgName, variables('gh').hubKVAppName, variables('gh').hubKVRGName)]",
                    "HubKVName": "[toLower(format('{0}-{1}-{2}-{3}-kv{4}', variables('gh').hubKVPrefix, variables('gh').hubKVOrgName, variables('gh').hubKVAppName, variables('gh').hubKVRGName, variables('HubKVJ').name))]",
                    "AAName": "[toLower(format('{0}{1}{2}{3}{4}', variables('gh').hubAAPrefix, variables('gh').hubAAOrgName, variables('gh').hubAAAppName, variables('gh').hubAARGName, variables('HubAAJ').name))]",
                    "EnvironmentLookup": {
                      "D": "Dev",
                      "T": "Test",
                      "I": "Int",
                      "U": "UAT",
                      "P": "PROD",
                      "S": "SBX"
                    },
                    "DSCConfigLookup": {
                      "AppServers": "AppServers",
                      "InitialDOP": "AppServers",
                      "WVDServers": "AppServers"
                    },
                    "AppServerSizeLookup": {
                      "D": "D",
                      "T": "D",
                      "I": "D",
                      "U": "D",
                      "P": "P",
                      "S": "D"
                    },
                    "RebootNodeLookup": {
                      "D": true,
                      "Q": true,
                      "T": true,
                      "U": true,
                      "P": false
                    },
                    "ConfigurationMode": {
                      "D": "ApplyAndAutoCorrect",
                      "Q": "ApplyAndAutoCorrect",
                      "T": "ApplyAndAutoCorrect",
                      "U": "ApplyAndAutoCorrect",
                      "P": "ApplyAndMonitor"
                    },
                    "DSCConfigurationModeFrequencyMins": 15,
                    "networkId": "[format('{0}{1}', parameters('Global').networkid[0], string(sub(parameters('Global').networkid[1], mul(2, int(parameters('DeploymentID'))))))]",
                    "storageAccountType": "[if(equals(parameters('Environment'), 'P'), if(contains(parameters('AppServer'), 'Zone'), 'Premium_LRS', 'Premium_ZRS'), if(contains(parameters('AppServer'), 'Zone'), 'StandardSSD_ZRS', 'StandardSSD_LRS'))]",
                    "SADiagName": "[format('{0}sadiag', variables('DeploymentURI'))]",
                    "saaccountiddiag": "[resourceId('Microsoft.Storage/storageAccounts/', variables('SADiagName'))]",
                    "saSQLBackupName": "[format('{0}sasqlbackup', variables('DeploymentURI'))]",
                    "MSILookup": {
                      "SQL": "Cluster",
                      "UTL": "DefaultKeyVault",
                      "FIL": "Cluster",
                      "OCR": "Storage",
                      "WVD": "WVD"
                    },
                    "userAssignedIdentities": {
                      "Cluster": {
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiKeyVaultSecretsGet', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperator', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperatorGlobal', variables('Deployment'))))]": {}
                      },
                      "Default": {
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiKeyVaultSecretsGet', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperatorGlobal', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperator', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountFileContributor', variables('Deployment'))))]": {}
                      },
                      "DefaultKeyVault": {
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperatorGlobal', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiKeyVaultSecretsGetApp', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiAzureServiceBusDataOwner', variables('Deployment'))))]": {}
                      },
                      "WVD": {
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperatorGlobal', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountFileContributor', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiWVDRegKeyReader', variables('Deployment'))))]": {}
                      },
                      "Storage": {
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountContributor', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperatorGlobal', variables('Deployment'))))]": {}
                      },
                      "None": {}
                    },
                    "ASNAME": "[if(contains(parameters('AppServer'), 'Zone'), 'usingZones', parameters('AppServer').ASNAME)]"
                  },
                  "resources": [
                    {
                      "condition": "[not(equals(variables('ASNAME'), 'usingZones'))]",
                      "type": "Microsoft.Compute/availabilitySets",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}-as{1}', variables('Deployment'), variables('ASNAME'))]",
                      "location": "[resourceGroup().location]",
                      "sku": {
                        "name": "Aligned"
                      },
                      "properties": {
                        "platformUpdateDomainCount": 5,
                        "platformFaultDomainCount": 3
                      }
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines",
                      "apiVersion": "2021-04-01",
                      "name": "[format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "location": "[resourceGroup().location]",
                      "identity": {
                        "type": "SystemAssigned, UserAssigned",
                        "userAssignedIdentities": "[if(contains(variables('MSILookup'), parameters('AppServer').ROLE), variables('userAssignedIdentities')[variables('MSILookup')[parameters('AppServer').ROLE]], variables('userAssignedIdentities').Default)]"
                      },
                      "tags": {
                        "Environment": "[variables('EnvironmentLookup')[parameters('Environment')]]",
                        "Zone": "[if(contains(parameters('AppServer'), 'Zone'), parameters('AppServer').Zone, 1)]"
                      },
                      "zones": "[if(contains(parameters('AppServer'), 'Zone'), array(parameters('AppServer').Zone), null())]",
                      "plan": "[if(contains(variables('OSType')[parameters('AppServer').OSType], 'plan'), variables('OSType')[parameters('AppServer').OSType].plan, null())]",
                      "properties": {
                        "licenseType": "[if(contains(variables('OSType')[parameters('AppServer').OSType], 'licenseType'), variables('OSType')[parameters('AppServer').OSType].licenseType, null())]",
                        "availabilitySet": "[if(contains(parameters('AppServer'), 'Zone'), null(), createObject('id', format('{0}', resourceId('Microsoft.Compute/availabilitySets', format('{0}-as{1}', variables('Deployment'), parameters('AppServer').ASName)))))]",
                        "hardwareProfile": {
                          "vmSize": "[variables('computeSizeLookupOptions')[format('{0}-{1}', parameters('AppServer').ROLE, variables('AppServerSizeLookup')[parameters('Environment')])]]"
                        },
                        "osProfile": {
                          "computerName": "[parameters('VM').vmHostName]",
                          "adminUsername": "[if(contains(parameters('AppServer'), 'AdminUser'), parameters('AppServer').AdminUser, parameters('Global').vmAdminUserName)]",
                          "adminPassword": "[parameters('vmAdminPassword')]",
                          "customData": "[if(contains(parameters('AppServer'), 'customData'), base64(replace(parameters('AppServer').customData, '{0}', format('{0}.', variables('networkId')))), null())]",
                          "secrets": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), createArray(createObject('sourceVault', createObject('id', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults', variables('HubKVName'))), 'vaultCertificates', createArray(createObject('certificateUrl', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults/secrets', variables('HubKVName'), parameters('Global').CertName), '2021-06-01-preview').secretUriWithVersion, 'certificateStore', 'My'), createObject('certificateUrl', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults/secrets', variables('HubKVName'), parameters('Global').CertName), '2021-06-01-preview').secretUriWithVersion, 'certificateStore', 'Root'), createObject('certificateUrl', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults/secrets', variables('HubKVName'), parameters('Global').CertName), '2021-06-01-preview').secretUriWithVersion, 'certificateStore', 'CA')))), null())]",
                          "windowsConfiguration": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), parameters('VM').windowsConfiguration, null())]",
                          "linuxConfiguration": "[if(not(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows')), parameters('VM').linuxConfiguration, null())]"
                        },
                        "storageProfile": {
                          "imageReference": "[variables('OSType')[parameters('AppServer').OSType].imageReference]",
                          "osDisk": {
                            "name": "[format('{0}-{1}-OSDisk', variables('Deployment'), parameters('AppServer').Name)]",
                            "caching": "ReadWrite",
                            "diskSizeGB": "[variables('OSType')[parameters('AppServer').OSType].OSDiskGB]",
                            "createOption": "FromImage",
                            "managedDisk": {
                              "storageAccountType": "[if(contains(parameters('AppServer'), 'OSstorageAccountType'), parameters('AppServer').OSstorageAccountType, variables('storageAccountType'))]"
                            }
                          },
                          "dataDisks": "[reference(resourceId('Microsoft.Resources/deployments', format('dp{0}-AppServer-diskLookup{1}', variables('Deployment'), parameters('AppServer').Name))).outputs.DATADisks.value]"
                        },
                        "networkProfile": {
                          "copy": [
                            {
                              "name": "networkInterfaces",
                              "count": "[length(parameters('AppServer').NICs)]",
                              "input": {
                                "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}{1}{2}{3}', variables('Deployment'), if(contains(parameters('AppServer').NICs[copyIndex('networkInterfaces')], 'LB'), '-niclb', if(contains(parameters('AppServer').NICs[copyIndex('networkInterfaces')], 'PLB'), '-nicplb', if(contains(parameters('AppServer').NICs[copyIndex('networkInterfaces')], 'SLB'), '-nicslb', '-nic'))), if(equals(copyIndex('networkInterfaces'), 0), '', add(copyIndex('networkInterfaces'), 1)), parameters('AppServer').Name))]",
                                "properties": {
                                  "primary": "[contains(parameters('AppServer').NICs[copyIndex('networkInterfaces')], 'Primary')]",
                                  "deleteOption": "Delete"
                                }
                              }
                            }
                          ]
                        },
                        "diagnosticsProfile": {
                          "bootDiagnostics": {
                            "enabled": true,
                            "storageUri": "[format('https://{0}.blob.{1}', variables('SADiagName'), environment().suffixes.storage)]"
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-AppServer-nicDeployLoop{1}', variables('Deployment'), parameters('AppServer').Name))]",
                        "[resourceId('Microsoft.Compute/availabilitySets', format('{0}-as{1}', variables('Deployment'), variables('ASNAME')))]",
                        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-AppServer-diskLookup{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, contains(parameters('AppServer'), 'shutdown'))]",
                      "type": "Microsoft.DevTestLab/schedules",
                      "apiVersion": "2018-09-15",
                      "name": "[format('shutdown-computevm-{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "dailyRecurrence": {
                          "time": "[parameters('AppServer').shutdown.time]"
                        },
                        "notificationSettings": {
                          "status": "[if(and(contains(parameters('AppServer').shutdown, 'notification'), bool(parameters('AppServer').shutdown.notification)), 'Enabled', 'Disabled')]",
                          "emailRecipient": "[replace(replace(replace(string(parameters('Global').alertRecipients), '\",\"', ';'), '[\"', ''), '\"]', '')]",
                          "notificationLocale": "en",
                          "timeInMinutes": 30
                        },
                        "status": "[if(or(not(contains(parameters('AppServer').shutdown, 'enabled')), and(contains(parameters('AppServer').shutdown, 'enabled'), bool(parameters('AppServer').shutdown.enabled))), 'Enabled', 'Disabled')]",
                        "targetResourceId": "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]",
                        "taskType": "ComputeVmShutdownTask",
                        "timeZoneId": "[parameters('Global').shutdownSchedulerTimeZone]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.CertMgmt))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'KVAppServerExtensionForWindows')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.Azure.KeyVault.Edp",
                        "type": "KeyVaultForWindows",
                        "typeHandlerVersion": "0.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "secretsManagementSettings": {
                            "pollingIntervalInS": 3600,
                            "certificateStoreName": "MY",
                            "certificateStoreLocation": "LOCAL_MACHINE",
                            "observedCertificates": [
                              "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults/secrets', variables('HubKVName'), parameters('Global').CertName), '2021-06-01-preview').secretUri]"
                            ]
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(parameters('VM').match, bool(parameters('VM').Extensions.AADLogin)), and(contains(parameters('AppServer'), 'ExcludeAADLogin'), not(equals(parameters('AppServer').ExcludeAADLogin, 1))))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'AADLogin')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'Microsoft.Azure.ActiveDirectory', 'Microsoft.Azure.ActiveDirectory.LinuxSSH')]",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'AADLoginForWindows', 'AADLoginForLinux')]",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.AzureDefender))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'AzureDefenderForServers')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.Azure.AzureDefenderForServers",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'MDE.Windows', 'MDE.Linux')]",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "azureResourceId": "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]",
                          "defenderForServersWorkspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', variables('DeploymentURI')))]",
                          "forceReOnboarding": false
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.GuestConfig))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'AzureGuestConfig')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.GuestConfiguration",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'ConfigurationForWindows', 'ConfigurationForLinux')]",
                        "typeHandlerVersion": "1.2",
                        "autoUpgradeMinorVersion": true,
                        "settings": {}
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(parameters('VM').match, bool(parameters('VM').Extensions.AdminCenter)), and(contains(parameters('AppServer'), 'ExcludeAdminCenter'), not(equals(parameters('AppServer').ExcludeAdminCenter, 1))))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'AdminCenter')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "publisher": "Microsoft.AdminCenter",
                        "type": "AdminCenter",
                        "typeHandlerVersion": "0.0",
                        "settings": {
                          "port": "6516",
                          "cspFrameAncestors": [
                            "https://portal.azure.com",
                            "https://*.hosting.portal.azure.net",
                            "https://localhost:1340"
                          ],
                          "corsOrigins": [
                            "https://portal.azure.com",
                            "https://waconazure.com"
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(parameters('VM').match, bool(parameters('VM').Extensions.DomainJoin)), not(and(contains(parameters('AppServer'), 'ExcludeDomainJoin'), bool(parameters('AppServer').ExcludeDomainJoin))))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'joindomain')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.Compute",
                        "type": "JsonADDomainExtension",
                        "typeHandlerVersion": "1.3",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "Name": "[parameters('Global').ADDomainName]",
                          "OUPath": "[if(contains(parameters('AppServer'), 'OUPath'), parameters('AppServer').OUPath, '')]",
                          "User": "[format('{0}@{1}', parameters('Global').vmAdminUserName, parameters('Global').ADDomainName)]",
                          "Restart": "true",
                          "Options": 3
                        },
                        "protectedSettings": {
                          "Password": "[parameters('vmAdminPassword')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(parameters('VM').match, bool(parameters('VM').Extensions.DSC)), equals(parameters('AppServer').Role, 'PULL'))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'Microsoft.Powershell.DSC.Pull')]",
                      "location": "[resourceGroup().location]",
                      "tags": {
                        "displayName": "Powershell.DSC.Pull"
                      },
                      "properties": {
                        "publisher": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'Microsoft.Powershell', 'Microsoft.OSTCExtensions')]",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'DSC', 'DSCForLinux')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '2.77', '2.0')]",
                        "autoUpgradeMinorVersion": true,
                        "protectedSettings": {
                          "Items": {
                            "registrationKeyPrivate": "[listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubRGName')), 'Microsoft.Automation/automationAccounts', variables('AAName')), '2020-01-13-preview').keys[0].Value]"
                          }
                        },
                        "settings": {
                          "advancedOptions": {
                            "forcePullAndApply": true
                          },
                          "Properties": [
                            {
                              "Name": "RegistrationKey",
                              "Value": {
                                "UserName": "PLACEHOLDER_DONOTUSE",
                                "Password": "PrivateSettingsRef:registrationKeyPrivate"
                              },
                              "TypeName": "System.Management.Automation.PSCredential"
                            },
                            {
                              "Name": "RegistrationUrl",
                              "Value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubRGName')), 'Microsoft.Automation/automationAccounts', variables('AAName')), '2020-01-13-preview').RegistrationUrl]",
                              "TypeName": "System.String"
                            },
                            {
                              "Name": "NodeConfigurationName",
                              "Value": "[format('{0}.{1}_{2}_{3}_{4}{5}', if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], 'AppServers'), parameters('Global').OrgName, parameters('Global').Appname, parameters('AppServer').ROLE, parameters('Environment'), parameters('DeploymentID'))]",
                              "TypeName": "System.String"
                            },
                            {
                              "Name": "ConfigurationMode",
                              "Value": "[variables('ConfigurationMode')[parameters('Environment')]]",
                              "TypeName": "System.String"
                            },
                            {
                              "Name": "RebootNodeIfNeeded",
                              "Value": "[variables('RebootNodeLookup')[parameters('Environment')]]",
                              "TypeName": "System.Boolean"
                            },
                            {
                              "Name": "ConfigurationModeFrequencyMins",
                              "Value": "[variables('DSCConfigurationModeFrequencyMins')]",
                              "TypeName": "System.Int32"
                            },
                            {
                              "Name": "RefreshFrequencyMins",
                              "Value": 30,
                              "TypeName": "System.Int32"
                            },
                            {
                              "Name": "ActionAfterReboot",
                              "Value": "ContinueConfiguration",
                              "TypeName": "System.String"
                            },
                            {
                              "Name": "AllowModuleOverwrite",
                              "Value": true,
                              "TypeName": "System.Boolean"
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'joindomain')]",
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(and(parameters('VM').match, and(contains(parameters('VM').Extensions, 'DSC2'), bool(parameters('VM').Extensions.DSC2))), not(equals(parameters('AppServer').Role, 'PULL'))), or(or(equals(parameters('DeploymentName'), 'ConfigSQLAO'), equals(parameters('DeploymentName'), 'CreateADPDC')), equals(parameters('DeploymentName'), 'CreateADBDC')))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'Microsoft.Powershell.DSC2')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'Microsoft.Powershell', 'Microsoft.OSTCExtensions')]",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'DSC', 'DSCForLinux')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '2.24', '2.0')]",
                        "autoUpgradeMinorVersion": true,
                        "forceUpdateTag": "[parameters('deploymentTime')]",
                        "settings": {
                          "wmfVersion": "latest",
                          "configuration": {
                            "url": "[format('{0}/ext-DSC/DSC-{1}.zip', parameters('Global')._artifactsLocation, if(contains(parameters('AppServer'), 'DSConfig'), parameters('AppServer').DSConfig, if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], parameters('DeploymentName'))))]",
                            "script": "[format('DSC-{0}.ps1', if(contains(parameters('AppServer'), 'DSConfig'), parameters('AppServer').DSConfig, if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], parameters('DeploymentName'))))]",
                            "function": "[if(contains(parameters('AppServer'), 'DSConfig'), parameters('AppServer').DSConfig, if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], parameters('DeploymentName')))]"
                          },
                          "configurationArguments": {
                            "DomainName": "[parameters('Global').ADDomainName]"
                          }
                        },
                        "protectedSettings": {
                          "configurationArguments": {
                            "AdminCreds": {
                              "UserName": "[parameters('Global').vmAdminUserName]",
                              "Password": "[parameters('vmAdminPassword')]"
                            },
                            "SQLServiceCreds": {
                              "UserName": "sqladmin",
                              "Password": "[parameters('vmAdminPassword')]"
                            },
                            "witnessStorageKey": {
                              "UserName": "sakey",
                              "Password": "[parameters('saKey')]"
                            }
                          },
                          "configurationUrlSasToken": "[parameters('Global')._artifactsLocationSasToken]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'joindomain')]",
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(and(parameters('VM').match, bool(parameters('VM').Extensions.DSC)), not(equals(parameters('AppServer').Role, 'PULL'))), not(or(or(equals(parameters('DeploymentName'), 'ConfigSQLAO'), equals(parameters('DeploymentName'), 'CreateADPDC')), equals(parameters('DeploymentName'), 'CreateADBDC'))))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'Microsoft.Powershell.DSC')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'Microsoft.Powershell', 'Microsoft.OSTCExtensions')]",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'DSC', 'DSCForLinux')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '2.24', '2.0')]",
                        "autoUpgradeMinorVersion": true,
                        "forceUpdateTag": "[parameters('deploymentTime')]",
                        "settings": {
                          "wmfVersion": "latest",
                          "configuration": {
                            "url": "[format('{0}/ext-DSC/DSC-{1}.zip', parameters('Global')._artifactsLocation, if(contains(parameters('AppServer'), 'DSConfig'), parameters('AppServer').DSConfig, if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], parameters('DeploymentName'))))]",
                            "script": "[format('DSC-{0}.ps1', if(contains(parameters('AppServer'), 'DSConfig'), parameters('AppServer').DSConfig, if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], parameters('DeploymentName'))))]",
                            "function": "[if(contains(parameters('AppServer'), 'DSConfig'), parameters('AppServer').DSConfig, if(contains(variables('DSCConfigLookup'), parameters('DeploymentName')), variables('DSCConfigLookup')[parameters('DeploymentName')], parameters('DeploymentName')))]"
                          },
                          "configurationArguments": {
                            "DomainName": "[parameters('Global').ADDomainName]",
                            "Thumbprint": "[parameters('Global').CertThumbprint]",
                            "storageAccountId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('globalRGName')), 'Microsoft.Storage/storageAccounts', variables('globalSAName'))]",
                            "deployment": "[variables('Deployment')]",
                            "networkid": "[format('{0}.', variables('networkId'))]",
                            "appInfo": "[if(contains(parameters('AppServer'), 'AppInfo'), string(parameters('VM').AppInfo), '')]",
                            "DataDiskInfo": "[string(parameters('VM').DataDisk)]",
                            "clientIDLocal": "[if(equals(format('{0}{1}', parameters('Environment'), parameters('DeploymentID')), 'G0'), '', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('RGName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-uaiStorageAccountOperator', variables('Deployment'))), '2018-11-30').clientId)]",
                            "clientIDGlobal": "[if(equals(format('{0}{1}', parameters('Environment'), parameters('DeploymentID')), 'G0'), '', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('RGName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-uaiStorageAccountFileContributor', variables('Deployment'))), '2018-11-30').clientId)]"
                          },
                          "configurationData": {
                            "url": "[format('{0}/ext-CD/{1}-ConfigurationData.psd1', parameters('Global')._artifactsLocation, parameters('AppServer').Role)]"
                          }
                        },
                        "protectedSettings": {
                          "configurationArguments": {
                            "AdminCreds": {
                              "UserName": "[parameters('Global').vmAdminUserName]",
                              "Password": "[parameters('vmAdminPassword')]"
                            },
                            "sshPublic": {
                              "UserName": "ssh",
                              "Password": "[parameters('sshPublic')]"
                            },
                            "devOpsPat": {
                              "UserName": "pat",
                              "Password": "[parameters('devOpsPat')]"
                            }
                          },
                          "configurationUrlSasToken": "[parameters('Global')._artifactsLocationSasToken]",
                          "configurationDataUrlSasToken": "[parameters('Global')._artifactsLocationSasToken]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'joindomain')]",
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.IaaSDiagnostics))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2020-12-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'vmDiagnostics')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Diagnostics",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'IaaSDiagnostics', 'LinuxDiagnostic')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '1.9', '3.0')]",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "WadCfg": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), variables('WadCfg'), null())]",
                          "ladCfg": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), null(), variables('ladCfg'))]",
                          "StorageAccount": "[variables('saaccountiddiag')]",
                          "StorageType": "TableAndBlob"
                        },
                        "protectedSettings": {
                          "storageAccountName": "[variables('saaccountiddiag')]",
                          "storageAccountKey": "[listKeys(variables('saaccountiddiag'), '2016-01-01').keys[0].value]",
                          "storageAccountEndPoint": "[format('https://{0}/', environment().suffixes.storage)]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.DependencyAgent))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2020-12-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'DependencyAgent')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'DependencyAgentWindows', 'DependencyAgentLinux')]",
                        "typeHandlerVersion": "9.5",
                        "autoUpgradeMinorVersion": true
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.AzureMonitorAgent))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2020-12-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), format('{0}', if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'AzureMonitorWindowsAgent', 'AzureMonitorLinuxAgent')))]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "publisher": "Microsoft.Azure.Monitor",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'AzureMonitorWindowsAgent', 'AzureMonitorLinuxAgent')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '1.0', '1.5')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.MonitoringAgent))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2020-12-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'MonitoringAgent')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.EnterpriseCloud.Monitoring",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'MicrosoftMonitoringAgent', 'OmsAgentForLinux')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '1.0', '1.4')]",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "workspaceId": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', variables('DeploymentURI'))), '2021-06-01').customerId]"
                        },
                        "protectedSettings": {
                          "workspaceKey": "[listKeys(resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', variables('DeploymentURI'))), '2021-06-01').primarySharedKey]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.GuestHealthAgent))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2020-12-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), format('{0}', if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'GuestHealthWindowsAgent', 'GuestHealthLinuxAgent')))]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "publisher": "Microsoft.Azure.Monitor.VirtualMachines.GuestHealth",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'GuestHealthWindowsAgent', 'GuestHealthLinuxAgent')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '1.0', '1.0')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Insights/dataCollectionRuleAssociations",
                      "apiVersion": "2019-11-01-preview",
                      "scope": "[format('Microsoft.Compute/virtualMachines/{0}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]",
                      "name": "[format('{0}vmInsights', variables('DeploymentURI'))]",
                      "properties": {
                        "description": "Association of data collection rule for AppServer Insights Health.",
                        "dataCollectionRuleId": "[resourceId('Microsoft.Insights/dataCollectionRules', format('{0}vmInsights', variables('DeploymentURI')))]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.chefClient))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'chefClient')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Chef.Bootstrap.WindowsAzure",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'ChefClient', 'LinuxChefClient')]",
                        "typeHandlerVersion": "1210.12",
                        "settings": {
                          "bootstrap_options": {
                            "chef_server_url": "[parameters('Global').chef_server_url]",
                            "validation_client_name": "[parameters('Global').chef_validation_client_name]"
                          },
                          "runlist": "recipe[mycookbook::default]"
                        },
                        "protectedSettings": {
                          "validation_key": "[parameters('Global').chef_validation_key]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(parameters('VM').match, equals(parameters('AppServer').role, 'SQL')), bool(parameters('VM').Extensions.SqlIaasExtension))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'SqlIaasExtension')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "type": "SqlIaaSAgent",
                        "publisher": "Microsoft.SqlServer.Management",
                        "typeHandlerVersion": "1.2",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "AutoTelemetrySettings": {
                            "Region": "[resourceGroup().location]"
                          },
                          "KeyVaultCredentialSettings": {
                            "Enable": true,
                            "CredentialName": "[parameters('Global').sqlCredentialName]"
                          }
                        },
                        "protectedSettings": {
                          "PrivateKeyVaultCredentialSettings": {
                            "AzureKeyVaultUrl": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubKVRGName')), 'Microsoft.KeyVault/vaults', variables('HubKVName')), '2021-06-01-preview').vaultUri]",
                            "StorageUrl": "[reference(resourceId('Microsoft.Storage/storageAccounts', if(equals(parameters('AppServer').Role, 'SQL'), variables('saSQLBackupName'), variables('SADiagName'))), '2015-06-15').primaryEndpoints.blob]",
                            "StorageAccessKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', if(equals(parameters('AppServer').Role, 'SQL'), variables('saSQLBackupName'), variables('SADiagName'))), '2016-01-01').keys[0].value]",
                            "Password": "[parameters('vmAdminPassword')]"
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(and(parameters('VM').match, equals(parameters('AppServer').role, 'SQL')), bool(parameters('VM').Extensions.BackupWindowsWorkloadSQL))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'AzureBackupWindowsWorkload')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "locale": "en-us",
                          "AppServerType": "microsoft.compute/virtualmachines"
                        },
                        "publisher": "Microsoft.Azure.RecoveryServices.WorkloadBackup",
                        "type": "AzureBackupWindowsWorkload",
                        "typeHandlerVersion": "1.1"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.Antimalware))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name), 'IaaSAntimalware')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Security",
                        "type": "IaaSAntimalware",
                        "typeHandlerVersion": "1.5",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "Monitoring": "ON",
                          "StorageAccountName": "[variables('SADiagName')]",
                          "AntimalwareEnabled": true,
                          "RealtimeProtectionEnabled": "true",
                          "ScheduledScanSettings": {
                            "isEnabled": "true",
                            "day": "1",
                            "time": "720",
                            "scanType": "Full"
                          },
                          "Exclusions": {
                            "Extensions": "",
                            "Paths": "",
                            "Processes": ""
                          }
                        },
                        "protectedSettings": null
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-AppServer-publicIPDeploy{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[variables('Deployment')]"
                          },
                          "DeploymentURI": {
                            "value": "[variables('DeploymentURI')]"
                          },
                          "NICs": {
                            "value": "[parameters('AppServer').NICs]"
                          },
                          "VM": {
                            "value": "[parameters('AppServer')]"
                          },
                          "PIPprefix": {
                            "value": "AppServer"
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "18109364379899578760"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "DeploymentURI": {
                              "type": "string"
                            },
                            "PIPprefix": {
                              "type": "string"
                            },
                            "NICs": {
                              "type": "array"
                            },
                            "VM": {
                              "type": "object"
                            },
                            "Global": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "condition": "[and(contains(parameters('NICs')[copyIndex()], 'PublicIP'), not(equals(parameters('NICs')[copyIndex()].PublicIP, null())))]",
                              "copy": {
                                "name": "PublicIP",
                                "count": "[length(parameters('NICs'))]"
                              },
                              "type": "Microsoft.Network/publicIPAddresses",
                              "apiVersion": "2021-02-01",
                              "name": "[format('{0}-{1}{2}-publicip{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1))]",
                              "location": "[resourceGroup().location]",
                              "sku": {
                                "name": "[if(contains(parameters('VM'), 'Zone'), 'Standard', 'Basic')]"
                              },
                              "properties": {
                                "publicIPAllocationMethod": "[parameters('NICs')[copyIndex()].PublicIP]",
                                "dnsSettings": {
                                  "domainNameLabel": "[toLower(format('{0}-{1}{2}-{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1)))]"
                                }
                              }
                            },
                            {
                              "condition": "[and(contains(parameters('NICs')[copyIndex()], 'PublicIP'), not(equals(parameters('NICs')[copyIndex()].PublicIP, null())))]",
                              "copy": {
                                "name": "PublicIPDiag",
                                "count": "[length(parameters('NICs'))]"
                              },
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2017-05-01-preview",
                              "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', format('{0}-{1}{2}-publicip{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1)))]",
                              "name": "service",
                              "properties": {
                                "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                                "logs": [
                                  {
                                    "category": "DDoSProtectionNotifications",
                                    "enabled": true
                                  }
                                ],
                                "metrics": [
                                  {
                                    "timeGrain": "PT5M",
                                    "enabled": true,
                                    "retentionPolicy": {
                                      "enabled": false,
                                      "days": 0
                                    }
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/publicIPAddresses', format('{0}-{1}{2}-publicip{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1)))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "PIPID": {
                              "type": "array",
                              "copy": {
                                "count": "[length(parameters('NICs'))]",
                                "input": "[if(and(contains(parameters('NICs')[copyIndex()], 'PublicIP'), not(equals(parameters('NICs')[copyIndex()].PublicIP, null()))), resourceId('Microsoft.Network/publicIPAddresses', format('{0}-{1}{2}-publicip{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1))), '')]"
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-AppServer-JITNSG-{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[variables('Deployment')]"
                          },
                          "VM": {
                            "value": "[parameters('AppServer')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "16183288891198554910"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "VM": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/networkSecurityGroups",
                              "apiVersion": "2021-05-01",
                              "name": "[format('{0}-vm{1}-JITNSG', parameters('Deployment'), parameters('VM').Name)]",
                              "location": "[resourceGroup().location]"
                            }
                          ]
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-AppServer-nicDeployLoop{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[variables('Deployment')]"
                          },
                          "DeploymentURI": {
                            "value": "[variables('DeploymentURI')]"
                          },
                          "DeploymentID": {
                            "value": "[parameters('DeploymentID')]"
                          },
                          "NICs": {
                            "value": "[parameters('AppServer').NICs]"
                          },
                          "VM": {
                            "value": "[parameters('AppServer')]"
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "15680478958950286894"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "DeploymentURI": {
                              "type": "string"
                            },
                            "DeploymentID": {
                              "type": "string"
                            },
                            "NICs": {
                              "type": "array"
                            },
                            "VM": {
                              "type": "object"
                            },
                            "Global": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "NIC",
                                "count": "[length(parameters('NICs'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('dp{0}-nicDeploy{1}{2}', parameters('Deployment'), parameters('VM').Name, add(copyIndex(), 1))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "Deployment": {
                                    "value": "[parameters('Deployment')]"
                                  },
                                  "DeploymentURI": {
                                    "value": "[parameters('DeploymentURI')]"
                                  },
                                  "DeploymentID": {
                                    "value": "[parameters('DeploymentID')]"
                                  },
                                  "NIC": {
                                    "value": "[parameters('NICs')[copyIndex()]]"
                                  },
                                  "NICNumber": {
                                    "value": "[string(add(copyIndex(), 1))]"
                                  },
                                  "VM": {
                                    "value": "[parameters('VM')]"
                                  },
                                  "Global": {
                                    "value": "[parameters('Global')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.4.1318.3566",
                                      "templateHash": "13928916846586964615"
                                    }
                                  },
                                  "parameters": {
                                    "Deployment": {
                                      "type": "string"
                                    },
                                    "DeploymentURI": {
                                      "type": "string"
                                    },
                                    "DeploymentID": {
                                      "type": "string"
                                    },
                                    "NIC": {
                                      "type": "object"
                                    },
                                    "NICNumber": {
                                      "type": "string"
                                    },
                                    "VM": {
                                      "type": "object"
                                    },
                                    "Global": {
                                      "type": "object"
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "loadBalancerInboundNatRules",
                                        "count": "[length(variables('rules'))]",
                                        "input": {
                                          "id": "[format('{0}/providers/Microsoft.Network/loadBalancers/{1}-lb{2}/inboundNatRules/{3}', resourceGroup().id, parameters('Deployment'), if(contains(parameters('NIC'), 'PLB'), parameters('NIC').PLB, 'none'), if(contains(parameters('NIC'), 'NATRules'), variables('rules')[copyIndex('loadBalancerInboundNatRules')], 'none'))]"
                                        }
                                      }
                                    ],
                                    "networkId": "[format('{0}{1}', parameters('Global').networkid[0], string(sub(parameters('Global').networkid[1], mul(2, int(parameters('DeploymentID'))))))]",
                                    "networkIdUpper": "[format('{0}{1}', parameters('Global').networkid[0], string(add(1, sub(parameters('Global').networkid[1], mul(2, int(parameters('DeploymentID')))))))]",
                                    "VNetID": "[resourceId('Microsoft.Network/VirtualNetworks', format('{0}-vn', parameters('Deployment')))]",
                                    "subnetID": "[format('{0}/subnets/sn{1}', variables('VNetID'), parameters('NIC').Subnet)]",
                                    "acceleratedNetworking": "[if(contains(parameters('NIC'), 'FastNic'), true(), false())]",
                                    "NICSuffix": "[if(equals(parameters('NICNumber'), '1'), '', parameters('NICNumber'))]",
                                    "IPAllocation": "[if(contains(parameters('NIC'), 'StaticIP'), 'Static', 'Dynamic')]",
                                    "privateIPAddress": "[if(contains(parameters('NIC'), 'StaticIP'), format('{0}.{1}', if(equals(parameters('NIC').Subnet, 'MT02'), variables('networkIdUpper'), variables('networkId')), parameters('NIC').StaticIP), null())]",
                                    "publicIPAddress": "[if(not(contains(parameters('NIC'), 'PublicIP')), null(), createObject('id', resourceId('Microsoft.Network/publicIPAddresses', format('{0}-vm{1}-publicip{2}', parameters('Deployment'), parameters('VM').Name, parameters('NICNumber')))))]",
                                    "JITNSG": {
                                      "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-vm{1}-JITNSG', parameters('Deployment'), parameters('VM').Name))]"
                                    },
                                    "rules": "[if(contains(parameters('NIC'), 'NatRules'), parameters('NIC').NatRules, createArray())]"
                                  },
                                  "resources": [
                                    {
                                      "condition": "[not(or(or(or(contains(parameters('NIC'), 'LB'), contains(parameters('NIC'), 'PLB')), contains(parameters('NIC'), 'SLB')), contains(parameters('NIC'), 'ISLB')))]",
                                      "type": "Microsoft.Network/networkInterfaces",
                                      "apiVersion": "2021-02-01",
                                      "name": "[format('{0}-nic{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name)]",
                                      "location": "[resourceGroup().location]",
                                      "properties": {
                                        "enableAcceleratedNetworking": "[variables('acceleratedNetworking')]",
                                        "ipConfigurations": [
                                          {
                                            "name": "ipconfig1",
                                            "properties": {
                                              "publicIPAddress": "[if(contains(parameters('NIC'), 'PublicIP'), variables('publicIPAddress'), null())]",
                                              "privateIPAllocationMethod": "[variables('IPAllocation')]",
                                              "privateIPAddress": "[variables('privateIPAddress')]",
                                              "subnet": {
                                                "id": "[variables('subnetID')]"
                                              }
                                            }
                                          }
                                        ],
                                        "networkSecurityGroup": "[variables('JITNSG')]"
                                      }
                                    },
                                    {
                                      "condition": "[not(or(contains(parameters('NIC'), 'LB'), or(contains(parameters('NIC'), 'PLB'), or(contains(parameters('NIC'), 'SLB'), contains(parameters('NIC'), 'ISLB')))))]",
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', format('{0}-nic{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]",
                                      "name": "service",
                                      "properties": {
                                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                                        "metrics": [
                                          {
                                            "timeGrain": "PT5M",
                                            "enabled": true,
                                            "retentionPolicy": {
                                              "enabled": false,
                                              "days": 0
                                            }
                                          }
                                        ]
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nic{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]"
                                      ]
                                    },
                                    {
                                      "condition": "[contains(parameters('NIC'), 'PLB')]",
                                      "type": "Microsoft.Network/networkInterfaces",
                                      "apiVersion": "2021-02-01",
                                      "name": "[format('{0}-nicplb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name)]",
                                      "location": "[resourceGroup().location]",
                                      "properties": {
                                        "enableAcceleratedNetworking": "[variables('acceleratedNetworking')]",
                                        "ipConfigurations": [
                                          {
                                            "name": "ipconfig1",
                                            "properties": {
                                              "loadBalancerBackendAddressPools": [
                                                {
                                                  "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', format('{0}-lb{1}', parameters('Deployment'), parameters('NIC').PLB), parameters('NIC').PLB)]"
                                                }
                                              ],
                                              "loadBalancerInboundNatRules": "[if(contains(parameters('NIC'), 'NATRules'), variables('loadBalancerInboundNatRules'), null())]",
                                              "privateIPAllocationMethod": "[variables('IPAllocation')]",
                                              "privateIPAddress": "[variables('privateIPAddress')]",
                                              "subnet": {
                                                "id": "[variables('subnetID')]"
                                              }
                                            }
                                          }
                                        ],
                                        "networkSecurityGroup": "[variables('JITNSG')]"
                                      }
                                    },
                                    {
                                      "condition": "[contains(parameters('NIC'), 'PLB')]",
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', format('{0}-nicplb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]",
                                      "name": "service",
                                      "properties": {
                                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                                        "metrics": [
                                          {
                                            "timeGrain": "PT5M",
                                            "enabled": true,
                                            "retentionPolicy": {
                                              "enabled": false,
                                              "days": 0
                                            }
                                          }
                                        ]
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nicplb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]"
                                      ]
                                    },
                                    {
                                      "condition": "[contains(parameters('NIC'), 'LB')]",
                                      "type": "Microsoft.Network/networkInterfaces",
                                      "apiVersion": "2021-02-01",
                                      "name": "[format('{0}-niclb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name)]",
                                      "location": "[resourceGroup().location]",
                                      "properties": {
                                        "enableAcceleratedNetworking": "[variables('acceleratedNetworking')]",
                                        "ipConfigurations": [
                                          {
                                            "name": "ipconfig1",
                                            "properties": {
                                              "loadBalancerBackendAddressPools": [
                                                {
                                                  "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', format('{0}-ilb{1}', parameters('Deployment'), parameters('NIC').LB), parameters('NIC').LB)]"
                                                }
                                              ],
                                              "privateIPAllocationMethod": "[variables('IPAllocation')]",
                                              "privateIPAddress": "[variables('privateIPAddress')]",
                                              "subnet": {
                                                "id": "[variables('subnetID')]"
                                              }
                                            }
                                          }
                                        ],
                                        "networkSecurityGroup": "[variables('JITNSG')]"
                                      }
                                    },
                                    {
                                      "condition": "[contains(parameters('NIC'), 'LB')]",
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', format('{0}-niclb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]",
                                      "name": "service",
                                      "properties": {
                                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                                        "metrics": [
                                          {
                                            "timeGrain": "PT5M",
                                            "enabled": true,
                                            "retentionPolicy": {
                                              "enabled": false,
                                              "days": 0
                                            }
                                          }
                                        ]
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-niclb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]"
                                      ]
                                    },
                                    {
                                      "condition": "[contains(parameters('NIC'), 'SLB')]",
                                      "type": "Microsoft.Network/networkInterfaces",
                                      "apiVersion": "2021-02-01",
                                      "name": "[format('{0}-nicslb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name)]",
                                      "location": "[resourceGroup().location]",
                                      "properties": {
                                        "enableAcceleratedNetworking": "[variables('acceleratedNetworking')]",
                                        "ipConfigurations": [
                                          {
                                            "name": "ipconfig1",
                                            "properties": {
                                              "loadBalancerBackendAddressPools": [
                                                {
                                                  "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', format('{0}-lb{1}', parameters('Deployment'), parameters('NIC').SLB), parameters('NIC').SLB)]"
                                                }
                                              ],
                                              "privateIPAllocationMethod": "[variables('IPAllocation')]",
                                              "privateIPAddress": "[variables('privateIPAddress')]",
                                              "subnet": {
                                                "id": "[variables('subnetID')]"
                                              }
                                            }
                                          }
                                        ],
                                        "networkSecurityGroup": "[variables('JITNSG')]"
                                      }
                                    },
                                    {
                                      "condition": "[contains(parameters('NIC'), 'SLB')]",
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', format('{0}-nicslb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]",
                                      "name": "service",
                                      "properties": {
                                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                                        "metrics": [
                                          {
                                            "timeGrain": "PT5M",
                                            "enabled": true,
                                            "retentionPolicy": {
                                              "enabled": false,
                                              "days": 0
                                            }
                                          }
                                        ]
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nicslb{1}{2}', parameters('Deployment'), variables('NICSuffix'), parameters('VM').Name))]"
                                      ]
                                    }
                                  ],
                                  "outputs": {
                                    "foo7": {
                                      "type": "array",
                                      "value": "[variables('loadBalancerInboundNatRules')]"
                                    },
                                    "foo": {
                                      "type": "object",
                                      "value": "[parameters('NIC')]"
                                    }
                                  }
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-AppServer-publicIPDeploy{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-AppServer-diskLookup{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[variables('Deployment')]"
                          },
                          "DeploymentID": {
                            "value": "[parameters('DeploymentID')]"
                          },
                          "Name": {
                            "value": "[parameters('AppServer').Name]"
                          },
                          "SOFS": {
                            "value": "[if(contains(variables('DataDiskInfo')[parameters('AppServer').DDRole], 'SOFS'), variables('DataDiskInfo')[parameters('AppServer').DDRole].SOFS, json('{\"1\":1}'))]"
                          },
                          "DATA": {
                            "value": "[if(contains(variables('DataDiskInfo')[parameters('AppServer').DDRole], 'DATA'), variables('DataDiskInfo')[parameters('AppServer').DDRole].DATA, json('{\"1\":1}'))]"
                          },
                          "LOGS": {
                            "value": "[if(contains(variables('DataDiskInfo')[parameters('AppServer').DDRole], 'LOGS'), variables('DataDiskInfo')[parameters('AppServer').DDRole].LOGS, json('{\"1\":1}'))]"
                          },
                          "TEMPDB": {
                            "value": "[if(contains(variables('DataDiskInfo')[parameters('AppServer').DDRole], 'TEMPDB'), variables('DataDiskInfo')[parameters('AppServer').DDRole].TEMPDB, json('{\"1\":1}'))]"
                          },
                          "BACKUP": {
                            "value": "[if(contains(variables('DataDiskInfo')[parameters('AppServer').DDRole], 'BACKUP'), variables('DataDiskInfo')[parameters('AppServer').DDRole].BACKUP, json('{\"1\":1}'))]"
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "13688646372196984293"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "DeploymentID": {
                              "type": "string"
                            },
                            "Name": {
                              "type": "string"
                            },
                            "DATA": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "DATASS": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "SOFS": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "LOGS": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "TEMPDB": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "BACKUP": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "DISKS": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "Global": {
                              "type": "object"
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "Data_var",
                                "count": "[length(range(0, if(contains(parameters('DATA'), '1'), 1, length(parameters('DATA').LUNS))))]",
                                "input": {
                                  "name": "[if(contains(parameters('DATA'), '1'), 1, format('{0}-{1}-DATA-DATA{2}', parameters('Deployment'), parameters('Name'), padLeft(parameters('DATA').LUNS[range(0, if(contains(parameters('DATA'), '1'), 1, length(parameters('DATA').LUNS)))[copyIndex('Data_var')]][0], 2, '0')))]",
                                  "lun": "[if(contains(parameters('DATA'), '1'), 1, int(parameters('DATA').LUNS[range(0, if(contains(parameters('DATA'), '1'), 1, length(parameters('DATA').LUNS)))[copyIndex('Data_var')]][0]))]",
                                  "caching": "[if(contains(parameters('DATA'), '1'), 1, parameters('DATA').caching)]",
                                  "diskSizeGB": "[if(contains(parameters('DATA'), '1'), 1, int(parameters('DATA').LUNS[range(0, if(contains(parameters('DATA'), '1'), 1, length(parameters('DATA').LUNS)))[copyIndex('Data_var')]][1]))]",
                                  "createOption": "[if(contains(parameters('DATA'), '1'), 1, if(equals(length(parameters('DATA').LUNS[range(0, if(contains(parameters('DATA'), '1'), 1, length(parameters('DATA').LUNS)))[copyIndex('Data_var')]]), 3), parameters('DATA').LUNS[range(0, if(contains(parameters('DATA'), '1'), 1, length(parameters('DATA').LUNS)))[copyIndex('Data_var')]][2], 'Empty'))]",
                                  "managedDisk": "[if(contains(parameters('DATA'), '1'), 1, if(contains(parameters('DATA'), 'saType'), json(format('{{\"storageAccountType\":\"{0}\"}}', parameters('DATA').saType)), json('null')))]"
                                }
                              },
                              {
                                "name": "Datass_var",
                                "count": "[length(range(0, if(contains(parameters('DATASS'), '1'), 1, length(parameters('DATASS').LUNS))))]",
                                "input": {
                                  "lun": "[if(contains(parameters('DATASS'), '1'), 1, int(parameters('DATASS').LUNS[range(0, if(contains(parameters('DATASS'), '1'), 1, length(parameters('DATASS').LUNS)))[copyIndex('Datass_var')]][0]))]",
                                  "caching": "[if(contains(parameters('DATASS'), '1'), 1, parameters('DATASS').caching)]",
                                  "diskSizeGB": "[if(contains(parameters('DATASS'), '1'), 1, int(parameters('DATASS').LUNS[range(0, if(contains(parameters('DATASS'), '1'), 1, length(parameters('DATASS').LUNS)))[copyIndex('Datass_var')]][1]))]",
                                  "createOption": "[if(contains(parameters('DATASS'), '1'), 1, if(equals(length(parameters('DATASS').LUNS[range(0, if(contains(parameters('DATASS'), '1'), 1, length(parameters('DATASS').LUNS)))[copyIndex('Datass_var')]]), 3), parameters('DATASS').LUNS[range(0, if(contains(parameters('DATASS'), '1'), 1, length(parameters('DATASS').LUNS)))[copyIndex('Datass_var')]][2], 'Empty'))]",
                                  "managedDisk": "[if(contains(parameters('DATASS'), '1'), 1, if(contains(parameters('DATASS'), 'saType'), json(format('{{\"storageAccountType\":\"{0}\"}}', parameters('DATASS').saType)), json('null')))]"
                                }
                              },
                              {
                                "name": "SOFS_var",
                                "count": "[length(range(0, if(contains(parameters('SOFS'), '1'), 1, length(parameters('SOFS').LUNS))))]",
                                "input": {
                                  "name": "[if(contains(parameters('SOFS'), '1'), 1, format('{0}-{1}-DATA-SOFS{2}', parameters('Deployment'), parameters('Name'), padLeft(parameters('SOFS').LUNS[range(0, if(contains(parameters('SOFS'), '1'), 1, length(parameters('SOFS').LUNS)))[copyIndex('SOFS_var')]][0], 2, '0')))]",
                                  "lun": "[if(contains(parameters('SOFS'), '1'), 1, int(parameters('SOFS').LUNS[range(0, if(contains(parameters('SOFS'), '1'), 1, length(parameters('SOFS').LUNS)))[copyIndex('SOFS_var')]][0]))]",
                                  "caching": "[if(contains(parameters('SOFS'), '1'), 1, parameters('SOFS').caching)]",
                                  "diskSizeGB": "[if(contains(parameters('SOFS'), '1'), 1, int(parameters('SOFS').LUNS[range(0, if(contains(parameters('SOFS'), '1'), 1, length(parameters('SOFS').LUNS)))[copyIndex('SOFS_var')]][1]))]",
                                  "createOption": "[if(contains(parameters('SOFS'), '1'), 1, if(equals(length(parameters('SOFS').LUNS[range(0, if(contains(parameters('SOFS'), '1'), 1, length(parameters('SOFS').LUNS)))[copyIndex('SOFS_var')]]), 3), parameters('SOFS').LUNS[range(0, if(contains(parameters('SOFS'), '1'), 1, length(parameters('SOFS').LUNS)))[copyIndex('SOFS_var')]][2], 'Empty'))]",
                                  "managedDisk": "[if(contains(parameters('SOFS'), '1'), 1, if(contains(parameters('SOFS'), 'saType'), json(format('{{\"storageAccountType\":\"{0}\"}}', parameters('SOFS').saType)), json('null')))]"
                                }
                              },
                              {
                                "name": "LOGS_var",
                                "count": "[length(range(0, if(contains(parameters('LOGS'), '1'), 1, length(parameters('LOGS').LUNS))))]",
                                "input": {
                                  "name": "[if(contains(parameters('LOGS'), '1'), 1, format('{0}-{1}-DATA-LOGS{2}', parameters('Deployment'), parameters('Name'), padLeft(parameters('LOGS').LUNS[range(0, if(contains(parameters('LOGS'), '1'), 1, length(parameters('LOGS').LUNS)))[copyIndex('LOGS_var')]][0], 2, '0')))]",
                                  "lun": "[if(contains(parameters('LOGS'), '1'), 1, int(parameters('LOGS').LUNS[range(0, if(contains(parameters('LOGS'), '1'), 1, length(parameters('LOGS').LUNS)))[copyIndex('LOGS_var')]][0]))]",
                                  "caching": "[if(contains(parameters('LOGS'), '1'), 1, parameters('LOGS').caching)]",
                                  "diskSizeGB": "[if(contains(parameters('LOGS'), '1'), 1, int(parameters('LOGS').LUNS[range(0, if(contains(parameters('LOGS'), '1'), 1, length(parameters('LOGS').LUNS)))[copyIndex('LOGS_var')]][1]))]",
                                  "createOption": "[if(contains(parameters('LOGS'), '1'), 1, if(equals(length(parameters('LOGS').LUNS[range(0, if(contains(parameters('LOGS'), '1'), 1, length(parameters('LOGS').LUNS)))[copyIndex('LOGS_var')]]), 3), parameters('LOGS').LUNS[range(0, if(contains(parameters('LOGS'), '1'), 1, length(parameters('LOGS').LUNS)))[copyIndex('LOGS_var')]][2], 'Empty'))]",
                                  "managedDisk": "[if(contains(parameters('LOGS'), '1'), 1, if(contains(parameters('LOGS'), 'saType'), json(format('{{\"storageAccountType\":\"{0}\"}}', parameters('LOGS').saType)), json('null')))]"
                                }
                              },
                              {
                                "name": "TEMPDB_var",
                                "count": "[length(range(0, if(contains(parameters('TEMPDB'), '1'), 1, length(parameters('TEMPDB').LUNS))))]",
                                "input": {
                                  "name": "[if(contains(parameters('TEMPDB'), '1'), 1, format('{0}-{1}-DATA-TEMPDB{2}', parameters('Deployment'), parameters('Name'), padLeft(parameters('TEMPDB').LUNS[range(0, if(contains(parameters('TEMPDB'), '1'), 1, length(parameters('TEMPDB').LUNS)))[copyIndex('TEMPDB_var')]][0], 2, '0')))]",
                                  "lun": "[if(contains(parameters('TEMPDB'), '1'), 1, int(parameters('TEMPDB').LUNS[range(0, if(contains(parameters('TEMPDB'), '1'), 1, length(parameters('TEMPDB').LUNS)))[copyIndex('TEMPDB_var')]][0]))]",
                                  "caching": "[if(contains(parameters('TEMPDB'), '1'), 1, parameters('TEMPDB').caching)]",
                                  "diskSizeGB": "[if(contains(parameters('TEMPDB'), '1'), 1, int(parameters('TEMPDB').LUNS[range(0, if(contains(parameters('TEMPDB'), '1'), 1, length(parameters('TEMPDB').LUNS)))[copyIndex('TEMPDB_var')]][1]))]",
                                  "createOption": "[if(contains(parameters('TEMPDB'), '1'), 1, if(equals(length(parameters('TEMPDB').LUNS[range(0, if(contains(parameters('TEMPDB'), '1'), 1, length(parameters('TEMPDB').LUNS)))[copyIndex('TEMPDB_var')]]), 3), parameters('TEMPDB').LUNS[range(0, if(contains(parameters('TEMPDB'), '1'), 1, length(parameters('TEMPDB').LUNS)))[copyIndex('TEMPDB_var')]][2], 'Empty'))]",
                                  "managedDisk": "[if(contains(parameters('TEMPDB'), '1'), 1, if(contains(parameters('TEMPDB'), 'saType'), json(format('{{\"storageAccountType\":\"{0}\"}}', parameters('TEMPDB').saType)), json('null')))]"
                                }
                              },
                              {
                                "name": "BACKUP_var",
                                "count": "[length(range(0, if(contains(parameters('BACKUP'), '1'), 1, length(parameters('BACKUP').LUNS))))]",
                                "input": {
                                  "name": "[if(contains(parameters('BACKUP'), '1'), 1, format('{0}-{1}-DATA-BACKUP{2}', parameters('Deployment'), parameters('Name'), padLeft(parameters('BACKUP').LUNS[range(0, if(contains(parameters('BACKUP'), '1'), 1, length(parameters('BACKUP').LUNS)))[copyIndex('BACKUP_var')]][0], 2, '0')))]",
                                  "lun": "[if(contains(parameters('BACKUP'), '1'), 1, int(parameters('BACKUP').LUNS[range(0, if(contains(parameters('BACKUP'), '1'), 1, length(parameters('BACKUP').LUNS)))[copyIndex('BACKUP_var')]][0]))]",
                                  "caching": "[if(contains(parameters('BACKUP'), '1'), 1, parameters('BACKUP').caching)]",
                                  "diskSizeGB": "[if(contains(parameters('BACKUP'), '1'), 1, int(parameters('BACKUP').LUNS[range(0, if(contains(parameters('BACKUP'), '1'), 1, length(parameters('BACKUP').LUNS)))[copyIndex('BACKUP_var')]][1]))]",
                                  "createOption": "[if(contains(parameters('BACKUP'), '1'), 1, if(equals(length(parameters('BACKUP').LUNS[range(0, if(contains(parameters('BACKUP'), '1'), 1, length(parameters('BACKUP').LUNS)))[copyIndex('BACKUP_var')]]), 3), parameters('BACKUP').LUNS[range(0, if(contains(parameters('BACKUP'), '1'), 1, length(parameters('BACKUP').LUNS)))[copyIndex('BACKUP_var')]][2], 'Empty'))]",
                                  "managedDisk": "[if(contains(parameters('BACKUP'), '1'), 1, if(contains(parameters('BACKUP'), 'saType'), json(format('{{\"storageAccountType\":\"{0}\"}}', parameters('BACKUP').saType)), json('null')))]"
                                }
                              }
                            ]
                          },
                          "resources": [],
                          "outputs": {
                            "SOFS": {
                              "type": "array",
                              "value": "[if(contains(parameters('SOFS'), '1'), array('no SOFS disks'), variables('SOFS_var'))]"
                            },
                            "DATA": {
                              "type": "array",
                              "value": "[if(contains(parameters('DATA'), '1'), array('no DATA disks'), variables('Data_var'))]"
                            },
                            "DATASS": {
                              "type": "array",
                              "value": "[if(contains(parameters('DATASS'), '1'), array('no DATA disks'), variables('Datass_var'))]"
                            },
                            "LOGS": {
                              "type": "array",
                              "value": "[if(contains(parameters('LOGS'), '1'), array('no LOGS disks'), variables('LOGS_var'))]"
                            },
                            "TEMPDB": {
                              "type": "array",
                              "value": "[if(contains(parameters('TEMPDB'), '1'), array('no TEMPDB disks'), variables('TEMPDB_var'))]"
                            },
                            "BACKUP": {
                              "type": "array",
                              "value": "[if(contains(parameters('BACKUP'), '1'), array('no BACKUP disks'), variables('BACKUP_var'))]"
                            },
                            "DATADisks": {
                              "type": "array",
                              "value": "[union(if(contains(parameters('SOFS'), '1'), createArray(), variables('SOFS_var')), if(contains(parameters('DATA'), '1'), createArray(), variables('Data_var')), if(contains(parameters('DATASS'), '1'), createArray(), variables('Datass_var')), if(contains(parameters('LOGS'), '1'), createArray(), variables('LOGS_var')), if(contains(parameters('TEMPDB'), '1'), createArray(), variables('TEMPDB_var')), if(contains(parameters('BACKUP'), '1'), createArray(), variables('BACKUP_var')))]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "condition": "[bool(parameters('AppServer').DeployJIT)]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-AppServer-JIT-{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[variables('Deployment')]"
                          },
                          "VM": {
                            "value": "[parameters('AppServer')]"
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          },
                          "DeploymentID": {
                            "value": "[parameters('DeploymentID')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "17671050488544287828"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "VM": {
                              "type": "object"
                            },
                            "Global": {
                              "type": "object"
                            },
                            "DeploymentID": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "ports",
                                "count": "[length(variables('portList'))]",
                                "input": {
                                  "number": "[variables('portList')[copyIndex('ports')]]",
                                  "protocol": "TCP",
                                  "allowedSourceAddressPrefixes": "[union(parameters('Global').IPAddressforRemoteAccess, variables('addressPrefixes'))]",
                                  "maxRequestAccessDuration": "PT3H"
                                }
                              }
                            ],
                            "portList": [
                              3389,
                              22,
                              5985,
                              5986
                            ],
                            "networkId": "[format('{0}{1}', parameters('Global').networkid[0], string(sub(parameters('Global').networkid[1], mul(2, int(parameters('DeploymentID'))))))]",
                            "addressPrefixes": [
                              "[format('{0}.0/23', variables('networkId'))]"
                            ]
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Security/locations/jitNetworkAccessPolicies",
                              "apiVersion": "2020-01-01",
                              "name": "[format('{0}/JIT_{1}', resourceGroup().location, format('{0}-vm{1}', parameters('Deployment'), parameters('VM').name))]",
                              "kind": "Basic",
                              "properties": {
                                "virtualMachines": [
                                  {
                                    "id": "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', parameters('Deployment'), parameters('VM').name))]",
                                    "ports": "[variables('ports')]"
                                  }
                                ],
                                "appendMode": true
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}-vm{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "Disks": {
                      "type": "array",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('dp{0}-AppServer-diskLookup{1}', variables('Deployment'), parameters('AppServer').Name))).outputs.DATADisks.value]"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-LB', variables('Deployment')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-OMS', variables('Deployment')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-SA', variables('Deployment')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-VNETDNSDC1', variables('Deployment')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-VNETDNSDC2', variables('Deployment')))]"
      ]
    },
    {
      "condition": "[bool(parameters('Stage').DASHBOARD)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('dp{0}-DASHBOARD', variables('Deployment'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "DeploymentID": {
            "value": "[parameters('DeploymentID')]"
          },
          "DeploymentInfo": {
            "value": "[parameters('DeploymentInfo')]"
          },
          "Environment": {
            "value": "[parameters('Environment')]"
          },
          "Extensions": {
            "value": "[parameters('Extensions')]"
          },
          "Global": {
            "value": "[parameters('Global')]"
          },
          "Prefix": {
            "value": "[parameters('Prefix')]"
          },
          "Stage": {
            "value": "[parameters('Stage')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "16776498567860520473"
            }
          },
          "parameters": {
            "Prefix": {
              "type": "string"
            },
            "Environment": {
              "type": "string",
              "defaultValue": "D",
              "allowedValues": [
                "I",
                "D",
                "T",
                "U",
                "P",
                "S",
                "G",
                "A"
              ]
            },
            "DeploymentID": {
              "type": "string",
              "defaultValue": "1",
              "allowedValues": [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9"
              ]
            },
            "Stage": {
              "type": "object"
            },
            "Extensions": {
              "type": "object"
            },
            "Global": {
              "type": "object"
            },
            "DeploymentInfo": {
              "type": "object"
            }
          },
          "variables": {
            "Deployment": "[format('{0}-{1}-{2}-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID'))]",
            "DeploymentURI": "[toLower(format('{0}{1}{2}{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID')))]",
            "rgName_Monitoring": "[resourceGroup().name]",
            "prefix_var": "[format('{0}{1}{2}{3}', parameters('Prefix'), parameters('Global').AppName, parameters('Environment'), parameters('DeploymentID'))]",
            "ApplicationList": [
              {
                "AppServerQuery": "[format('Computer startswith \"{0}\"', variables('prefix_var'))]",
                "WebServerQuery": "[format('Computer startswith \"{0}\"', variables('prefix_var'))]",
                "SQLServerQuery": "[format('Computer startswith \"{0}\"', variables('prefix_var'))]",
                "AppName": "[parameters('Global').AppName]"
              }
            ]
          },
          "resources": [
            {
              "copy": {
                "name": "Prefix_Global_OrgName_ApplicationList_AppName_Environment_DeploymentID_Default_Dashboard",
                "count": "[length(variables('ApplicationList'))]"
              },
              "type": "Microsoft.Portal/dashboards",
              "apiVersion": "2015-08-01-preview",
              "name": "[format('{0}-{1}-{2}-{3}{4}-Default-Dashboard', parameters('Prefix'), parameters('Global').OrgName, variables('ApplicationList')[copyIndex()].AppName, parameters('Environment'), parameters('DeploymentID'))]",
              "location": "[resourceGroup().location]",
              "properties": {
                "lenses": {
                  "0": {
                    "order": 0,
                    "parts": {
                      "0": {
                        "position": {
                          "x": 0,
                          "y": 0,
                          "rowSpan": 4,
                          "colSpan": 6
                        },
                        "metadata": {
                          "inputs": [
                            {
                              "name": "ComponentId",
                              "value": {
                                "SubscriptionId": "[subscription().subscriptionId]",
                                "ResourceGroup": "[variables('rgName_Monitoring')]",
                                "Name": "[format('{0}LogAnalytics', variables('DeploymentURI'))]"
                              }
                            },
                            {
                              "name": "Query",
                              "value": "                          Perf\n                          | where TimeGenerated > ago(1h)\n                          | where ${item.AppServerQuery}\n                          | where CounterName == @\"% Processor Time\"\n                          | summarize avg(CounterValue) by Computer, bin(TimeGenerated, 1m)\n                          | render timechart\n                          "
                            },
                            {
                              "name": "Dimensions",
                              "value": {
                                "xAxis": {
                                  "name": "TimeGenerated",
                                  "type": "DateTime"
                                },
                                "yAxis": [
                                  {
                                    "name": "avg_CounterValue",
                                    "type": "Double"
                                  }
                                ],
                                "splitBy": [
                                  {
                                    "name": "Computer",
                                    "type": "String"
                                  }
                                ],
                                "aggregation": "Sum"
                              }
                            },
                            {
                              "name": "Version",
                              "value": "1.0"
                            },
                            {
                              "name": "DashboardId",
                              "value": "/subscriptions/c48f5cd5-8dd0-4eaa-b46e-a351002cdabd/resourceGroups/FNF-RG-Monitoring-Prod/providers/Microsoft.Portal/dashboards/c19faec1-fed6-4ab4-96bf-fbac2f31d2e0"
                            },
                            {
                              "name": "PartTitle",
                              "value": "Analytics"
                            },
                            {
                              "name": "PartSubTitle",
                              "value": "[format('{0}LogAnalytics', variables('DeploymentURI'))]"
                            },
                            {
                              "name": "resourceTypeMode",
                              "value": "workspace"
                            }
                          ],
                          "type": "Extension/AppInsightsExtension/PartType/AnalyticsLineChartPart",
                          "settings": {
                            "content": {
                              "dashboardPartTitle": "[format('{0} App Server CPU', variables('ApplicationList')[copyIndex()].AppName)]",
                              "dashboardPartSubTitle": "[format('{0}LogAnalytics', variables('DeploymentURI'))]"
                            }
                          },
                          "asset": {
                            "idInputName": "ComponentId",
                            "type": "ApplicationInsights"
                          }
                        }
                      },
                      "1": {
                        "position": {
                          "x": 6,
                          "y": 0,
                          "rowSpan": 4,
                          "colSpan": 6
                        },
                        "metadata": {
                          "inputs": [
                            {
                              "name": "ComponentId",
                              "value": {
                                "SubscriptionId": "[subscription().subscriptionId]",
                                "ResourceGroup": "[variables('rgName_Monitoring')]",
                                "Name": "[format('{0}LogAnalytics', variables('DeploymentURI'))]"
                              }
                            },
                            {
                              "name": "Query",
                              "value": "                          Perf \n                          | where TimeGenerated > ago(1h)\n                          | where ${item.AppServerQuery}\n                          | where ObjectName == @\"Memory\"\\nand CounterName == @\"Available MBytes\"\n                          | summarize avg(CounterValue) by Computer, bin(TimeGenerated, 1m)\n                          | render timechart\n                          "
                            },
                            {
                              "name": "Dimensions",
                              "value": {
                                "xAxis": {
                                  "name": "TimeGenerated",
                                  "type": "DateTime"
                                },
                                "yAxis": [
                                  {
                                    "name": "avg_CounterValue",
                                    "type": "Double"
                                  }
                                ],
                                "splitBy": [
                                  {
                                    "name": "Computer",
                                    "type": "String"
                                  }
                                ],
                                "aggregation": "Sum"
                              }
                            },
                            {
                              "name": "Version",
                              "value": "1.0"
                            },
                            {
                              "name": "DashboardId",
                              "value": "/subscriptions/c48f5cd5-8dd0-4eaa-b46e-a351002cdabd/resourceGroups/FNF-RG-Monitoring-Prod/providers/Microsoft.Portal/dashboards/c19faec1-fed6-4ab4-96bf-fbac2f31d2e0"
                            },
                            {
                              "name": "PartTitle",
                              "value": "Analytics"
                            },
                            {
                              "name": "PartSubTitle",
                              "value": "[format('{0}LogAnalytics', variables('DeploymentURI'))]"
                            },
                            {
                              "name": "resourceTypeMode",
                              "value": "workspace"
                            }
                          ],
                          "type": "Extension/AppInsightsExtension/PartType/AnalyticsLineChartPart",
                          "settings": {
                            "content": {
                              "dashboardPartTitle": "[format('{0} Available Memory in MB', variables('ApplicationList')[copyIndex()].AppName)]",
                              "dashboardPartSubTitle": "[format('{0}LogAnalytics', variables('DeploymentURI'))]"
                            }
                          },
                          "asset": {
                            "idInputName": "ComponentId",
                            "type": "ApplicationInsights"
                          }
                        }
                      },
                      "2": {
                        "position": {
                          "x": 0,
                          "y": 4,
                          "rowSpan": 4,
                          "colSpan": 6
                        },
                        "metadata": {
                          "inputs": [
                            {
                              "name": "ComponentId",
                              "value": {
                                "SubscriptionId": "[subscription().subscriptionId]",
                                "ResourceGroup": "[variables('rgName_Monitoring')]",
                                "Name": "[format('{0}LogAnalytics', variables('DeploymentURI'))]"
                              }
                            },
                            {
                              "name": "Query",
                              "value": "[format('Perf\n| where TimeGenerated > ago(1h)\n| where {0}\n and ObjectName == @\"LogicalDisk\"\nand CounterName == @\"Disk Writes/sec\"\nand InstanceName == @\"_Total\"\n| summarize avg(CounterValue) by Computer, bin(TimeGenerated, 1m)\n| render timechart', variables('ApplicationList')[copyIndex()].AppServerQuery)]"
                            },
                            {
                              "name": "Dimensions",
                              "value": {
                                "xAxis": {
                                  "name": "TimeGenerated",
                                  "type": "DateTime"
                                },
                                "yAxis": [
                                  {
                                    "name": "avg_CounterValue",
                                    "type": "Double"
                                  }
                                ],
                                "splitBy": [
                                  {
                                    "name": "Computer",
                                    "type": "String"
                                  }
                                ],
                                "aggregation": "Sum"
                              }
                            },
                            {
                              "name": "Version",
                              "value": "1.0"
                            },
                            {
                              "name": "DashboardId",
                              "value": "/subscriptions/c48f5cd5-8dd0-4eaa-b46e-a351002cdabd/resourceGroups/FNF-RG-Monitoring-Prod/providers/Microsoft.Portal/dashboards/c19faec1-fed6-4ab4-96bf-fbac2f31d2e0"
                            },
                            {
                              "name": "PartTitle",
                              "value": "Analytics"
                            },
                            {
                              "name": "PartSubTitle",
                              "value": "[format('{0}LogAnalytics', variables('DeploymentURI'))]"
                            },
                            {
                              "name": "resourceTypeMode",
                              "value": "workspace"
                            }
                          ],
                          "type": "Extension/AppInsightsExtension/PartType/AnalyticsLineChartPart",
                          "settings": {
                            "content": {
                              "dashboardPartTitle": "[format('{0} Logical Disk I/O Total', variables('ApplicationList')[copyIndex()].AppName)]",
                              "dashboardPartSubTitle": "[format('{0}LogAnalytics', variables('DeploymentURI'))]"
                            }
                          },
                          "asset": {
                            "idInputName": "ComponentId",
                            "type": "ApplicationInsights"
                          }
                        }
                      },
                      "3": {
                        "position": {
                          "x": 6,
                          "y": 4,
                          "rowSpan": 4,
                          "colSpan": 6
                        },
                        "metadata": {
                          "inputs": [
                            {
                              "name": "ComponentId",
                              "value": {
                                "SubscriptionId": "[subscription().subscriptionId]",
                                "ResourceGroup": "[variables('rgName_Monitoring')]",
                                "Name": "[format('{0}LogAnalytics', variables('DeploymentURI'))]"
                              }
                            },
                            {
                              "name": "Query",
                              "value": "[format('Perf\n| where TimeGenerated > ago(1h)\n| where {0}\n and ObjectName == @\"PhysicalDisk\"\nand CounterName == @\"Avg. Disk Read Queue Length\"\nand InstanceName == @\"_Total\"\n| summarize avg(CounterValue) by Computer, bin(TimeGenerated, 1m)\n| render timechart', variables('ApplicationList')[copyIndex()].AppServerQuery)]"
                            },
                            {
                              "name": "Dimensions",
                              "value": {
                                "xAxis": {
                                  "name": "TimeGenerated",
                                  "type": "DateTime"
                                },
                                "yAxis": [
                                  {
                                    "name": "avg_CounterValue",
                                    "type": "Double"
                                  }
                                ],
                                "splitBy": [
                                  {
                                    "name": "Computer",
                                    "type": "String"
                                  }
                                ],
                                "aggregation": "Sum"
                              }
                            },
                            {
                              "name": "Version",
                              "value": "1.0"
                            },
                            {
                              "name": "DashboardId",
                              "value": "/subscriptions/c48f5cd5-8dd0-4eaa-b46e-a351002cdabd/resourceGroups/FNF-RG-Monitoring-Prod/providers/Microsoft.Portal/dashboards/c19faec1-fed6-4ab4-96bf-fbac2f31d2e0"
                            },
                            {
                              "name": "PartTitle",
                              "value": "Analytics"
                            },
                            {
                              "name": "PartSubTitle",
                              "value": "[format('{0}LogAnalytics', variables('DeploymentURI'))]"
                            },
                            {
                              "name": "resourceTypeMode",
                              "value": "workspace"
                            }
                          ],
                          "type": "Extension/AppInsightsExtension/PartType/AnalyticsLineChartPart",
                          "settings": {
                            "content": {
                              "dashboardPartTitle": "[format('{0} Disk Queue Length', variables('ApplicationList')[copyIndex()].AppName)]",
                              "dashboardPartSubTitle": "[format('{0}LogAnalytics', variables('DeploymentURI'))]"
                            }
                          },
                          "asset": {
                            "idInputName": "ComponentId",
                            "type": "ApplicationInsights"
                          }
                        }
                      },
                      "4": {
                        "position": {
                          "x": 12,
                          "y": 4,
                          "rowSpan": 4,
                          "colSpan": 6
                        },
                        "metadata": {
                          "inputs": [
                            {
                              "name": "ComponentId",
                              "value": {
                                "SubscriptionId": "[subscription().subscriptionId]",
                                "ResourceGroup": "[variables('rgName_Monitoring')]",
                                "Name": "[format('{0}LogAnalytics', variables('DeploymentURI'))]"
                              }
                            },
                            {
                              "name": "Query",
                              "value": "[format('Perf| where TimeGenerated > ago(1h)| where {0}| where ObjectName == \"Network Adapter\"  and CounterName == @\"Bytes Total/sec\" and CounterValue > 500000| summarize avg(CounterValue) by Computer, bin(TimeGenerated, 1m)| render timechart', variables('ApplicationList')[copyIndex()].AppServerQuery)]"
                            },
                            {
                              "name": "Dimensions",
                              "value": {
                                "xAxis": {
                                  "name": "TimeGenerated",
                                  "type": "DateTime"
                                },
                                "yAxis": [
                                  {
                                    "name": "avg_CounterValue",
                                    "type": "Double"
                                  }
                                ],
                                "splitBy": [
                                  {
                                    "name": "Computer",
                                    "type": "String"
                                  }
                                ],
                                "aggregation": "Sum"
                              }
                            },
                            {
                              "name": "Version",
                              "value": "1.0"
                            },
                            {
                              "name": "DashboardId",
                              "value": "/subscriptions/c48f5cd5-8dd0-4eaa-b46e-a351002cdabd/resourceGroups/FNF-RG-Monitoring-Prod/providers/Microsoft.Portal/dashboards/c19faec1-fed6-4ab4-96bf-fbac2f31d2e0"
                            },
                            {
                              "name": "PartTitle",
                              "value": "Analytics"
                            },
                            {
                              "name": "PartSubTitle",
                              "value": "[format('{0}LogAnalytics', variables('DeploymentURI'))]"
                            },
                            {
                              "name": "resourceTypeMode",
                              "value": "workspace"
                            }
                          ],
                          "type": "Extension/AppInsightsExtension/PartType/AnalyticsLineChartPart",
                          "settings": {
                            "content": {
                              "dashboardPartTitle": "[format('{0} Top Network Utilization Servers', variables('ApplicationList')[copyIndex()].AppName)]",
                              "dashboardPartSubTitle": "[format('{0}LogAnalytics', variables('DeploymentURI'))]"
                            }
                          },
                          "asset": {
                            "idInputName": "ComponentId",
                            "type": "ApplicationInsights"
                          }
                        }
                      },
                      "5": {
                        "position": {
                          "x": 12,
                          "y": 0,
                          "rowSpan": 4,
                          "colSpan": 6
                        },
                        "metadata": {
                          "inputs": [
                            {
                              "name": "ComponentId",
                              "value": {
                                "SubscriptionId": "[subscription().subscriptionId]",
                                "ResourceGroup": "[variables('rgName_Monitoring')]",
                                "Name": "[format('{0}LogAnalytics', variables('DeploymentURI'))]"
                              }
                            },
                            {
                              "name": "Query",
                              "value": "[format('Perf| where TimeGenerated > ago(1h)| where {0}| where ObjectName == \"Network Adapter\"  and CounterName == @\"Bytes Total/sec\"  and  CounterValue > 200000| sort by CounterValue desc| summarize arg_max(CounterValue, *) by Computer| distinct  Computer, CounterValue| top 10 by CounterValue  desc nulls last| render barchart', variables('ApplicationList')[copyIndex()].AppServerQuery)]"
                            },
                            {
                              "name": "Dimensions",
                              "value": {
                                "xAxis": {
                                  "name": "Computer",
                                  "type": "String"
                                },
                                "yAxis": [
                                  {
                                    "name": "CounterValue",
                                    "type": "Double"
                                  }
                                ],
                                "splitBy": [],
                                "aggregation": "Sum"
                              }
                            },
                            {
                              "name": "Version",
                              "value": "1.0"
                            },
                            {
                              "name": "DashboardId",
                              "value": "/subscriptions/c48f5cd5-8dd0-4eaa-b46e-a351002cdabd/resourceGroups/FNF-RG-Monitoring-Prod/providers/Microsoft.Portal/dashboards/c19faec1-fed6-4ab4-96bf-fbac2f31d2e0"
                            },
                            {
                              "name": "PartTitle",
                              "value": "Analytics"
                            },
                            {
                              "name": "PartSubTitle",
                              "value": "[format('{0}LogAnalytics', variables('DeploymentURI'))]"
                            },
                            {
                              "name": "resourceTypeMode",
                              "value": "workspace"
                            }
                          ],
                          "type": "Extension/AppInsightsExtension/PartType/AnalyticsBarChartPart",
                          "settings": {
                            "content": {
                              "dashboardPartTitle": "[format('{0} Top Network Utilization Servers', variables('ApplicationList')[copyIndex()].AppName)]",
                              "dashboardPartSubTitle": "[format('{0}LogAnalytics', variables('DeploymentURI'))]"
                            }
                          },
                          "asset": {
                            "idInputName": "ComponentId",
                            "type": "ApplicationInsights"
                          }
                        }
                      },
                      "6": {
                        "position": {
                          "x": 18,
                          "y": 5,
                          "rowSpan": 3,
                          "colSpan": 4
                        },
                        "metadata": {
                          "inputs": [],
                          "type": "Extension[azure]/HubsExtension/PartType/VideoPart",
                          "settings": {
                            "content": {
                              "settings": {
                                "title": "Testing in Production",
                                "subtitle": "DevOps",
                                "src": "https://www.youtube.com/watch?v=jFXTryMp5KY",
                                "autoplay": false
                              }
                            }
                          }
                        }
                      },
                      "7": {
                        "position": {
                          "x": 0,
                          "y": 8,
                          "rowSpan": 2,
                          "colSpan": 2
                        },
                        "metadata": {
                          "inputs": [],
                          "type": "Extension[azure]/HubsExtension/PartType/ClockPart",
                          "settings": {
                            "content": {
                              "settings": {
                                "timezoneId": "China Standard Time",
                                "timeFormat": "h:mma",
                                "version": 1
                              }
                            }
                          }
                        }
                      },
                      "8": {
                        "position": {
                          "x": 2,
                          "y": 8,
                          "rowSpan": 2,
                          "colSpan": 2
                        },
                        "metadata": {
                          "inputs": [],
                          "type": "Extension[azure]/HubsExtension/PartType/ClockPart",
                          "settings": {
                            "content": {
                              "content": {
                                "settings": {
                                  "timezoneId": "UTC",
                                  "timeFormat": "h:mma",
                                  "version": 1
                                }
                              }
                            }
                          }
                        }
                      },
                      "12": {
                        "position": {
                          "x": 4,
                          "y": 8,
                          "rowSpan": 2,
                          "colSpan": 2
                        },
                        "metadata": {
                          "inputs": [],
                          "type": "Extension/HubsExtension/PartType/ClockPart",
                          "settings": {
                            "content": {
                              "settings": {
                                "timezoneId": "Eastern Standard Time",
                                "timeFormat": "h:mma",
                                "version": 1
                              }
                            }
                          }
                        }
                      },
                      "9": {
                        "position": {
                          "x": 6,
                          "y": 8,
                          "rowSpan": 2,
                          "colSpan": 2
                        },
                        "metadata": {
                          "inputs": [],
                          "type": "Extension[azure]/HubsExtension/PartType/ClockPart",
                          "settings": {
                            "content": {
                              "settings": {
                                "timezoneId": "Mountain Standard Time",
                                "timeFormat": "h:mma",
                                "version": 1
                              }
                            }
                          }
                        }
                      },
                      "10": {
                        "position": {
                          "x": 8,
                          "y": 8,
                          "rowSpan": 2,
                          "colSpan": 2
                        },
                        "metadata": {
                          "inputs": [],
                          "type": "Extension[azure]/HubsExtension/PartType/ClockPart",
                          "settings": {
                            "content": {
                              "settings": {
                                "timezoneId": "Pacific Standard Time",
                                "timeFormat": "h:mma",
                                "version": 1
                              }
                            }
                          }
                        }
                      },
                      "11": {
                        "position": {
                          "x": 14,
                          "y": 8,
                          "rowSpan": 2,
                          "colSpan": 4
                        },
                        "metadata": {
                          "inputs": [],
                          "type": "Extension[azure]/HubsExtension/PartType/MarkdownPart",
                          "settings": {
                            "content": {
                              "settings": {
                                "content": "__Azure Deployment Framework__\n\n<span style=\"color:green\">No *Testing* in Production</span>.\n\n\n<img width='10' src='https://preview.portal.azure.com/favicon.ico'/> and <a href='https://azure.microsoft.com' target='_blank'>Azure Preview Dashboard - Preview.Portal.Azure.com</a>\n\n",
                                "title": "Azure Operations Dashboard",
                                "subtitle": "Operations Management Suite"
                              }
                            }
                          }
                        }
                      },
                      "13": {
                        "position": {
                          "x": 18,
                          "y": 0,
                          "rowSpan": 3,
                          "colSpan": 4
                        },
                        "metadata": {
                          "inputs": [
                            {
                              "name": "queryInputs",
                              "value": {
                                "subscriptions": "b8f402aa-20f7-4888-b45c-3cf086dad9c3",
                                "regions": "AustraliaEast;AustraliaSoutheast;CentralUS;EastUS;EastUS2;Global;Multi-Region;NorthCentralUS;SouthCentralUS;WestCentralUS;WestUS;WestUS2",
                                "services": "",
                                "resourceGroupId": "all",
                                "timeSpan": "5",
                                "startTime": "4/3/2018 3:29:31 AM",
                                "endTime": "4/6/2018 3:29:31 AM",
                                "queryName": "Service Health",
                                "queryId": "a5b30ff6-c9ea-4f5a-8f21-3f0ae3eb4c55",
                                "loadFromCache": false,
                                "communicationType": "incident",
                                "statusFilter": "active"
                              }
                            }
                          ],
                          "type": "Extension/Microsoft_Azure_Health/PartType/ServiceIssuesTilePart"
                        }
                      },
                      "14": {
                        "position": {
                          "x": 18,
                          "y": 3,
                          "rowSpan": 2,
                          "colSpan": 4
                        },
                        "metadata": {
                          "inputs": [],
                          "type": "Extension[azure]/Microsoft_AAD_IAM/PartType/OrganizationIdentityPart"
                        }
                      },
                      "15": {
                        "position": {
                          "x": 10,
                          "y": 8,
                          "rowSpan": 2,
                          "colSpan": 4
                        },
                        "metadata": {
                          "inputs": [
                            {
                              "name": "id",
                              "value": "[format('{0}/views/Updates({1})', resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', variables('DeploymentURI'))), format('{0}LogAnalytics', variables('DeploymentURI')))]"
                            },
                            {
                              "name": "solutionId",
                              "isOptional": true
                            }
                          ],
                          "type": "Extension/Microsoft_OperationsManagementSuite_Workspace/PartType/ViewTileIFramePart"
                        }
                      }
                    }
                  }
                },
                "metadata": {
                  "model": {
                    "timeRange": {
                      "value": {
                        "relative": {
                          "duration": 24,
                          "timeUnit": 1
                        }
                      },
                      "type": "MsPortalFx.Composition.Configuration.ValueTypes.TimeRange"
                    }
                  }
                }
              }
            }
          ]
        }
      }
    },
    {
      "condition": "[bool(parameters('Stage').CosmosDB)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('dp{0}-CosmosDB', variables('Deployment'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "DeploymentID": {
            "value": "[parameters('DeploymentID')]"
          },
          "DeploymentInfo": {
            "value": "[parameters('DeploymentInfo')]"
          },
          "Environment": {
            "value": "[parameters('Environment')]"
          },
          "Extensions": {
            "value": "[parameters('Extensions')]"
          },
          "Global": {
            "value": "[parameters('Global')]"
          },
          "Prefix": {
            "value": "[parameters('Prefix')]"
          },
          "Stage": {
            "value": "[parameters('Stage')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "2705699363891235248"
            }
          },
          "parameters": {
            "Prefix": {
              "type": "string"
            },
            "Environment": {
              "type": "string",
              "defaultValue": "D",
              "allowedValues": [
                "I",
                "D",
                "T",
                "U",
                "P",
                "S",
                "G",
                "A"
              ]
            },
            "DeploymentID": {
              "type": "string",
              "defaultValue": "1",
              "allowedValues": [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9"
              ]
            },
            "Stage": {
              "type": "object"
            },
            "Extensions": {
              "type": "object"
            },
            "Global": {
              "type": "object"
            },
            "DeploymentInfo": {
              "type": "object"
            }
          },
          "variables": {
            "copy": [
              {
                "name": "cosmosDB",
                "count": "[length(variables('cosmosDBInfo'))]",
                "input": {
                  "match": "[or(equals(parameters('Global').CN, '.'), contains(array(parameters('Global').CN), variables('cosmosDBInfo')[copyIndex('cosmosDB')].Name))]"
                }
              }
            ],
            "Deployment": "[format('{0}-{1}-{2}-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID'))]",
            "DeploymentURI": "[toLower(format('{0}{1}{2}{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID')))]",
            "cosmosDBInfo": "[if(contains(parameters('DeploymentInfo'), 'cosmosDBInfo'), parameters('DeploymentInfo').cosmosDBInfo, createArray())]"
          },
          "resources": [
            {
              "condition": "[variables('cosmosDB')[copyIndex()].match]",
              "copy": {
                "name": "CosmosDB",
                "count": "[length(variables('cosmosDBInfo'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dp{0}-Cosmos-Deploy{1}', variables('Deployment'), if(not(equals(length(variables('cosmosDBInfo')), 0)), variables('cosmosDBInfo')[copyIndex()].name, 'na'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "Deployment": {
                    "value": "[variables('Deployment')]"
                  },
                  "DeploymentURI": {
                    "value": "[variables('DeploymentURI')]"
                  },
                  "cosmosAccount": {
                    "value": "[variables('cosmosDBInfo')[copyIndex()]]"
                  },
                  "Global": {
                    "value": "[parameters('Global')]"
                  },
                  "DeploymentID": {
                    "value": "[parameters('DeploymentID')]"
                  },
                  "Environment": {
                    "value": "[parameters('Environment')]"
                  },
                  "Prefix": {
                    "value": "[parameters('Prefix')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1318.3566",
                      "templateHash": "14126157376012182551"
                    }
                  },
                  "parameters": {
                    "Deployment": {
                      "type": "string"
                    },
                    "DeploymentURI": {
                      "type": "string"
                    },
                    "cosmosAccount": {
                      "type": "object"
                    },
                    "Global": {
                      "type": "object"
                    },
                    "Prefix": {
                      "type": "string"
                    },
                    "Environment": {
                      "type": "string"
                    },
                    "DeploymentID": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "locations",
                        "count": "[length(parameters('cosmosAccount').locations)]",
                        "input": {
                          "failoverPriority": "[parameters('cosmosAccount').locations[copyIndex('locations')].failoverPriority]",
                          "locationName": "[parameters('Global')[parameters('cosmosAccount').locations[copyIndex('locations')].location]]",
                          "isZoneRedundant": "[parameters('cosmosAccount').locations[copyIndex('locations')].isZoneRedundant]"
                        }
                      }
                    ],
                    "HubRGJ": "[json(parameters('Global').hubRG)]",
                    "gh": {
                      "hubRGPrefix": "[if(contains(variables('HubRGJ'), 'Prefix'), variables('HubRGJ').Prefix, parameters('Prefix'))]",
                      "hubRGOrgName": "[if(contains(variables('HubRGJ'), 'OrgName'), variables('HubRGJ').OrgName, parameters('Global').OrgName)]",
                      "hubRGAppName": "[if(contains(variables('HubRGJ'), 'AppName'), variables('HubRGJ').AppName, parameters('Global').AppName)]",
                      "hubRGRGName": "[if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID'))))]"
                    },
                    "HubRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').hubRGPrefix, variables('gh').hubRGOrgName, variables('gh').hubRGAppName, variables('gh').hubRGRGName)]",
                    "cosmosDatabases": "[if(contains(parameters('cosmosAccount'), 'databases'), parameters('cosmosAccount').databases, createArray())]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.DocumentDB/databaseAccounts",
                      "apiVersion": "2021-10-15",
                      "name": "[toLower(format('{0}-cosmos-{1}', parameters('Deployment'), parameters('cosmosAccount').Name))]",
                      "kind": "[parameters('cosmosAccount').Kind]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "consistencyPolicy": {
                          "defaultConsistencyLevel": "[parameters('cosmosAccount').defaultConsistencyLevel]"
                        },
                        "createMode": "Default",
                        "enableMultipleWriteLocations": "[parameters('cosmosAccount').enableMultipleWriteLocations]",
                        "enableAutomaticFailover": "[parameters('cosmosAccount').enableAutomaticFailover]",
                        "databaseAccountOfferType": "Standard",
                        "locations": "[variables('locations')]"
                      }
                    },
                    {
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2017-05-01-preview",
                      "scope": "[format('Microsoft.DocumentDB/databaseAccounts/{0}', toLower(format('{0}-cosmos-{1}', parameters('Deployment'), parameters('cosmosAccount').Name)))]",
                      "name": "service",
                      "properties": {
                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                        "logs": [
                          {
                            "category": "DataPlaneRequests",
                            "enabled": true,
                            "retentionPolicy": {
                              "days": 30,
                              "enabled": false
                            }
                          },
                          {
                            "category": "QueryRuntimeStatistics",
                            "enabled": true,
                            "retentionPolicy": {
                              "days": 30,
                              "enabled": false
                            }
                          },
                          {
                            "category": "MongoRequests",
                            "enabled": true,
                            "retentionPolicy": {
                              "days": 30,
                              "enabled": false
                            }
                          }
                        ],
                        "metrics": [
                          {
                            "timeGrain": "PT5M",
                            "enabled": true,
                            "retentionPolicy": {
                              "enabled": false,
                              "days": 0
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DocumentDB/databaseAccounts', toLower(format('{0}-cosmos-{1}', parameters('Deployment'), parameters('cosmosAccount').Name)))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "CosmosAccountDB",
                        "count": "[length(variables('cosmosDatabases'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-Cosmos-DeployDB{1}', parameters('Deployment'), variables('cosmosDatabases')[copyIndex()].databaseName)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "cosmosAccount": {
                            "value": "[parameters('cosmosAccount')]"
                          },
                          "cosmosDB": {
                            "value": "[variables('cosmosDatabases')[copyIndex()]]"
                          },
                          "Deployment": {
                            "value": "[parameters('Deployment')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "12577773406054047748"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "cosmosAccount": {
                              "type": "object"
                            },
                            "cosmosDB": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
                              "apiVersion": "2021-03-01-preview",
                              "name": "[format('{0}/{1}', toLower(format('{0}-cosmos-{1}', parameters('Deployment'), parameters('cosmosAccount').Name)), toLower(parameters('cosmosDB').databaseName))]",
                              "properties": {
                                "resource": {
                                  "id": "[parameters('cosmosDB').databaseName]"
                                },
                                "options": {
                                  "throughput": 400
                                }
                              }
                            },
                            {
                              "copy": {
                                "name": "CosmosDBContainer",
                                "count": "[length(parameters('cosmosDB').containers)]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('dp{0}-Cosmos-DeployDBContainer{1}', parameters('Deployment'), if(not(equals(length(parameters('cosmosDB').containers), 0)), parameters('cosmosDB').containers[copyIndex()].containerName, 'na'))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "cosmosAccount": {
                                    "value": "[parameters('cosmosAccount')]"
                                  },
                                  "cosmosDB": {
                                    "value": "[parameters('cosmosDB')]"
                                  },
                                  "cosmosContainer": {
                                    "value": "[parameters('cosmosDB').containers[copyIndex()]]"
                                  },
                                  "Deployment": {
                                    "value": "[parameters('Deployment')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.4.1318.3566",
                                      "templateHash": "4939293370347559686"
                                    }
                                  },
                                  "parameters": {
                                    "Deployment": {
                                      "type": "string"
                                    },
                                    "cosmosAccount": {
                                      "type": "object"
                                    },
                                    "cosmosDB": {
                                      "type": "object"
                                    },
                                    "cosmosContainer": {
                                      "type": "object"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
                                      "apiVersion": "2021-03-01-preview",
                                      "name": "[format('{0}/{1}/{2}', toLower(format('{0}-cosmos-{1}', parameters('Deployment'), parameters('cosmosAccount').Name)), parameters('cosmosDB').databaseName, parameters('cosmosContainer').containerName)]",
                                      "properties": {
                                        "resource": {
                                          "id": "[parameters('cosmosContainer').containerName]",
                                          "partitionKey": {
                                            "paths": "[parameters('cosmosContainer').partitionKeyPaths]",
                                            "kind": "Hash"
                                          },
                                          "indexingPolicy": {
                                            "indexingMode": "consistent",
                                            "includedPaths": "[if(contains(parameters('cosmosContainer'), 'indexingPolicyPathInclude'), parameters('cosmosContainer').indexingPolicyPathInclude, createArray())]",
                                            "excludedPaths": "[if(contains(parameters('cosmosContainer'), 'indexingPolicyPathExclude'), parameters('cosmosContainer').indexingPolicyPathExclude, createArray())]"
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/userDefinedFunctions",
                                      "apiVersion": "2021-03-01-preview",
                                      "name": "[format('{0}/{1}/{2}/{3}', toLower(format('{0}-cosmos-{1}', parameters('Deployment'), parameters('cosmosAccount').Name)), parameters('cosmosDB').databaseName, parameters('cosmosContainer').containerName, 'REGEX_MATCH')]",
                                      "properties": {
                                        "resource": {
                                          "id": "REGEX_MATCH",
                                          "body": "function REGEX_MATCH(input,pattern)\r\n{\r\n    if (input.match(pattern))\r\n    {\r\n        return input\r\n    }\r\n}"
                                        },
                                        "options": {}
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers', toLower(format('{0}-cosmos-{1}', parameters('Deployment'), parameters('cosmosAccount').Name)), parameters('cosmosDB').databaseName, parameters('cosmosContainer').containerName)]"
                                      ]
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', toLower(format('{0}-cosmos-{1}', parameters('Deployment'), parameters('cosmosAccount').Name)), toLower(parameters('cosmosDB').databaseName))]"
                              ]
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DocumentDB/databaseAccounts', toLower(format('{0}-cosmos-{1}', parameters('Deployment'), parameters('cosmosAccount').Name)))]"
                      ]
                    },
                    {
                      "condition": "[contains(parameters('cosmosAccount'), 'privatelinkinfo')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-Cosmos-privatelinkloop{1}', parameters('Deployment'), parameters('cosmosAccount').name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[parameters('Deployment')]"
                          },
                          "DeploymentURI": {
                            "value": "[parameters('DeploymentURI')]"
                          },
                          "PrivateLinkInfo": {
                            "value": "[parameters('cosmosAccount').privateLinkInfo]"
                          },
                          "resourceName": {
                            "value": "[toLower(format('{0}-cosmos-{1}', parameters('Deployment'), parameters('cosmosAccount').Name))]"
                          },
                          "providerType": {
                            "value": "Microsoft.DocumentDB/databaseAccounts"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "1242957729837230630"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "DeploymentURI": {
                              "type": "string"
                            },
                            "PrivateLinkInfo": {
                              "type": "array"
                            },
                            "providerType": {
                              "type": "string"
                            },
                            "resourceName": {
                              "type": "string"
                            },
                            "resourceRG": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().name]"
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "privateLink",
                                "count": "[length(parameters('PrivateLinkInfo'))]",
                                "input": {
                                  "name": "[format('{0}-pl{1}', parameters('Deployment'), parameters('PrivateLinkInfo')[copyIndex('privateLink')].Subnet)]",
                                  "vNet": "[format('{0}-vn', parameters('Deployment'))]"
                                }
                              }
                            ]
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "subnetPrivateEndpoint",
                                "count": "[length(parameters('PrivateLinkInfo'))]"
                              },
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2019-11-01",
                              "name": "[format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet)]",
                              "location": "[resourceGroup().location]",
                              "properties": {
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet)]",
                                    "properties": {
                                      "privateLinkServiceId": "[resourceId(parameters('resourceRG'), parameters('providerType'), parameters('resourceName'))]",
                                      "groupIds": "[array(parameters('PrivateLinkInfo')[copyIndex()].groupID)]",
                                      "privateLinkServiceConnectionState": {
                                        "status": "Approved",
                                        "description": "Auto-Approved",
                                        "actionsRequired": "None"
                                      }
                                    }
                                  }
                                ],
                                "manualPrivateLinkServiceConnections": [],
                                "subnet": {
                                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('privateLink')[copyIndex()].vNet, parameters('PrivateLinkInfo')[copyIndex()].Subnet)]"
                                }
                              }
                            },
                            {
                              "copy": {
                                "name": "NICDiags",
                                "count": "[length(parameters('PrivateLinkInfo'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('dp-{0}-pl-{1}-{2}-diags', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet)]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "DeploymentURI": {
                                    "value": "[parameters('DeploymentURI')]"
                                  },
                                  "NICName": {
                                    "value": "[last(split(reference(resourceId('Microsoft.Network/privateEndpoints', format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet))).networkInterfaces[0].id, '/'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.4.1318.3566",
                                      "templateHash": "3372180053977311610"
                                    }
                                  },
                                  "parameters": {
                                    "DeploymentURI": {
                                      "type": "string"
                                    },
                                    "NICName": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', parameters('NICName'))]",
                                      "name": "service",
                                      "properties": {
                                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                                        "metrics": [
                                          {
                                            "timeGrain": "PT5M",
                                            "enabled": true,
                                            "retentionPolicy": {
                                              "enabled": false,
                                              "days": 0
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "NICID": {
                              "type": "array",
                              "copy": {
                                "count": "[length(parameters('PrivateLinkInfo'))]",
                                "input": "[reference(resourceId('Microsoft.Network/privateEndpoints', format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet))).networkInterfaces[0].id]"
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DocumentDB/databaseAccounts', toLower(format('{0}-cosmos-{1}', parameters('Deployment'), parameters('cosmosAccount').Name)))]"
                      ]
                    },
                    {
                      "condition": "[contains(parameters('cosmosAccount'), 'privatelinkinfo')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-Cosmos-registerPrivateLinkDNS-{1}', parameters('Deployment'), parameters('cosmosAccount').name)]",
                      "resourceGroup": "[variables('HubRGName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "PrivateLinkInfo": {
                            "value": "[parameters('cosmosAccount').privateLinkInfo]"
                          },
                          "providerURL": {
                            "value": ".azure.com"
                          },
                          "resourceName": {
                            "value": "[toLower(format('{0}-cosmos-{1}', parameters('Deployment'), parameters('cosmosAccount').Name))]"
                          },
                          "providerType": {
                            "value": "[format('{0}/{1}', 'Microsoft.DocumentDB/databaseAccounts', reference(resourceId('Microsoft.DocumentDB/databaseAccounts', toLower(format('{0}-cosmos-{1}', parameters('Deployment'), parameters('cosmosAccount').Name)))).EnabledApiTypes)]"
                          },
                          "Nics": {
                            "value": "[if(and(contains(parameters('cosmosAccount'), 'privatelinkinfo'), not(equals(length(parameters('cosmosAccount')), 0))), array(reference(resourceId('Microsoft.Resources/deployments', format('dp{0}-Cosmos-privatelinkloop{1}', parameters('Deployment'), parameters('cosmosAccount').name)), '2020-10-01').outputs.NICID.value), array('na'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "9527034148045878947"
                            }
                          },
                          "parameters": {
                            "PrivateLinkInfo": {
                              "type": "array"
                            },
                            "resourceName": {
                              "type": "string"
                            },
                            "providerURL": {
                              "type": "string"
                            },
                            "providerType": {
                              "type": "string"
                            },
                            "Nics": {
                              "type": "array"
                            }
                          },
                          "variables": {
                            "DNSLookup": {
                              "Microsoft.AzureCosmosDB/databaseAccounts/SQL": "documents",
                              "Microsoft.AzureCosmosDB/databaseAccounts/MongoDB": "mongo.cosmos",
                              "Microsoft.AzureCosmosDB/databaseAccounts/Cassandra": "cassandra.cosmos",
                              "Microsoft.AzureCosmosDB/databaseAccounts/Gremlin": "gremlin.cosmos",
                              "Microsoft.AzureCosmosDB/databaseAccounts/Table": "table.cosmos",
                              "Microsoft.KeyVault/vaults": "vaultcore",
                              "Microsoft.DBforMySQL/servers": "mysql",
                              "Microsoft.DBforMariaDB/servers": "mariadb",
                              "Microsoft.AppConfiguration/configurationStores": "azconfig",
                              "Microsoft.ServiceBus/namespaces": "servicebus",
                              "Microsoft.Sql/servers": "database",
                              "Microsoft.Cache/redis": "redis.cache",
                              "Microsoft.Web/sites": "azurewebsites",
                              "Microsoft.Synapse/workspaces": "sql",
                              "Microsoft.ApiManagement/service": "azure-api"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "privateLinkDNS",
                                "count": "[length(parameters('PrivateLinkInfo'))]"
                              },
                              "type": "Microsoft.Network/privateDnsZones/A",
                              "apiVersion": "2020-06-01",
                              "name": "[format('privatelink.{0}.{1}/{2}', if(contains(variables('DNSLookup'), parameters('providerType')), variables('DNSLookup')[parameters('providerType')], parameters('PrivateLinkInfo')[copyIndex()].groupID), parameters('providerURL'), parameters('resourceName'))]",
                              "properties": {
                                "ttl": 3600,
                                "aRecords": [
                                  {
                                    "ipv4Address": "[reference(parameters('Nics')[copyIndex()], '2018-05-01').ipConfigurations[0].properties.privateIPAddress]"
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DocumentDB/databaseAccounts', toLower(format('{0}-cosmos-{1}', parameters('Deployment'), parameters('cosmosAccount').Name)))]",
                        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-Cosmos-privatelinkloop{1}', parameters('Deployment'), parameters('cosmosAccount').name))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "Identifier": {
                      "type": "object",
                      "value": "[reference(resourceId('Microsoft.DocumentDB/databaseAccounts', toLower(format('{0}-cosmos-{1}', parameters('Deployment'), parameters('cosmosAccount').Name))), '2021-10-15', 'full')]"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-VNET', variables('Deployment')))]"
      ]
    },
    {
      "condition": "[bool(parameters('Stage').ServerFarm)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('dp{0}-ServerFarm', variables('Deployment'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "DeploymentID": {
            "value": "[parameters('DeploymentID')]"
          },
          "DeploymentInfo": {
            "value": "[parameters('DeploymentInfo')]"
          },
          "Environment": {
            "value": "[parameters('Environment')]"
          },
          "Extensions": {
            "value": "[parameters('Extensions')]"
          },
          "Global": {
            "value": "[parameters('Global')]"
          },
          "Prefix": {
            "value": "[parameters('Prefix')]"
          },
          "Stage": {
            "value": "[parameters('Stage')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "10860614571911045451"
            }
          },
          "parameters": {
            "Prefix": {
              "type": "string"
            },
            "Environment": {
              "type": "string",
              "defaultValue": "D",
              "allowedValues": [
                "I",
                "D",
                "T",
                "U",
                "P",
                "S",
                "G",
                "A"
              ]
            },
            "DeploymentID": {
              "type": "string",
              "defaultValue": "1",
              "allowedValues": [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9"
              ]
            },
            "Stage": {
              "type": "object"
            },
            "Extensions": {
              "type": "object"
            },
            "Global": {
              "type": "object"
            },
            "DeploymentInfo": {
              "type": "object"
            }
          },
          "variables": {
            "copy": [
              {
                "name": "ASPlanInfo",
                "count": "[length(variables('appServiceplanInfo'))]",
                "input": {
                  "match": "[or(equals(parameters('Global').CN, '.'), contains(array(parameters('Global').CN), variables('appServiceplanInfo')[copyIndex('ASPlanInfo')].name))]",
                  "autoscale": "[contains(variables('appServiceplanInfo')[copyIndex('ASPlanInfo')], 'autoscale')]"
                }
              }
            ],
            "Deployment": "[format('{0}-{1}-{2}-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID'))]",
            "DeploymentURI": "[toLower(format('{0}{1}{2}{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID')))]",
            "VnetID": "[resourceId('Microsoft.Network/virtualNetworks', format('{0}-vn', variables('Deployment')))]",
            "snWAF01Name": "snWAF01",
            "SubnetRefGW": "[format('{0}/subnets/{1}', variables('VnetID'), variables('snWAF01Name'))]",
            "networkId": "[format('{0}{1}', parameters('Global').networkid[0], string(sub(parameters('Global').networkid[1], mul(2, int(parameters('DeploymentID'))))))]",
            "networkIdUpper": "[format('{0}{1}', parameters('Global').networkid[0], string(add(1, sub(parameters('Global').networkid[1], mul(2, int(parameters('DeploymentID')))))))]",
            "appServiceplanInfo": "[if(contains(parameters('DeploymentInfo'), 'appServiceplanInfo'), parameters('DeploymentInfo').appServiceplanInfo, createArray())]"
          },
          "resources": [
            {
              "condition": "[and(bool(variables('appServiceplanInfo')[copyIndex()].deploy), variables('ASPlanInfo')[copyIndex()].match)]",
              "copy": {
                "name": "ASP",
                "count": "[length(variables('appServiceplanInfo'))]"
              },
              "type": "Microsoft.Web/serverfarms",
              "apiVersion": "2021-01-01",
              "name": "[format('{0}-asp{1}', variables('Deployment'), variables('appServiceplanInfo')[copyIndex()].Name)]",
              "location": "[resourceGroup().location]",
              "kind": "[variables('appServiceplanInfo')[copyIndex()].kind]",
              "properties": {
                "perSiteScaling": "[variables('appServiceplanInfo')[copyIndex()].perSiteScaling]",
                "maximumElasticWorkerCount": "[if(contains(variables('appServiceplanInfo')[copyIndex()], 'maxWorkerCount'), variables('appServiceplanInfo')[copyIndex()].maxWorkerCount, json('null'))]",
                "reserved": "[variables('appServiceplanInfo')[copyIndex()].reserved]",
                "targetWorkerCount": "[variables('appServiceplanInfo')[copyIndex()].skucapacity]"
              },
              "sku": {
                "name": "[variables('appServiceplanInfo')[copyIndex()].skuname]",
                "tier": "[variables('appServiceplanInfo')[copyIndex()].skutier]",
                "capacity": "[variables('appServiceplanInfo')[copyIndex()].skucapacity]"
              }
            },
            {
              "condition": "[and(and(bool(variables('appServiceplanInfo')[copyIndex()].deploy), variables('ASPlanInfo')[copyIndex()].match), variables('ASPlanInfo')[copyIndex()].autoscale)]",
              "copy": {
                "name": "Autoscale",
                "count": "[length(variables('appServiceplanInfo'))]"
              },
              "type": "Microsoft.Insights/autoscalesettings",
              "apiVersion": "2021-05-01-preview",
              "name": "[format('{0}-asp{1}-AutoScale', variables('Deployment'), variables('appServiceplanInfo')[copyIndex()].Name)]",
              "location": "[resourceGroup().location]",
              "tags": {},
              "properties": {
                "enabled": "[bool(variables('appServiceplanInfo')[copyIndex()].autoscale.enabled)]",
                "name": "[format('{0}-asp{1}-AutoScale', variables('Deployment'), variables('appServiceplanInfo')[copyIndex()].Name)]",
                "targetResourceUri": "[resourceId('Microsoft.Web/serverfarms', format('{0}-asp{1}', variables('Deployment'), variables('appServiceplanInfo')[copyIndex()].Name))]",
                "notifications": [],
                "predictiveAutoscalePolicy": {
                  "scaleMode": "Disabled"
                },
                "profiles": [
                  {
                    "name": "70-Up<-->20-Down",
                    "capacity": {
                      "minimum": "[if(contains(variables('appServiceplanInfo')[copyIndex()].autoscale, 'minimum'), variables('appServiceplanInfo')[copyIndex()].autoscale.minimum, '1')]",
                      "maximum": "[if(contains(variables('appServiceplanInfo')[copyIndex()].autoscale, 'maximum'), variables('appServiceplanInfo')[copyIndex()].autoscale.maximum, '1')]",
                      "default": "[if(contains(variables('appServiceplanInfo')[copyIndex()].autoscale, 'minimum'), variables('appServiceplanInfo')[copyIndex()].autoscale.minimum, '1')]"
                    },
                    "rules": [
                      {
                        "metricTrigger": {
                          "metricName": "CpuPercentage",
                          "metricNamespace": "microsoft.web/serverfarms",
                          "metricResourceUri": "[resourceId('Microsoft.Web/serverfarms', format('{0}-asp{1}', variables('Deployment'), variables('appServiceplanInfo')[copyIndex()].Name))]",
                          "timeGrain": "PT1M",
                          "statistic": "Average",
                          "timeWindow": "PT5M",
                          "timeAggregation": "Average",
                          "operator": "GreaterThan",
                          "threshold": 70,
                          "dimensions": [],
                          "dividePerInstance": false
                        },
                        "scaleAction": {
                          "direction": "Increase",
                          "type": "ChangeCount",
                          "value": "1",
                          "cooldown": "PT5M"
                        }
                      },
                      {
                        "metricTrigger": {
                          "metricName": "CpuPercentage",
                          "metricNamespace": "microsoft.web/serverfarms",
                          "metricResourceUri": "[resourceId('Microsoft.Web/serverfarms', format('{0}-asp{1}', variables('Deployment'), variables('appServiceplanInfo')[copyIndex()].Name))]",
                          "timeGrain": "PT1M",
                          "statistic": "Average",
                          "timeWindow": "PT5M",
                          "timeAggregation": "Average",
                          "operator": "LessThan",
                          "threshold": 20,
                          "dimensions": [],
                          "dividePerInstance": false
                        },
                        "scaleAction": {
                          "direction": "Decrease",
                          "type": "ChangeCount",
                          "value": "1",
                          "cooldown": "PT5M"
                        }
                      }
                    ]
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', format('{0}-asp{1}', variables('Deployment'), variables('appServiceplanInfo')[copyIndex()].Name))]",
                "[resourceId('Microsoft.Web/serverfarms', format('{0}-asp{1}', variables('Deployment'), variables('appServiceplanInfo')[copyIndex()].Name))]",
                "[resourceId('Microsoft.Web/serverfarms', format('{0}-asp{1}', variables('Deployment'), variables('appServiceplanInfo')[copyIndex()].Name))]"
              ]
            },
            {
              "condition": "[and(and(bool(variables('appServiceplanInfo')[copyIndex()].deploy), variables('ASPlanInfo')[copyIndex()].match), variables('ASPlanInfo')[copyIndex()].autoscale)]",
              "copy": {
                "name": "VMSSScaleDiags",
                "count": "[length(variables('appServiceplanInfo'))]"
              },
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2017-05-01-preview",
              "scope": "[format('Microsoft.Insights/autoscalesettings/{0}', format('{0}-asp{1}-AutoScale', variables('Deployment'), variables('appServiceplanInfo')[copyIndex()].Name))]",
              "name": "service",
              "properties": {
                "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', variables('DeploymentURI')))]",
                "logs": [
                  {
                    "category": "AutoscaleEvaluations",
                    "enabled": true
                  },
                  {
                    "category": "AutoscaleScaleActions",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Insights/autoscalesettings', format('{0}-asp{1}-AutoScale', variables('Deployment'), variables('appServiceplanInfo')[copyIndex()].Name))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-OMS', variables('Deployment')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-VNET', variables('Deployment')))]"
      ]
    },
    {
      "condition": "[bool(parameters('Stage').WebSite)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('dp{0}-WebSite', variables('Deployment'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "DeploymentID": {
            "value": "[parameters('DeploymentID')]"
          },
          "DeploymentInfo": {
            "value": "[parameters('DeploymentInfo')]"
          },
          "Environment": {
            "value": "[parameters('Environment')]"
          },
          "Extensions": {
            "value": "[parameters('Extensions')]"
          },
          "Global": {
            "value": "[parameters('Global')]"
          },
          "Prefix": {
            "value": "[parameters('Prefix')]"
          },
          "Stage": {
            "value": "[parameters('Stage')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "5556629354616804323"
            }
          },
          "parameters": {
            "Prefix": {
              "type": "string"
            },
            "Environment": {
              "type": "string",
              "defaultValue": "D",
              "allowedValues": [
                "I",
                "D",
                "T",
                "U",
                "P",
                "S",
                "G",
                "A"
              ]
            },
            "DeploymentID": {
              "type": "string",
              "defaultValue": "1",
              "allowedValues": [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9"
              ]
            },
            "Stage": {
              "type": "object"
            },
            "Extensions": {
              "type": "object"
            },
            "Global": {
              "type": "object"
            },
            "DeploymentInfo": {
              "type": "object"
            }
          },
          "variables": {
            "copy": [
              {
                "name": "WSInfo",
                "count": "[length(variables('WebSiteInfo'))]",
                "input": {
                  "match": "[or(equals(parameters('Global').CN, '.'), contains(array(parameters('Global').CN), variables('WebSiteInfo')[copyIndex('WSInfo')].name))]",
                  "saName": "[toLower(format('{0}sa{1}', variables('DeploymentURI'), variables('WebSiteInfo')[copyIndex('WSInfo')].saname))]"
                }
              }
            ],
            "Deployment": "[format('{0}-{1}-{2}-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID'))]",
            "DeploymentURI": "[toLower(format('{0}{1}{2}{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID')))]",
            "regionLookup": "[json('{\r\n  \"francecentral\": {\r\n    \"displayname\": \"France Central\",\r\n    \"location\": \"francecentral\",\r\n    \"PREFIX\": \"AFC1\",\r\n    \"pairedRegion\": \"francesouth\"\r\n  },\r\n  \"southeastasia\": {\r\n    \"displayname\": \"Southeast Asia\",\r\n    \"location\": \"southeastasia\",\r\n    \"PREFIX\": \"ASA1\",\r\n    \"pairedRegion\": \"eastasia\"\r\n  },\r\n  \"southafricawest\": {\r\n    \"displayname\": \"South Africa West\",\r\n    \"location\": \"southafricawest\",\r\n    \"PREFIX\": \"ASAW\",\r\n    \"pairedRegion\": \"southafricanorth\"\r\n  },\r\n  \"eastus2\": {\r\n    \"displayname\": \"East US 2\",\r\n    \"location\": \"eastus2\",\r\n    \"PREFIX\": \"AEU2\",\r\n    \"pairedRegion\": \"centralus\"\r\n  },\r\n  \"eastus\": {\r\n    \"displayname\": \"East US\",\r\n    \"location\": \"eastus\",\r\n    \"PREFIX\": \"AEU1\",\r\n    \"pairedRegion\": \"westus\"\r\n  },\r\n  \"jioindiawest\": {\r\n    \"displayname\": \"Jio India West\",\r\n    \"location\": \"jioindiawest\",\r\n    \"PREFIX\": \"AJIW\",\r\n    \"pairedRegion\": \"jioindiacentral\"\r\n  },\r\n  \"westcentralus\": {\r\n    \"displayname\": \"West Central US\",\r\n    \"location\": \"westcentralus\",\r\n    \"PREFIX\": \"AWCU\",\r\n    \"pairedRegion\": \"westus2\"\r\n  },\r\n  \"koreacentral\": {\r\n    \"displayname\": \"Korea Central\",\r\n    \"location\": \"koreacentral\",\r\n    \"PREFIX\": \"AKC1\",\r\n    \"pairedRegion\": \"koreasouth\"\r\n  },\r\n  \"uaecentral\": {\r\n    \"displayname\": \"UAE Central\",\r\n    \"location\": \"uaecentral\",\r\n    \"PREFIX\": \"AUC1\",\r\n    \"pairedRegion\": \"uaenorth\"\r\n  },\r\n  \"westus\": {\r\n    \"displayname\": \"West US\",\r\n    \"location\": \"westus\",\r\n    \"PREFIX\": \"AWU1\",\r\n    \"pairedRegion\": \"eastus\"\r\n  },\r\n  \"southafricanorth\": {\r\n    \"displayname\": \"South Africa North\",\r\n    \"location\": \"southafricanorth\",\r\n    \"PREFIX\": \"ASAN\",\r\n    \"pairedRegion\": \"southafricawest\"\r\n  },\r\n  \"australiacentral2\": {\r\n    \"displayname\": \"Australia Central 2\",\r\n    \"location\": \"australiacentral2\",\r\n    \"PREFIX\": \"AAC2\",\r\n    \"pairedRegion\": \"australiacentral2\"\r\n  },\r\n  \"francesouth\": {\r\n    \"displayname\": \"France South\",\r\n    \"location\": \"francesouth\",\r\n    \"PREFIX\": \"AFS1\",\r\n    \"pairedRegion\": \"francecentral\"\r\n  },\r\n  \"ukwest\": {\r\n    \"displayname\": \"UK West\",\r\n    \"location\": \"ukwest\",\r\n    \"PREFIX\": \"AUW1\",\r\n    \"pairedRegion\": \"uksouth\"\r\n  },\r\n  \"southindia\": {\r\n    \"displayname\": \"South India\",\r\n    \"location\": \"southindia\",\r\n    \"PREFIX\": \"ASI1\",\r\n    \"pairedRegion\": \"centralindia\"\r\n  },\r\n  \"centralus\": {\r\n    \"displayname\": \"Central US\",\r\n    \"location\": \"centralus\",\r\n    \"PREFIX\": \"ACU1\",\r\n    \"pairedRegion\": \"eastus2\"\r\n  },\r\n  \"germanynorth\": {\r\n    \"displayname\": \"Germany North\",\r\n    \"location\": \"germanynorth\",\r\n    \"PREFIX\": \"AGN1\",\r\n    \"pairedRegion\": \"germanywestcentral\"\r\n  },\r\n  \"koreasouth\": {\r\n    \"displayname\": \"Korea South\",\r\n    \"location\": \"koreasouth\",\r\n    \"PREFIX\": \"AKS1\",\r\n    \"pairedRegion\": \"koreacentral\"\r\n  },\r\n  \"westindia\": {\r\n    \"displayname\": \"West India\",\r\n    \"location\": \"westindia\",\r\n    \"PREFIX\": \"AWI1\",\r\n    \"pairedRegion\": \"southindia\"\r\n  },\r\n  \"westus2\": {\r\n    \"displayname\": \"West US 2\",\r\n    \"location\": \"westus2\",\r\n    \"PREFIX\": \"AWU2\",\r\n    \"pairedRegion\": \"westcentralus\"\r\n  },\r\n  \"northcentralus\": {\r\n    \"displayname\": \"North Central US\",\r\n    \"location\": \"northcentralus\",\r\n    \"PREFIX\": \"ANCU\",\r\n    \"pairedRegion\": \"southcentralus\"\r\n  },\r\n  \"westeurope\": {\r\n    \"displayname\": \"West Europe\",\r\n    \"location\": \"westeurope\",\r\n    \"PREFIX\": \"AWEU\",\r\n    \"pairedRegion\": \"northeurope\"\r\n  },\r\n  \"canadacentral\": {\r\n    \"displayname\": \"Canada Central\",\r\n    \"location\": \"canadacentral\",\r\n    \"PREFIX\": \"ACC1\",\r\n    \"pairedRegion\": \"canadaeast\"\r\n  },\r\n  \"southcentralus\": {\r\n    \"displayname\": \"South Central US\",\r\n    \"location\": \"southcentralus\",\r\n    \"PREFIX\": \"ASCU\",\r\n    \"pairedRegion\": \"northcentralus\"\r\n  },\r\n  \"norwayeast\": {\r\n    \"displayname\": \"Norway East\",\r\n    \"location\": \"norwayeast\",\r\n    \"PREFIX\": \"ANE1\",\r\n    \"pairedRegion\": \"norwaywest\"\r\n  },\r\n  \"japanwest\": {\r\n    \"displayname\": \"Japan West\",\r\n    \"location\": \"japanwest\",\r\n    \"PREFIX\": \"AJW1\",\r\n    \"pairedRegion\": \"japaneast\"\r\n  },\r\n  \"norwaywest\": {\r\n    \"displayname\": \"Norway West\",\r\n    \"location\": \"norwaywest\",\r\n    \"PREFIX\": \"ANW1\",\r\n    \"pairedRegion\": \"norwayeast\"\r\n  },\r\n  \"jioindiacentral\": {\r\n    \"displayname\": \"Jio India Central\",\r\n    \"location\": \"jioindiacentral\",\r\n    \"PREFIX\": \"AJIC\",\r\n    \"pairedRegion\": \"jioindiawest\"\r\n  },\r\n  \"centralindia\": {\r\n    \"displayname\": \"Central India\",\r\n    \"location\": \"centralindia\",\r\n    \"PREFIX\": \"ACI1\",\r\n    \"pairedRegion\": \"southindia\"\r\n  },\r\n  \"westus3\": {\r\n    \"displayname\": \"West US 3\",\r\n    \"location\": \"westus3\",\r\n    \"PREFIX\": \"AWU3\",\r\n    \"pairedRegion\": \"eastus\"\r\n  },\r\n  \"brazilsouth\": {\r\n    \"displayname\": \"Brazil South\",\r\n    \"location\": \"brazilsouth\",\r\n    \"PREFIX\": \"ABS1\",\r\n    \"pairedRegion\": \"southcentralus\"\r\n  },\r\n  \"eastasia\": {\r\n    \"displayname\": \"East Asia\",\r\n    \"location\": \"eastasia\",\r\n    \"PREFIX\": \"AEA1\",\r\n    \"pairedRegion\": \"southeastasia\"\r\n  },\r\n  \"swedencentral\": {\r\n    \"displayname\": \"Sweden Central\",\r\n    \"location\": \"swedencentral\",\r\n    \"PREFIX\": \"ASC1\",\r\n    \"pairedRegion\": \"swedensouth\"\r\n  },\r\n  \"uksouth\": {\r\n    \"displayname\": \"UK South\",\r\n    \"location\": \"uksouth\",\r\n    \"PREFIX\": \"AUS1\",\r\n    \"pairedRegion\": \"ukwest\"\r\n  },\r\n  \"switzerlandnorth\": {\r\n    \"displayname\": \"Switzerland North\",\r\n    \"location\": \"switzerlandnorth\",\r\n    \"PREFIX\": \"ASN1\",\r\n    \"pairedRegion\": \"switzerlandwest\"\r\n  },\r\n  \"canadaeast\": {\r\n    \"displayname\": \"Canada East\",\r\n    \"location\": \"canadaeast\",\r\n    \"PREFIX\": \"ACE1\",\r\n    \"pairedRegion\": \"canadacentral\"\r\n  },\r\n  \"australiasoutheast\": {\r\n    \"displayname\": \"Australia Southeast\",\r\n    \"location\": \"australiasoutheast\",\r\n    \"PREFIX\": \"AAS1\",\r\n    \"pairedRegion\": \"australiaeast\"\r\n  },\r\n  \"northeurope\": {\r\n    \"displayname\": \"North Europe\",\r\n    \"location\": \"northeurope\",\r\n    \"PREFIX\": \"ANEU\",\r\n    \"pairedRegion\": \"westeurope\"\r\n  },\r\n  \"germanywestcentral\": {\r\n    \"displayname\": \"Germany West Central\",\r\n    \"location\": \"germanywestcentral\",\r\n    \"PREFIX\": \"AGWC\",\r\n    \"pairedRegion\": \"germanynorth\"\r\n  },\r\n  \"japaneast\": {\r\n    \"displayname\": \"Japan East\",\r\n    \"location\": \"japaneast\",\r\n    \"PREFIX\": \"AJE1\",\r\n    \"pairedRegion\": \"japanwest\"\r\n  },\r\n  \"uaenorth\": {\r\n    \"displayname\": \"UAE North\",\r\n    \"location\": \"uaenorth\",\r\n    \"PREFIX\": \"AUN1\",\r\n    \"pairedRegion\": \"uaecentral\"\r\n  },\r\n  \"australiaeast\": {\r\n    \"displayname\": \"Australia East\",\r\n    \"location\": \"australiaeast\",\r\n    \"PREFIX\": \"AAE1\",\r\n    \"pairedRegion\": \"australiasoutheast\"\r\n  },\r\n  \"switzerlandwest\": {\r\n    \"displayname\": \"Switzerland West\",\r\n    \"location\": \"switzerlandwest\",\r\n    \"PREFIX\": \"ASW1\",\r\n    \"pairedRegion\": \"switzerlandnorth\"\r\n  },\r\n  \"australiacentral\": {\r\n    \"displayname\": \"Australia Central\",\r\n    \"location\": \"australiacentral\",\r\n    \"PREFIX\": \"AAC1\",\r\n    \"pairedRegion\": \"australiacentral\"\r\n  },\r\n  \"brazilsoutheast\": {\r\n    \"displayname\": \"Brazil Southeast\",\r\n    \"location\": \"brazilsoutheast\",\r\n    \"PREFIX\": \"ABSE\",\r\n    \"pairedRegion\": \"brazilsouth\"\r\n  }\r\n}\r\n')]",
            "primaryPrefix": "[variables('regionLookup')[parameters('Global').PrimaryLocation].prefix]",
            "GlobalRGJ": "[json(parameters('Global').GlobalRG)]",
            "gh": {
              "globalRGPrefix": "[if(contains(variables('GlobalRGJ'), 'Prefix'), variables('GlobalRGJ').Prefix, variables('primaryPrefix'))]",
              "globalRGOrgName": "[if(contains(variables('GlobalRGJ'), 'OrgName'), variables('GlobalRGJ').OrgName, parameters('Global').OrgName)]",
              "globalRGAppName": "[if(contains(variables('GlobalRGJ'), 'AppName'), variables('GlobalRGJ').AppName, parameters('Global').AppName)]",
              "globalRGName": "[if(contains(variables('GlobalRGJ'), 'name'), variables('GlobalRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID')))]"
            },
            "globalRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').globalRGPrefix, variables('gh').globalRGOrgName, variables('gh').globalRGAppName, variables('gh').globalRGName)]",
            "WebSiteInfo": "[if(contains(parameters('DeploymentInfo'), 'WebSiteInfo'), parameters('DeploymentInfo').WebSiteInfo, createArray())]",
            "myAppConfig": {
              "abc": "value",
              "def": "value"
            }
          },
          "resources": [
            {
              "condition": "[variables('WSInfo')[copyIndex()].match]",
              "copy": {
                "name": "website",
                "count": "[length(variables('WebSiteInfo'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dp{0}-ws{1}', variables('Deployment'), variables('WebSiteInfo')[copyIndex()].Name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "ws": {
                    "value": "[variables('WebSiteInfo')[copyIndex()]]"
                  },
                  "appprefix": {
                    "value": "ws"
                  },
                  "Deployment": {
                    "value": "[variables('Deployment')]"
                  },
                  "DeploymentURI": {
                    "value": "[variables('DeploymentURI')]"
                  },
                  "Global": {
                    "value": "[parameters('Global')]"
                  },
                  "globalRGName": {
                    "value": "[variables('globalRGName')]"
                  },
                  "DeploymentID": {
                    "value": "[parameters('DeploymentID')]"
                  },
                  "Environment": {
                    "value": "[parameters('Environment')]"
                  },
                  "Prefix": {
                    "value": "[parameters('Prefix')]"
                  },
                  "diagLogs": {
                    "value": [
                      {
                        "category": "AppServiceHTTPLogs",
                        "enabled": true,
                        "retentionPolicy": {
                          "days": 30,
                          "enabled": false
                        }
                      },
                      {
                        "category": "AppServiceConsoleLogs",
                        "enabled": true,
                        "retentionPolicy": {
                          "days": 30,
                          "enabled": false
                        }
                      },
                      {
                        "category": "AppServiceAppLogs",
                        "enabled": true,
                        "retentionPolicy": {
                          "days": 30,
                          "enabled": false
                        }
                      },
                      {
                        "category": "AppServiceAuditLogs",
                        "enabled": true,
                        "retentionPolicy": {
                          "days": 30,
                          "enabled": false
                        }
                      }
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1318.3566",
                      "templateHash": "5670998838727846695"
                    }
                  },
                  "parameters": {
                    "ws": {
                      "type": "object"
                    },
                    "appprefix": {
                      "type": "string"
                    },
                    "Deployment": {
                      "type": "string"
                    },
                    "DeploymentURI": {
                      "type": "string"
                    },
                    "diagLogs": {
                      "type": "array"
                    },
                    "linuxFxVersion": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "Global": {
                      "type": "object"
                    },
                    "globalRGName": {
                      "type": "string"
                    },
                    "Prefix": {
                      "type": "string"
                    },
                    "Environment": {
                      "type": "string"
                    },
                    "DeploymentID": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "MSILookup": {
                      "SQL": "Cluster",
                      "UTL": "DefaultKeyVault",
                      "FIL": "Cluster",
                      "OCR": "Storage",
                      "PS01": "VMOperator"
                    },
                    "HubRGJ": "[json(parameters('Global').hubRG)]",
                    "HubKVJ": "[json(parameters('Global').hubKV)]",
                    "gh": {
                      "hubRGPrefix": "[if(contains(variables('HubRGJ'), 'Prefix'), variables('HubRGJ').Prefix, parameters('Prefix'))]",
                      "hubRGOrgName": "[if(contains(variables('HubRGJ'), 'OrgName'), variables('HubRGJ').OrgName, parameters('Global').OrgName)]",
                      "hubRGAppName": "[if(contains(variables('HubRGJ'), 'AppName'), variables('HubRGJ').AppName, parameters('Global').AppName)]",
                      "hubRGRGName": "[if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID'))))]",
                      "hubKVPrefix": "[if(contains(variables('HubKVJ'), 'Prefix'), variables('HubKVJ').Prefix, parameters('Prefix'))]",
                      "hubKVOrgName": "[if(contains(variables('HubKVJ'), 'OrgName'), variables('HubKVJ').OrgName, parameters('Global').OrgName)]",
                      "hubKVAppName": "[if(contains(variables('HubKVJ'), 'AppName'), variables('HubKVJ').AppName, parameters('Global').AppName)]",
                      "hubKVRGName": "[if(contains(variables('HubKVJ'), 'RG'), variables('HubKVJ').RG, variables('HubRGJ').name)]"
                    },
                    "HubRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').hubRGPrefix, variables('gh').hubRGOrgName, variables('gh').hubRGAppName, variables('gh').hubRGRGName)]",
                    "HubKVRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').hubKVPrefix, variables('gh').hubKVOrgName, variables('gh').hubKVAppName, variables('gh').hubKVRGName)]",
                    "HubKVName": "[toLower(format('{0}-{1}-{2}-{3}-kv{4}', variables('gh').hubKVPrefix, variables('gh').hubKVOrgName, variables('gh').hubKVAppName, variables('gh').hubKVRGName, variables('HubKVJ').name))]",
                    "userAssignedIdentities": {
                      "Default": {
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperator', parameters('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiKeyVaultSecretsGet', parameters('Deployment'))))]": {}
                      },
                      "VMOperator": {
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiVMOperator', parameters('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiKeyVaultSecretsGetApp', parameters('Deployment'))))]": {}
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Web/sites",
                      "apiVersion": "2021-01-01",
                      "name": "[format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name)]",
                      "identity": {
                        "type": "SystemAssigned, UserAssigned",
                        "userAssignedIdentities": "[if(contains(variables('MSILookup'), parameters('ws').NAME), variables('userAssignedIdentities')[variables('MSILookup')[parameters('ws').NAME]], variables('userAssignedIdentities').Default)]"
                      },
                      "kind": "[parameters('ws').kind]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "enabled": true,
                        "httpsOnly": true,
                        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', format('{0}-asp{1}', parameters('Deployment'), parameters('ws').AppSVCPlan))]",
                        "siteConfig": {
                          "linuxFxVersion": "[if(empty(parameters('linuxFxVersion')), null(), parameters('linuxFxVersion'))]"
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', if(contains(parameters('Global'), 'DomainNameExtSubscriptionID'), parameters('Global').DomainNameExtSubscriptionID, subscription().subscriptionId), if(contains(parameters('Global'), 'DomainNameExtRG'), parameters('Global').DomainNameExtRG, parameters('globalRGName'))), 'Microsoft.Resources/deployments', format('setdns-public-{0}-{1}{2}-{3}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name, parameters('Global').DomainNameExt))]"
                      ]
                    },
                    {
                      "condition": "[contains(parameters('ws'), 'extraSlots')]",
                      "copy": {
                        "name": "slots",
                        "count": "[length(range(1, parameters('ws').extraSlots))]"
                      },
                      "type": "Microsoft.Web/sites/slots",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name), format('slot{0}', range(1, parameters('ws').extraSlots)[copyIndex()]))]",
                      "location": "[resourceGroup().location]",
                      "identity": {
                        "type": "SystemAssigned, UserAssigned",
                        "userAssignedIdentities": "[if(contains(variables('MSILookup'), parameters('ws').NAME), variables('userAssignedIdentities')[variables('MSILookup')[parameters('ws').NAME]], variables('userAssignedIdentities').Default)]"
                      },
                      "properties": {
                        "enabled": true,
                        "httpsOnly": true
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(contains(parameters('ws'), 'customDNS'), bool(parameters('ws').customDNS))]",
                      "type": "Microsoft.Web/certificates",
                      "apiVersion": "2021-02-01",
                      "name": "[toLower(format('{0}.{1}', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name), parameters('Global').DomainNameExt))]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "canonicalName": "[toLower(format('{0}.{1}', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name), parameters('Global').DomainNameExt))]",
                        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', format('{0}-asp{1}', parameters('Deployment'), parameters('ws').AppSVCPlan))]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name))]",
                        "[resourceId('Microsoft.Resources/deployments', format('dp-binding-{0}', parameters('ws').name))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2017-05-01-preview",
                      "scope": "[format('Microsoft.Web/sites/{0}', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name))]",
                      "name": "service",
                      "properties": {
                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                        "logs": "[parameters('diagLogs')]",
                        "metrics": [
                          {
                            "timeGrain": "PT5M",
                            "enabled": true,
                            "retentionPolicy": {
                              "enabled": false,
                              "days": 0
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name))]"
                      ]
                    },
                    {
                      "condition": "[contains(parameters('ws'), 'subnet')]",
                      "type": "Microsoft.Web/sites/config",
                      "apiVersion": "2021-01-15",
                      "name": "[format('{0}/virtualNetwork', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name))]",
                      "properties": {
                        "subnetResourceId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', format('{0}-vn', parameters('Deployment')), parameters('ws').subnet)]",
                        "swiftSupported": true
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name))]"
                      ]
                    },
                    {
                      "condition": "[contains(parameters('ws'), 'preWarmedCount')]",
                      "type": "Microsoft.Web/sites/config",
                      "apiVersion": "2021-01-01",
                      "name": "[format('{0}/{1}', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name), 'web')]",
                      "properties": {
                        "preWarmedInstanceCount": "[parameters('ws').preWarmedCount]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(contains(parameters('ws'), 'customDNS'), bool(parameters('ws').customDNS))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('setdns-public-{0}-{1}{2}-{3}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name, parameters('Global').DomainNameExt)]",
                      "subscriptionId": "[if(contains(parameters('Global'), 'DomainNameExtSubscriptionID'), parameters('Global').DomainNameExtSubscriptionID, subscription().subscriptionId)]",
                      "resourceGroup": "[if(contains(parameters('Global'), 'DomainNameExtRG'), parameters('Global').DomainNameExtRG, parameters('globalRGName'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "hostname": {
                            "value": "[toLower(format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name))]"
                          },
                          "cname": {
                            "value": "[format('{0}-{1}{2}.azurewebsites.net', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name)]"
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "2861540136838094664"
                            }
                          },
                          "parameters": {
                            "hostname": {
                              "type": "string"
                            },
                            "cname": {
                              "type": "string"
                            },
                            "Global": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/dnsZones/CNAME",
                              "apiVersion": "2018-05-01",
                              "name": "[format('{0}/{1}', parameters('Global').DomainNameExt, parameters('hostname'))]",
                              "properties": {
                                "TTL": 3600,
                                "metadata": {},
                                "CNAMERecord": {
                                  "cname": "[parameters('cname')]"
                                }
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "condition": "[and(and(and(contains(parameters('ws'), 'initialDeploy'), bool(parameters('ws').initialDeploy)), contains(parameters('ws'), 'customDNS')), bool(parameters('ws').customDNS))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp-binding-{0}', parameters('ws').name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "externalDNS": {
                            "value": "[parameters('Global').DomainNameExt]"
                          },
                          "siteName": {
                            "value": "[format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name)]"
                          },
                          "sslState": {
                            "value": "Disabled"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "14804878137886221366"
                            }
                          },
                          "parameters": {
                            "siteName": {
                              "type": "string"
                            },
                            "externalDNS": {
                              "type": "string"
                            },
                            "sslState": {
                              "type": "string",
                              "allowedValues": [
                                "SniEnabled",
                                "Disabled"
                              ]
                            },
                            "thumbprint": {
                              "type": "string",
                              "defaultValue": ""
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Web/sites/hostNameBindings",
                              "apiVersion": "2021-02-01",
                              "name": "[toLower(format('{0}/{1}.{2}', parameters('siteName'), parameters('siteName'), parameters('externalDNS')))]",
                              "properties": {
                                "siteName": "[parameters('siteName')]",
                                "hostNameType": "Verified",
                                "sslState": "[parameters('sslState')]",
                                "customHostNameDnsRecordType": "CName",
                                "thumbprint": "[if(equals(parameters('sslState'), 'SniEnabled'), parameters('thumbprint'), null())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(contains(parameters('ws'), 'customDNS'), bool(parameters('ws').customDNS))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp-binding-sni-{0}', parameters('ws').name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "externalDNS": {
                            "value": "[parameters('Global').DomainNameExt]"
                          },
                          "siteName": {
                            "value": "[format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name)]"
                          },
                          "sslState": {
                            "value": "SniEnabled"
                          },
                          "thumbprint": {
                            "value": "[reference(resourceId('Microsoft.Web/certificates', toLower(format('{0}.{1}', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name), parameters('Global').DomainNameExt))), '2021-02-01').thumbprint]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "14804878137886221366"
                            }
                          },
                          "parameters": {
                            "siteName": {
                              "type": "string"
                            },
                            "externalDNS": {
                              "type": "string"
                            },
                            "sslState": {
                              "type": "string",
                              "allowedValues": [
                                "SniEnabled",
                                "Disabled"
                              ]
                            },
                            "thumbprint": {
                              "type": "string",
                              "defaultValue": ""
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Web/sites/hostNameBindings",
                              "apiVersion": "2021-02-01",
                              "name": "[toLower(format('{0}/{1}.{2}', parameters('siteName'), parameters('siteName'), parameters('externalDNS')))]",
                              "properties": {
                                "siteName": "[parameters('siteName')]",
                                "hostNameType": "Verified",
                                "sslState": "[parameters('sslState')]",
                                "customHostNameDnsRecordType": "CName",
                                "thumbprint": "[if(equals(parameters('sslState'), 'SniEnabled'), parameters('thumbprint'), null())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Web/certificates', toLower(format('{0}.{1}', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name), parameters('Global').DomainNameExt)))]",
                        "[resourceId('Microsoft.Web/sites', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-SA-{1}-FileShare-{2}', parameters('Deployment'), parameters('ws').saname, replace(toLower(format('{0}', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name))), '-', ''))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "SAName": {
                            "value": "[format('{0}sa{1}', parameters('DeploymentURI'), parameters('ws').saname)]"
                          },
                          "fileShare": {
                            "value": {
                              "name": "[replace(toLower(format('{0}', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name))), '-', '')]",
                              "quota": 5120
                            }
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          },
                          "deployment": {
                            "value": "[parameters('Deployment')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "16728411370713840423"
                            }
                          },
                          "parameters": {
                            "SAName": {
                              "type": "string"
                            },
                            "fileShare": {
                              "type": "object"
                            },
                            "Global": {
                              "type": "object"
                            },
                            "deployment": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "rolesInfo": "[if(contains(parameters('fileShare'), 'rolesInfo'), parameters('fileShare').rolesInfo, createArray())]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
                              "apiVersion": "2021-04-01",
                              "name": "[format('{0}/{1}/{2}', split(format('{0}/default', parameters('SAName')), '/')[0], split(format('{0}/default', parameters('SAName')), '/')[1], toLower(format('{0}', parameters('fileShare').name)))]",
                              "properties": {
                                "shareQuota": "[parameters('fileShare').quota]",
                                "metadata": {}
                              }
                            },
                            {
                              "copy": {
                                "name": "RBAC",
                                "count": "[length(variables('rolesInfo'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('dp-rbac-role-{0}-{1}', toLower(format('{0}', parameters('fileShare').name)), variables('rolesInfo')[copyIndex()].name)]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "resourceId": {
                                    "value": "[resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', split(format('{0}/default', parameters('SAName')), '/')[0], split(format('{0}/default', parameters('SAName')), '/')[1], toLower(format('{0}', parameters('fileShare').name)))]"
                                  },
                                  "Global": {
                                    "value": "[parameters('Global')]"
                                  },
                                  "roleInfo": {
                                    "value": "[variables('rolesInfo')[copyIndex()]]"
                                  },
                                  "Type": {
                                    "value": "[if(contains(variables('rolesInfo')[copyIndex()], 'Type'), variables('rolesInfo')[copyIndex()].Type, 'lookup')]"
                                  },
                                  "deployment": {
                                    "value": "[parameters('deployment')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.4.1318.3566",
                                      "templateHash": "18000982583333431838"
                                    }
                                  },
                                  "parameters": {
                                    "resourceId": {
                                      "type": "string"
                                    },
                                    "Global": {
                                      "type": "object"
                                    },
                                    "roleInfo": {
                                      "type": "object"
                                    },
                                    "principalType": {
                                      "type": "string",
                                      "defaultValue": ""
                                    },
                                    "Type": {
                                      "type": "string"
                                    },
                                    "deployment": {
                                      "type": "string"
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "roleAssignment",
                                        "count": "[length(parameters('roleInfo').RBAC)]",
                                        "input": {
                                          "RoleName": "[parameters('roleInfo').RBAC[copyIndex('roleAssignment')].Name]",
                                          "RoleID": "[variables('rolesGroupsLookup')[parameters('roleInfo').RBAC[copyIndex('roleAssignment')].Name].Id]",
                                          "principalType": "[parameters('principalType')]",
                                          "GUID": "[guid(parameters('roleInfo').Name, parameters('roleInfo').RBAC[copyIndex('roleAssignment')].Name, parameters('resourceId'))]",
                                          "FriendlyName": "[format('user: {0} --> roleInfoName: {1} --> resourceId: {2}', parameters('roleInfo').Name, parameters('roleInfo').RBAC[copyIndex('roleAssignment')].Name, parameters('resourceId'))]"
                                        }
                                      }
                                    ],
                                    "objectIdLookup": "[json(parameters('Global').objectIdLookup)]",
                                    "rolesGroupsLookup": "[json(parameters('Global').RolesGroupsLookup)]"
                                  },
                                  "resources": [
                                    {
                                      "copy": {
                                        "name": "RBACRAResource",
                                        "count": "[length(variables('roleAssignment'))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2020-10-01",
                                      "name": "[take(replace(format('dp-rbac-all-ra-{0}-{1}-{2}', last(split(parameters('resourceId'), '/')), parameters('roleInfo').name, copyIndex()), '@', '_'), 64)]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "resourceId": {
                                            "value": "[parameters('resourceId')]"
                                          },
                                          "description": {
                                            "value": "[parameters('roleInfo').name]"
                                          },
                                          "roledescription": {
                                            "value": "[variables('roleAssignment')[copyIndex()].RoleName]"
                                          },
                                          "name": {
                                            "value": "[variables('roleAssignment')[copyIndex()].GUID]"
                                          },
                                          "roleDefinitionId": {
                                            "value": "[variables('roleAssignment')[copyIndex()].RoleID]"
                                          },
                                          "principalId": {
                                            "value": "[if(equals(parameters('Type'), 'lookup'), variables('objectIdLookup')[parameters('roleInfo').name], reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-uai{1}', parameters('deployment'), parameters('roleInfo').name)), '2018-11-30').principalId)]"
                                          },
                                          "principalType": {
                                            "value": "[variables('roleAssignment')[copyIndex()].principalType]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.4.1318.3566",
                                              "templateHash": "15020166987174036705"
                                            }
                                          },
                                          "parameters": {
                                            "resourceId": {
                                              "type": "string"
                                            },
                                            "name": {
                                              "type": "string"
                                            },
                                            "roleDefinitionId": {
                                              "type": "string"
                                            },
                                            "principalId": {
                                              "type": "string"
                                            },
                                            "principalType": {
                                              "type": "string",
                                              "defaultValue": ""
                                            },
                                            "description": {
                                              "type": "string"
                                            },
                                            "roledescription": {
                                              "type": "string",
                                              "defaultValue": ""
                                            }
                                          },
                                          "resources": [
                                            {
                                              "type": "Microsoft.Resources/deployments",
                                              "apiVersion": "2021-04-01",
                                              "name": "[take(format('dp-RRA-{0}-{1}', parameters('description'), last(split(parameters('resourceId'), '/'))), 64)]",
                                              "properties": {
                                                "mode": "Incremental",
                                                "expressionEvaluationOptions": {
                                                  "scope": "Outer"
                                                },
                                                "template": "[json('{\r\n  \"$schema\": \"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#\",\r\n  \"contentVersion\": \"1.0.0.0\",\r\n  \"parameters\": {\r\n    \"scope\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"name\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"roleDefinitionId\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"principalId\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"principalType\": {\r\n      \"type\": \"string\"\r\n    }\r\n  },\r\n  \"resources\": [\r\n    {\r\n      \"type\": \"Microsoft.Authorization/roleAssignments\",\r\n      \"apiVersion\": \"2020-08-01-preview\",\r\n      \"scope\": \"[parameters(''scope'')]\",\r\n      \"name\": \"[parameters(''name'')]\",\r\n      \"properties\": {\r\n        \"roleDefinitionId\": \"[resourceId(''Microsoft.Authorization/roleDefinitions'', parameters(''roleDefinitionId''))]\",\r\n        \"principalId\": \"[parameters(''principalId'')]\",\r\n        \"principalType\": \"[parameters(''principalType'')]\"\r\n      }\r\n    }\r\n  ],\r\n  \"outputs\": {\r\n    \"roleAssignmentId\": {\r\n      \"type\": \"string\",\r\n      \"value\": \"[extensionResourceId(parameters(''scope''), ''Microsoft.Authorization/roleAssignments'', parameters(''name''))]\"\r\n    }\r\n  }\r\n}')]",
                                                "parameters": {
                                                  "scope": {
                                                    "value": "[parameters('resourceId')]"
                                                  },
                                                  "name": {
                                                    "value": "[parameters('name')]"
                                                  },
                                                  "roleDefinitionId": {
                                                    "value": "[parameters('roleDefinitionId')]"
                                                  },
                                                  "principalId": {
                                                    "value": "[parameters('principalId')]"
                                                  },
                                                  "principalType": {
                                                    "value": "[parameters('principalType')]"
                                                  }
                                                }
                                              }
                                            }
                                          ],
                                          "outputs": {
                                            "resourceid": {
                                              "type": "string",
                                              "value": "[parameters('resourceId')]"
                                            },
                                            "roleAssignmentId": {
                                              "type": "string",
                                              "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('dp-RRA-{0}-{1}', parameters('description'), last(split(parameters('resourceId'), '/'))), 64))).outputs.roleAssignmentId.value]"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "RoleAssignments": {
                                      "type": "array",
                                      "value": "[variables('roleAssignment')]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', split(format('{0}/default', parameters('SAName')), '/')[0], split(format('{0}/default', parameters('SAName')), '/')[1], toLower(format('{0}', parameters('fileShare').name)))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "SAFileServiceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/fileServices', split(format('{0}/default', parameters('SAName')), '/')[0], split(format('{0}/default', parameters('SAName')), '/')[1])]"
                            },
                            "SAFileService": {
                              "type": "string",
                              "value": "[format('{0}/default', parameters('SAName'))]"
                            },
                            "share": {
                              "type": "string",
                              "value": "[toLower(format('{0}', parameters('fileShare').name))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name))]"
                      ]
                    },
                    {
                      "condition": "[contains(parameters('ws'), 'privatelinkinfo')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-privatelinkloop{1}', parameters('Deployment'), parameters('ws').name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[parameters('Deployment')]"
                          },
                          "DeploymentURI": {
                            "value": "[parameters('DeploymentURI')]"
                          },
                          "PrivateLinkInfo": {
                            "value": "[parameters('ws').privateLinkInfo]"
                          },
                          "providerType": {
                            "value": "Microsoft.Web/sites"
                          },
                          "resourceName": {
                            "value": "[format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name)]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "1242957729837230630"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "DeploymentURI": {
                              "type": "string"
                            },
                            "PrivateLinkInfo": {
                              "type": "array"
                            },
                            "providerType": {
                              "type": "string"
                            },
                            "resourceName": {
                              "type": "string"
                            },
                            "resourceRG": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().name]"
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "privateLink",
                                "count": "[length(parameters('PrivateLinkInfo'))]",
                                "input": {
                                  "name": "[format('{0}-pl{1}', parameters('Deployment'), parameters('PrivateLinkInfo')[copyIndex('privateLink')].Subnet)]",
                                  "vNet": "[format('{0}-vn', parameters('Deployment'))]"
                                }
                              }
                            ]
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "subnetPrivateEndpoint",
                                "count": "[length(parameters('PrivateLinkInfo'))]"
                              },
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2019-11-01",
                              "name": "[format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet)]",
                              "location": "[resourceGroup().location]",
                              "properties": {
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet)]",
                                    "properties": {
                                      "privateLinkServiceId": "[resourceId(parameters('resourceRG'), parameters('providerType'), parameters('resourceName'))]",
                                      "groupIds": "[array(parameters('PrivateLinkInfo')[copyIndex()].groupID)]",
                                      "privateLinkServiceConnectionState": {
                                        "status": "Approved",
                                        "description": "Auto-Approved",
                                        "actionsRequired": "None"
                                      }
                                    }
                                  }
                                ],
                                "manualPrivateLinkServiceConnections": [],
                                "subnet": {
                                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('privateLink')[copyIndex()].vNet, parameters('PrivateLinkInfo')[copyIndex()].Subnet)]"
                                }
                              }
                            },
                            {
                              "copy": {
                                "name": "NICDiags",
                                "count": "[length(parameters('PrivateLinkInfo'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('dp-{0}-pl-{1}-{2}-diags', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet)]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "DeploymentURI": {
                                    "value": "[parameters('DeploymentURI')]"
                                  },
                                  "NICName": {
                                    "value": "[last(split(reference(resourceId('Microsoft.Network/privateEndpoints', format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet))).networkInterfaces[0].id, '/'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.4.1318.3566",
                                      "templateHash": "3372180053977311610"
                                    }
                                  },
                                  "parameters": {
                                    "DeploymentURI": {
                                      "type": "string"
                                    },
                                    "NICName": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', parameters('NICName'))]",
                                      "name": "service",
                                      "properties": {
                                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                                        "metrics": [
                                          {
                                            "timeGrain": "PT5M",
                                            "enabled": true,
                                            "retentionPolicy": {
                                              "enabled": false,
                                              "days": 0
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "NICID": {
                              "type": "array",
                              "copy": {
                                "count": "[length(parameters('PrivateLinkInfo'))]",
                                "input": "[reference(resourceId('Microsoft.Network/privateEndpoints', format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet))).networkInterfaces[0].id]"
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name))]"
                      ]
                    },
                    {
                      "condition": "[contains(parameters('ws'), 'privatelinkinfo')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-registerPrivateDNS{1}', parameters('Deployment'), parameters('ws').name)]",
                      "resourceGroup": "[variables('HubRGName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "PrivateLinkInfo": {
                            "value": "[parameters('ws').privateLinkInfo]"
                          },
                          "providerURL": {
                            "value": "net"
                          },
                          "resourceName": {
                            "value": "[format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name)]"
                          },
                          "providerType": {
                            "value": "Microsoft.Web/sites"
                          },
                          "Nics": {
                            "value": "[if(contains(parameters('ws'), 'privatelinkinfo'), array(reference(resourceId('Microsoft.Resources/deployments', format('dp{0}-privatelinkloop{1}', parameters('Deployment'), parameters('ws').name)), '2020-10-01').outputs.NICID.value), array('na'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "9527034148045878947"
                            }
                          },
                          "parameters": {
                            "PrivateLinkInfo": {
                              "type": "array"
                            },
                            "resourceName": {
                              "type": "string"
                            },
                            "providerURL": {
                              "type": "string"
                            },
                            "providerType": {
                              "type": "string"
                            },
                            "Nics": {
                              "type": "array"
                            }
                          },
                          "variables": {
                            "DNSLookup": {
                              "Microsoft.AzureCosmosDB/databaseAccounts/SQL": "documents",
                              "Microsoft.AzureCosmosDB/databaseAccounts/MongoDB": "mongo.cosmos",
                              "Microsoft.AzureCosmosDB/databaseAccounts/Cassandra": "cassandra.cosmos",
                              "Microsoft.AzureCosmosDB/databaseAccounts/Gremlin": "gremlin.cosmos",
                              "Microsoft.AzureCosmosDB/databaseAccounts/Table": "table.cosmos",
                              "Microsoft.KeyVault/vaults": "vaultcore",
                              "Microsoft.DBforMySQL/servers": "mysql",
                              "Microsoft.DBforMariaDB/servers": "mariadb",
                              "Microsoft.AppConfiguration/configurationStores": "azconfig",
                              "Microsoft.ServiceBus/namespaces": "servicebus",
                              "Microsoft.Sql/servers": "database",
                              "Microsoft.Cache/redis": "redis.cache",
                              "Microsoft.Web/sites": "azurewebsites",
                              "Microsoft.Synapse/workspaces": "sql",
                              "Microsoft.ApiManagement/service": "azure-api"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "privateLinkDNS",
                                "count": "[length(parameters('PrivateLinkInfo'))]"
                              },
                              "type": "Microsoft.Network/privateDnsZones/A",
                              "apiVersion": "2020-06-01",
                              "name": "[format('privatelink.{0}.{1}/{2}', if(contains(variables('DNSLookup'), parameters('providerType')), variables('DNSLookup')[parameters('providerType')], parameters('PrivateLinkInfo')[copyIndex()].groupID), parameters('providerURL'), parameters('resourceName'))]",
                              "properties": {
                                "ttl": 3600,
                                "aRecords": [
                                  {
                                    "ipv4Address": "[reference(parameters('Nics')[copyIndex()], '2018-05-01').ipConfigurations[0].properties.privateIPAddress]"
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-privatelinkloop{1}', parameters('Deployment'), parameters('ws').name))]",
                        "[resourceId('Microsoft.Web/sites', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "WebSite": {
                      "type": "object",
                      "value": "[reference(resourceId('Microsoft.Web/sites', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name)), '2021-01-01', 'full')]"
                    },
                    "Thumbprint": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Web/certificates', toLower(format('{0}.{1}', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name), parameters('Global').DomainNameExt))), '2021-02-01').thumbprint]"
                    }
                  }
                }
              }
            },
            {
              "condition": "[variables('WSInfo')[copyIndex()].match]",
              "copy": {
                "name": "websiteSettings",
                "count": "[length(variables('WebSiteInfo'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dp{0}-ws{1}-settings', variables('Deployment'), variables('WebSiteInfo')[copyIndex()].Name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "ws": {
                    "value": "[variables('WebSiteInfo')[copyIndex()]]"
                  },
                  "appprefix": {
                    "value": "ws"
                  },
                  "Deployment": {
                    "value": "[variables('Deployment')]"
                  },
                  "appConfigCustom": {
                    "value": "[variables('myAppConfig')]"
                  },
                  "appConfigCurrent": {
                    "value": "[list(resourceId('Microsoft.Web/sites/config', split(format('{0}-ws{1}/appsettings', variables('Deployment'), variables('WebSiteInfo')[copyIndex()].Name), '/')[0], split(format('{0}-ws{1}/appsettings', variables('Deployment'), variables('WebSiteInfo')[copyIndex()].Name), '/')[1]), '2021-01-15').properties]"
                  },
                  "appConfigNew": {
                    "value": {
                      "APPINSIGHTS_INSTRUMENTATIONKEY": "[reference(resourceId('Microsoft.Insights/components', format('{0}AppInsights', variables('DeploymentURI'))), '2020-02-02').InstrumentationKey]",
                      "APPLICATIONINSIGHTS_CONNECTION_STRING": "[format('InstrumentationKey={0}', reference(resourceId('Microsoft.Insights/components', format('{0}AppInsights', variables('DeploymentURI'))), '2020-02-02').InstrumentationKey)]"
                    }
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1318.3566",
                      "templateHash": "8878255813368571173"
                    }
                  },
                  "parameters": {
                    "ws": {
                      "type": "object"
                    },
                    "appprefix": {
                      "type": "string"
                    },
                    "Deployment": {
                      "type": "string"
                    },
                    "appConfigCustom": {
                      "type": "object"
                    },
                    "appConfigCurrent": {
                      "type": "secureObject"
                    },
                    "appConfigNew": {
                      "type": "secureObject"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Web/sites/config",
                      "apiVersion": "2021-01-15",
                      "name": "[format('{0}/{1}', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name), 'appsettings')]",
                      "properties": "[union(parameters('appConfigCustom'), parameters('appConfigCurrent'), parameters('appConfigNew'))]"
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('dp{0}-ws{1}', variables('Deployment'), variables('WebSiteInfo')[copyIndex()].Name))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-OMS', variables('Deployment')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-ServerFarm', variables('Deployment')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-VNET', variables('Deployment')))]"
      ]
    },
    {
      "condition": "[bool(parameters('Stage').Function)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('dp{0}-Function', variables('Deployment'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "DeploymentID": {
            "value": "[parameters('DeploymentID')]"
          },
          "DeploymentInfo": {
            "value": "[parameters('DeploymentInfo')]"
          },
          "Environment": {
            "value": "[parameters('Environment')]"
          },
          "Extensions": {
            "value": "[parameters('Extensions')]"
          },
          "Global": {
            "value": "[parameters('Global')]"
          },
          "Prefix": {
            "value": "[parameters('Prefix')]"
          },
          "Stage": {
            "value": "[parameters('Stage')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "8624820626704169018"
            }
          },
          "parameters": {
            "Prefix": {
              "type": "string"
            },
            "Environment": {
              "type": "string",
              "defaultValue": "D",
              "allowedValues": [
                "I",
                "D",
                "T",
                "U",
                "P",
                "S",
                "G",
                "A"
              ]
            },
            "DeploymentID": {
              "type": "string",
              "defaultValue": "1",
              "allowedValues": [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9"
              ]
            },
            "Stage": {
              "type": "object"
            },
            "Extensions": {
              "type": "object"
            },
            "Global": {
              "type": "object"
            },
            "DeploymentInfo": {
              "type": "object"
            }
          },
          "variables": {
            "copy": [
              {
                "name": "DNSServers",
                "count": "[length(variables('DNSServerList'))]",
                "input": "[if(lessOrEquals(length(variables('DNSServerList')[copyIndex('DNSServers')]), 3), format('{0}.{1}', variables('networkId'), variables('DNSServerList')[copyIndex('DNSServers')]), variables('DNSServerList')[copyIndex('DNSServers')])]"
              },
              {
                "name": "WSInfo",
                "count": "[length(variables('WebSiteInfo'))]",
                "input": {
                  "match": "[or(equals(parameters('Global').CN, '.'), contains(array(parameters('Global').CN), variables('WebSiteInfo')[copyIndex('WSInfo')].name))]",
                  "saName": "[toLower(format('{0}sa{1}', variables('DeploymentURI'), variables('WebSiteInfo')[copyIndex('WSInfo')].saname))]"
                }
              }
            ],
            "Deployment": "[format('{0}-{1}-{2}-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID'))]",
            "DeploymentURI": "[toLower(format('{0}{1}{2}{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID')))]",
            "regionLookup": "[json('{\r\n  \"francecentral\": {\r\n    \"displayname\": \"France Central\",\r\n    \"location\": \"francecentral\",\r\n    \"PREFIX\": \"AFC1\",\r\n    \"pairedRegion\": \"francesouth\"\r\n  },\r\n  \"southeastasia\": {\r\n    \"displayname\": \"Southeast Asia\",\r\n    \"location\": \"southeastasia\",\r\n    \"PREFIX\": \"ASA1\",\r\n    \"pairedRegion\": \"eastasia\"\r\n  },\r\n  \"southafricawest\": {\r\n    \"displayname\": \"South Africa West\",\r\n    \"location\": \"southafricawest\",\r\n    \"PREFIX\": \"ASAW\",\r\n    \"pairedRegion\": \"southafricanorth\"\r\n  },\r\n  \"eastus2\": {\r\n    \"displayname\": \"East US 2\",\r\n    \"location\": \"eastus2\",\r\n    \"PREFIX\": \"AEU2\",\r\n    \"pairedRegion\": \"centralus\"\r\n  },\r\n  \"eastus\": {\r\n    \"displayname\": \"East US\",\r\n    \"location\": \"eastus\",\r\n    \"PREFIX\": \"AEU1\",\r\n    \"pairedRegion\": \"westus\"\r\n  },\r\n  \"jioindiawest\": {\r\n    \"displayname\": \"Jio India West\",\r\n    \"location\": \"jioindiawest\",\r\n    \"PREFIX\": \"AJIW\",\r\n    \"pairedRegion\": \"jioindiacentral\"\r\n  },\r\n  \"westcentralus\": {\r\n    \"displayname\": \"West Central US\",\r\n    \"location\": \"westcentralus\",\r\n    \"PREFIX\": \"AWCU\",\r\n    \"pairedRegion\": \"westus2\"\r\n  },\r\n  \"koreacentral\": {\r\n    \"displayname\": \"Korea Central\",\r\n    \"location\": \"koreacentral\",\r\n    \"PREFIX\": \"AKC1\",\r\n    \"pairedRegion\": \"koreasouth\"\r\n  },\r\n  \"uaecentral\": {\r\n    \"displayname\": \"UAE Central\",\r\n    \"location\": \"uaecentral\",\r\n    \"PREFIX\": \"AUC1\",\r\n    \"pairedRegion\": \"uaenorth\"\r\n  },\r\n  \"westus\": {\r\n    \"displayname\": \"West US\",\r\n    \"location\": \"westus\",\r\n    \"PREFIX\": \"AWU1\",\r\n    \"pairedRegion\": \"eastus\"\r\n  },\r\n  \"southafricanorth\": {\r\n    \"displayname\": \"South Africa North\",\r\n    \"location\": \"southafricanorth\",\r\n    \"PREFIX\": \"ASAN\",\r\n    \"pairedRegion\": \"southafricawest\"\r\n  },\r\n  \"australiacentral2\": {\r\n    \"displayname\": \"Australia Central 2\",\r\n    \"location\": \"australiacentral2\",\r\n    \"PREFIX\": \"AAC2\",\r\n    \"pairedRegion\": \"australiacentral2\"\r\n  },\r\n  \"francesouth\": {\r\n    \"displayname\": \"France South\",\r\n    \"location\": \"francesouth\",\r\n    \"PREFIX\": \"AFS1\",\r\n    \"pairedRegion\": \"francecentral\"\r\n  },\r\n  \"ukwest\": {\r\n    \"displayname\": \"UK West\",\r\n    \"location\": \"ukwest\",\r\n    \"PREFIX\": \"AUW1\",\r\n    \"pairedRegion\": \"uksouth\"\r\n  },\r\n  \"southindia\": {\r\n    \"displayname\": \"South India\",\r\n    \"location\": \"southindia\",\r\n    \"PREFIX\": \"ASI1\",\r\n    \"pairedRegion\": \"centralindia\"\r\n  },\r\n  \"centralus\": {\r\n    \"displayname\": \"Central US\",\r\n    \"location\": \"centralus\",\r\n    \"PREFIX\": \"ACU1\",\r\n    \"pairedRegion\": \"eastus2\"\r\n  },\r\n  \"germanynorth\": {\r\n    \"displayname\": \"Germany North\",\r\n    \"location\": \"germanynorth\",\r\n    \"PREFIX\": \"AGN1\",\r\n    \"pairedRegion\": \"germanywestcentral\"\r\n  },\r\n  \"koreasouth\": {\r\n    \"displayname\": \"Korea South\",\r\n    \"location\": \"koreasouth\",\r\n    \"PREFIX\": \"AKS1\",\r\n    \"pairedRegion\": \"koreacentral\"\r\n  },\r\n  \"westindia\": {\r\n    \"displayname\": \"West India\",\r\n    \"location\": \"westindia\",\r\n    \"PREFIX\": \"AWI1\",\r\n    \"pairedRegion\": \"southindia\"\r\n  },\r\n  \"westus2\": {\r\n    \"displayname\": \"West US 2\",\r\n    \"location\": \"westus2\",\r\n    \"PREFIX\": \"AWU2\",\r\n    \"pairedRegion\": \"westcentralus\"\r\n  },\r\n  \"northcentralus\": {\r\n    \"displayname\": \"North Central US\",\r\n    \"location\": \"northcentralus\",\r\n    \"PREFIX\": \"ANCU\",\r\n    \"pairedRegion\": \"southcentralus\"\r\n  },\r\n  \"westeurope\": {\r\n    \"displayname\": \"West Europe\",\r\n    \"location\": \"westeurope\",\r\n    \"PREFIX\": \"AWEU\",\r\n    \"pairedRegion\": \"northeurope\"\r\n  },\r\n  \"canadacentral\": {\r\n    \"displayname\": \"Canada Central\",\r\n    \"location\": \"canadacentral\",\r\n    \"PREFIX\": \"ACC1\",\r\n    \"pairedRegion\": \"canadaeast\"\r\n  },\r\n  \"southcentralus\": {\r\n    \"displayname\": \"South Central US\",\r\n    \"location\": \"southcentralus\",\r\n    \"PREFIX\": \"ASCU\",\r\n    \"pairedRegion\": \"northcentralus\"\r\n  },\r\n  \"norwayeast\": {\r\n    \"displayname\": \"Norway East\",\r\n    \"location\": \"norwayeast\",\r\n    \"PREFIX\": \"ANE1\",\r\n    \"pairedRegion\": \"norwaywest\"\r\n  },\r\n  \"japanwest\": {\r\n    \"displayname\": \"Japan West\",\r\n    \"location\": \"japanwest\",\r\n    \"PREFIX\": \"AJW1\",\r\n    \"pairedRegion\": \"japaneast\"\r\n  },\r\n  \"norwaywest\": {\r\n    \"displayname\": \"Norway West\",\r\n    \"location\": \"norwaywest\",\r\n    \"PREFIX\": \"ANW1\",\r\n    \"pairedRegion\": \"norwayeast\"\r\n  },\r\n  \"jioindiacentral\": {\r\n    \"displayname\": \"Jio India Central\",\r\n    \"location\": \"jioindiacentral\",\r\n    \"PREFIX\": \"AJIC\",\r\n    \"pairedRegion\": \"jioindiawest\"\r\n  },\r\n  \"centralindia\": {\r\n    \"displayname\": \"Central India\",\r\n    \"location\": \"centralindia\",\r\n    \"PREFIX\": \"ACI1\",\r\n    \"pairedRegion\": \"southindia\"\r\n  },\r\n  \"westus3\": {\r\n    \"displayname\": \"West US 3\",\r\n    \"location\": \"westus3\",\r\n    \"PREFIX\": \"AWU3\",\r\n    \"pairedRegion\": \"eastus\"\r\n  },\r\n  \"brazilsouth\": {\r\n    \"displayname\": \"Brazil South\",\r\n    \"location\": \"brazilsouth\",\r\n    \"PREFIX\": \"ABS1\",\r\n    \"pairedRegion\": \"southcentralus\"\r\n  },\r\n  \"eastasia\": {\r\n    \"displayname\": \"East Asia\",\r\n    \"location\": \"eastasia\",\r\n    \"PREFIX\": \"AEA1\",\r\n    \"pairedRegion\": \"southeastasia\"\r\n  },\r\n  \"swedencentral\": {\r\n    \"displayname\": \"Sweden Central\",\r\n    \"location\": \"swedencentral\",\r\n    \"PREFIX\": \"ASC1\",\r\n    \"pairedRegion\": \"swedensouth\"\r\n  },\r\n  \"uksouth\": {\r\n    \"displayname\": \"UK South\",\r\n    \"location\": \"uksouth\",\r\n    \"PREFIX\": \"AUS1\",\r\n    \"pairedRegion\": \"ukwest\"\r\n  },\r\n  \"switzerlandnorth\": {\r\n    \"displayname\": \"Switzerland North\",\r\n    \"location\": \"switzerlandnorth\",\r\n    \"PREFIX\": \"ASN1\",\r\n    \"pairedRegion\": \"switzerlandwest\"\r\n  },\r\n  \"canadaeast\": {\r\n    \"displayname\": \"Canada East\",\r\n    \"location\": \"canadaeast\",\r\n    \"PREFIX\": \"ACE1\",\r\n    \"pairedRegion\": \"canadacentral\"\r\n  },\r\n  \"australiasoutheast\": {\r\n    \"displayname\": \"Australia Southeast\",\r\n    \"location\": \"australiasoutheast\",\r\n    \"PREFIX\": \"AAS1\",\r\n    \"pairedRegion\": \"australiaeast\"\r\n  },\r\n  \"northeurope\": {\r\n    \"displayname\": \"North Europe\",\r\n    \"location\": \"northeurope\",\r\n    \"PREFIX\": \"ANEU\",\r\n    \"pairedRegion\": \"westeurope\"\r\n  },\r\n  \"germanywestcentral\": {\r\n    \"displayname\": \"Germany West Central\",\r\n    \"location\": \"germanywestcentral\",\r\n    \"PREFIX\": \"AGWC\",\r\n    \"pairedRegion\": \"germanynorth\"\r\n  },\r\n  \"japaneast\": {\r\n    \"displayname\": \"Japan East\",\r\n    \"location\": \"japaneast\",\r\n    \"PREFIX\": \"AJE1\",\r\n    \"pairedRegion\": \"japanwest\"\r\n  },\r\n  \"uaenorth\": {\r\n    \"displayname\": \"UAE North\",\r\n    \"location\": \"uaenorth\",\r\n    \"PREFIX\": \"AUN1\",\r\n    \"pairedRegion\": \"uaecentral\"\r\n  },\r\n  \"australiaeast\": {\r\n    \"displayname\": \"Australia East\",\r\n    \"location\": \"australiaeast\",\r\n    \"PREFIX\": \"AAE1\",\r\n    \"pairedRegion\": \"australiasoutheast\"\r\n  },\r\n  \"switzerlandwest\": {\r\n    \"displayname\": \"Switzerland West\",\r\n    \"location\": \"switzerlandwest\",\r\n    \"PREFIX\": \"ASW1\",\r\n    \"pairedRegion\": \"switzerlandnorth\"\r\n  },\r\n  \"australiacentral\": {\r\n    \"displayname\": \"Australia Central\",\r\n    \"location\": \"australiacentral\",\r\n    \"PREFIX\": \"AAC1\",\r\n    \"pairedRegion\": \"australiacentral\"\r\n  },\r\n  \"brazilsoutheast\": {\r\n    \"displayname\": \"Brazil Southeast\",\r\n    \"location\": \"brazilsoutheast\",\r\n    \"PREFIX\": \"ABSE\",\r\n    \"pairedRegion\": \"brazilsouth\"\r\n  }\r\n}\r\n')]",
            "primaryPrefix": "[variables('regionLookup')[parameters('Global').PrimaryLocation].prefix]",
            "GlobalRGJ": "[json(parameters('Global').GlobalRG)]",
            "gh": {
              "globalRGPrefix": "[if(contains(variables('GlobalRGJ'), 'Prefix'), variables('GlobalRGJ').Prefix, variables('primaryPrefix'))]",
              "globalRGOrgName": "[if(contains(variables('GlobalRGJ'), 'OrgName'), variables('GlobalRGJ').OrgName, parameters('Global').OrgName)]",
              "globalRGAppName": "[if(contains(variables('GlobalRGJ'), 'AppName'), variables('GlobalRGJ').AppName, parameters('Global').AppName)]",
              "globalRGName": "[if(contains(variables('GlobalRGJ'), 'name'), variables('GlobalRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID')))]"
            },
            "globalRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').globalRGPrefix, variables('gh').globalRGOrgName, variables('gh').globalRGAppName, variables('gh').globalRGName)]",
            "networkId": "[format('{0}{1}', parameters('Global').networkid[0], string(sub(parameters('Global').networkid[1], mul(2, int(parameters('DeploymentID'))))))]",
            "AzureDNS": "168.63.129.16",
            "DNSServerList": "[if(contains(parameters('DeploymentInfo'), 'DNSServers'), parameters('DeploymentInfo').DNSServers, parameters('Global').DNSServers)]",
            "WebSiteInfo": "[if(contains(parameters('DeploymentInfo'), 'FunctionInfo'), parameters('DeploymentInfo').FunctionInfo, createArray())]",
            "myAppConfig": {
              "abc": "value",
              "def": "value"
            }
          },
          "resources": [
            {
              "condition": "[variables('WSInfo')[copyIndex()].match]",
              "copy": {
                "name": "functionApp",
                "count": "[length(variables('WebSiteInfo'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dp{0}-fn{1}', variables('Deployment'), variables('WebSiteInfo')[copyIndex()].Name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "ws": {
                    "value": "[variables('WebSiteInfo')[copyIndex()]]"
                  },
                  "appprefix": {
                    "value": "fn"
                  },
                  "Deployment": {
                    "value": "[variables('Deployment')]"
                  },
                  "DeploymentURI": {
                    "value": "[variables('DeploymentURI')]"
                  },
                  "Global": {
                    "value": "[parameters('Global')]"
                  },
                  "globalRGName": {
                    "value": "[variables('globalRGName')]"
                  },
                  "DeploymentID": {
                    "value": "[parameters('DeploymentID')]"
                  },
                  "Environment": {
                    "value": "[parameters('Environment')]"
                  },
                  "Prefix": {
                    "value": "[parameters('Prefix')]"
                  },
                  "diagLogs": {
                    "value": [
                      {
                        "category": "FunctionAppLogs",
                        "enabled": true,
                        "retentionPolicy": {
                          "days": 30,
                          "enabled": false
                        }
                      }
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1318.3566",
                      "templateHash": "5670998838727846695"
                    }
                  },
                  "parameters": {
                    "ws": {
                      "type": "object"
                    },
                    "appprefix": {
                      "type": "string"
                    },
                    "Deployment": {
                      "type": "string"
                    },
                    "DeploymentURI": {
                      "type": "string"
                    },
                    "diagLogs": {
                      "type": "array"
                    },
                    "linuxFxVersion": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "Global": {
                      "type": "object"
                    },
                    "globalRGName": {
                      "type": "string"
                    },
                    "Prefix": {
                      "type": "string"
                    },
                    "Environment": {
                      "type": "string"
                    },
                    "DeploymentID": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "MSILookup": {
                      "SQL": "Cluster",
                      "UTL": "DefaultKeyVault",
                      "FIL": "Cluster",
                      "OCR": "Storage",
                      "PS01": "VMOperator"
                    },
                    "HubRGJ": "[json(parameters('Global').hubRG)]",
                    "HubKVJ": "[json(parameters('Global').hubKV)]",
                    "gh": {
                      "hubRGPrefix": "[if(contains(variables('HubRGJ'), 'Prefix'), variables('HubRGJ').Prefix, parameters('Prefix'))]",
                      "hubRGOrgName": "[if(contains(variables('HubRGJ'), 'OrgName'), variables('HubRGJ').OrgName, parameters('Global').OrgName)]",
                      "hubRGAppName": "[if(contains(variables('HubRGJ'), 'AppName'), variables('HubRGJ').AppName, parameters('Global').AppName)]",
                      "hubRGRGName": "[if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID'))))]",
                      "hubKVPrefix": "[if(contains(variables('HubKVJ'), 'Prefix'), variables('HubKVJ').Prefix, parameters('Prefix'))]",
                      "hubKVOrgName": "[if(contains(variables('HubKVJ'), 'OrgName'), variables('HubKVJ').OrgName, parameters('Global').OrgName)]",
                      "hubKVAppName": "[if(contains(variables('HubKVJ'), 'AppName'), variables('HubKVJ').AppName, parameters('Global').AppName)]",
                      "hubKVRGName": "[if(contains(variables('HubKVJ'), 'RG'), variables('HubKVJ').RG, variables('HubRGJ').name)]"
                    },
                    "HubRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').hubRGPrefix, variables('gh').hubRGOrgName, variables('gh').hubRGAppName, variables('gh').hubRGRGName)]",
                    "HubKVRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').hubKVPrefix, variables('gh').hubKVOrgName, variables('gh').hubKVAppName, variables('gh').hubKVRGName)]",
                    "HubKVName": "[toLower(format('{0}-{1}-{2}-{3}-kv{4}', variables('gh').hubKVPrefix, variables('gh').hubKVOrgName, variables('gh').hubKVAppName, variables('gh').hubKVRGName, variables('HubKVJ').name))]",
                    "userAssignedIdentities": {
                      "Default": {
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperator', parameters('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiKeyVaultSecretsGet', parameters('Deployment'))))]": {}
                      },
                      "VMOperator": {
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiVMOperator', parameters('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiKeyVaultSecretsGetApp', parameters('Deployment'))))]": {}
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Web/sites",
                      "apiVersion": "2021-01-01",
                      "name": "[format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name)]",
                      "identity": {
                        "type": "SystemAssigned, UserAssigned",
                        "userAssignedIdentities": "[if(contains(variables('MSILookup'), parameters('ws').NAME), variables('userAssignedIdentities')[variables('MSILookup')[parameters('ws').NAME]], variables('userAssignedIdentities').Default)]"
                      },
                      "kind": "[parameters('ws').kind]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "enabled": true,
                        "httpsOnly": true,
                        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', format('{0}-asp{1}', parameters('Deployment'), parameters('ws').AppSVCPlan))]",
                        "siteConfig": {
                          "linuxFxVersion": "[if(empty(parameters('linuxFxVersion')), null(), parameters('linuxFxVersion'))]"
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', if(contains(parameters('Global'), 'DomainNameExtSubscriptionID'), parameters('Global').DomainNameExtSubscriptionID, subscription().subscriptionId), if(contains(parameters('Global'), 'DomainNameExtRG'), parameters('Global').DomainNameExtRG, parameters('globalRGName'))), 'Microsoft.Resources/deployments', format('setdns-public-{0}-{1}{2}-{3}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name, parameters('Global').DomainNameExt))]"
                      ]
                    },
                    {
                      "condition": "[contains(parameters('ws'), 'extraSlots')]",
                      "copy": {
                        "name": "slots",
                        "count": "[length(range(1, parameters('ws').extraSlots))]"
                      },
                      "type": "Microsoft.Web/sites/slots",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name), format('slot{0}', range(1, parameters('ws').extraSlots)[copyIndex()]))]",
                      "location": "[resourceGroup().location]",
                      "identity": {
                        "type": "SystemAssigned, UserAssigned",
                        "userAssignedIdentities": "[if(contains(variables('MSILookup'), parameters('ws').NAME), variables('userAssignedIdentities')[variables('MSILookup')[parameters('ws').NAME]], variables('userAssignedIdentities').Default)]"
                      },
                      "properties": {
                        "enabled": true,
                        "httpsOnly": true
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(contains(parameters('ws'), 'customDNS'), bool(parameters('ws').customDNS))]",
                      "type": "Microsoft.Web/certificates",
                      "apiVersion": "2021-02-01",
                      "name": "[toLower(format('{0}.{1}', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name), parameters('Global').DomainNameExt))]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "canonicalName": "[toLower(format('{0}.{1}', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name), parameters('Global').DomainNameExt))]",
                        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', format('{0}-asp{1}', parameters('Deployment'), parameters('ws').AppSVCPlan))]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name))]",
                        "[resourceId('Microsoft.Resources/deployments', format('dp-binding-{0}', parameters('ws').name))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2017-05-01-preview",
                      "scope": "[format('Microsoft.Web/sites/{0}', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name))]",
                      "name": "service",
                      "properties": {
                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                        "logs": "[parameters('diagLogs')]",
                        "metrics": [
                          {
                            "timeGrain": "PT5M",
                            "enabled": true,
                            "retentionPolicy": {
                              "enabled": false,
                              "days": 0
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name))]"
                      ]
                    },
                    {
                      "condition": "[contains(parameters('ws'), 'subnet')]",
                      "type": "Microsoft.Web/sites/config",
                      "apiVersion": "2021-01-15",
                      "name": "[format('{0}/virtualNetwork', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name))]",
                      "properties": {
                        "subnetResourceId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', format('{0}-vn', parameters('Deployment')), parameters('ws').subnet)]",
                        "swiftSupported": true
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name))]"
                      ]
                    },
                    {
                      "condition": "[contains(parameters('ws'), 'preWarmedCount')]",
                      "type": "Microsoft.Web/sites/config",
                      "apiVersion": "2021-01-01",
                      "name": "[format('{0}/{1}', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name), 'web')]",
                      "properties": {
                        "preWarmedInstanceCount": "[parameters('ws').preWarmedCount]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(contains(parameters('ws'), 'customDNS'), bool(parameters('ws').customDNS))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('setdns-public-{0}-{1}{2}-{3}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name, parameters('Global').DomainNameExt)]",
                      "subscriptionId": "[if(contains(parameters('Global'), 'DomainNameExtSubscriptionID'), parameters('Global').DomainNameExtSubscriptionID, subscription().subscriptionId)]",
                      "resourceGroup": "[if(contains(parameters('Global'), 'DomainNameExtRG'), parameters('Global').DomainNameExtRG, parameters('globalRGName'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "hostname": {
                            "value": "[toLower(format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name))]"
                          },
                          "cname": {
                            "value": "[format('{0}-{1}{2}.azurewebsites.net', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name)]"
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "2861540136838094664"
                            }
                          },
                          "parameters": {
                            "hostname": {
                              "type": "string"
                            },
                            "cname": {
                              "type": "string"
                            },
                            "Global": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/dnsZones/CNAME",
                              "apiVersion": "2018-05-01",
                              "name": "[format('{0}/{1}', parameters('Global').DomainNameExt, parameters('hostname'))]",
                              "properties": {
                                "TTL": 3600,
                                "metadata": {},
                                "CNAMERecord": {
                                  "cname": "[parameters('cname')]"
                                }
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "condition": "[and(and(and(contains(parameters('ws'), 'initialDeploy'), bool(parameters('ws').initialDeploy)), contains(parameters('ws'), 'customDNS')), bool(parameters('ws').customDNS))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp-binding-{0}', parameters('ws').name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "externalDNS": {
                            "value": "[parameters('Global').DomainNameExt]"
                          },
                          "siteName": {
                            "value": "[format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name)]"
                          },
                          "sslState": {
                            "value": "Disabled"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "14804878137886221366"
                            }
                          },
                          "parameters": {
                            "siteName": {
                              "type": "string"
                            },
                            "externalDNS": {
                              "type": "string"
                            },
                            "sslState": {
                              "type": "string",
                              "allowedValues": [
                                "SniEnabled",
                                "Disabled"
                              ]
                            },
                            "thumbprint": {
                              "type": "string",
                              "defaultValue": ""
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Web/sites/hostNameBindings",
                              "apiVersion": "2021-02-01",
                              "name": "[toLower(format('{0}/{1}.{2}', parameters('siteName'), parameters('siteName'), parameters('externalDNS')))]",
                              "properties": {
                                "siteName": "[parameters('siteName')]",
                                "hostNameType": "Verified",
                                "sslState": "[parameters('sslState')]",
                                "customHostNameDnsRecordType": "CName",
                                "thumbprint": "[if(equals(parameters('sslState'), 'SniEnabled'), parameters('thumbprint'), null())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(contains(parameters('ws'), 'customDNS'), bool(parameters('ws').customDNS))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp-binding-sni-{0}', parameters('ws').name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "externalDNS": {
                            "value": "[parameters('Global').DomainNameExt]"
                          },
                          "siteName": {
                            "value": "[format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name)]"
                          },
                          "sslState": {
                            "value": "SniEnabled"
                          },
                          "thumbprint": {
                            "value": "[reference(resourceId('Microsoft.Web/certificates', toLower(format('{0}.{1}', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name), parameters('Global').DomainNameExt))), '2021-02-01').thumbprint]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "14804878137886221366"
                            }
                          },
                          "parameters": {
                            "siteName": {
                              "type": "string"
                            },
                            "externalDNS": {
                              "type": "string"
                            },
                            "sslState": {
                              "type": "string",
                              "allowedValues": [
                                "SniEnabled",
                                "Disabled"
                              ]
                            },
                            "thumbprint": {
                              "type": "string",
                              "defaultValue": ""
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Web/sites/hostNameBindings",
                              "apiVersion": "2021-02-01",
                              "name": "[toLower(format('{0}/{1}.{2}', parameters('siteName'), parameters('siteName'), parameters('externalDNS')))]",
                              "properties": {
                                "siteName": "[parameters('siteName')]",
                                "hostNameType": "Verified",
                                "sslState": "[parameters('sslState')]",
                                "customHostNameDnsRecordType": "CName",
                                "thumbprint": "[if(equals(parameters('sslState'), 'SniEnabled'), parameters('thumbprint'), null())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Web/certificates', toLower(format('{0}.{1}', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name), parameters('Global').DomainNameExt)))]",
                        "[resourceId('Microsoft.Web/sites', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-SA-{1}-FileShare-{2}', parameters('Deployment'), parameters('ws').saname, replace(toLower(format('{0}', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name))), '-', ''))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "SAName": {
                            "value": "[format('{0}sa{1}', parameters('DeploymentURI'), parameters('ws').saname)]"
                          },
                          "fileShare": {
                            "value": {
                              "name": "[replace(toLower(format('{0}', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name))), '-', '')]",
                              "quota": 5120
                            }
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          },
                          "deployment": {
                            "value": "[parameters('Deployment')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "16728411370713840423"
                            }
                          },
                          "parameters": {
                            "SAName": {
                              "type": "string"
                            },
                            "fileShare": {
                              "type": "object"
                            },
                            "Global": {
                              "type": "object"
                            },
                            "deployment": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "rolesInfo": "[if(contains(parameters('fileShare'), 'rolesInfo'), parameters('fileShare').rolesInfo, createArray())]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
                              "apiVersion": "2021-04-01",
                              "name": "[format('{0}/{1}/{2}', split(format('{0}/default', parameters('SAName')), '/')[0], split(format('{0}/default', parameters('SAName')), '/')[1], toLower(format('{0}', parameters('fileShare').name)))]",
                              "properties": {
                                "shareQuota": "[parameters('fileShare').quota]",
                                "metadata": {}
                              }
                            },
                            {
                              "copy": {
                                "name": "RBAC",
                                "count": "[length(variables('rolesInfo'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('dp-rbac-role-{0}-{1}', toLower(format('{0}', parameters('fileShare').name)), variables('rolesInfo')[copyIndex()].name)]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "resourceId": {
                                    "value": "[resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', split(format('{0}/default', parameters('SAName')), '/')[0], split(format('{0}/default', parameters('SAName')), '/')[1], toLower(format('{0}', parameters('fileShare').name)))]"
                                  },
                                  "Global": {
                                    "value": "[parameters('Global')]"
                                  },
                                  "roleInfo": {
                                    "value": "[variables('rolesInfo')[copyIndex()]]"
                                  },
                                  "Type": {
                                    "value": "[if(contains(variables('rolesInfo')[copyIndex()], 'Type'), variables('rolesInfo')[copyIndex()].Type, 'lookup')]"
                                  },
                                  "deployment": {
                                    "value": "[parameters('deployment')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.4.1318.3566",
                                      "templateHash": "18000982583333431838"
                                    }
                                  },
                                  "parameters": {
                                    "resourceId": {
                                      "type": "string"
                                    },
                                    "Global": {
                                      "type": "object"
                                    },
                                    "roleInfo": {
                                      "type": "object"
                                    },
                                    "principalType": {
                                      "type": "string",
                                      "defaultValue": ""
                                    },
                                    "Type": {
                                      "type": "string"
                                    },
                                    "deployment": {
                                      "type": "string"
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "roleAssignment",
                                        "count": "[length(parameters('roleInfo').RBAC)]",
                                        "input": {
                                          "RoleName": "[parameters('roleInfo').RBAC[copyIndex('roleAssignment')].Name]",
                                          "RoleID": "[variables('rolesGroupsLookup')[parameters('roleInfo').RBAC[copyIndex('roleAssignment')].Name].Id]",
                                          "principalType": "[parameters('principalType')]",
                                          "GUID": "[guid(parameters('roleInfo').Name, parameters('roleInfo').RBAC[copyIndex('roleAssignment')].Name, parameters('resourceId'))]",
                                          "FriendlyName": "[format('user: {0} --> roleInfoName: {1} --> resourceId: {2}', parameters('roleInfo').Name, parameters('roleInfo').RBAC[copyIndex('roleAssignment')].Name, parameters('resourceId'))]"
                                        }
                                      }
                                    ],
                                    "objectIdLookup": "[json(parameters('Global').objectIdLookup)]",
                                    "rolesGroupsLookup": "[json(parameters('Global').RolesGroupsLookup)]"
                                  },
                                  "resources": [
                                    {
                                      "copy": {
                                        "name": "RBACRAResource",
                                        "count": "[length(variables('roleAssignment'))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2020-10-01",
                                      "name": "[take(replace(format('dp-rbac-all-ra-{0}-{1}-{2}', last(split(parameters('resourceId'), '/')), parameters('roleInfo').name, copyIndex()), '@', '_'), 64)]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "resourceId": {
                                            "value": "[parameters('resourceId')]"
                                          },
                                          "description": {
                                            "value": "[parameters('roleInfo').name]"
                                          },
                                          "roledescription": {
                                            "value": "[variables('roleAssignment')[copyIndex()].RoleName]"
                                          },
                                          "name": {
                                            "value": "[variables('roleAssignment')[copyIndex()].GUID]"
                                          },
                                          "roleDefinitionId": {
                                            "value": "[variables('roleAssignment')[copyIndex()].RoleID]"
                                          },
                                          "principalId": {
                                            "value": "[if(equals(parameters('Type'), 'lookup'), variables('objectIdLookup')[parameters('roleInfo').name], reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-uai{1}', parameters('deployment'), parameters('roleInfo').name)), '2018-11-30').principalId)]"
                                          },
                                          "principalType": {
                                            "value": "[variables('roleAssignment')[copyIndex()].principalType]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.4.1318.3566",
                                              "templateHash": "15020166987174036705"
                                            }
                                          },
                                          "parameters": {
                                            "resourceId": {
                                              "type": "string"
                                            },
                                            "name": {
                                              "type": "string"
                                            },
                                            "roleDefinitionId": {
                                              "type": "string"
                                            },
                                            "principalId": {
                                              "type": "string"
                                            },
                                            "principalType": {
                                              "type": "string",
                                              "defaultValue": ""
                                            },
                                            "description": {
                                              "type": "string"
                                            },
                                            "roledescription": {
                                              "type": "string",
                                              "defaultValue": ""
                                            }
                                          },
                                          "resources": [
                                            {
                                              "type": "Microsoft.Resources/deployments",
                                              "apiVersion": "2021-04-01",
                                              "name": "[take(format('dp-RRA-{0}-{1}', parameters('description'), last(split(parameters('resourceId'), '/'))), 64)]",
                                              "properties": {
                                                "mode": "Incremental",
                                                "expressionEvaluationOptions": {
                                                  "scope": "Outer"
                                                },
                                                "template": "[json('{\r\n  \"$schema\": \"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#\",\r\n  \"contentVersion\": \"1.0.0.0\",\r\n  \"parameters\": {\r\n    \"scope\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"name\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"roleDefinitionId\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"principalId\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"principalType\": {\r\n      \"type\": \"string\"\r\n    }\r\n  },\r\n  \"resources\": [\r\n    {\r\n      \"type\": \"Microsoft.Authorization/roleAssignments\",\r\n      \"apiVersion\": \"2020-08-01-preview\",\r\n      \"scope\": \"[parameters(''scope'')]\",\r\n      \"name\": \"[parameters(''name'')]\",\r\n      \"properties\": {\r\n        \"roleDefinitionId\": \"[resourceId(''Microsoft.Authorization/roleDefinitions'', parameters(''roleDefinitionId''))]\",\r\n        \"principalId\": \"[parameters(''principalId'')]\",\r\n        \"principalType\": \"[parameters(''principalType'')]\"\r\n      }\r\n    }\r\n  ],\r\n  \"outputs\": {\r\n    \"roleAssignmentId\": {\r\n      \"type\": \"string\",\r\n      \"value\": \"[extensionResourceId(parameters(''scope''), ''Microsoft.Authorization/roleAssignments'', parameters(''name''))]\"\r\n    }\r\n  }\r\n}')]",
                                                "parameters": {
                                                  "scope": {
                                                    "value": "[parameters('resourceId')]"
                                                  },
                                                  "name": {
                                                    "value": "[parameters('name')]"
                                                  },
                                                  "roleDefinitionId": {
                                                    "value": "[parameters('roleDefinitionId')]"
                                                  },
                                                  "principalId": {
                                                    "value": "[parameters('principalId')]"
                                                  },
                                                  "principalType": {
                                                    "value": "[parameters('principalType')]"
                                                  }
                                                }
                                              }
                                            }
                                          ],
                                          "outputs": {
                                            "resourceid": {
                                              "type": "string",
                                              "value": "[parameters('resourceId')]"
                                            },
                                            "roleAssignmentId": {
                                              "type": "string",
                                              "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('dp-RRA-{0}-{1}', parameters('description'), last(split(parameters('resourceId'), '/'))), 64))).outputs.roleAssignmentId.value]"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "RoleAssignments": {
                                      "type": "array",
                                      "value": "[variables('roleAssignment')]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', split(format('{0}/default', parameters('SAName')), '/')[0], split(format('{0}/default', parameters('SAName')), '/')[1], toLower(format('{0}', parameters('fileShare').name)))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "SAFileServiceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/fileServices', split(format('{0}/default', parameters('SAName')), '/')[0], split(format('{0}/default', parameters('SAName')), '/')[1])]"
                            },
                            "SAFileService": {
                              "type": "string",
                              "value": "[format('{0}/default', parameters('SAName'))]"
                            },
                            "share": {
                              "type": "string",
                              "value": "[toLower(format('{0}', parameters('fileShare').name))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name))]"
                      ]
                    },
                    {
                      "condition": "[contains(parameters('ws'), 'privatelinkinfo')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-privatelinkloop{1}', parameters('Deployment'), parameters('ws').name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[parameters('Deployment')]"
                          },
                          "DeploymentURI": {
                            "value": "[parameters('DeploymentURI')]"
                          },
                          "PrivateLinkInfo": {
                            "value": "[parameters('ws').privateLinkInfo]"
                          },
                          "providerType": {
                            "value": "Microsoft.Web/sites"
                          },
                          "resourceName": {
                            "value": "[format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name)]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "1242957729837230630"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "DeploymentURI": {
                              "type": "string"
                            },
                            "PrivateLinkInfo": {
                              "type": "array"
                            },
                            "providerType": {
                              "type": "string"
                            },
                            "resourceName": {
                              "type": "string"
                            },
                            "resourceRG": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().name]"
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "privateLink",
                                "count": "[length(parameters('PrivateLinkInfo'))]",
                                "input": {
                                  "name": "[format('{0}-pl{1}', parameters('Deployment'), parameters('PrivateLinkInfo')[copyIndex('privateLink')].Subnet)]",
                                  "vNet": "[format('{0}-vn', parameters('Deployment'))]"
                                }
                              }
                            ]
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "subnetPrivateEndpoint",
                                "count": "[length(parameters('PrivateLinkInfo'))]"
                              },
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2019-11-01",
                              "name": "[format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet)]",
                              "location": "[resourceGroup().location]",
                              "properties": {
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet)]",
                                    "properties": {
                                      "privateLinkServiceId": "[resourceId(parameters('resourceRG'), parameters('providerType'), parameters('resourceName'))]",
                                      "groupIds": "[array(parameters('PrivateLinkInfo')[copyIndex()].groupID)]",
                                      "privateLinkServiceConnectionState": {
                                        "status": "Approved",
                                        "description": "Auto-Approved",
                                        "actionsRequired": "None"
                                      }
                                    }
                                  }
                                ],
                                "manualPrivateLinkServiceConnections": [],
                                "subnet": {
                                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('privateLink')[copyIndex()].vNet, parameters('PrivateLinkInfo')[copyIndex()].Subnet)]"
                                }
                              }
                            },
                            {
                              "copy": {
                                "name": "NICDiags",
                                "count": "[length(parameters('PrivateLinkInfo'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('dp-{0}-pl-{1}-{2}-diags', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet)]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "DeploymentURI": {
                                    "value": "[parameters('DeploymentURI')]"
                                  },
                                  "NICName": {
                                    "value": "[last(split(reference(resourceId('Microsoft.Network/privateEndpoints', format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet))).networkInterfaces[0].id, '/'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.4.1318.3566",
                                      "templateHash": "3372180053977311610"
                                    }
                                  },
                                  "parameters": {
                                    "DeploymentURI": {
                                      "type": "string"
                                    },
                                    "NICName": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', parameters('NICName'))]",
                                      "name": "service",
                                      "properties": {
                                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                                        "metrics": [
                                          {
                                            "timeGrain": "PT5M",
                                            "enabled": true,
                                            "retentionPolicy": {
                                              "enabled": false,
                                              "days": 0
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "NICID": {
                              "type": "array",
                              "copy": {
                                "count": "[length(parameters('PrivateLinkInfo'))]",
                                "input": "[reference(resourceId('Microsoft.Network/privateEndpoints', format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet))).networkInterfaces[0].id]"
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name))]"
                      ]
                    },
                    {
                      "condition": "[contains(parameters('ws'), 'privatelinkinfo')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-registerPrivateDNS{1}', parameters('Deployment'), parameters('ws').name)]",
                      "resourceGroup": "[variables('HubRGName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "PrivateLinkInfo": {
                            "value": "[parameters('ws').privateLinkInfo]"
                          },
                          "providerURL": {
                            "value": "net"
                          },
                          "resourceName": {
                            "value": "[format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name)]"
                          },
                          "providerType": {
                            "value": "Microsoft.Web/sites"
                          },
                          "Nics": {
                            "value": "[if(contains(parameters('ws'), 'privatelinkinfo'), array(reference(resourceId('Microsoft.Resources/deployments', format('dp{0}-privatelinkloop{1}', parameters('Deployment'), parameters('ws').name)), '2020-10-01').outputs.NICID.value), array('na'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "9527034148045878947"
                            }
                          },
                          "parameters": {
                            "PrivateLinkInfo": {
                              "type": "array"
                            },
                            "resourceName": {
                              "type": "string"
                            },
                            "providerURL": {
                              "type": "string"
                            },
                            "providerType": {
                              "type": "string"
                            },
                            "Nics": {
                              "type": "array"
                            }
                          },
                          "variables": {
                            "DNSLookup": {
                              "Microsoft.AzureCosmosDB/databaseAccounts/SQL": "documents",
                              "Microsoft.AzureCosmosDB/databaseAccounts/MongoDB": "mongo.cosmos",
                              "Microsoft.AzureCosmosDB/databaseAccounts/Cassandra": "cassandra.cosmos",
                              "Microsoft.AzureCosmosDB/databaseAccounts/Gremlin": "gremlin.cosmos",
                              "Microsoft.AzureCosmosDB/databaseAccounts/Table": "table.cosmos",
                              "Microsoft.KeyVault/vaults": "vaultcore",
                              "Microsoft.DBforMySQL/servers": "mysql",
                              "Microsoft.DBforMariaDB/servers": "mariadb",
                              "Microsoft.AppConfiguration/configurationStores": "azconfig",
                              "Microsoft.ServiceBus/namespaces": "servicebus",
                              "Microsoft.Sql/servers": "database",
                              "Microsoft.Cache/redis": "redis.cache",
                              "Microsoft.Web/sites": "azurewebsites",
                              "Microsoft.Synapse/workspaces": "sql",
                              "Microsoft.ApiManagement/service": "azure-api"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "privateLinkDNS",
                                "count": "[length(parameters('PrivateLinkInfo'))]"
                              },
                              "type": "Microsoft.Network/privateDnsZones/A",
                              "apiVersion": "2020-06-01",
                              "name": "[format('privatelink.{0}.{1}/{2}', if(contains(variables('DNSLookup'), parameters('providerType')), variables('DNSLookup')[parameters('providerType')], parameters('PrivateLinkInfo')[copyIndex()].groupID), parameters('providerURL'), parameters('resourceName'))]",
                              "properties": {
                                "ttl": 3600,
                                "aRecords": [
                                  {
                                    "ipv4Address": "[reference(parameters('Nics')[copyIndex()], '2018-05-01').ipConfigurations[0].properties.privateIPAddress]"
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-privatelinkloop{1}', parameters('Deployment'), parameters('ws').name))]",
                        "[resourceId('Microsoft.Web/sites', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "WebSite": {
                      "type": "object",
                      "value": "[reference(resourceId('Microsoft.Web/sites', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name)), '2021-01-01', 'full')]"
                    },
                    "Thumbprint": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Web/certificates', toLower(format('{0}.{1}', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name), parameters('Global').DomainNameExt))), '2021-02-01').thumbprint]"
                    }
                  }
                }
              }
            },
            {
              "condition": "[variables('WSInfo')[copyIndex()].match]",
              "copy": {
                "name": "functionAppSettings",
                "count": "[length(variables('WebSiteInfo'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dp{0}-fn{1}-settings', variables('Deployment'), variables('WebSiteInfo')[copyIndex()].Name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "ws": {
                    "value": "[variables('WebSiteInfo')[copyIndex()]]"
                  },
                  "appprefix": {
                    "value": "fn"
                  },
                  "Deployment": {
                    "value": "[variables('Deployment')]"
                  },
                  "appConfigCustom": {
                    "value": "[variables('myAppConfig')]"
                  },
                  "appConfigCurrent": {
                    "value": "[if(variables('WSInfo')[copyIndex()].match, list(resourceId('Microsoft.Web/sites/config', split(format('{0}-fn{1}/appsettings', variables('Deployment'), variables('WebSiteInfo')[copyIndex()].Name), '/')[0], split(format('{0}-fn{1}/appsettings', variables('Deployment'), variables('WebSiteInfo')[copyIndex()].Name), '/')[1]), '2021-01-15').properties, null())]"
                  },
                  "appConfigNew": {
                    "value": {
                      "APPINSIGHTS_INSTRUMENTATIONKEY": "[reference(resourceId('Microsoft.Insights/components', format('{0}AppInsights', variables('DeploymentURI'))), '2020-02-02').InstrumentationKey]",
                      "APPLICATIONINSIGHTS_CONNECTION_STRING": "[format('InstrumentationKey={0}', reference(resourceId('Microsoft.Insights/components', format('{0}AppInsights', variables('DeploymentURI'))), '2020-02-02').InstrumentationKey)]",
                      "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING": "[format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1}', format('{0}sa{1}', variables('DeploymentURI'), variables('WebSiteInfo')[copyIndex()].saname), listKeys(resourceId('Microsoft.Storage/storageAccounts', format('{0}sa{1}', variables('DeploymentURI'), variables('WebSiteInfo')[copyIndex()].saname)), '2021-04-01').keys[0].value)]",
                      "AzureWebJobsStorage": "[format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1}', format('{0}sa{1}', variables('DeploymentURI'), variables('WebSiteInfo')[copyIndex()].saname), listKeys(resourceId('Microsoft.Storage/storageAccounts', format('{0}sa{1}', variables('DeploymentURI'), variables('WebSiteInfo')[copyIndex()].saname)), '2021-04-01').keys[0].value)]",
                      "Storage": "[format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1}', format('{0}sa{1}', variables('DeploymentURI'), variables('WebSiteInfo')[copyIndex()].saname), listKeys(resourceId('Microsoft.Storage/storageAccounts', format('{0}sa{1}', variables('DeploymentURI'), variables('WebSiteInfo')[copyIndex()].saname)), '2021-04-01').keys[0].value)]",
                      "WEBSITE_CONTENTSHARE": "[replace(toLower(format('{0}', variables('WebSiteInfo')[copyIndex()].name)), '-', '')]",
                      "WEBSITE_CONTENTOVERVNET": 1,
                      "WEBSITE_DNS_SERVER": "[if(empty(variables('DNSServers')[0]), variables('AzureDNS'), variables('DNSServers')[0])]",
                      "WEBSITE_VNET_ROUTE_ALL": 1,
                      "FUNCTIONS_WORKER_RUNTIME": "[variables('WebSiteInfo')[copyIndex()].runtime]",
                      "FUNCTIONS_EXTENSION_VERSION": "~3"
                    }
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1318.3566",
                      "templateHash": "8878255813368571173"
                    }
                  },
                  "parameters": {
                    "ws": {
                      "type": "object"
                    },
                    "appprefix": {
                      "type": "string"
                    },
                    "Deployment": {
                      "type": "string"
                    },
                    "appConfigCustom": {
                      "type": "object"
                    },
                    "appConfigCurrent": {
                      "type": "secureObject"
                    },
                    "appConfigNew": {
                      "type": "secureObject"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Web/sites/config",
                      "apiVersion": "2021-01-15",
                      "name": "[format('{0}/{1}', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name), 'appsettings')]",
                      "properties": "[union(parameters('appConfigCustom'), parameters('appConfigCurrent'), parameters('appConfigNew'))]"
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('dp{0}-fn{1}', variables('Deployment'), variables('WebSiteInfo')[copyIndex()].Name))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-OMS', variables('Deployment')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-ServerFarm', variables('Deployment')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-VNET', variables('Deployment')))]"
      ]
    },
    {
      "condition": "[bool(parameters('Stage').WebSiteContainer)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('dp{0}-Container', variables('Deployment'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "DeploymentID": {
            "value": "[parameters('DeploymentID')]"
          },
          "DeploymentInfo": {
            "value": "[parameters('DeploymentInfo')]"
          },
          "Environment": {
            "value": "[parameters('Environment')]"
          },
          "Extensions": {
            "value": "[parameters('Extensions')]"
          },
          "Global": {
            "value": "[parameters('Global')]"
          },
          "Prefix": {
            "value": "[parameters('Prefix')]"
          },
          "Stage": {
            "value": "[parameters('Stage')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "8945216505026742623"
            }
          },
          "parameters": {
            "Prefix": {
              "type": "string"
            },
            "Environment": {
              "type": "string",
              "defaultValue": "D",
              "allowedValues": [
                "I",
                "D",
                "T",
                "U",
                "P",
                "S",
                "G",
                "A"
              ]
            },
            "DeploymentID": {
              "type": "string",
              "defaultValue": "1",
              "allowedValues": [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9"
              ]
            },
            "Stage": {
              "type": "object"
            },
            "Extensions": {
              "type": "object"
            },
            "Global": {
              "type": "object"
            },
            "DeploymentInfo": {
              "type": "object"
            }
          },
          "variables": {
            "copy": [
              {
                "name": "WSInfo",
                "count": "[length(variables('WebSiteInfo'))]",
                "input": {
                  "match": "[or(equals(parameters('Global').CN, '.'), contains(array(parameters('Global').CN), variables('WebSiteInfo')[copyIndex('WSInfo')].name))]",
                  "saName": "[toLower(format('{0}sa{1}', variables('DeploymentURI'), variables('WebSiteInfo')[copyIndex('WSInfo')].saname))]",
                  "compose": "[base64(format('  version: ''3''\n  services:\n    azure-vote-back:\n      image: mcr.microsoft.com/oss/bitnami/redis:6.0.8\n      container_name: azure-vote-back\n      environment:\n        ALLOW_EMPTY_PASSWORD: \"yes\"\n      ports:\n          - \"6379:6379\"\n  \n    azure-vote-front:\n      build: ./azure-vote\n      image: {0}.azurecr.io/azure-vote-front:latest\n      container_name: azure-vote-front\n      environment:\n        REDIS: azure-vote-back\n      ports:\n          - \"8080:80\"\n  ', toLower(format('{0}registry{1}', if(contains(variables('WebSiteInfo')[copyIndex('WSInfo')], 'registryENV'), replace(variables('DeploymentURI'), variables('ENV'), variables('WebSiteInfo')[copyIndex('WSInfo')].registryENV), variables('DeploymentURI')), variables('WebSiteInfo')[copyIndex('WSInfo')].registry))))]"
                }
              }
            ],
            "Deployment": "[format('{0}-{1}-{2}-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID'))]",
            "DeploymentURI": "[toLower(format('{0}{1}{2}{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID')))]",
            "ENV": "[format('{0}{1}', parameters('Environment'), parameters('DeploymentID'))]",
            "regionLookup": "[json('{\r\n  \"francecentral\": {\r\n    \"displayname\": \"France Central\",\r\n    \"location\": \"francecentral\",\r\n    \"PREFIX\": \"AFC1\",\r\n    \"pairedRegion\": \"francesouth\"\r\n  },\r\n  \"southeastasia\": {\r\n    \"displayname\": \"Southeast Asia\",\r\n    \"location\": \"southeastasia\",\r\n    \"PREFIX\": \"ASA1\",\r\n    \"pairedRegion\": \"eastasia\"\r\n  },\r\n  \"southafricawest\": {\r\n    \"displayname\": \"South Africa West\",\r\n    \"location\": \"southafricawest\",\r\n    \"PREFIX\": \"ASAW\",\r\n    \"pairedRegion\": \"southafricanorth\"\r\n  },\r\n  \"eastus2\": {\r\n    \"displayname\": \"East US 2\",\r\n    \"location\": \"eastus2\",\r\n    \"PREFIX\": \"AEU2\",\r\n    \"pairedRegion\": \"centralus\"\r\n  },\r\n  \"eastus\": {\r\n    \"displayname\": \"East US\",\r\n    \"location\": \"eastus\",\r\n    \"PREFIX\": \"AEU1\",\r\n    \"pairedRegion\": \"westus\"\r\n  },\r\n  \"jioindiawest\": {\r\n    \"displayname\": \"Jio India West\",\r\n    \"location\": \"jioindiawest\",\r\n    \"PREFIX\": \"AJIW\",\r\n    \"pairedRegion\": \"jioindiacentral\"\r\n  },\r\n  \"westcentralus\": {\r\n    \"displayname\": \"West Central US\",\r\n    \"location\": \"westcentralus\",\r\n    \"PREFIX\": \"AWCU\",\r\n    \"pairedRegion\": \"westus2\"\r\n  },\r\n  \"koreacentral\": {\r\n    \"displayname\": \"Korea Central\",\r\n    \"location\": \"koreacentral\",\r\n    \"PREFIX\": \"AKC1\",\r\n    \"pairedRegion\": \"koreasouth\"\r\n  },\r\n  \"uaecentral\": {\r\n    \"displayname\": \"UAE Central\",\r\n    \"location\": \"uaecentral\",\r\n    \"PREFIX\": \"AUC1\",\r\n    \"pairedRegion\": \"uaenorth\"\r\n  },\r\n  \"westus\": {\r\n    \"displayname\": \"West US\",\r\n    \"location\": \"westus\",\r\n    \"PREFIX\": \"AWU1\",\r\n    \"pairedRegion\": \"eastus\"\r\n  },\r\n  \"southafricanorth\": {\r\n    \"displayname\": \"South Africa North\",\r\n    \"location\": \"southafricanorth\",\r\n    \"PREFIX\": \"ASAN\",\r\n    \"pairedRegion\": \"southafricawest\"\r\n  },\r\n  \"australiacentral2\": {\r\n    \"displayname\": \"Australia Central 2\",\r\n    \"location\": \"australiacentral2\",\r\n    \"PREFIX\": \"AAC2\",\r\n    \"pairedRegion\": \"australiacentral2\"\r\n  },\r\n  \"francesouth\": {\r\n    \"displayname\": \"France South\",\r\n    \"location\": \"francesouth\",\r\n    \"PREFIX\": \"AFS1\",\r\n    \"pairedRegion\": \"francecentral\"\r\n  },\r\n  \"ukwest\": {\r\n    \"displayname\": \"UK West\",\r\n    \"location\": \"ukwest\",\r\n    \"PREFIX\": \"AUW1\",\r\n    \"pairedRegion\": \"uksouth\"\r\n  },\r\n  \"southindia\": {\r\n    \"displayname\": \"South India\",\r\n    \"location\": \"southindia\",\r\n    \"PREFIX\": \"ASI1\",\r\n    \"pairedRegion\": \"centralindia\"\r\n  },\r\n  \"centralus\": {\r\n    \"displayname\": \"Central US\",\r\n    \"location\": \"centralus\",\r\n    \"PREFIX\": \"ACU1\",\r\n    \"pairedRegion\": \"eastus2\"\r\n  },\r\n  \"germanynorth\": {\r\n    \"displayname\": \"Germany North\",\r\n    \"location\": \"germanynorth\",\r\n    \"PREFIX\": \"AGN1\",\r\n    \"pairedRegion\": \"germanywestcentral\"\r\n  },\r\n  \"koreasouth\": {\r\n    \"displayname\": \"Korea South\",\r\n    \"location\": \"koreasouth\",\r\n    \"PREFIX\": \"AKS1\",\r\n    \"pairedRegion\": \"koreacentral\"\r\n  },\r\n  \"westindia\": {\r\n    \"displayname\": \"West India\",\r\n    \"location\": \"westindia\",\r\n    \"PREFIX\": \"AWI1\",\r\n    \"pairedRegion\": \"southindia\"\r\n  },\r\n  \"westus2\": {\r\n    \"displayname\": \"West US 2\",\r\n    \"location\": \"westus2\",\r\n    \"PREFIX\": \"AWU2\",\r\n    \"pairedRegion\": \"westcentralus\"\r\n  },\r\n  \"northcentralus\": {\r\n    \"displayname\": \"North Central US\",\r\n    \"location\": \"northcentralus\",\r\n    \"PREFIX\": \"ANCU\",\r\n    \"pairedRegion\": \"southcentralus\"\r\n  },\r\n  \"westeurope\": {\r\n    \"displayname\": \"West Europe\",\r\n    \"location\": \"westeurope\",\r\n    \"PREFIX\": \"AWEU\",\r\n    \"pairedRegion\": \"northeurope\"\r\n  },\r\n  \"canadacentral\": {\r\n    \"displayname\": \"Canada Central\",\r\n    \"location\": \"canadacentral\",\r\n    \"PREFIX\": \"ACC1\",\r\n    \"pairedRegion\": \"canadaeast\"\r\n  },\r\n  \"southcentralus\": {\r\n    \"displayname\": \"South Central US\",\r\n    \"location\": \"southcentralus\",\r\n    \"PREFIX\": \"ASCU\",\r\n    \"pairedRegion\": \"northcentralus\"\r\n  },\r\n  \"norwayeast\": {\r\n    \"displayname\": \"Norway East\",\r\n    \"location\": \"norwayeast\",\r\n    \"PREFIX\": \"ANE1\",\r\n    \"pairedRegion\": \"norwaywest\"\r\n  },\r\n  \"japanwest\": {\r\n    \"displayname\": \"Japan West\",\r\n    \"location\": \"japanwest\",\r\n    \"PREFIX\": \"AJW1\",\r\n    \"pairedRegion\": \"japaneast\"\r\n  },\r\n  \"norwaywest\": {\r\n    \"displayname\": \"Norway West\",\r\n    \"location\": \"norwaywest\",\r\n    \"PREFIX\": \"ANW1\",\r\n    \"pairedRegion\": \"norwayeast\"\r\n  },\r\n  \"jioindiacentral\": {\r\n    \"displayname\": \"Jio India Central\",\r\n    \"location\": \"jioindiacentral\",\r\n    \"PREFIX\": \"AJIC\",\r\n    \"pairedRegion\": \"jioindiawest\"\r\n  },\r\n  \"centralindia\": {\r\n    \"displayname\": \"Central India\",\r\n    \"location\": \"centralindia\",\r\n    \"PREFIX\": \"ACI1\",\r\n    \"pairedRegion\": \"southindia\"\r\n  },\r\n  \"westus3\": {\r\n    \"displayname\": \"West US 3\",\r\n    \"location\": \"westus3\",\r\n    \"PREFIX\": \"AWU3\",\r\n    \"pairedRegion\": \"eastus\"\r\n  },\r\n  \"brazilsouth\": {\r\n    \"displayname\": \"Brazil South\",\r\n    \"location\": \"brazilsouth\",\r\n    \"PREFIX\": \"ABS1\",\r\n    \"pairedRegion\": \"southcentralus\"\r\n  },\r\n  \"eastasia\": {\r\n    \"displayname\": \"East Asia\",\r\n    \"location\": \"eastasia\",\r\n    \"PREFIX\": \"AEA1\",\r\n    \"pairedRegion\": \"southeastasia\"\r\n  },\r\n  \"swedencentral\": {\r\n    \"displayname\": \"Sweden Central\",\r\n    \"location\": \"swedencentral\",\r\n    \"PREFIX\": \"ASC1\",\r\n    \"pairedRegion\": \"swedensouth\"\r\n  },\r\n  \"uksouth\": {\r\n    \"displayname\": \"UK South\",\r\n    \"location\": \"uksouth\",\r\n    \"PREFIX\": \"AUS1\",\r\n    \"pairedRegion\": \"ukwest\"\r\n  },\r\n  \"switzerlandnorth\": {\r\n    \"displayname\": \"Switzerland North\",\r\n    \"location\": \"switzerlandnorth\",\r\n    \"PREFIX\": \"ASN1\",\r\n    \"pairedRegion\": \"switzerlandwest\"\r\n  },\r\n  \"canadaeast\": {\r\n    \"displayname\": \"Canada East\",\r\n    \"location\": \"canadaeast\",\r\n    \"PREFIX\": \"ACE1\",\r\n    \"pairedRegion\": \"canadacentral\"\r\n  },\r\n  \"australiasoutheast\": {\r\n    \"displayname\": \"Australia Southeast\",\r\n    \"location\": \"australiasoutheast\",\r\n    \"PREFIX\": \"AAS1\",\r\n    \"pairedRegion\": \"australiaeast\"\r\n  },\r\n  \"northeurope\": {\r\n    \"displayname\": \"North Europe\",\r\n    \"location\": \"northeurope\",\r\n    \"PREFIX\": \"ANEU\",\r\n    \"pairedRegion\": \"westeurope\"\r\n  },\r\n  \"germanywestcentral\": {\r\n    \"displayname\": \"Germany West Central\",\r\n    \"location\": \"germanywestcentral\",\r\n    \"PREFIX\": \"AGWC\",\r\n    \"pairedRegion\": \"germanynorth\"\r\n  },\r\n  \"japaneast\": {\r\n    \"displayname\": \"Japan East\",\r\n    \"location\": \"japaneast\",\r\n    \"PREFIX\": \"AJE1\",\r\n    \"pairedRegion\": \"japanwest\"\r\n  },\r\n  \"uaenorth\": {\r\n    \"displayname\": \"UAE North\",\r\n    \"location\": \"uaenorth\",\r\n    \"PREFIX\": \"AUN1\",\r\n    \"pairedRegion\": \"uaecentral\"\r\n  },\r\n  \"australiaeast\": {\r\n    \"displayname\": \"Australia East\",\r\n    \"location\": \"australiaeast\",\r\n    \"PREFIX\": \"AAE1\",\r\n    \"pairedRegion\": \"australiasoutheast\"\r\n  },\r\n  \"switzerlandwest\": {\r\n    \"displayname\": \"Switzerland West\",\r\n    \"location\": \"switzerlandwest\",\r\n    \"PREFIX\": \"ASW1\",\r\n    \"pairedRegion\": \"switzerlandnorth\"\r\n  },\r\n  \"australiacentral\": {\r\n    \"displayname\": \"Australia Central\",\r\n    \"location\": \"australiacentral\",\r\n    \"PREFIX\": \"AAC1\",\r\n    \"pairedRegion\": \"australiacentral\"\r\n  },\r\n  \"brazilsoutheast\": {\r\n    \"displayname\": \"Brazil Southeast\",\r\n    \"location\": \"brazilsoutheast\",\r\n    \"PREFIX\": \"ABSE\",\r\n    \"pairedRegion\": \"brazilsouth\"\r\n  }\r\n}\r\n')]",
            "primaryPrefix": "[variables('regionLookup')[parameters('Global').PrimaryLocation].prefix]",
            "GlobalRGJ": "[json(parameters('Global').GlobalRG)]",
            "gh": {
              "globalRGPrefix": "[if(contains(variables('GlobalRGJ'), 'Prefix'), variables('GlobalRGJ').Prefix, variables('primaryPrefix'))]",
              "globalRGOrgName": "[if(contains(variables('GlobalRGJ'), 'OrgName'), variables('GlobalRGJ').OrgName, parameters('Global').OrgName)]",
              "globalRGAppName": "[if(contains(variables('GlobalRGJ'), 'AppName'), variables('GlobalRGJ').AppName, parameters('Global').AppName)]",
              "globalRGName": "[if(contains(variables('GlobalRGJ'), 'name'), variables('GlobalRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID')))]"
            },
            "globalRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').globalRGPrefix, variables('gh').globalRGOrgName, variables('gh').globalRGAppName, variables('gh').globalRGName)]",
            "WebSiteInfo": "[if(contains(parameters('DeploymentInfo'), 'WebSiteContainerInfo'), parameters('DeploymentInfo').WebSiteContainerInfo, createArray())]",
            "myAppConfig": {
              "abc": "value",
              "def": "value"
            }
          },
          "resources": [
            {
              "condition": "[variables('WSInfo')[copyIndex()].match]",
              "copy": {
                "name": "ACRWebhook",
                "count": "[length(variables('WebSiteInfo'))]"
              },
              "type": "Microsoft.ContainerRegistry/registries/webhooks",
              "apiVersion": "2020-11-01-preview",
              "name": "[format('{0}/{1}', toLower(format('{0}registry{1}', if(contains(variables('WebSiteInfo')[copyIndex()], 'registryENV'), replace(variables('DeploymentURI'), variables('ENV'), variables('WebSiteInfo')[copyIndex()].registryENV), variables('DeploymentURI')), variables('WebSiteInfo')[copyIndex()].registry)), format('{0}wswh{1}', variables('DeploymentURI'), variables('WebSiteInfo')[copyIndex()].Name))]",
              "location": "[resourceGroup().location]",
              "properties": {
                "serviceUri": "[format('{0}/docker/hook', list(resourceId('Microsoft.Web/sites/config', split(format('{0}-ws{1}/publishingcredentials', variables('Deployment'), variables('WebSiteInfo')[copyIndex()].Name), '/')[0], split(format('{0}-ws{1}/publishingcredentials', variables('Deployment'), variables('WebSiteInfo')[copyIndex()].Name), '/')[1]), '2021-01-01').properties.scmUri)]",
                "status": "enabled",
                "actions": [
                  "push"
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('dp{0}-ws{1}', variables('Deployment'), variables('WebSiteInfo')[copyIndex()].Name))]"
              ]
            },
            {
              "condition": "[variables('WSInfo')[copyIndex()].match]",
              "copy": {
                "name": "container",
                "count": "[length(variables('WebSiteInfo'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dp{0}-ws{1}', variables('Deployment'), variables('WebSiteInfo')[copyIndex()].Name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "ws": {
                    "value": "[variables('WebSiteInfo')[copyIndex()]]"
                  },
                  "appprefix": {
                    "value": "ws"
                  },
                  "Deployment": {
                    "value": "[variables('Deployment')]"
                  },
                  "DeploymentURI": {
                    "value": "[variables('DeploymentURI')]"
                  },
                  "linuxFxVersion": {
                    "value": "[format('COMPOSE|{0}', variables('WSInfo')[copyIndex()].compose)]"
                  },
                  "Global": {
                    "value": "[parameters('Global')]"
                  },
                  "globalRGName": {
                    "value": "[variables('globalRGName')]"
                  },
                  "DeploymentID": {
                    "value": "[parameters('DeploymentID')]"
                  },
                  "Environment": {
                    "value": "[parameters('Environment')]"
                  },
                  "Prefix": {
                    "value": "[parameters('Prefix')]"
                  },
                  "diagLogs": {
                    "value": [
                      {
                        "category": "AppServiceHTTPLogs",
                        "enabled": true,
                        "retentionPolicy": {
                          "days": 30,
                          "enabled": false
                        }
                      },
                      {
                        "category": "AppServiceConsoleLogs",
                        "enabled": true,
                        "retentionPolicy": {
                          "days": 30,
                          "enabled": false
                        }
                      },
                      {
                        "category": "AppServiceAppLogs",
                        "enabled": true,
                        "retentionPolicy": {
                          "days": 30,
                          "enabled": false
                        }
                      },
                      {
                        "category": "AppServiceAuditLogs",
                        "enabled": true,
                        "retentionPolicy": {
                          "days": 30,
                          "enabled": false
                        }
                      }
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1318.3566",
                      "templateHash": "5670998838727846695"
                    }
                  },
                  "parameters": {
                    "ws": {
                      "type": "object"
                    },
                    "appprefix": {
                      "type": "string"
                    },
                    "Deployment": {
                      "type": "string"
                    },
                    "DeploymentURI": {
                      "type": "string"
                    },
                    "diagLogs": {
                      "type": "array"
                    },
                    "linuxFxVersion": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "Global": {
                      "type": "object"
                    },
                    "globalRGName": {
                      "type": "string"
                    },
                    "Prefix": {
                      "type": "string"
                    },
                    "Environment": {
                      "type": "string"
                    },
                    "DeploymentID": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "MSILookup": {
                      "SQL": "Cluster",
                      "UTL": "DefaultKeyVault",
                      "FIL": "Cluster",
                      "OCR": "Storage",
                      "PS01": "VMOperator"
                    },
                    "HubRGJ": "[json(parameters('Global').hubRG)]",
                    "HubKVJ": "[json(parameters('Global').hubKV)]",
                    "gh": {
                      "hubRGPrefix": "[if(contains(variables('HubRGJ'), 'Prefix'), variables('HubRGJ').Prefix, parameters('Prefix'))]",
                      "hubRGOrgName": "[if(contains(variables('HubRGJ'), 'OrgName'), variables('HubRGJ').OrgName, parameters('Global').OrgName)]",
                      "hubRGAppName": "[if(contains(variables('HubRGJ'), 'AppName'), variables('HubRGJ').AppName, parameters('Global').AppName)]",
                      "hubRGRGName": "[if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID'))))]",
                      "hubKVPrefix": "[if(contains(variables('HubKVJ'), 'Prefix'), variables('HubKVJ').Prefix, parameters('Prefix'))]",
                      "hubKVOrgName": "[if(contains(variables('HubKVJ'), 'OrgName'), variables('HubKVJ').OrgName, parameters('Global').OrgName)]",
                      "hubKVAppName": "[if(contains(variables('HubKVJ'), 'AppName'), variables('HubKVJ').AppName, parameters('Global').AppName)]",
                      "hubKVRGName": "[if(contains(variables('HubKVJ'), 'RG'), variables('HubKVJ').RG, variables('HubRGJ').name)]"
                    },
                    "HubRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').hubRGPrefix, variables('gh').hubRGOrgName, variables('gh').hubRGAppName, variables('gh').hubRGRGName)]",
                    "HubKVRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').hubKVPrefix, variables('gh').hubKVOrgName, variables('gh').hubKVAppName, variables('gh').hubKVRGName)]",
                    "HubKVName": "[toLower(format('{0}-{1}-{2}-{3}-kv{4}', variables('gh').hubKVPrefix, variables('gh').hubKVOrgName, variables('gh').hubKVAppName, variables('gh').hubKVRGName, variables('HubKVJ').name))]",
                    "userAssignedIdentities": {
                      "Default": {
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperator', parameters('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiKeyVaultSecretsGet', parameters('Deployment'))))]": {}
                      },
                      "VMOperator": {
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiVMOperator', parameters('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiKeyVaultSecretsGetApp', parameters('Deployment'))))]": {}
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Web/sites",
                      "apiVersion": "2021-01-01",
                      "name": "[format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name)]",
                      "identity": {
                        "type": "SystemAssigned, UserAssigned",
                        "userAssignedIdentities": "[if(contains(variables('MSILookup'), parameters('ws').NAME), variables('userAssignedIdentities')[variables('MSILookup')[parameters('ws').NAME]], variables('userAssignedIdentities').Default)]"
                      },
                      "kind": "[parameters('ws').kind]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "enabled": true,
                        "httpsOnly": true,
                        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', format('{0}-asp{1}', parameters('Deployment'), parameters('ws').AppSVCPlan))]",
                        "siteConfig": {
                          "linuxFxVersion": "[if(empty(parameters('linuxFxVersion')), null(), parameters('linuxFxVersion'))]"
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', if(contains(parameters('Global'), 'DomainNameExtSubscriptionID'), parameters('Global').DomainNameExtSubscriptionID, subscription().subscriptionId), if(contains(parameters('Global'), 'DomainNameExtRG'), parameters('Global').DomainNameExtRG, parameters('globalRGName'))), 'Microsoft.Resources/deployments', format('setdns-public-{0}-{1}{2}-{3}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name, parameters('Global').DomainNameExt))]"
                      ]
                    },
                    {
                      "condition": "[contains(parameters('ws'), 'extraSlots')]",
                      "copy": {
                        "name": "slots",
                        "count": "[length(range(1, parameters('ws').extraSlots))]"
                      },
                      "type": "Microsoft.Web/sites/slots",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name), format('slot{0}', range(1, parameters('ws').extraSlots)[copyIndex()]))]",
                      "location": "[resourceGroup().location]",
                      "identity": {
                        "type": "SystemAssigned, UserAssigned",
                        "userAssignedIdentities": "[if(contains(variables('MSILookup'), parameters('ws').NAME), variables('userAssignedIdentities')[variables('MSILookup')[parameters('ws').NAME]], variables('userAssignedIdentities').Default)]"
                      },
                      "properties": {
                        "enabled": true,
                        "httpsOnly": true
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(contains(parameters('ws'), 'customDNS'), bool(parameters('ws').customDNS))]",
                      "type": "Microsoft.Web/certificates",
                      "apiVersion": "2021-02-01",
                      "name": "[toLower(format('{0}.{1}', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name), parameters('Global').DomainNameExt))]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "canonicalName": "[toLower(format('{0}.{1}', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name), parameters('Global').DomainNameExt))]",
                        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', format('{0}-asp{1}', parameters('Deployment'), parameters('ws').AppSVCPlan))]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name))]",
                        "[resourceId('Microsoft.Resources/deployments', format('dp-binding-{0}', parameters('ws').name))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2017-05-01-preview",
                      "scope": "[format('Microsoft.Web/sites/{0}', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name))]",
                      "name": "service",
                      "properties": {
                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                        "logs": "[parameters('diagLogs')]",
                        "metrics": [
                          {
                            "timeGrain": "PT5M",
                            "enabled": true,
                            "retentionPolicy": {
                              "enabled": false,
                              "days": 0
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name))]"
                      ]
                    },
                    {
                      "condition": "[contains(parameters('ws'), 'subnet')]",
                      "type": "Microsoft.Web/sites/config",
                      "apiVersion": "2021-01-15",
                      "name": "[format('{0}/virtualNetwork', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name))]",
                      "properties": {
                        "subnetResourceId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', format('{0}-vn', parameters('Deployment')), parameters('ws').subnet)]",
                        "swiftSupported": true
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name))]"
                      ]
                    },
                    {
                      "condition": "[contains(parameters('ws'), 'preWarmedCount')]",
                      "type": "Microsoft.Web/sites/config",
                      "apiVersion": "2021-01-01",
                      "name": "[format('{0}/{1}', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name), 'web')]",
                      "properties": {
                        "preWarmedInstanceCount": "[parameters('ws').preWarmedCount]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(contains(parameters('ws'), 'customDNS'), bool(parameters('ws').customDNS))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('setdns-public-{0}-{1}{2}-{3}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name, parameters('Global').DomainNameExt)]",
                      "subscriptionId": "[if(contains(parameters('Global'), 'DomainNameExtSubscriptionID'), parameters('Global').DomainNameExtSubscriptionID, subscription().subscriptionId)]",
                      "resourceGroup": "[if(contains(parameters('Global'), 'DomainNameExtRG'), parameters('Global').DomainNameExtRG, parameters('globalRGName'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "hostname": {
                            "value": "[toLower(format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name))]"
                          },
                          "cname": {
                            "value": "[format('{0}-{1}{2}.azurewebsites.net', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name)]"
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "2861540136838094664"
                            }
                          },
                          "parameters": {
                            "hostname": {
                              "type": "string"
                            },
                            "cname": {
                              "type": "string"
                            },
                            "Global": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/dnsZones/CNAME",
                              "apiVersion": "2018-05-01",
                              "name": "[format('{0}/{1}', parameters('Global').DomainNameExt, parameters('hostname'))]",
                              "properties": {
                                "TTL": 3600,
                                "metadata": {},
                                "CNAMERecord": {
                                  "cname": "[parameters('cname')]"
                                }
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "condition": "[and(and(and(contains(parameters('ws'), 'initialDeploy'), bool(parameters('ws').initialDeploy)), contains(parameters('ws'), 'customDNS')), bool(parameters('ws').customDNS))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp-binding-{0}', parameters('ws').name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "externalDNS": {
                            "value": "[parameters('Global').DomainNameExt]"
                          },
                          "siteName": {
                            "value": "[format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name)]"
                          },
                          "sslState": {
                            "value": "Disabled"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "14804878137886221366"
                            }
                          },
                          "parameters": {
                            "siteName": {
                              "type": "string"
                            },
                            "externalDNS": {
                              "type": "string"
                            },
                            "sslState": {
                              "type": "string",
                              "allowedValues": [
                                "SniEnabled",
                                "Disabled"
                              ]
                            },
                            "thumbprint": {
                              "type": "string",
                              "defaultValue": ""
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Web/sites/hostNameBindings",
                              "apiVersion": "2021-02-01",
                              "name": "[toLower(format('{0}/{1}.{2}', parameters('siteName'), parameters('siteName'), parameters('externalDNS')))]",
                              "properties": {
                                "siteName": "[parameters('siteName')]",
                                "hostNameType": "Verified",
                                "sslState": "[parameters('sslState')]",
                                "customHostNameDnsRecordType": "CName",
                                "thumbprint": "[if(equals(parameters('sslState'), 'SniEnabled'), parameters('thumbprint'), null())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(contains(parameters('ws'), 'customDNS'), bool(parameters('ws').customDNS))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp-binding-sni-{0}', parameters('ws').name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "externalDNS": {
                            "value": "[parameters('Global').DomainNameExt]"
                          },
                          "siteName": {
                            "value": "[format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name)]"
                          },
                          "sslState": {
                            "value": "SniEnabled"
                          },
                          "thumbprint": {
                            "value": "[reference(resourceId('Microsoft.Web/certificates', toLower(format('{0}.{1}', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name), parameters('Global').DomainNameExt))), '2021-02-01').thumbprint]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "14804878137886221366"
                            }
                          },
                          "parameters": {
                            "siteName": {
                              "type": "string"
                            },
                            "externalDNS": {
                              "type": "string"
                            },
                            "sslState": {
                              "type": "string",
                              "allowedValues": [
                                "SniEnabled",
                                "Disabled"
                              ]
                            },
                            "thumbprint": {
                              "type": "string",
                              "defaultValue": ""
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Web/sites/hostNameBindings",
                              "apiVersion": "2021-02-01",
                              "name": "[toLower(format('{0}/{1}.{2}', parameters('siteName'), parameters('siteName'), parameters('externalDNS')))]",
                              "properties": {
                                "siteName": "[parameters('siteName')]",
                                "hostNameType": "Verified",
                                "sslState": "[parameters('sslState')]",
                                "customHostNameDnsRecordType": "CName",
                                "thumbprint": "[if(equals(parameters('sslState'), 'SniEnabled'), parameters('thumbprint'), null())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Web/certificates', toLower(format('{0}.{1}', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name), parameters('Global').DomainNameExt)))]",
                        "[resourceId('Microsoft.Web/sites', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-SA-{1}-FileShare-{2}', parameters('Deployment'), parameters('ws').saname, replace(toLower(format('{0}', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name))), '-', ''))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "SAName": {
                            "value": "[format('{0}sa{1}', parameters('DeploymentURI'), parameters('ws').saname)]"
                          },
                          "fileShare": {
                            "value": {
                              "name": "[replace(toLower(format('{0}', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name))), '-', '')]",
                              "quota": 5120
                            }
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          },
                          "deployment": {
                            "value": "[parameters('Deployment')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "16728411370713840423"
                            }
                          },
                          "parameters": {
                            "SAName": {
                              "type": "string"
                            },
                            "fileShare": {
                              "type": "object"
                            },
                            "Global": {
                              "type": "object"
                            },
                            "deployment": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "rolesInfo": "[if(contains(parameters('fileShare'), 'rolesInfo'), parameters('fileShare').rolesInfo, createArray())]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
                              "apiVersion": "2021-04-01",
                              "name": "[format('{0}/{1}/{2}', split(format('{0}/default', parameters('SAName')), '/')[0], split(format('{0}/default', parameters('SAName')), '/')[1], toLower(format('{0}', parameters('fileShare').name)))]",
                              "properties": {
                                "shareQuota": "[parameters('fileShare').quota]",
                                "metadata": {}
                              }
                            },
                            {
                              "copy": {
                                "name": "RBAC",
                                "count": "[length(variables('rolesInfo'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('dp-rbac-role-{0}-{1}', toLower(format('{0}', parameters('fileShare').name)), variables('rolesInfo')[copyIndex()].name)]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "resourceId": {
                                    "value": "[resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', split(format('{0}/default', parameters('SAName')), '/')[0], split(format('{0}/default', parameters('SAName')), '/')[1], toLower(format('{0}', parameters('fileShare').name)))]"
                                  },
                                  "Global": {
                                    "value": "[parameters('Global')]"
                                  },
                                  "roleInfo": {
                                    "value": "[variables('rolesInfo')[copyIndex()]]"
                                  },
                                  "Type": {
                                    "value": "[if(contains(variables('rolesInfo')[copyIndex()], 'Type'), variables('rolesInfo')[copyIndex()].Type, 'lookup')]"
                                  },
                                  "deployment": {
                                    "value": "[parameters('deployment')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.4.1318.3566",
                                      "templateHash": "18000982583333431838"
                                    }
                                  },
                                  "parameters": {
                                    "resourceId": {
                                      "type": "string"
                                    },
                                    "Global": {
                                      "type": "object"
                                    },
                                    "roleInfo": {
                                      "type": "object"
                                    },
                                    "principalType": {
                                      "type": "string",
                                      "defaultValue": ""
                                    },
                                    "Type": {
                                      "type": "string"
                                    },
                                    "deployment": {
                                      "type": "string"
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "roleAssignment",
                                        "count": "[length(parameters('roleInfo').RBAC)]",
                                        "input": {
                                          "RoleName": "[parameters('roleInfo').RBAC[copyIndex('roleAssignment')].Name]",
                                          "RoleID": "[variables('rolesGroupsLookup')[parameters('roleInfo').RBAC[copyIndex('roleAssignment')].Name].Id]",
                                          "principalType": "[parameters('principalType')]",
                                          "GUID": "[guid(parameters('roleInfo').Name, parameters('roleInfo').RBAC[copyIndex('roleAssignment')].Name, parameters('resourceId'))]",
                                          "FriendlyName": "[format('user: {0} --> roleInfoName: {1} --> resourceId: {2}', parameters('roleInfo').Name, parameters('roleInfo').RBAC[copyIndex('roleAssignment')].Name, parameters('resourceId'))]"
                                        }
                                      }
                                    ],
                                    "objectIdLookup": "[json(parameters('Global').objectIdLookup)]",
                                    "rolesGroupsLookup": "[json(parameters('Global').RolesGroupsLookup)]"
                                  },
                                  "resources": [
                                    {
                                      "copy": {
                                        "name": "RBACRAResource",
                                        "count": "[length(variables('roleAssignment'))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2020-10-01",
                                      "name": "[take(replace(format('dp-rbac-all-ra-{0}-{1}-{2}', last(split(parameters('resourceId'), '/')), parameters('roleInfo').name, copyIndex()), '@', '_'), 64)]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "resourceId": {
                                            "value": "[parameters('resourceId')]"
                                          },
                                          "description": {
                                            "value": "[parameters('roleInfo').name]"
                                          },
                                          "roledescription": {
                                            "value": "[variables('roleAssignment')[copyIndex()].RoleName]"
                                          },
                                          "name": {
                                            "value": "[variables('roleAssignment')[copyIndex()].GUID]"
                                          },
                                          "roleDefinitionId": {
                                            "value": "[variables('roleAssignment')[copyIndex()].RoleID]"
                                          },
                                          "principalId": {
                                            "value": "[if(equals(parameters('Type'), 'lookup'), variables('objectIdLookup')[parameters('roleInfo').name], reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-uai{1}', parameters('deployment'), parameters('roleInfo').name)), '2018-11-30').principalId)]"
                                          },
                                          "principalType": {
                                            "value": "[variables('roleAssignment')[copyIndex()].principalType]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.4.1318.3566",
                                              "templateHash": "15020166987174036705"
                                            }
                                          },
                                          "parameters": {
                                            "resourceId": {
                                              "type": "string"
                                            },
                                            "name": {
                                              "type": "string"
                                            },
                                            "roleDefinitionId": {
                                              "type": "string"
                                            },
                                            "principalId": {
                                              "type": "string"
                                            },
                                            "principalType": {
                                              "type": "string",
                                              "defaultValue": ""
                                            },
                                            "description": {
                                              "type": "string"
                                            },
                                            "roledescription": {
                                              "type": "string",
                                              "defaultValue": ""
                                            }
                                          },
                                          "resources": [
                                            {
                                              "type": "Microsoft.Resources/deployments",
                                              "apiVersion": "2021-04-01",
                                              "name": "[take(format('dp-RRA-{0}-{1}', parameters('description'), last(split(parameters('resourceId'), '/'))), 64)]",
                                              "properties": {
                                                "mode": "Incremental",
                                                "expressionEvaluationOptions": {
                                                  "scope": "Outer"
                                                },
                                                "template": "[json('{\r\n  \"$schema\": \"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#\",\r\n  \"contentVersion\": \"1.0.0.0\",\r\n  \"parameters\": {\r\n    \"scope\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"name\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"roleDefinitionId\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"principalId\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"principalType\": {\r\n      \"type\": \"string\"\r\n    }\r\n  },\r\n  \"resources\": [\r\n    {\r\n      \"type\": \"Microsoft.Authorization/roleAssignments\",\r\n      \"apiVersion\": \"2020-08-01-preview\",\r\n      \"scope\": \"[parameters(''scope'')]\",\r\n      \"name\": \"[parameters(''name'')]\",\r\n      \"properties\": {\r\n        \"roleDefinitionId\": \"[resourceId(''Microsoft.Authorization/roleDefinitions'', parameters(''roleDefinitionId''))]\",\r\n        \"principalId\": \"[parameters(''principalId'')]\",\r\n        \"principalType\": \"[parameters(''principalType'')]\"\r\n      }\r\n    }\r\n  ],\r\n  \"outputs\": {\r\n    \"roleAssignmentId\": {\r\n      \"type\": \"string\",\r\n      \"value\": \"[extensionResourceId(parameters(''scope''), ''Microsoft.Authorization/roleAssignments'', parameters(''name''))]\"\r\n    }\r\n  }\r\n}')]",
                                                "parameters": {
                                                  "scope": {
                                                    "value": "[parameters('resourceId')]"
                                                  },
                                                  "name": {
                                                    "value": "[parameters('name')]"
                                                  },
                                                  "roleDefinitionId": {
                                                    "value": "[parameters('roleDefinitionId')]"
                                                  },
                                                  "principalId": {
                                                    "value": "[parameters('principalId')]"
                                                  },
                                                  "principalType": {
                                                    "value": "[parameters('principalType')]"
                                                  }
                                                }
                                              }
                                            }
                                          ],
                                          "outputs": {
                                            "resourceid": {
                                              "type": "string",
                                              "value": "[parameters('resourceId')]"
                                            },
                                            "roleAssignmentId": {
                                              "type": "string",
                                              "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('dp-RRA-{0}-{1}', parameters('description'), last(split(parameters('resourceId'), '/'))), 64))).outputs.roleAssignmentId.value]"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "RoleAssignments": {
                                      "type": "array",
                                      "value": "[variables('roleAssignment')]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', split(format('{0}/default', parameters('SAName')), '/')[0], split(format('{0}/default', parameters('SAName')), '/')[1], toLower(format('{0}', parameters('fileShare').name)))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "SAFileServiceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/fileServices', split(format('{0}/default', parameters('SAName')), '/')[0], split(format('{0}/default', parameters('SAName')), '/')[1])]"
                            },
                            "SAFileService": {
                              "type": "string",
                              "value": "[format('{0}/default', parameters('SAName'))]"
                            },
                            "share": {
                              "type": "string",
                              "value": "[toLower(format('{0}', parameters('fileShare').name))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name))]"
                      ]
                    },
                    {
                      "condition": "[contains(parameters('ws'), 'privatelinkinfo')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-privatelinkloop{1}', parameters('Deployment'), parameters('ws').name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[parameters('Deployment')]"
                          },
                          "DeploymentURI": {
                            "value": "[parameters('DeploymentURI')]"
                          },
                          "PrivateLinkInfo": {
                            "value": "[parameters('ws').privateLinkInfo]"
                          },
                          "providerType": {
                            "value": "Microsoft.Web/sites"
                          },
                          "resourceName": {
                            "value": "[format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name)]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "1242957729837230630"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "DeploymentURI": {
                              "type": "string"
                            },
                            "PrivateLinkInfo": {
                              "type": "array"
                            },
                            "providerType": {
                              "type": "string"
                            },
                            "resourceName": {
                              "type": "string"
                            },
                            "resourceRG": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().name]"
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "privateLink",
                                "count": "[length(parameters('PrivateLinkInfo'))]",
                                "input": {
                                  "name": "[format('{0}-pl{1}', parameters('Deployment'), parameters('PrivateLinkInfo')[copyIndex('privateLink')].Subnet)]",
                                  "vNet": "[format('{0}-vn', parameters('Deployment'))]"
                                }
                              }
                            ]
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "subnetPrivateEndpoint",
                                "count": "[length(parameters('PrivateLinkInfo'))]"
                              },
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2019-11-01",
                              "name": "[format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet)]",
                              "location": "[resourceGroup().location]",
                              "properties": {
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet)]",
                                    "properties": {
                                      "privateLinkServiceId": "[resourceId(parameters('resourceRG'), parameters('providerType'), parameters('resourceName'))]",
                                      "groupIds": "[array(parameters('PrivateLinkInfo')[copyIndex()].groupID)]",
                                      "privateLinkServiceConnectionState": {
                                        "status": "Approved",
                                        "description": "Auto-Approved",
                                        "actionsRequired": "None"
                                      }
                                    }
                                  }
                                ],
                                "manualPrivateLinkServiceConnections": [],
                                "subnet": {
                                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('privateLink')[copyIndex()].vNet, parameters('PrivateLinkInfo')[copyIndex()].Subnet)]"
                                }
                              }
                            },
                            {
                              "copy": {
                                "name": "NICDiags",
                                "count": "[length(parameters('PrivateLinkInfo'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('dp-{0}-pl-{1}-{2}-diags', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet)]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "DeploymentURI": {
                                    "value": "[parameters('DeploymentURI')]"
                                  },
                                  "NICName": {
                                    "value": "[last(split(reference(resourceId('Microsoft.Network/privateEndpoints', format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet))).networkInterfaces[0].id, '/'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.4.1318.3566",
                                      "templateHash": "3372180053977311610"
                                    }
                                  },
                                  "parameters": {
                                    "DeploymentURI": {
                                      "type": "string"
                                    },
                                    "NICName": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', parameters('NICName'))]",
                                      "name": "service",
                                      "properties": {
                                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                                        "metrics": [
                                          {
                                            "timeGrain": "PT5M",
                                            "enabled": true,
                                            "retentionPolicy": {
                                              "enabled": false,
                                              "days": 0
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "NICID": {
                              "type": "array",
                              "copy": {
                                "count": "[length(parameters('PrivateLinkInfo'))]",
                                "input": "[reference(resourceId('Microsoft.Network/privateEndpoints', format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet))).networkInterfaces[0].id]"
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name))]"
                      ]
                    },
                    {
                      "condition": "[contains(parameters('ws'), 'privatelinkinfo')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-registerPrivateDNS{1}', parameters('Deployment'), parameters('ws').name)]",
                      "resourceGroup": "[variables('HubRGName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "PrivateLinkInfo": {
                            "value": "[parameters('ws').privateLinkInfo]"
                          },
                          "providerURL": {
                            "value": "net"
                          },
                          "resourceName": {
                            "value": "[format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name)]"
                          },
                          "providerType": {
                            "value": "Microsoft.Web/sites"
                          },
                          "Nics": {
                            "value": "[if(contains(parameters('ws'), 'privatelinkinfo'), array(reference(resourceId('Microsoft.Resources/deployments', format('dp{0}-privatelinkloop{1}', parameters('Deployment'), parameters('ws').name)), '2020-10-01').outputs.NICID.value), array('na'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "9527034148045878947"
                            }
                          },
                          "parameters": {
                            "PrivateLinkInfo": {
                              "type": "array"
                            },
                            "resourceName": {
                              "type": "string"
                            },
                            "providerURL": {
                              "type": "string"
                            },
                            "providerType": {
                              "type": "string"
                            },
                            "Nics": {
                              "type": "array"
                            }
                          },
                          "variables": {
                            "DNSLookup": {
                              "Microsoft.AzureCosmosDB/databaseAccounts/SQL": "documents",
                              "Microsoft.AzureCosmosDB/databaseAccounts/MongoDB": "mongo.cosmos",
                              "Microsoft.AzureCosmosDB/databaseAccounts/Cassandra": "cassandra.cosmos",
                              "Microsoft.AzureCosmosDB/databaseAccounts/Gremlin": "gremlin.cosmos",
                              "Microsoft.AzureCosmosDB/databaseAccounts/Table": "table.cosmos",
                              "Microsoft.KeyVault/vaults": "vaultcore",
                              "Microsoft.DBforMySQL/servers": "mysql",
                              "Microsoft.DBforMariaDB/servers": "mariadb",
                              "Microsoft.AppConfiguration/configurationStores": "azconfig",
                              "Microsoft.ServiceBus/namespaces": "servicebus",
                              "Microsoft.Sql/servers": "database",
                              "Microsoft.Cache/redis": "redis.cache",
                              "Microsoft.Web/sites": "azurewebsites",
                              "Microsoft.Synapse/workspaces": "sql",
                              "Microsoft.ApiManagement/service": "azure-api"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "privateLinkDNS",
                                "count": "[length(parameters('PrivateLinkInfo'))]"
                              },
                              "type": "Microsoft.Network/privateDnsZones/A",
                              "apiVersion": "2020-06-01",
                              "name": "[format('privatelink.{0}.{1}/{2}', if(contains(variables('DNSLookup'), parameters('providerType')), variables('DNSLookup')[parameters('providerType')], parameters('PrivateLinkInfo')[copyIndex()].groupID), parameters('providerURL'), parameters('resourceName'))]",
                              "properties": {
                                "ttl": 3600,
                                "aRecords": [
                                  {
                                    "ipv4Address": "[reference(parameters('Nics')[copyIndex()], '2018-05-01').ipConfigurations[0].properties.privateIPAddress]"
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-privatelinkloop{1}', parameters('Deployment'), parameters('ws').name))]",
                        "[resourceId('Microsoft.Web/sites', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "WebSite": {
                      "type": "object",
                      "value": "[reference(resourceId('Microsoft.Web/sites', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name)), '2021-01-01', 'full')]"
                    },
                    "Thumbprint": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Web/certificates', toLower(format('{0}.{1}', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name), parameters('Global').DomainNameExt))), '2021-02-01').thumbprint]"
                    }
                  }
                }
              }
            },
            {
              "condition": "[variables('WSInfo')[copyIndex()].match]",
              "copy": {
                "name": "containerSettings",
                "count": "[length(variables('WebSiteInfo'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dp{0}-ws{1}-settings', variables('Deployment'), variables('WebSiteInfo')[copyIndex()].Name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "ws": {
                    "value": "[variables('WebSiteInfo')[copyIndex()]]"
                  },
                  "appprefix": {
                    "value": "ws"
                  },
                  "Deployment": {
                    "value": "[variables('Deployment')]"
                  },
                  "appConfigCustom": {
                    "value": "[variables('myAppConfig')]"
                  },
                  "appConfigCurrent": {
                    "value": "[list(resourceId('Microsoft.Web/sites/config', split(format('{0}-ws{1}/appsettings', variables('Deployment'), variables('WebSiteInfo')[copyIndex()].Name), '/')[0], split(format('{0}-ws{1}/appsettings', variables('Deployment'), variables('WebSiteInfo')[copyIndex()].Name), '/')[1]), '2021-01-15').properties]"
                  },
                  "appConfigNew": {
                    "value": {
                      "APPINSIGHTS_INSTRUMENTATIONKEY": "[reference(resourceId('Microsoft.Insights/components', format('{0}AppInsights', variables('DeploymentURI'))), '2020-02-02').InstrumentationKey]",
                      "APPLICATIONINSIGHTS_CONNECTION_STRING": "[format('InstrumentationKey={0}', reference(resourceId('Microsoft.Insights/components', format('{0}AppInsights', variables('DeploymentURI'))), '2020-02-02').InstrumentationKey)]",
                      "DOCKER_ENABLE_CI": "true",
                      "DOCKER_REGISTRY_SERVER_PASSWORD": "[listCredentials(resourceId('Microsoft.ContainerRegistry/registries', toLower(format('{0}registry{1}', if(contains(variables('WebSiteInfo')[copyIndex()], 'registryENV'), replace(variables('DeploymentURI'), variables('ENV'), variables('WebSiteInfo')[copyIndex()].registryENV), variables('DeploymentURI')), variables('WebSiteInfo')[copyIndex()].registry))), '2020-11-01-preview').passwords[0].value]",
                      "DOCKER_REGISTRY_SERVER_URL": "[reference(resourceId('Microsoft.ContainerRegistry/registries', toLower(format('{0}registry{1}', if(contains(variables('WebSiteInfo')[copyIndex()], 'registryENV'), replace(variables('DeploymentURI'), variables('ENV'), variables('WebSiteInfo')[copyIndex()].registryENV), variables('DeploymentURI')), variables('WebSiteInfo')[copyIndex()].registry))), '2020-11-01-preview').loginServer]",
                      "DOCKER_REGISTRY_SERVER_USERNAME": "[toLower(format('{0}registry{1}', if(contains(variables('WebSiteInfo')[copyIndex()], 'registryENV'), replace(variables('DeploymentURI'), variables('ENV'), variables('WebSiteInfo')[copyIndex()].registryENV), variables('DeploymentURI')), variables('WebSiteInfo')[copyIndex()].registry))]"
                    }
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1318.3566",
                      "templateHash": "8878255813368571173"
                    }
                  },
                  "parameters": {
                    "ws": {
                      "type": "object"
                    },
                    "appprefix": {
                      "type": "string"
                    },
                    "Deployment": {
                      "type": "string"
                    },
                    "appConfigCustom": {
                      "type": "object"
                    },
                    "appConfigCurrent": {
                      "type": "secureObject"
                    },
                    "appConfigNew": {
                      "type": "secureObject"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Web/sites/config",
                      "apiVersion": "2021-01-15",
                      "name": "[format('{0}/{1}', format('{0}-{1}{2}', parameters('Deployment'), parameters('appprefix'), parameters('ws').Name), 'appsettings')]",
                      "properties": "[union(parameters('appConfigCustom'), parameters('appConfigCurrent'), parameters('appConfigNew'))]"
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('dp{0}-ws{1}', variables('Deployment'), variables('WebSiteInfo')[copyIndex()].Name))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-OMS', variables('Deployment')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-ServerFarm', variables('Deployment')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-VNET', variables('Deployment')))]"
      ]
    },
    {
      "condition": "[bool(parameters('Stage').ACI)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('dp{0}-ACI', variables('Deployment'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "DeploymentID": {
            "value": "[parameters('DeploymentID')]"
          },
          "DeploymentInfo": {
            "value": "[parameters('DeploymentInfo')]"
          },
          "Environment": {
            "value": "[parameters('Environment')]"
          },
          "Extensions": {
            "value": "[parameters('Extensions')]"
          },
          "Global": {
            "value": "[parameters('Global')]"
          },
          "Prefix": {
            "value": "[parameters('Prefix')]"
          },
          "Stage": {
            "value": "[parameters('Stage')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "9266585479095443172"
            }
          },
          "parameters": {
            "Prefix": {
              "type": "string"
            },
            "Environment": {
              "type": "string",
              "defaultValue": "D",
              "allowedValues": [
                "I",
                "D",
                "T",
                "U",
                "P",
                "S",
                "G",
                "A"
              ]
            },
            "DeploymentID": {
              "type": "string",
              "defaultValue": "1",
              "allowedValues": [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9"
              ]
            },
            "Stage": {
              "type": "object"
            },
            "Extensions": {
              "type": "object"
            },
            "Global": {
              "type": "object"
            },
            "DeploymentInfo": {
              "type": "object"
            },
            "deploymentTime": {
              "type": "string",
              "defaultValue": "[utcNow('u')]"
            }
          },
          "variables": {
            "copy": [
              {
                "name": "ACI",
                "count": "[length(variables('ACIInfo'))]",
                "input": {
                  "match": "[or(equals(parameters('Global').CN, '.'), contains(array(parameters('Global').CN), variables('ACIInfo')[copyIndex('ACI')].Name))]"
                }
              }
            ],
            "Deployment": "[format('{0}-{1}-{2}-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID'))]",
            "DeploymentURI": "[toLower(format('{0}{1}{2}{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID')))]",
            "GlobalRGJ": "[json(parameters('Global').GlobalRG)]",
            "regionLookup": "[json('{\r\n  \"francecentral\": {\r\n    \"displayname\": \"France Central\",\r\n    \"location\": \"francecentral\",\r\n    \"PREFIX\": \"AFC1\",\r\n    \"pairedRegion\": \"francesouth\"\r\n  },\r\n  \"southeastasia\": {\r\n    \"displayname\": \"Southeast Asia\",\r\n    \"location\": \"southeastasia\",\r\n    \"PREFIX\": \"ASA1\",\r\n    \"pairedRegion\": \"eastasia\"\r\n  },\r\n  \"southafricawest\": {\r\n    \"displayname\": \"South Africa West\",\r\n    \"location\": \"southafricawest\",\r\n    \"PREFIX\": \"ASAW\",\r\n    \"pairedRegion\": \"southafricanorth\"\r\n  },\r\n  \"eastus2\": {\r\n    \"displayname\": \"East US 2\",\r\n    \"location\": \"eastus2\",\r\n    \"PREFIX\": \"AEU2\",\r\n    \"pairedRegion\": \"centralus\"\r\n  },\r\n  \"eastus\": {\r\n    \"displayname\": \"East US\",\r\n    \"location\": \"eastus\",\r\n    \"PREFIX\": \"AEU1\",\r\n    \"pairedRegion\": \"westus\"\r\n  },\r\n  \"jioindiawest\": {\r\n    \"displayname\": \"Jio India West\",\r\n    \"location\": \"jioindiawest\",\r\n    \"PREFIX\": \"AJIW\",\r\n    \"pairedRegion\": \"jioindiacentral\"\r\n  },\r\n  \"westcentralus\": {\r\n    \"displayname\": \"West Central US\",\r\n    \"location\": \"westcentralus\",\r\n    \"PREFIX\": \"AWCU\",\r\n    \"pairedRegion\": \"westus2\"\r\n  },\r\n  \"koreacentral\": {\r\n    \"displayname\": \"Korea Central\",\r\n    \"location\": \"koreacentral\",\r\n    \"PREFIX\": \"AKC1\",\r\n    \"pairedRegion\": \"koreasouth\"\r\n  },\r\n  \"uaecentral\": {\r\n    \"displayname\": \"UAE Central\",\r\n    \"location\": \"uaecentral\",\r\n    \"PREFIX\": \"AUC1\",\r\n    \"pairedRegion\": \"uaenorth\"\r\n  },\r\n  \"westus\": {\r\n    \"displayname\": \"West US\",\r\n    \"location\": \"westus\",\r\n    \"PREFIX\": \"AWU1\",\r\n    \"pairedRegion\": \"eastus\"\r\n  },\r\n  \"southafricanorth\": {\r\n    \"displayname\": \"South Africa North\",\r\n    \"location\": \"southafricanorth\",\r\n    \"PREFIX\": \"ASAN\",\r\n    \"pairedRegion\": \"southafricawest\"\r\n  },\r\n  \"australiacentral2\": {\r\n    \"displayname\": \"Australia Central 2\",\r\n    \"location\": \"australiacentral2\",\r\n    \"PREFIX\": \"AAC2\",\r\n    \"pairedRegion\": \"australiacentral2\"\r\n  },\r\n  \"francesouth\": {\r\n    \"displayname\": \"France South\",\r\n    \"location\": \"francesouth\",\r\n    \"PREFIX\": \"AFS1\",\r\n    \"pairedRegion\": \"francecentral\"\r\n  },\r\n  \"ukwest\": {\r\n    \"displayname\": \"UK West\",\r\n    \"location\": \"ukwest\",\r\n    \"PREFIX\": \"AUW1\",\r\n    \"pairedRegion\": \"uksouth\"\r\n  },\r\n  \"southindia\": {\r\n    \"displayname\": \"South India\",\r\n    \"location\": \"southindia\",\r\n    \"PREFIX\": \"ASI1\",\r\n    \"pairedRegion\": \"centralindia\"\r\n  },\r\n  \"centralus\": {\r\n    \"displayname\": \"Central US\",\r\n    \"location\": \"centralus\",\r\n    \"PREFIX\": \"ACU1\",\r\n    \"pairedRegion\": \"eastus2\"\r\n  },\r\n  \"germanynorth\": {\r\n    \"displayname\": \"Germany North\",\r\n    \"location\": \"germanynorth\",\r\n    \"PREFIX\": \"AGN1\",\r\n    \"pairedRegion\": \"germanywestcentral\"\r\n  },\r\n  \"koreasouth\": {\r\n    \"displayname\": \"Korea South\",\r\n    \"location\": \"koreasouth\",\r\n    \"PREFIX\": \"AKS1\",\r\n    \"pairedRegion\": \"koreacentral\"\r\n  },\r\n  \"westindia\": {\r\n    \"displayname\": \"West India\",\r\n    \"location\": \"westindia\",\r\n    \"PREFIX\": \"AWI1\",\r\n    \"pairedRegion\": \"southindia\"\r\n  },\r\n  \"westus2\": {\r\n    \"displayname\": \"West US 2\",\r\n    \"location\": \"westus2\",\r\n    \"PREFIX\": \"AWU2\",\r\n    \"pairedRegion\": \"westcentralus\"\r\n  },\r\n  \"northcentralus\": {\r\n    \"displayname\": \"North Central US\",\r\n    \"location\": \"northcentralus\",\r\n    \"PREFIX\": \"ANCU\",\r\n    \"pairedRegion\": \"southcentralus\"\r\n  },\r\n  \"westeurope\": {\r\n    \"displayname\": \"West Europe\",\r\n    \"location\": \"westeurope\",\r\n    \"PREFIX\": \"AWEU\",\r\n    \"pairedRegion\": \"northeurope\"\r\n  },\r\n  \"canadacentral\": {\r\n    \"displayname\": \"Canada Central\",\r\n    \"location\": \"canadacentral\",\r\n    \"PREFIX\": \"ACC1\",\r\n    \"pairedRegion\": \"canadaeast\"\r\n  },\r\n  \"southcentralus\": {\r\n    \"displayname\": \"South Central US\",\r\n    \"location\": \"southcentralus\",\r\n    \"PREFIX\": \"ASCU\",\r\n    \"pairedRegion\": \"northcentralus\"\r\n  },\r\n  \"norwayeast\": {\r\n    \"displayname\": \"Norway East\",\r\n    \"location\": \"norwayeast\",\r\n    \"PREFIX\": \"ANE1\",\r\n    \"pairedRegion\": \"norwaywest\"\r\n  },\r\n  \"japanwest\": {\r\n    \"displayname\": \"Japan West\",\r\n    \"location\": \"japanwest\",\r\n    \"PREFIX\": \"AJW1\",\r\n    \"pairedRegion\": \"japaneast\"\r\n  },\r\n  \"norwaywest\": {\r\n    \"displayname\": \"Norway West\",\r\n    \"location\": \"norwaywest\",\r\n    \"PREFIX\": \"ANW1\",\r\n    \"pairedRegion\": \"norwayeast\"\r\n  },\r\n  \"jioindiacentral\": {\r\n    \"displayname\": \"Jio India Central\",\r\n    \"location\": \"jioindiacentral\",\r\n    \"PREFIX\": \"AJIC\",\r\n    \"pairedRegion\": \"jioindiawest\"\r\n  },\r\n  \"centralindia\": {\r\n    \"displayname\": \"Central India\",\r\n    \"location\": \"centralindia\",\r\n    \"PREFIX\": \"ACI1\",\r\n    \"pairedRegion\": \"southindia\"\r\n  },\r\n  \"westus3\": {\r\n    \"displayname\": \"West US 3\",\r\n    \"location\": \"westus3\",\r\n    \"PREFIX\": \"AWU3\",\r\n    \"pairedRegion\": \"eastus\"\r\n  },\r\n  \"brazilsouth\": {\r\n    \"displayname\": \"Brazil South\",\r\n    \"location\": \"brazilsouth\",\r\n    \"PREFIX\": \"ABS1\",\r\n    \"pairedRegion\": \"southcentralus\"\r\n  },\r\n  \"eastasia\": {\r\n    \"displayname\": \"East Asia\",\r\n    \"location\": \"eastasia\",\r\n    \"PREFIX\": \"AEA1\",\r\n    \"pairedRegion\": \"southeastasia\"\r\n  },\r\n  \"swedencentral\": {\r\n    \"displayname\": \"Sweden Central\",\r\n    \"location\": \"swedencentral\",\r\n    \"PREFIX\": \"ASC1\",\r\n    \"pairedRegion\": \"swedensouth\"\r\n  },\r\n  \"uksouth\": {\r\n    \"displayname\": \"UK South\",\r\n    \"location\": \"uksouth\",\r\n    \"PREFIX\": \"AUS1\",\r\n    \"pairedRegion\": \"ukwest\"\r\n  },\r\n  \"switzerlandnorth\": {\r\n    \"displayname\": \"Switzerland North\",\r\n    \"location\": \"switzerlandnorth\",\r\n    \"PREFIX\": \"ASN1\",\r\n    \"pairedRegion\": \"switzerlandwest\"\r\n  },\r\n  \"canadaeast\": {\r\n    \"displayname\": \"Canada East\",\r\n    \"location\": \"canadaeast\",\r\n    \"PREFIX\": \"ACE1\",\r\n    \"pairedRegion\": \"canadacentral\"\r\n  },\r\n  \"australiasoutheast\": {\r\n    \"displayname\": \"Australia Southeast\",\r\n    \"location\": \"australiasoutheast\",\r\n    \"PREFIX\": \"AAS1\",\r\n    \"pairedRegion\": \"australiaeast\"\r\n  },\r\n  \"northeurope\": {\r\n    \"displayname\": \"North Europe\",\r\n    \"location\": \"northeurope\",\r\n    \"PREFIX\": \"ANEU\",\r\n    \"pairedRegion\": \"westeurope\"\r\n  },\r\n  \"germanywestcentral\": {\r\n    \"displayname\": \"Germany West Central\",\r\n    \"location\": \"germanywestcentral\",\r\n    \"PREFIX\": \"AGWC\",\r\n    \"pairedRegion\": \"germanynorth\"\r\n  },\r\n  \"japaneast\": {\r\n    \"displayname\": \"Japan East\",\r\n    \"location\": \"japaneast\",\r\n    \"PREFIX\": \"AJE1\",\r\n    \"pairedRegion\": \"japanwest\"\r\n  },\r\n  \"uaenorth\": {\r\n    \"displayname\": \"UAE North\",\r\n    \"location\": \"uaenorth\",\r\n    \"PREFIX\": \"AUN1\",\r\n    \"pairedRegion\": \"uaecentral\"\r\n  },\r\n  \"australiaeast\": {\r\n    \"displayname\": \"Australia East\",\r\n    \"location\": \"australiaeast\",\r\n    \"PREFIX\": \"AAE1\",\r\n    \"pairedRegion\": \"australiasoutheast\"\r\n  },\r\n  \"switzerlandwest\": {\r\n    \"displayname\": \"Switzerland West\",\r\n    \"location\": \"switzerlandwest\",\r\n    \"PREFIX\": \"ASW1\",\r\n    \"pairedRegion\": \"switzerlandnorth\"\r\n  },\r\n  \"australiacentral\": {\r\n    \"displayname\": \"Australia Central\",\r\n    \"location\": \"australiacentral\",\r\n    \"PREFIX\": \"AAC1\",\r\n    \"pairedRegion\": \"australiacentral\"\r\n  },\r\n  \"brazilsoutheast\": {\r\n    \"displayname\": \"Brazil Southeast\",\r\n    \"location\": \"brazilsoutheast\",\r\n    \"PREFIX\": \"ABSE\",\r\n    \"pairedRegion\": \"brazilsouth\"\r\n  }\r\n}\r\n')]",
            "primaryPrefix": "[variables('regionLookup')[parameters('Global').PrimaryLocation].prefix]",
            "gh": {
              "globalRGPrefix": "[if(contains(variables('GlobalRGJ'), 'Prefix'), variables('GlobalRGJ').Prefix, variables('primaryPrefix'))]",
              "globalRGOrgName": "[if(contains(variables('GlobalRGJ'), 'OrgName'), variables('GlobalRGJ').OrgName, parameters('Global').OrgName)]",
              "globalRGAppName": "[if(contains(variables('GlobalRGJ'), 'AppName'), variables('GlobalRGJ').AppName, parameters('Global').AppName)]",
              "globalRGName": "[if(contains(variables('GlobalRGJ'), 'name'), variables('GlobalRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID')))]"
            },
            "globalRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').globalRGPrefix, variables('gh').globalRGOrgName, variables('gh').globalRGAppName, variables('gh').globalRGName)]",
            "ACIInfo": "[if(contains(parameters('DeploymentInfo'), 'ACIInfo'), parameters('DeploymentInfo').ACIInfo, createArray())]",
            "AppVault": "[format('{0}-kvApp01', variables('Deployment'))]"
          },
          "resources": [
            {
              "condition": "[variables('ACI')[copyIndex()].match]",
              "copy": {
                "name": "ACG",
                "count": "[length(variables('ACIInfo'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dp{0}-ACI-containergroupDeploy{1}', variables('Deployment'), variables('ACIInfo')[copyIndex()].name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "Prefix": {
                    "value": "[parameters('Prefix')]"
                  },
                  "Deployment": {
                    "value": "[variables('Deployment')]"
                  },
                  "DeploymentURI": {
                    "value": "[variables('DeploymentURI')]"
                  },
                  "DeploymentID": {
                    "value": "[parameters('DeploymentID')]"
                  },
                  "Environment": {
                    "value": "[parameters('Environment')]"
                  },
                  "globalRGName": {
                    "value": "[variables('globalRGName')]"
                  },
                  "ACIInfo": {
                    "value": "[variables('ACIInfo')[copyIndex()]]"
                  },
                  "Global": {
                    "value": "[parameters('Global')]"
                  },
                  "Stage": {
                    "value": "[parameters('Stage')]"
                  },
                  "WebUser": {
                    "reference": {
                      "keyVault": {
                        "id": "[resourceId('Microsoft.KeyVault/vaults', variables('AppVault'))]"
                      },
                      "secretName": "WebUser"
                    }
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1318.3566",
                      "templateHash": "14872780434577325628"
                    }
                  },
                  "parameters": {
                    "Prefix": {
                      "type": "string"
                    },
                    "Deployment": {
                      "type": "string"
                    },
                    "DeploymentURI": {
                      "type": "string"
                    },
                    "DeploymentID": {
                      "type": "string"
                    },
                    "Environment": {
                      "type": "string"
                    },
                    "ACIInfo": {
                      "type": "object"
                    },
                    "Global": {
                      "type": "object"
                    },
                    "globalRGName": {
                      "type": "string"
                    },
                    "Stage": {
                      "type": "object"
                    },
                    "WebUser": {
                      "type": "secureString"
                    },
                    "now": {
                      "type": "string",
                      "defaultValue": "[utcNow('F')]"
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "Instances",
                        "count": "[length(range(0, parameters('ACIInfo').InstanceCount))]",
                        "input": {
                          "name": "[format('{0}-{1}', parameters('ACIInfo').Name, copyIndex('Instances'))]",
                          "location": "[if(contains(parameters('ACIInfo'), 'locations'), parameters('ACIInfo').locations[mod(copyIndex('Instances'), length(parameters('ACIInfo').locations))], resourceGroup().location)]"
                        }
                      },
                      {
                        "name": "ENVVARS",
                        "count": "[length(variables('EnvironmentVARS'))]",
                        "input": {
                          "name": "[variables('EnvironmentVARS')[copyIndex('ENVVARS')].name]",
                          "value": "[if(contains(variables('EnvironmentVARS')[copyIndex('ENVVARS')], 'value'), replace(variables('EnvironmentVARS')[copyIndex('ENVVARS')].value, '{Deployment}', parameters('Deployment')), null())]",
                          "secureValue": "[if(contains(variables('EnvironmentVARS')[copyIndex('ENVVARS')], 'secureValue'), replace(variables('EnvironmentVARS')[copyIndex('ENVVARS')].secureValue, '{WebUser}', parameters('WebUser')), null())]"
                        }
                      },
                      {
                        "name": "Mounts",
                        "count": "[length(variables('diskMounts'))]",
                        "input": {
                          "name": "[variables('diskMounts')[copyIndex('Mounts')].name]",
                          "readOnly": false,
                          "mountPath": "[variables('diskMounts')[copyIndex('Mounts')].mountPath]"
                        }
                      },
                      {
                        "name": "ports",
                        "count": "[length(parameters('ACIInfo').ports)]",
                        "input": {
                          "protocol": "TCP",
                          "port": "[parameters('ACIInfo').ports[copyIndex('ports')]]"
                        }
                      }
                    ],
                    "userAssignedIdentities": {
                      "Default": {
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiKeyVaultSecretsGet', parameters('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperatorGlobal', parameters('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountFileContributor', parameters('Deployment'))))]": {}
                      }
                    },
                    "HubRGJ": "[json(parameters('Global').hubRG)]",
                    "gh": {
                      "hubRGPrefix": "[if(contains(variables('HubRGJ'), 'Prefix'), variables('HubRGJ').Prefix, parameters('Prefix'))]",
                      "hubRGOrgName": "[if(contains(variables('HubRGJ'), 'OrgName'), variables('HubRGJ').OrgName, parameters('Global').OrgName)]",
                      "hubRGAppName": "[if(contains(variables('HubRGJ'), 'AppName'), variables('HubRGJ').AppName, parameters('Global').AppName)]",
                      "hubRGRGName": "[if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID'))))]"
                    },
                    "HubRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').hubRGPrefix, variables('gh').hubRGOrgName, variables('gh').hubRGAppName, variables('gh').hubRGRGName)]",
                    "EnvironmentVARS": "[if(contains(parameters('ACIInfo'), 'environmentVariables'), parameters('ACIInfo').environmentVariables, createArray())]",
                    "diskMounts": "[if(contains(parameters('ACIInfo'), 'volumeMounts'), parameters('ACIInfo').volumeMounts, createArray())]"
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "ACI",
                        "count": "[length(variables('Instances'))]"
                      },
                      "type": "Microsoft.ContainerInstance/containerGroups",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}-aci-{1}', parameters('Deployment'), variables('Instances')[copyIndex()].name)]",
                      "location": "[variables('Instances')[copyIndex()].location]",
                      "identity": {
                        "type": "SystemAssigned, UserAssigned",
                        "userAssignedIdentities": "[variables('userAssignedIdentities').Default]"
                      },
                      "properties": {
                        "copy": [
                          {
                            "name": "containers",
                            "count": "[length(range(0, parameters('ACIInfo').scaleCount))]",
                            "input": {
                              "name": "[format('{0}-{1}', variables('Instances')[copyIndex()].name, range(0, parameters('ACIInfo').scaleCount)[copyIndex('containers')])]",
                              "properties": {
                                "image": "[parameters('ACIInfo').image]",
                                "command": "[if(contains(parameters('ACIInfo'), 'command'), parameters('ACIInfo').command, null())]",
                                "ports": "[variables('ports')]",
                                "environmentVariables": "[if(contains(parameters('ACIInfo'), 'environmentVariables'), variables('ENVVARS'), null())]",
                                "volumeMounts": "[variables('Mounts')]",
                                "resources": {
                                  "requests": {
                                    "memoryInGB": "[parameters('ACIInfo').memoryInGB]",
                                    "cpu": "[parameters('ACIInfo').cpu]"
                                  }
                                }
                              }
                            }
                          },
                          {
                            "name": "volumes",
                            "count": "[length(variables('diskMounts'))]",
                            "input": {
                              "name": "[variables('diskMounts')[copyIndex('volumes')].name]",
                              "azureFile": {
                                "shareName": "[variables('diskMounts')[copyIndex('volumes')].name]",
                                "readOnly": false,
                                "storageAccountName": "[format('{0}sa{1}', parameters('DeploymentURI'), variables('diskMounts')[copyIndex('volumes')].storageAccount)]",
                                "storageAccountKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts/', format('{0}sa{1}', parameters('DeploymentURI'), variables('diskMounts')[copyIndex('volumes')].storageAccount)), '2016-01-01').keys[0].value]"
                              }
                            }
                          }
                        ],
                        "sku": "Standard",
                        "initContainers": [],
                        "restartPolicy": "Always",
                        "ipAddress": {
                          "ports": "[variables('ports')]",
                          "type": "[if(bool(parameters('ACIInfo').isPublic), 'Public', 'Private')]",
                          "dnsNameLabel": "[if(bool(parameters('ACIInfo').isPublic), toLower(format('{0}-aci-{1}', parameters('Deployment'), variables('Instances')[copyIndex()].name)), null())]"
                        },
                        "subnetIds": "[if(not(and(not(bool(parameters('ACIInfo').isPublic)), contains(parameters('ACIInfo'), 'subnetName'))), createArray(), createArray(createObject('id', format('{0}/subnets/{1}', resourceId('Microsoft.Network/virtualNetworks', format('{0}-vn', parameters('Deployment'))), parameters('ACIInfo').subnetName))))]",
                        "osType": "Linux",
                        "diagnostics": {
                          "logAnalytics": {
                            "workspaceId": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI'))), '2021-06-01').customerId]",
                            "workspaceKey": "[listKeys(resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI'))), '2021-06-01').primarySharedKey]",
                            "logType": "ContainerInsights",
                            "metadata": {}
                          }
                        }
                      }
                    },
                    {
                      "condition": "[bool(parameters('ACIInfo').isPublic)]",
                      "copy": {
                        "name": "ACIDNS",
                        "count": "[length(variables('Instances'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('setdns-public-{0}-ACI-{1}-{2}', parameters('Deployment'), variables('Instances')[copyIndex()].name, parameters('Global').DomainNameExt)]",
                      "subscriptionId": "[if(contains(parameters('Global'), 'DomainNameExtSubscriptionID'), parameters('Global').DomainNameExtSubscriptionID, subscription().subscriptionId)]",
                      "resourceGroup": "[if(contains(parameters('Global'), 'DomainNameExtRG'), parameters('Global').DomainNameExtRG, parameters('globalRGName'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "hostname": {
                            "value": "[toLower(format('{0}-aci-{1}', parameters('Deployment'), variables('Instances')[copyIndex()].name))]"
                          },
                          "cname": {
                            "value": "[reference(resourceId('Microsoft.ContainerInstance/containerGroups', format('{0}-aci-{1}', parameters('Deployment'), variables('Instances')[copyIndex()].name))).ipAddress.fqdn]"
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "2861540136838094664"
                            }
                          },
                          "parameters": {
                            "hostname": {
                              "type": "string"
                            },
                            "cname": {
                              "type": "string"
                            },
                            "Global": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/dnsZones/CNAME",
                              "apiVersion": "2018-05-01",
                              "name": "[format('{0}/{1}', parameters('Global').DomainNameExt, parameters('hostname'))]",
                              "properties": {
                                "TTL": 3600,
                                "metadata": {},
                                "CNAMERecord": {
                                  "cname": "[parameters('cname')]"
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ContainerInstance/containerGroups', format('{0}-aci-{1}', parameters('Deployment'), variables('Instances')[copyIndex()].name))]",
                        "[resourceId('Microsoft.ContainerInstance/containerGroups', format('{0}-aci-{1}', parameters('Deployment'), variables('Instances')[copyIndex()].name))]"
                      ]
                    },
                    {
                      "condition": "[not(bool(parameters('ACIInfo').isPublic))]",
                      "copy": {
                        "name": "SetACIDNSAInternal",
                        "count": "[length(variables('Instances'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('setdns-private-{0}-ACI-{1}-{2}', parameters('Deployment'), variables('Instances')[copyIndex()].name, parameters('Global').DomainNameExt)]",
                      "subscriptionId": "[subscription().subscriptionId]",
                      "resourceGroup": "[variables('HubRGName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "hostname": {
                            "value": "[toLower(format('{0}-aci-{1}', parameters('Deployment'), variables('Instances')[copyIndex()].name))]"
                          },
                          "ipv4Address": {
                            "value": "[reference(resourceId('Microsoft.ContainerInstance/containerGroups', format('{0}-aci-{1}', parameters('Deployment'), variables('Instances')[copyIndex()].name))).ipAddress.ip]"
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "10691699643089507811"
                            }
                          },
                          "parameters": {
                            "hostname": {
                              "type": "string"
                            },
                            "ipv4Address": {
                              "type": "string"
                            },
                            "Global": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateDnsZones/A",
                              "apiVersion": "2020-06-01",
                              "name": "[format('{0}/{1}', parameters('Global').DomainName, parameters('hostname'))]",
                              "properties": {
                                "ttl": 3600,
                                "metadata": {},
                                "aRecords": [
                                  {
                                    "ipv4Address": "[parameters('ipv4Address')]"
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ContainerInstance/containerGroups', format('{0}-aci-{1}', parameters('Deployment'), variables('Instances')[copyIndex()].name))]",
                        "[resourceId('Microsoft.ContainerInstance/containerGroups', format('{0}-aci-{1}', parameters('Deployment'), variables('Instances')[copyIndex()].name))]"
                      ]
                    }
                  ]
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-OMS', variables('Deployment')))]"
      ]
    },
    {
      "condition": "[bool(parameters('Stage').REDIS)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('dp{0}-REDIS', variables('Deployment'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "DeploymentID": {
            "value": "[parameters('DeploymentID')]"
          },
          "DeploymentInfo": {
            "value": "[parameters('DeploymentInfo')]"
          },
          "Environment": {
            "value": "[parameters('Environment')]"
          },
          "Extensions": {
            "value": "[parameters('Extensions')]"
          },
          "Global": {
            "value": "[parameters('Global')]"
          },
          "Prefix": {
            "value": "[parameters('Prefix')]"
          },
          "Stage": {
            "value": "[parameters('Stage')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "11855509133687379744"
            }
          },
          "parameters": {
            "Prefix": {
              "type": "string"
            },
            "Environment": {
              "type": "string",
              "defaultValue": "D",
              "allowedValues": [
                "I",
                "D",
                "T",
                "U",
                "P",
                "S",
                "G",
                "A"
              ]
            },
            "DeploymentID": {
              "type": "string",
              "defaultValue": "1",
              "allowedValues": [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9"
              ]
            },
            "Stage": {
              "type": "object"
            },
            "Extensions": {
              "type": "object"
            },
            "Global": {
              "type": "object"
            },
            "DeploymentInfo": {
              "type": "object"
            }
          },
          "variables": {
            "copy": [
              {
                "name": "RCs",
                "count": "[length(variables('RedisInfo'))]",
                "input": {
                  "match": "[or(equals(parameters('Global').CN, '.'), contains(array(parameters('Global').CN), variables('RedisInfo')[copyIndex('RCs')].Name))]"
                }
              }
            ],
            "Deployment": "[format('{0}-{1}-{2}-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID'))]",
            "DeploymentURI": "[toLower(format('{0}{1}{2}{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID')))]",
            "VnetID": "[resourceId('Microsoft.Network/virtualNetworks', format('{0}-vn', variables('Deployment')))]",
            "snWAF01Name": "snWAF01",
            "SubnetRefGW": "[format('{0}/subnets/{1}', variables('VnetID'), variables('snWAF01Name'))]",
            "networkId": "[format('{0}{1}', parameters('Global').networkid[0], string(sub(parameters('Global').networkid[1], mul(2, int(parameters('DeploymentID'))))))]",
            "networkIdUpper": "[format('{0}{1}', parameters('Global').networkid[0], string(add(1, sub(parameters('Global').networkid[1], mul(2, int(parameters('DeploymentID')))))))]",
            "HubRGJ": "[json(parameters('Global').hubRG)]",
            "gh": {
              "hubRGPrefix": "[if(contains(variables('HubRGJ'), 'Prefix'), variables('HubRGJ').Prefix, parameters('Prefix'))]",
              "hubRGOrgName": "[if(contains(variables('HubRGJ'), 'OrgName'), variables('HubRGJ').OrgName, parameters('Global').OrgName)]",
              "hubRGAppName": "[if(contains(variables('HubRGJ'), 'AppName'), variables('HubRGJ').AppName, parameters('Global').AppName)]",
              "hubRGRGName": "[if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID'))))]"
            },
            "HubRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').hubRGPrefix, variables('gh').hubRGOrgName, variables('gh').hubRGAppName, variables('gh').hubRGRGName)]",
            "RedisInfo": "[if(contains(parameters('DeploymentInfo'), 'RedisInfo'), parameters('DeploymentInfo').RedisInfo, createArray())]",
            "appConfigurationInfo": "[if(contains(parameters('DeploymentInfo'), 'appConfigurationInfo'), parameters('DeploymentInfo').appConfigurationInfo, json('null'))]",
            "SKULookup": {
              "B0": {
                "name": "Basic",
                "family": "C",
                "capacity": 0
              },
              "B1": {
                "name": "Basic",
                "family": "C",
                "capacity": 1
              },
              "C0": {
                "name": "Standard",
                "family": "C",
                "capacity": 0
              },
              "C1": {
                "name": "Standard",
                "family": "C",
                "capacity": 1
              },
              "C2": {
                "name": "Standard",
                "family": "C",
                "capacity": 2
              },
              "C3": {
                "name": "Standard",
                "family": "C",
                "capacity": 3
              },
              "P1": {
                "name": "Premium",
                "family": "P",
                "capacity": 1
              }
            },
            "RedisConfiguration": {
              "Default": {
                "maxclients": "1000",
                "maxmemory-reserved": 50,
                "maxfragmentationmemory-reserved": "50",
                "maxmemory-delta": "50"
              },
              "Basic": {}
            }
          },
          "resources": [
            {
              "condition": "[variables('RCs')[copyIndex()].match]",
              "copy": {
                "name": "RC",
                "count": "[length(variables('RedisInfo'))]"
              },
              "type": "Microsoft.Cache/redis",
              "apiVersion": "2020-12-01",
              "name": "[toLower(format('{0}-rc{1}', variables('Deployment'), variables('RedisInfo')[copyIndex()].Name))]",
              "location": "[resourceGroup().location]",
              "properties": {
                "redisVersion": "6",
                "sku": "[variables('SKULookup')[variables('RedisInfo')[copyIndex()].sku]]",
                "enableNonSslPort": "[if(contains(variables('RedisInfo')[copyIndex()], 'enableNonSslPort'), variables('RedisInfo')[copyIndex()].enableNonSslPort, bool('false'))]",
                "redisConfiguration": "[if(equals(variables('SKULookup')[variables('RedisInfo')[copyIndex()].sku].name, 'Basic'), variables('RedisConfiguration').Basic, variables('RedisConfiguration').Default)]",
                "minimumTlsVersion": "1.2"
              }
            },
            {
              "condition": "[variables('RCs')[copyIndex()].match]",
              "copy": {
                "name": "RCDiag",
                "count": "[length(variables('RedisInfo'))]"
              },
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Cache/redis/{0}', toLower(format('{0}-rc{1}', variables('Deployment'), variables('RedisInfo')[copyIndex()].Name)))]",
              "name": "service",
              "properties": {
                "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', variables('DeploymentURI')))]",
                "metrics": [
                  {
                    "timeGrain": "PT5M",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": false,
                      "days": 0
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Cache/redis', toLower(format('{0}-rc{1}', variables('Deployment'), variables('RedisInfo')[copyIndex()].Name)))]"
              ]
            },
            {
              "condition": "[and(variables('RCs')[copyIndex()].match, contains(variables('RedisInfo')[copyIndex()], 'privatelinkinfo'))]",
              "copy": {
                "name": "vnetPrivateLink",
                "count": "[length(variables('RedisInfo'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dp{0}-privatelinkloop{1}', variables('Deployment'), variables('RedisInfo')[copyIndex()].name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "Deployment": {
                    "value": "[variables('Deployment')]"
                  },
                  "DeploymentURI": {
                    "value": "[variables('DeploymentURI')]"
                  },
                  "PrivateLinkInfo": {
                    "value": "[variables('RedisInfo')[copyIndex()].privateLinkInfo]"
                  },
                  "providerType": {
                    "value": "Microsoft.Cache/redis"
                  },
                  "resourceName": {
                    "value": "[toLower(format('{0}-rc{1}', variables('Deployment'), variables('RedisInfo')[copyIndex()].Name))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1318.3566",
                      "templateHash": "1242957729837230630"
                    }
                  },
                  "parameters": {
                    "Deployment": {
                      "type": "string"
                    },
                    "DeploymentURI": {
                      "type": "string"
                    },
                    "PrivateLinkInfo": {
                      "type": "array"
                    },
                    "providerType": {
                      "type": "string"
                    },
                    "resourceName": {
                      "type": "string"
                    },
                    "resourceRG": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().name]"
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "privateLink",
                        "count": "[length(parameters('PrivateLinkInfo'))]",
                        "input": {
                          "name": "[format('{0}-pl{1}', parameters('Deployment'), parameters('PrivateLinkInfo')[copyIndex('privateLink')].Subnet)]",
                          "vNet": "[format('{0}-vn', parameters('Deployment'))]"
                        }
                      }
                    ]
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "subnetPrivateEndpoint",
                        "count": "[length(parameters('PrivateLinkInfo'))]"
                      },
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2019-11-01",
                      "name": "[format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet)]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "privateLinkServiceConnections": [
                          {
                            "name": "[format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet)]",
                            "properties": {
                              "privateLinkServiceId": "[resourceId(parameters('resourceRG'), parameters('providerType'), parameters('resourceName'))]",
                              "groupIds": "[array(parameters('PrivateLinkInfo')[copyIndex()].groupID)]",
                              "privateLinkServiceConnectionState": {
                                "status": "Approved",
                                "description": "Auto-Approved",
                                "actionsRequired": "None"
                              }
                            }
                          }
                        ],
                        "manualPrivateLinkServiceConnections": [],
                        "subnet": {
                          "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('privateLink')[copyIndex()].vNet, parameters('PrivateLinkInfo')[copyIndex()].Subnet)]"
                        }
                      }
                    },
                    {
                      "copy": {
                        "name": "NICDiags",
                        "count": "[length(parameters('PrivateLinkInfo'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp-{0}-pl-{1}-{2}-diags', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "DeploymentURI": {
                            "value": "[parameters('DeploymentURI')]"
                          },
                          "NICName": {
                            "value": "[last(split(reference(resourceId('Microsoft.Network/privateEndpoints', format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet))).networkInterfaces[0].id, '/'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "3372180053977311610"
                            }
                          },
                          "parameters": {
                            "DeploymentURI": {
                              "type": "string"
                            },
                            "NICName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Network/networkInterfaces/{0}', parameters('NICName'))]",
                              "name": "service",
                              "properties": {
                                "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                                "metrics": [
                                  {
                                    "timeGrain": "PT5M",
                                    "enabled": true,
                                    "retentionPolicy": {
                                      "enabled": false,
                                      "days": 0
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "NICID": {
                      "type": "array",
                      "copy": {
                        "count": "[length(parameters('PrivateLinkInfo'))]",
                        "input": "[reference(resourceId('Microsoft.Network/privateEndpoints', format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet))).networkInterfaces[0].id]"
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Cache/redis', toLower(format('{0}-rc{1}', variables('Deployment'), variables('RedisInfo')[copyIndex()].Name)))]",
                "[resourceId('Microsoft.Cache/redis', toLower(format('{0}-rc{1}', variables('Deployment'), variables('RedisInfo')[copyIndex()].Name)))]"
              ]
            },
            {
              "condition": "[and(variables('RCs')[copyIndex()].match, contains(variables('RedisInfo')[copyIndex()], 'privatelinkinfo'))]",
              "copy": {
                "name": "RCprivateLinkDNS",
                "count": "[length(variables('RedisInfo'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dp{0}-registerPrivateDNS{1}', variables('Deployment'), variables('RedisInfo')[copyIndex()].name)]",
              "resourceGroup": "[variables('HubRGName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "PrivateLinkInfo": {
                    "value": "[variables('RedisInfo')[copyIndex()].privateLinkInfo]"
                  },
                  "providerURL": {
                    "value": "windows.net"
                  },
                  "resourceName": {
                    "value": "[toLower(format('{0}-rc{1}', variables('Deployment'), variables('RedisInfo')[copyIndex()].Name))]"
                  },
                  "providerType": {
                    "value": "Microsoft.Cache/redis"
                  },
                  "Nics": {
                    "value": "[if(contains(variables('RedisInfo')[copyIndex()], 'privatelinkinfo'), array(reference(resourceId('Microsoft.Resources/deployments', format('dp{0}-privatelinkloop{1}', variables('Deployment'), variables('RedisInfo')[copyIndex()].name)), '2020-10-01').outputs.NICID.value), array('na'))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1318.3566",
                      "templateHash": "9527034148045878947"
                    }
                  },
                  "parameters": {
                    "PrivateLinkInfo": {
                      "type": "array"
                    },
                    "resourceName": {
                      "type": "string"
                    },
                    "providerURL": {
                      "type": "string"
                    },
                    "providerType": {
                      "type": "string"
                    },
                    "Nics": {
                      "type": "array"
                    }
                  },
                  "variables": {
                    "DNSLookup": {
                      "Microsoft.AzureCosmosDB/databaseAccounts/SQL": "documents",
                      "Microsoft.AzureCosmosDB/databaseAccounts/MongoDB": "mongo.cosmos",
                      "Microsoft.AzureCosmosDB/databaseAccounts/Cassandra": "cassandra.cosmos",
                      "Microsoft.AzureCosmosDB/databaseAccounts/Gremlin": "gremlin.cosmos",
                      "Microsoft.AzureCosmosDB/databaseAccounts/Table": "table.cosmos",
                      "Microsoft.KeyVault/vaults": "vaultcore",
                      "Microsoft.DBforMySQL/servers": "mysql",
                      "Microsoft.DBforMariaDB/servers": "mariadb",
                      "Microsoft.AppConfiguration/configurationStores": "azconfig",
                      "Microsoft.ServiceBus/namespaces": "servicebus",
                      "Microsoft.Sql/servers": "database",
                      "Microsoft.Cache/redis": "redis.cache",
                      "Microsoft.Web/sites": "azurewebsites",
                      "Microsoft.Synapse/workspaces": "sql",
                      "Microsoft.ApiManagement/service": "azure-api"
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "privateLinkDNS",
                        "count": "[length(parameters('PrivateLinkInfo'))]"
                      },
                      "type": "Microsoft.Network/privateDnsZones/A",
                      "apiVersion": "2020-06-01",
                      "name": "[format('privatelink.{0}.{1}/{2}', if(contains(variables('DNSLookup'), parameters('providerType')), variables('DNSLookup')[parameters('providerType')], parameters('PrivateLinkInfo')[copyIndex()].groupID), parameters('providerURL'), parameters('resourceName'))]",
                      "properties": {
                        "ttl": 3600,
                        "aRecords": [
                          {
                            "ipv4Address": "[reference(parameters('Nics')[copyIndex()], '2018-05-01').ipConfigurations[0].properties.privateIPAddress]"
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Cache/redis', toLower(format('{0}-rc{1}', variables('Deployment'), variables('RedisInfo')[copyIndex()].Name)))]",
                "[resourceId('Microsoft.Cache/redis', toLower(format('{0}-rc{1}', variables('Deployment'), variables('RedisInfo')[copyIndex()].Name)))]",
                "[resourceId('Microsoft.Resources/deployments', format('dp{0}-privatelinkloop{1}', variables('Deployment'), variables('RedisInfo')[copyIndex()].name))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-OMS', variables('Deployment')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-VNET', variables('Deployment')))]"
      ]
    },
    {
      "condition": "[bool(parameters('Stage').APIM)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('dp{0}-APIM', variables('Deployment'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "DeploymentID": {
            "value": "[parameters('DeploymentID')]"
          },
          "DeploymentInfo": {
            "value": "[parameters('DeploymentInfo')]"
          },
          "Environment": {
            "value": "[parameters('Environment')]"
          },
          "Extensions": {
            "value": "[parameters('Extensions')]"
          },
          "Global": {
            "value": "[parameters('Global')]"
          },
          "Prefix": {
            "value": "[parameters('Prefix')]"
          },
          "Stage": {
            "value": "[parameters('Stage')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "4934439621396382519"
            }
          },
          "parameters": {
            "Prefix": {
              "type": "string"
            },
            "Environment": {
              "type": "string",
              "defaultValue": "D",
              "allowedValues": [
                "I",
                "D",
                "T",
                "U",
                "P",
                "S",
                "G",
                "A"
              ]
            },
            "DeploymentID": {
              "type": "string",
              "defaultValue": "1",
              "allowedValues": [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9"
              ]
            },
            "Stage": {
              "type": "object"
            },
            "Extensions": {
              "type": "object"
            },
            "Global": {
              "type": "object"
            },
            "DeploymentInfo": {
              "type": "object"
            },
            "deploymentTime": {
              "type": "string",
              "defaultValue": "[utcNow()]"
            }
          },
          "variables": {
            "copy": [
              {
                "name": "APIMs",
                "count": "[length(variables('APIMInfo'))]",
                "input": {
                  "match": "[or(equals(parameters('Global').CN, '.'), contains(array(parameters('Global').CN), variables('APIMInfo')[copyIndex('APIMs')].name))]"
                }
              }
            ],
            "Deployment": "[format('{0}-{1}-{2}-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID'))]",
            "DeploymentURI": "[toLower(format('{0}{1}{2}{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID')))]",
            "APIMInfo": "[if(contains(parameters('DeploymentInfo'), 'APIMInfo'), parameters('DeploymentInfo').APIMInfo, createArray())]"
          },
          "resources": [
            {
              "condition": "[variables('APIMs')[copyIndex()].match]",
              "copy": {
                "name": "APIM",
                "count": "[length(variables('APIMInfo'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dp{0}-APIM-Deploy{1}', variables('Deployment'), variables('APIMInfo')[copyIndex()].name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "Deployment": {
                    "value": "[variables('Deployment')]"
                  },
                  "DeploymentURI": {
                    "value": "[variables('DeploymentURI')]"
                  },
                  "Prefix": {
                    "value": "[parameters('Prefix')]"
                  },
                  "DeploymentID": {
                    "value": "[parameters('DeploymentID')]"
                  },
                  "Environment": {
                    "value": "[parameters('Environment')]"
                  },
                  "apim": {
                    "value": "[variables('APIMInfo')[copyIndex()]]"
                  },
                  "Global": {
                    "value": "[parameters('Global')]"
                  },
                  "Stage": {
                    "value": "[parameters('Stage')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1318.3566",
                      "templateHash": "5451963937222920915"
                    }
                  },
                  "parameters": {
                    "Deployment": {
                      "type": "string"
                    },
                    "DeploymentURI": {
                      "type": "string"
                    },
                    "Prefix": {
                      "type": "string"
                    },
                    "DeploymentID": {
                      "type": "string"
                    },
                    "Environment": {
                      "type": "string"
                    },
                    "apim": {
                      "type": "object"
                    },
                    "Global": {
                      "type": "object"
                    },
                    "Stage": {
                      "type": "object"
                    },
                    "now": {
                      "type": "string",
                      "defaultValue": "[utcNow('F')]"
                    }
                  },
                  "variables": {
                    "prefixLookup": "[json('{\r\n  \"ASI1\": {\r\n    \"displayname\": \"South India\",\r\n    \"location\": \"southindia\",\r\n    \"PREFIX\": \"ASI1\",\r\n    \"pairedRegion\": \"centralindia\"\r\n  },\r\n  \"ANW1\": {\r\n    \"displayname\": \"Norway West\",\r\n    \"location\": \"norwaywest\",\r\n    \"PREFIX\": \"ANW1\",\r\n    \"pairedRegion\": \"norwayeast\"\r\n  },\r\n  \"ASA1\": {\r\n    \"displayname\": \"Southeast Asia\",\r\n    \"location\": \"southeastasia\",\r\n    \"PREFIX\": \"ASA1\",\r\n    \"pairedRegion\": \"eastasia\"\r\n  },\r\n  \"ASN1\": {\r\n    \"displayname\": \"Switzerland North\",\r\n    \"location\": \"switzerlandnorth\",\r\n    \"PREFIX\": \"ASN1\",\r\n    \"pairedRegion\": \"switzerlandwest\"\r\n  },\r\n  \"ACI1\": {\r\n    \"displayname\": \"Central India\",\r\n    \"location\": \"centralindia\",\r\n    \"PREFIX\": \"ACI1\",\r\n    \"pairedRegion\": \"southindia\"\r\n  },\r\n  \"AWU1\": {\r\n    \"displayname\": \"West US\",\r\n    \"location\": \"westus\",\r\n    \"PREFIX\": \"AWU1\",\r\n    \"pairedRegion\": \"eastus\"\r\n  },\r\n  \"AUS1\": {\r\n    \"displayname\": \"UK South\",\r\n    \"location\": \"uksouth\",\r\n    \"PREFIX\": \"AUS1\",\r\n    \"pairedRegion\": \"ukwest\"\r\n  },\r\n  \"ASAW\": {\r\n    \"displayname\": \"South Africa West\",\r\n    \"location\": \"southafricawest\",\r\n    \"PREFIX\": \"ASAW\",\r\n    \"pairedRegion\": \"southafricanorth\"\r\n  },\r\n  \"AJW1\": {\r\n    \"displayname\": \"Japan West\",\r\n    \"location\": \"japanwest\",\r\n    \"PREFIX\": \"AJW1\",\r\n    \"pairedRegion\": \"japaneast\"\r\n  },\r\n  \"ASW1\": {\r\n    \"displayname\": \"Switzerland West\",\r\n    \"location\": \"switzerlandwest\",\r\n    \"PREFIX\": \"ASW1\",\r\n    \"pairedRegion\": \"switzerlandnorth\"\r\n  },\r\n  \"ACC1\": {\r\n    \"displayname\": \"Canada Central\",\r\n    \"location\": \"canadacentral\",\r\n    \"PREFIX\": \"ACC1\",\r\n    \"pairedRegion\": \"canadaeast\"\r\n  },\r\n  \"AUW1\": {\r\n    \"displayname\": \"UK West\",\r\n    \"location\": \"ukwest\",\r\n    \"PREFIX\": \"AUW1\",\r\n    \"pairedRegion\": \"uksouth\"\r\n  },\r\n  \"AJIC\": {\r\n    \"displayname\": \"Jio India Central\",\r\n    \"location\": \"jioindiacentral\",\r\n    \"PREFIX\": \"AJIC\",\r\n    \"pairedRegion\": \"jioindiawest\"\r\n  },\r\n  \"AUC1\": {\r\n    \"displayname\": \"UAE Central\",\r\n    \"location\": \"uaecentral\",\r\n    \"PREFIX\": \"AUC1\",\r\n    \"pairedRegion\": \"uaenorth\"\r\n  },\r\n  \"AWU2\": {\r\n    \"displayname\": \"West US 2\",\r\n    \"location\": \"westus2\",\r\n    \"PREFIX\": \"AWU2\",\r\n    \"pairedRegion\": \"westcentralus\"\r\n  },\r\n  \"AKS1\": {\r\n    \"displayname\": \"Korea South\",\r\n    \"location\": \"koreasouth\",\r\n    \"PREFIX\": \"AKS1\",\r\n    \"pairedRegion\": \"koreacentral\"\r\n  },\r\n  \"AFC1\": {\r\n    \"displayname\": \"France Central\",\r\n    \"location\": \"francecentral\",\r\n    \"PREFIX\": \"AFC1\",\r\n    \"pairedRegion\": \"francesouth\"\r\n  },\r\n  \"AJIW\": {\r\n    \"displayname\": \"Jio India West\",\r\n    \"location\": \"jioindiawest\",\r\n    \"PREFIX\": \"AJIW\",\r\n    \"pairedRegion\": \"jioindiacentral\"\r\n  },\r\n  \"ASAN\": {\r\n    \"displayname\": \"South Africa North\",\r\n    \"location\": \"southafricanorth\",\r\n    \"PREFIX\": \"ASAN\",\r\n    \"pairedRegion\": \"southafricawest\"\r\n  },\r\n  \"ACU1\": {\r\n    \"displayname\": \"Central US\",\r\n    \"location\": \"centralus\",\r\n    \"PREFIX\": \"ACU1\",\r\n    \"pairedRegion\": \"eastus2\"\r\n  },\r\n  \"AUN1\": {\r\n    \"displayname\": \"UAE North\",\r\n    \"location\": \"uaenorth\",\r\n    \"PREFIX\": \"AUN1\",\r\n    \"pairedRegion\": \"uaecentral\"\r\n  },\r\n  \"ANEU\": {\r\n    \"displayname\": \"North Europe\",\r\n    \"location\": \"northeurope\",\r\n    \"PREFIX\": \"ANEU\",\r\n    \"pairedRegion\": \"westeurope\"\r\n  },\r\n  \"AKC1\": {\r\n    \"displayname\": \"Korea Central\",\r\n    \"location\": \"koreacentral\",\r\n    \"PREFIX\": \"AKC1\",\r\n    \"pairedRegion\": \"koreasouth\"\r\n  },\r\n  \"AAS1\": {\r\n    \"displayname\": \"Australia Southeast\",\r\n    \"location\": \"australiasoutheast\",\r\n    \"PREFIX\": \"AAS1\",\r\n    \"pairedRegion\": \"australiaeast\"\r\n  },\r\n  \"ANCU\": {\r\n    \"displayname\": \"North Central US\",\r\n    \"location\": \"northcentralus\",\r\n    \"PREFIX\": \"ANCU\",\r\n    \"pairedRegion\": \"southcentralus\"\r\n  },\r\n  \"AGWC\": {\r\n    \"displayname\": \"Germany West Central\",\r\n    \"location\": \"germanywestcentral\",\r\n    \"PREFIX\": \"AGWC\",\r\n    \"pairedRegion\": \"germanynorth\"\r\n  },\r\n  \"AAC2\": {\r\n    \"displayname\": \"Australia Central 2\",\r\n    \"location\": \"australiacentral2\",\r\n    \"PREFIX\": \"AAC2\",\r\n    \"pairedRegion\": \"australiacentral2\"\r\n  },\r\n  \"ACE1\": {\r\n    \"displayname\": \"Canada East\",\r\n    \"location\": \"canadaeast\",\r\n    \"PREFIX\": \"ACE1\",\r\n    \"pairedRegion\": \"canadacentral\"\r\n  },\r\n  \"AJE1\": {\r\n    \"displayname\": \"Japan East\",\r\n    \"location\": \"japaneast\",\r\n    \"PREFIX\": \"AJE1\",\r\n    \"pairedRegion\": \"japanwest\"\r\n  },\r\n  \"ABS1\": {\r\n    \"displayname\": \"Brazil South\",\r\n    \"location\": \"brazilsouth\",\r\n    \"PREFIX\": \"ABS1\",\r\n    \"pairedRegion\": \"southcentralus\"\r\n  },\r\n  \"AFS1\": {\r\n    \"displayname\": \"France South\",\r\n    \"location\": \"francesouth\",\r\n    \"PREFIX\": \"AFS1\",\r\n    \"pairedRegion\": \"francecentral\"\r\n  },\r\n  \"ASCU\": {\r\n    \"displayname\": \"South Central US\",\r\n    \"location\": \"southcentralus\",\r\n    \"PREFIX\": \"ASCU\",\r\n    \"pairedRegion\": \"northcentralus\"\r\n  },\r\n  \"AWCU\": {\r\n    \"displayname\": \"West Central US\",\r\n    \"location\": \"westcentralus\",\r\n    \"PREFIX\": \"AWCU\",\r\n    \"pairedRegion\": \"westus2\"\r\n  },\r\n  \"ANE1\": {\r\n    \"displayname\": \"Norway East\",\r\n    \"location\": \"norwayeast\",\r\n    \"PREFIX\": \"ANE1\",\r\n    \"pairedRegion\": \"norwaywest\"\r\n  },\r\n  \"AEU2\": {\r\n    \"displayname\": \"East US 2\",\r\n    \"location\": \"eastus2\",\r\n    \"PREFIX\": \"AEU2\",\r\n    \"pairedRegion\": \"centralus\"\r\n  },\r\n  \"ABSE\": {\r\n    \"displayname\": \"Brazil Southeast\",\r\n    \"location\": \"brazilsoutheast\",\r\n    \"PREFIX\": \"ABSE\",\r\n    \"pairedRegion\": \"brazilsouth\"\r\n  },\r\n  \"AAE1\": {\r\n    \"displayname\": \"Australia East\",\r\n    \"location\": \"australiaeast\",\r\n    \"PREFIX\": \"AAE1\",\r\n    \"pairedRegion\": \"australiasoutheast\"\r\n  },\r\n  \"AGN1\": {\r\n    \"displayname\": \"Germany North\",\r\n    \"location\": \"germanynorth\",\r\n    \"PREFIX\": \"AGN1\",\r\n    \"pairedRegion\": \"germanywestcentral\"\r\n  },\r\n  \"AWU3\": {\r\n    \"displayname\": \"West US 3\",\r\n    \"location\": \"westus3\",\r\n    \"PREFIX\": \"AWU3\",\r\n    \"pairedRegion\": \"eastus\"\r\n  },\r\n  \"ASC1\": {\r\n    \"displayname\": \"Sweden Central\",\r\n    \"location\": \"swedencentral\",\r\n    \"PREFIX\": \"ASC1\",\r\n    \"pairedRegion\": \"swedensouth\"\r\n  },\r\n  \"AEA1\": {\r\n    \"displayname\": \"East Asia\",\r\n    \"location\": \"eastasia\",\r\n    \"PREFIX\": \"AEA1\",\r\n    \"pairedRegion\": \"southeastasia\"\r\n  },\r\n  \"AAC1\": {\r\n    \"displayname\": \"Australia Central\",\r\n    \"location\": \"australiacentral\",\r\n    \"PREFIX\": \"AAC1\",\r\n    \"pairedRegion\": \"australiacentral\"\r\n  },\r\n  \"AWI1\": {\r\n    \"displayname\": \"West India\",\r\n    \"location\": \"westindia\",\r\n    \"PREFIX\": \"AWI1\",\r\n    \"pairedRegion\": \"southindia\"\r\n  },\r\n  \"AWEU\": {\r\n    \"displayname\": \"West Europe\",\r\n    \"location\": \"westeurope\",\r\n    \"PREFIX\": \"AWEU\",\r\n    \"pairedRegion\": \"northeurope\"\r\n  },\r\n  \"AEU1\": {\r\n    \"displayname\": \"East US\",\r\n    \"location\": \"eastus\",\r\n    \"PREFIX\": \"AEU1\",\r\n    \"pairedRegion\": \"westus\"\r\n  }\r\n}\r\n')]",
                    "regionLookup": "[json('{\r\n  \"francecentral\": {\r\n    \"displayname\": \"France Central\",\r\n    \"location\": \"francecentral\",\r\n    \"PREFIX\": \"AFC1\",\r\n    \"pairedRegion\": \"francesouth\"\r\n  },\r\n  \"southeastasia\": {\r\n    \"displayname\": \"Southeast Asia\",\r\n    \"location\": \"southeastasia\",\r\n    \"PREFIX\": \"ASA1\",\r\n    \"pairedRegion\": \"eastasia\"\r\n  },\r\n  \"southafricawest\": {\r\n    \"displayname\": \"South Africa West\",\r\n    \"location\": \"southafricawest\",\r\n    \"PREFIX\": \"ASAW\",\r\n    \"pairedRegion\": \"southafricanorth\"\r\n  },\r\n  \"eastus2\": {\r\n    \"displayname\": \"East US 2\",\r\n    \"location\": \"eastus2\",\r\n    \"PREFIX\": \"AEU2\",\r\n    \"pairedRegion\": \"centralus\"\r\n  },\r\n  \"eastus\": {\r\n    \"displayname\": \"East US\",\r\n    \"location\": \"eastus\",\r\n    \"PREFIX\": \"AEU1\",\r\n    \"pairedRegion\": \"westus\"\r\n  },\r\n  \"jioindiawest\": {\r\n    \"displayname\": \"Jio India West\",\r\n    \"location\": \"jioindiawest\",\r\n    \"PREFIX\": \"AJIW\",\r\n    \"pairedRegion\": \"jioindiacentral\"\r\n  },\r\n  \"westcentralus\": {\r\n    \"displayname\": \"West Central US\",\r\n    \"location\": \"westcentralus\",\r\n    \"PREFIX\": \"AWCU\",\r\n    \"pairedRegion\": \"westus2\"\r\n  },\r\n  \"koreacentral\": {\r\n    \"displayname\": \"Korea Central\",\r\n    \"location\": \"koreacentral\",\r\n    \"PREFIX\": \"AKC1\",\r\n    \"pairedRegion\": \"koreasouth\"\r\n  },\r\n  \"uaecentral\": {\r\n    \"displayname\": \"UAE Central\",\r\n    \"location\": \"uaecentral\",\r\n    \"PREFIX\": \"AUC1\",\r\n    \"pairedRegion\": \"uaenorth\"\r\n  },\r\n  \"westus\": {\r\n    \"displayname\": \"West US\",\r\n    \"location\": \"westus\",\r\n    \"PREFIX\": \"AWU1\",\r\n    \"pairedRegion\": \"eastus\"\r\n  },\r\n  \"southafricanorth\": {\r\n    \"displayname\": \"South Africa North\",\r\n    \"location\": \"southafricanorth\",\r\n    \"PREFIX\": \"ASAN\",\r\n    \"pairedRegion\": \"southafricawest\"\r\n  },\r\n  \"australiacentral2\": {\r\n    \"displayname\": \"Australia Central 2\",\r\n    \"location\": \"australiacentral2\",\r\n    \"PREFIX\": \"AAC2\",\r\n    \"pairedRegion\": \"australiacentral2\"\r\n  },\r\n  \"francesouth\": {\r\n    \"displayname\": \"France South\",\r\n    \"location\": \"francesouth\",\r\n    \"PREFIX\": \"AFS1\",\r\n    \"pairedRegion\": \"francecentral\"\r\n  },\r\n  \"ukwest\": {\r\n    \"displayname\": \"UK West\",\r\n    \"location\": \"ukwest\",\r\n    \"PREFIX\": \"AUW1\",\r\n    \"pairedRegion\": \"uksouth\"\r\n  },\r\n  \"southindia\": {\r\n    \"displayname\": \"South India\",\r\n    \"location\": \"southindia\",\r\n    \"PREFIX\": \"ASI1\",\r\n    \"pairedRegion\": \"centralindia\"\r\n  },\r\n  \"centralus\": {\r\n    \"displayname\": \"Central US\",\r\n    \"location\": \"centralus\",\r\n    \"PREFIX\": \"ACU1\",\r\n    \"pairedRegion\": \"eastus2\"\r\n  },\r\n  \"germanynorth\": {\r\n    \"displayname\": \"Germany North\",\r\n    \"location\": \"germanynorth\",\r\n    \"PREFIX\": \"AGN1\",\r\n    \"pairedRegion\": \"germanywestcentral\"\r\n  },\r\n  \"koreasouth\": {\r\n    \"displayname\": \"Korea South\",\r\n    \"location\": \"koreasouth\",\r\n    \"PREFIX\": \"AKS1\",\r\n    \"pairedRegion\": \"koreacentral\"\r\n  },\r\n  \"westindia\": {\r\n    \"displayname\": \"West India\",\r\n    \"location\": \"westindia\",\r\n    \"PREFIX\": \"AWI1\",\r\n    \"pairedRegion\": \"southindia\"\r\n  },\r\n  \"westus2\": {\r\n    \"displayname\": \"West US 2\",\r\n    \"location\": \"westus2\",\r\n    \"PREFIX\": \"AWU2\",\r\n    \"pairedRegion\": \"westcentralus\"\r\n  },\r\n  \"northcentralus\": {\r\n    \"displayname\": \"North Central US\",\r\n    \"location\": \"northcentralus\",\r\n    \"PREFIX\": \"ANCU\",\r\n    \"pairedRegion\": \"southcentralus\"\r\n  },\r\n  \"westeurope\": {\r\n    \"displayname\": \"West Europe\",\r\n    \"location\": \"westeurope\",\r\n    \"PREFIX\": \"AWEU\",\r\n    \"pairedRegion\": \"northeurope\"\r\n  },\r\n  \"canadacentral\": {\r\n    \"displayname\": \"Canada Central\",\r\n    \"location\": \"canadacentral\",\r\n    \"PREFIX\": \"ACC1\",\r\n    \"pairedRegion\": \"canadaeast\"\r\n  },\r\n  \"southcentralus\": {\r\n    \"displayname\": \"South Central US\",\r\n    \"location\": \"southcentralus\",\r\n    \"PREFIX\": \"ASCU\",\r\n    \"pairedRegion\": \"northcentralus\"\r\n  },\r\n  \"norwayeast\": {\r\n    \"displayname\": \"Norway East\",\r\n    \"location\": \"norwayeast\",\r\n    \"PREFIX\": \"ANE1\",\r\n    \"pairedRegion\": \"norwaywest\"\r\n  },\r\n  \"japanwest\": {\r\n    \"displayname\": \"Japan West\",\r\n    \"location\": \"japanwest\",\r\n    \"PREFIX\": \"AJW1\",\r\n    \"pairedRegion\": \"japaneast\"\r\n  },\r\n  \"norwaywest\": {\r\n    \"displayname\": \"Norway West\",\r\n    \"location\": \"norwaywest\",\r\n    \"PREFIX\": \"ANW1\",\r\n    \"pairedRegion\": \"norwayeast\"\r\n  },\r\n  \"jioindiacentral\": {\r\n    \"displayname\": \"Jio India Central\",\r\n    \"location\": \"jioindiacentral\",\r\n    \"PREFIX\": \"AJIC\",\r\n    \"pairedRegion\": \"jioindiawest\"\r\n  },\r\n  \"centralindia\": {\r\n    \"displayname\": \"Central India\",\r\n    \"location\": \"centralindia\",\r\n    \"PREFIX\": \"ACI1\",\r\n    \"pairedRegion\": \"southindia\"\r\n  },\r\n  \"westus3\": {\r\n    \"displayname\": \"West US 3\",\r\n    \"location\": \"westus3\",\r\n    \"PREFIX\": \"AWU3\",\r\n    \"pairedRegion\": \"eastus\"\r\n  },\r\n  \"brazilsouth\": {\r\n    \"displayname\": \"Brazil South\",\r\n    \"location\": \"brazilsouth\",\r\n    \"PREFIX\": \"ABS1\",\r\n    \"pairedRegion\": \"southcentralus\"\r\n  },\r\n  \"eastasia\": {\r\n    \"displayname\": \"East Asia\",\r\n    \"location\": \"eastasia\",\r\n    \"PREFIX\": \"AEA1\",\r\n    \"pairedRegion\": \"southeastasia\"\r\n  },\r\n  \"swedencentral\": {\r\n    \"displayname\": \"Sweden Central\",\r\n    \"location\": \"swedencentral\",\r\n    \"PREFIX\": \"ASC1\",\r\n    \"pairedRegion\": \"swedensouth\"\r\n  },\r\n  \"uksouth\": {\r\n    \"displayname\": \"UK South\",\r\n    \"location\": \"uksouth\",\r\n    \"PREFIX\": \"AUS1\",\r\n    \"pairedRegion\": \"ukwest\"\r\n  },\r\n  \"switzerlandnorth\": {\r\n    \"displayname\": \"Switzerland North\",\r\n    \"location\": \"switzerlandnorth\",\r\n    \"PREFIX\": \"ASN1\",\r\n    \"pairedRegion\": \"switzerlandwest\"\r\n  },\r\n  \"canadaeast\": {\r\n    \"displayname\": \"Canada East\",\r\n    \"location\": \"canadaeast\",\r\n    \"PREFIX\": \"ACE1\",\r\n    \"pairedRegion\": \"canadacentral\"\r\n  },\r\n  \"australiasoutheast\": {\r\n    \"displayname\": \"Australia Southeast\",\r\n    \"location\": \"australiasoutheast\",\r\n    \"PREFIX\": \"AAS1\",\r\n    \"pairedRegion\": \"australiaeast\"\r\n  },\r\n  \"northeurope\": {\r\n    \"displayname\": \"North Europe\",\r\n    \"location\": \"northeurope\",\r\n    \"PREFIX\": \"ANEU\",\r\n    \"pairedRegion\": \"westeurope\"\r\n  },\r\n  \"germanywestcentral\": {\r\n    \"displayname\": \"Germany West Central\",\r\n    \"location\": \"germanywestcentral\",\r\n    \"PREFIX\": \"AGWC\",\r\n    \"pairedRegion\": \"germanynorth\"\r\n  },\r\n  \"japaneast\": {\r\n    \"displayname\": \"Japan East\",\r\n    \"location\": \"japaneast\",\r\n    \"PREFIX\": \"AJE1\",\r\n    \"pairedRegion\": \"japanwest\"\r\n  },\r\n  \"uaenorth\": {\r\n    \"displayname\": \"UAE North\",\r\n    \"location\": \"uaenorth\",\r\n    \"PREFIX\": \"AUN1\",\r\n    \"pairedRegion\": \"uaecentral\"\r\n  },\r\n  \"australiaeast\": {\r\n    \"displayname\": \"Australia East\",\r\n    \"location\": \"australiaeast\",\r\n    \"PREFIX\": \"AAE1\",\r\n    \"pairedRegion\": \"australiasoutheast\"\r\n  },\r\n  \"switzerlandwest\": {\r\n    \"displayname\": \"Switzerland West\",\r\n    \"location\": \"switzerlandwest\",\r\n    \"PREFIX\": \"ASW1\",\r\n    \"pairedRegion\": \"switzerlandnorth\"\r\n  },\r\n  \"australiacentral\": {\r\n    \"displayname\": \"Australia Central\",\r\n    \"location\": \"australiacentral\",\r\n    \"PREFIX\": \"AAC1\",\r\n    \"pairedRegion\": \"australiacentral\"\r\n  },\r\n  \"brazilsoutheast\": {\r\n    \"displayname\": \"Brazil Southeast\",\r\n    \"location\": \"brazilsoutheast\",\r\n    \"PREFIX\": \"ABSE\",\r\n    \"pairedRegion\": \"brazilsouth\"\r\n  }\r\n}\r\n')]",
                    "primaryPrefix": "[variables('regionLookup')[parameters('Global').PrimaryLocation].prefix]",
                    "GlobalRGJ": "[json(parameters('Global').GlobalRG)]",
                    "HubRGJ": "[json(parameters('Global').hubRG)]",
                    "HubKVJ": "[json(parameters('Global').hubKV)]",
                    "gh": {
                      "globalRGPrefix": "[if(contains(variables('GlobalRGJ'), 'Prefix'), variables('GlobalRGJ').Prefix, variables('primaryPrefix'))]",
                      "globalRGOrgName": "[if(contains(variables('GlobalRGJ'), 'OrgName'), variables('GlobalRGJ').OrgName, parameters('Global').OrgName)]",
                      "globalRGAppName": "[if(contains(variables('GlobalRGJ'), 'AppName'), variables('GlobalRGJ').AppName, parameters('Global').AppName)]",
                      "globalRGName": "[if(contains(variables('GlobalRGJ'), 'name'), variables('GlobalRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID')))]",
                      "hubRGPrefix": "[if(contains(variables('HubRGJ'), 'Prefix'), variables('HubRGJ').Prefix, parameters('Prefix'))]",
                      "hubRGOrgName": "[if(contains(variables('HubRGJ'), 'OrgName'), variables('HubRGJ').OrgName, parameters('Global').OrgName)]",
                      "hubRGAppName": "[if(contains(variables('HubRGJ'), 'AppName'), variables('HubRGJ').AppName, parameters('Global').AppName)]",
                      "hubRGRGName": "[if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID'))))]",
                      "hubKVPrefix": "[if(contains(variables('HubKVJ'), 'Prefix'), variables('HubKVJ').Prefix, parameters('Prefix'))]",
                      "hubKVOrgName": "[if(contains(variables('HubKVJ'), 'OrgName'), variables('HubKVJ').OrgName, parameters('Global').OrgName)]",
                      "hubKVAppName": "[if(contains(variables('HubKVJ'), 'AppName'), variables('HubKVJ').AppName, parameters('Global').AppName)]",
                      "hubKVRGName": "[if(contains(variables('HubKVJ'), 'RG'), variables('HubKVJ').RG, variables('HubRGJ').name)]"
                    },
                    "globalRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').globalRGPrefix, variables('gh').globalRGOrgName, variables('gh').globalRGAppName, variables('gh').globalRGName)]",
                    "HubRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').hubRGPrefix, variables('gh').hubRGOrgName, variables('gh').hubRGAppName, variables('gh').hubRGRGName)]",
                    "HubKVName": "[toLower(format('{0}-{1}-{2}-{3}-kv{4}', variables('gh').hubKVPrefix, variables('gh').hubKVOrgName, variables('gh').hubKVAppName, variables('gh').hubKVRGName, variables('HubKVJ').name))]",
                    "VnetID": "[resourceId('Microsoft.Network/virtualNetworks', format('{0}-vn', parameters('Deployment')))]",
                    "AppInsightsName": "[format('{0}AppInsights', parameters('DeploymentURI'))]",
                    "userAssignedIdentities": {
                      "Default": {
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-uaiKeyVaultSecretsGet', parameters('Deployment'))))]": {}
                      }
                    },
                    "additionalLocations": "[if(and(equals(parameters('apim').apimSku, 'Premium'), contains(parameters('apim'), 'additionalLocations')), parameters('apim').additionalLocations, createArray())]",
                    "apimName": "[format('{0}-apim{1}', parameters('Deployment'), parameters('apim').Name)]",
                    "availabilityZones": [
                      1,
                      2,
                      3
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.ApiManagement/service",
                      "apiVersion": "2021-04-01-preview",
                      "name": "[variables('apimName')]",
                      "location": "[resourceGroup().location]",
                      "sku": {
                        "name": "[parameters('apim').apimSku]",
                        "capacity": "[parameters('apim').capacity]"
                      },
                      "identity": {
                        "type": "UserAssigned",
                        "userAssignedIdentities": "[variables('userAssignedIdentities').Default]"
                      },
                      "zones": "[if(and(contains(parameters('apim'), 'zone'), bool(parameters('apim').zone)), take(variables('availabilityZones'), parameters('apim').capacity), null())]",
                      "properties": {
                        "copy": [
                          {
                            "name": "additionalLocations",
                            "count": "[length(variables('additionalLocations'))]",
                            "input": {
                              "location": "[variables('prefixLookup')[variables('additionalLocations')[copyIndex('additionalLocations')].prefix].location]",
                              "publicIpAddressId": "[if(equals(parameters('apim').VirtualNetworkType, 'None'), null(), if(and(contains(parameters('apim'), 'zone'), bool(parameters('apim').zone)), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, replace(resourceGroup().name, parameters('Prefix'), variables('additionalLocations')[copyIndex('additionalLocations')].prefix)), 'Microsoft.Resources/deployments', format('dp{0}-LB-publicIPDeploy-apim{1}', replace(parameters('Deployment'), parameters('Prefix'), variables('additionalLocations')[copyIndex('additionalLocations')].prefix), parameters('apim').Name)), '2020-10-01').outputs.PIPID.value[sub(variables('additionalLocations')[copyIndex('additionalLocations')].capacity, 1)], null()))]",
                              "sku": {
                                "name": "[parameters('apim').apimSku]",
                                "capacity": "[variables('additionalLocations')[copyIndex('additionalLocations')].capacity]"
                              },
                              "virtualNetworkConfiguration": "[if(equals(parameters('apim').VirtualNetworkType, 'None'), null(), createObject('subnetResourceId', resourceId(replace(resourceGroup().name, parameters('Prefix'), variables('additionalLocations')[copyIndex('additionalLocations')].prefix), 'Microsoft.Network/virtualNetworks/subnets', format('{0}-vn', replace(parameters('Deployment'), parameters('Prefix'), variables('additionalLocations')[copyIndex('additionalLocations')].prefix)), variables('additionalLocations')[copyIndex('additionalLocations')].snName)))]",
                              "zones": "[if(and(contains(parameters('apim'), 'zone'), bool(parameters('apim').zone)), take(variables('availabilityZones'), variables('additionalLocations')[copyIndex('additionalLocations')].capacity), null())]"
                            }
                          }
                        ],
                        "publicNetworkAccess": "[if(and(contains(parameters('apim'), 'publicAccess'), not(bool(parameters('apim').publicAccess))), 'Disabled', 'Enabled')]",
                        "publisherEmail": "[parameters('Global').apimPublisherEmail]",
                        "publisherName": "[parameters('Global').apimPublisherEmail]",
                        "customProperties": {
                          "subnetAddress": "[reference(format('{0}/subnets/{1}', variables('VnetID'), parameters('apim').snName), '2015-06-15').addressprefix]"
                        },
                        "publicIpAddressId": "[if(equals(parameters('apim').VirtualNetworkType, 'None'), null(), if(and(contains(parameters('apim'), 'zone'), bool(parameters('apim').zone)), reference(resourceId('Microsoft.Resources/deployments', format('dp{0}-LB-publicIPDeploy-apim{1}', parameters('Deployment'), parameters('apim').Name)), '2020-10-01').outputs.PIPID.value[sub(parameters('apim').capacity, 1)], null()))]",
                        "virtualNetworkType": "[parameters('apim').VirtualNetworkType]",
                        "virtualNetworkConfiguration": "[if(equals(parameters('apim').VirtualNetworkType, 'None'), null(), createObject('subnetResourceId', format('{0}/subnets/{1}', variables('VnetID'), parameters('apim').snName)))]",
                        "hostnameConfigurations": [
                          {
                            "type": "Proxy",
                            "hostName": "[if(contains(parameters('apim'), 'frontDoor'), toLower(format('{0}-afd{1}-apim{2}.{3}', parameters('Deployment'), parameters('apim').frontDoor, parameters('apim').name, parameters('Global').DomainNameExt)), toLower(format('{0}.{1}', variables('apimName'), parameters('Global').DomainNameExt)))]",
                            "identityClientId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-uaiKeyVaultSecretsGet', parameters('Deployment'))), '2018-11-30').clientId]",
                            "keyVaultId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubRGName')), 'Microsoft.KeyVault/vaults/secrets', variables('HubKVName'), parameters('Global').CertName), '2021-06-01-preview').secretUri]"
                          },
                          {
                            "type": "DeveloperPortal",
                            "hostName": "[if(contains(parameters('apim'), 'frontDoor'), toLower(format('{0}-afd{1}-apim{2}-developer.{3}', parameters('Deployment'), parameters('apim').frontDoor, parameters('apim').name, parameters('Global').DomainNameExt)), toLower(format('{0}-developer.{1}', variables('apimName'), parameters('Global').DomainNameExt)))]",
                            "identityClientId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-uaiKeyVaultSecretsGet', parameters('Deployment'))), '2018-11-30').clientId]",
                            "keyVaultId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubRGName')), 'Microsoft.KeyVault/vaults/secrets', variables('HubKVName'), parameters('Global').CertName), '2021-06-01-preview').secretUri]"
                          },
                          {
                            "type": "Scm",
                            "hostName": "[if(contains(parameters('apim'), 'frontDoor'), toLower(format('{0}-afd{1}-apim{2}-scm.{3}', parameters('Deployment'), parameters('apim').frontDoor, parameters('apim').name, parameters('Global').DomainNameExt)), toLower(format('{0}-scm.{1}', variables('apimName'), parameters('Global').DomainNameExt)))]",
                            "identityClientId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-uaiKeyVaultSecretsGet', parameters('Deployment'))), '2018-11-30').clientId]",
                            "keyVaultId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubRGName')), 'Microsoft.KeyVault/vaults/secrets', variables('HubKVName'), parameters('Global').CertName), '2021-06-01-preview').secretUri]"
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-LB-publicIPDeploy-apim{1}', parameters('Deployment'), parameters('apim').Name))]",
                        "PublicIPAdditional"
                      ]
                    },
                    {
                      "type": "Microsoft.ApiManagement/service/loggers",
                      "apiVersion": "2021-01-01-preview",
                      "name": "[format('{0}/{1}', variables('apimName'), variables('AppInsightsName'))]",
                      "properties": {
                        "loggerType": "applicationInsights",
                        "description": "Application Insights logger",
                        "credentials": {
                          "instrumentationKey": "[reference(resourceId('Microsoft.Insights/components', variables('AppInsightsName')), '2020-02-02').InstrumentationKey]"
                        },
                        "isBuffered": true,
                        "resourceId": "[resourceId('microsoft.insights/components', variables('AppInsightsName'))]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ApiManagement/service', variables('apimName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.ApiManagement/service/diagnostics",
                      "apiVersion": "2021-01-01-preview",
                      "name": "[format('{0}/{1}', variables('apimName'), 'applicationinsights')]",
                      "properties": {
                        "loggerId": "[resourceId('Microsoft.ApiManagement/service/loggers', variables('apimName'), variables('AppInsightsName'))]",
                        "alwaysLog": "allErrors",
                        "logClientIp": true,
                        "httpCorrelationProtocol": "Legacy",
                        "sampling": {
                          "percentage": 100,
                          "samplingType": "fixed"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ApiManagement/service', variables('apimName'))]",
                        "[resourceId('Microsoft.ApiManagement/service/loggers', variables('apimName'), variables('AppInsightsName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.ApiManagement/service/diagnostics/loggers",
                      "apiVersion": "2018-01-01",
                      "name": "[format('{0}/{1}/{2}', variables('apimName'), 'applicationinsights', variables('AppInsightsName'))]",
                      "dependsOn": [
                        "[resourceId('Microsoft.ApiManagement/service', variables('apimName'))]",
                        "[resourceId('Microsoft.ApiManagement/service/loggers', variables('apimName'), variables('AppInsightsName'))]",
                        "[resourceId('Microsoft.ApiManagement/service/diagnostics', variables('apimName'), 'applicationinsights')]"
                      ]
                    },
                    {
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.ApiManagement/service/{0}', variables('apimName'))]",
                      "name": "service",
                      "properties": {
                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                        "logs": [
                          {
                            "category": "GatewayLogs",
                            "enabled": true,
                            "retentionPolicy": {
                              "days": 30,
                              "enabled": false
                            }
                          }
                        ],
                        "metrics": [
                          {
                            "timeGrain": "PT5M",
                            "enabled": true,
                            "retentionPolicy": {
                              "enabled": false,
                              "days": 0
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ApiManagement/service', variables('apimName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.ApiManagement/service/certificates",
                      "apiVersion": "2020-06-01-preview",
                      "name": "[format('{0}/{1}', variables('apimName'), 'WildcardCert')]",
                      "properties": {
                        "keyVault": {
                          "secretIdentifier": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubRGName')), 'Microsoft.KeyVault/vaults/secrets', variables('HubKVName'), parameters('Global').CertName), '2021-06-01-preview').secretUri]",
                          "identityClientId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-uaiKeyVaultSecretsGet', parameters('Deployment'))), '2018-11-30').clientId]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ApiManagement/service', variables('apimName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.ApiManagement/service/products",
                      "apiVersion": "2020-06-01-preview",
                      "name": "[format('{0}/{1}', variables('apimName'), 'Public')]",
                      "properties": {
                        "subscriptionRequired": false,
                        "state": "published",
                        "displayName": "Public"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ApiManagement/service', variables('apimName'))]"
                      ]
                    },
                    {
                      "condition": "[and(and(not(equals(parameters('apim').VirtualNetworkType, 'None')), contains(parameters('apim'), 'zone')), bool(parameters('apim').zone))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-LB-publicIPDeploy-apim{1}', parameters('Deployment'), parameters('apim').Name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[parameters('Deployment')]"
                          },
                          "DeploymentURI": {
                            "value": "[parameters('DeploymentURI')]"
                          },
                          "NICs": {
                            "copy": [
                              {
                                "name": "value",
                                "count": "[length(range(1, 3))]",
                                "input": "[createObject('PublicIP', if(equals(range(1, 3)[copyIndex('value')], parameters('apim').capacity), 'Static', null()))]"
                              }
                            ]
                          },
                          "VM": {
                            "value": "[parameters('apim')]"
                          },
                          "PIPprefix": {
                            "value": "apim"
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "18109364379899578760"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "DeploymentURI": {
                              "type": "string"
                            },
                            "PIPprefix": {
                              "type": "string"
                            },
                            "NICs": {
                              "type": "array"
                            },
                            "VM": {
                              "type": "object"
                            },
                            "Global": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "condition": "[and(contains(parameters('NICs')[copyIndex()], 'PublicIP'), not(equals(parameters('NICs')[copyIndex()].PublicIP, null())))]",
                              "copy": {
                                "name": "PublicIP",
                                "count": "[length(parameters('NICs'))]"
                              },
                              "type": "Microsoft.Network/publicIPAddresses",
                              "apiVersion": "2021-02-01",
                              "name": "[format('{0}-{1}{2}-publicip{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1))]",
                              "location": "[resourceGroup().location]",
                              "sku": {
                                "name": "[if(contains(parameters('VM'), 'Zone'), 'Standard', 'Basic')]"
                              },
                              "properties": {
                                "publicIPAllocationMethod": "[parameters('NICs')[copyIndex()].PublicIP]",
                                "dnsSettings": {
                                  "domainNameLabel": "[toLower(format('{0}-{1}{2}-{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1)))]"
                                }
                              }
                            },
                            {
                              "condition": "[and(contains(parameters('NICs')[copyIndex()], 'PublicIP'), not(equals(parameters('NICs')[copyIndex()].PublicIP, null())))]",
                              "copy": {
                                "name": "PublicIPDiag",
                                "count": "[length(parameters('NICs'))]"
                              },
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2017-05-01-preview",
                              "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', format('{0}-{1}{2}-publicip{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1)))]",
                              "name": "service",
                              "properties": {
                                "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                                "logs": [
                                  {
                                    "category": "DDoSProtectionNotifications",
                                    "enabled": true
                                  }
                                ],
                                "metrics": [
                                  {
                                    "timeGrain": "PT5M",
                                    "enabled": true,
                                    "retentionPolicy": {
                                      "enabled": false,
                                      "days": 0
                                    }
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/publicIPAddresses', format('{0}-{1}{2}-publicip{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1)))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "PIPID": {
                              "type": "array",
                              "copy": {
                                "count": "[length(parameters('NICs'))]",
                                "input": "[if(and(contains(parameters('NICs')[copyIndex()], 'PublicIP'), not(equals(parameters('NICs')[copyIndex()].PublicIP, null()))), resourceId('Microsoft.Network/publicIPAddresses', format('{0}-{1}{2}-publicip{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1))), '')]"
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "condition": "[and(and(not(equals(parameters('apim').VirtualNetworkType, 'None')), contains(parameters('apim'), 'zone')), bool(parameters('apim').zone))]",
                      "copy": {
                        "name": "PublicIPAdditional",
                        "count": "[length(variables('additionalLocations'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-LB-publicIPDeploy-apim{1}', replace(parameters('Deployment'), parameters('Prefix'), variables('additionalLocations')[copyIndex()].prefix), parameters('apim').Name)]",
                      "resourceGroup": "[replace(resourceGroup().name, parameters('Prefix'), variables('additionalLocations')[copyIndex()].prefix)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[replace(parameters('Deployment'), parameters('Prefix'), variables('additionalLocations')[copyIndex()].prefix)]"
                          },
                          "DeploymentURI": {
                            "value": "[replace(parameters('DeploymentURI'), toLower(parameters('Prefix')), toLower(variables('additionalLocations')[copyIndex()].prefix))]"
                          },
                          "NICs": {
                            "copy": [
                              {
                                "name": "value",
                                "count": "[length(range(1, 3))]",
                                "input": "[createObject('PublicIP', if(equals(range(1, 3)[copyIndex('value')], variables('additionalLocations')[copyIndex()].capacity), 'Static', null()))]"
                              }
                            ]
                          },
                          "VM": {
                            "value": "[parameters('apim')]"
                          },
                          "PIPprefix": {
                            "value": "apim"
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "18109364379899578760"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "DeploymentURI": {
                              "type": "string"
                            },
                            "PIPprefix": {
                              "type": "string"
                            },
                            "NICs": {
                              "type": "array"
                            },
                            "VM": {
                              "type": "object"
                            },
                            "Global": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "condition": "[and(contains(parameters('NICs')[copyIndex()], 'PublicIP'), not(equals(parameters('NICs')[copyIndex()].PublicIP, null())))]",
                              "copy": {
                                "name": "PublicIP",
                                "count": "[length(parameters('NICs'))]"
                              },
                              "type": "Microsoft.Network/publicIPAddresses",
                              "apiVersion": "2021-02-01",
                              "name": "[format('{0}-{1}{2}-publicip{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1))]",
                              "location": "[resourceGroup().location]",
                              "sku": {
                                "name": "[if(contains(parameters('VM'), 'Zone'), 'Standard', 'Basic')]"
                              },
                              "properties": {
                                "publicIPAllocationMethod": "[parameters('NICs')[copyIndex()].PublicIP]",
                                "dnsSettings": {
                                  "domainNameLabel": "[toLower(format('{0}-{1}{2}-{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1)))]"
                                }
                              }
                            },
                            {
                              "condition": "[and(contains(parameters('NICs')[copyIndex()], 'PublicIP'), not(equals(parameters('NICs')[copyIndex()].PublicIP, null())))]",
                              "copy": {
                                "name": "PublicIPDiag",
                                "count": "[length(parameters('NICs'))]"
                              },
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2017-05-01-preview",
                              "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', format('{0}-{1}{2}-publicip{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1)))]",
                              "name": "service",
                              "properties": {
                                "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                                "logs": [
                                  {
                                    "category": "DDoSProtectionNotifications",
                                    "enabled": true
                                  }
                                ],
                                "metrics": [
                                  {
                                    "timeGrain": "PT5M",
                                    "enabled": true,
                                    "retentionPolicy": {
                                      "enabled": false,
                                      "days": 0
                                    }
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/publicIPAddresses', format('{0}-{1}{2}-publicip{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1)))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "PIPID": {
                              "type": "array",
                              "copy": {
                                "count": "[length(parameters('NICs'))]",
                                "input": "[if(and(contains(parameters('NICs')[copyIndex()], 'PublicIP'), not(equals(parameters('NICs')[copyIndex()].PublicIP, null()))), resourceId('Microsoft.Network/publicIPAddresses', format('{0}-{1}{2}-publicip{3}', parameters('Deployment'), parameters('PIPprefix'), parameters('VM').Name, add(copyIndex(), 1))), '')]"
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "condition": "[bool(parameters('Stage').SetExternalDNS)]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('setdns-public-{0}-apim-{1}-{2}', parameters('Deployment'), parameters('apim').name, parameters('Global').DomainNameExt)]",
                      "subscriptionId": "[if(contains(parameters('Global'), 'DomainNameExtSubscriptionID'), parameters('Global').DomainNameExtSubscriptionID, subscription().subscriptionId)]",
                      "resourceGroup": "[if(contains(parameters('Global'), 'DomainNameExtRG'), parameters('Global').DomainNameExtRG, variables('globalRGName'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "hostname": {
                            "value": "[toLower(variables('apimName'))]"
                          },
                          "cname": {
                            "value": "[toLower(format('{0}.azure-api.net', variables('apimName')))]"
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "2861540136838094664"
                            }
                          },
                          "parameters": {
                            "hostname": {
                              "type": "string"
                            },
                            "cname": {
                              "type": "string"
                            },
                            "Global": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/dnsZones/CNAME",
                              "apiVersion": "2018-05-01",
                              "name": "[format('{0}/{1}', parameters('Global').DomainNameExt, parameters('hostname'))]",
                              "properties": {
                                "TTL": 3600,
                                "metadata": {},
                                "CNAMERecord": {
                                  "cname": "[parameters('cname')]"
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ApiManagement/service', variables('apimName'))]"
                      ]
                    },
                    {
                      "condition": "[bool(parameters('Stage').SetExternalDNS)]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('setdns-public-{0}-apim-{1}-{2}-scm', parameters('Deployment'), parameters('apim').name, parameters('Global').DomainNameExt)]",
                      "subscriptionId": "[if(contains(parameters('Global'), 'DomainNameExtSubscriptionID'), parameters('Global').DomainNameExtSubscriptionID, subscription().subscriptionId)]",
                      "resourceGroup": "[if(contains(parameters('Global'), 'DomainNameExtRG'), parameters('Global').DomainNameExtRG, variables('globalRGName'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "hostname": {
                            "value": "[toLower(format('{0}-scm', variables('apimName')))]"
                          },
                          "cname": {
                            "value": "[toLower(format('{0}.azure-api.net', variables('apimName')))]"
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "2861540136838094664"
                            }
                          },
                          "parameters": {
                            "hostname": {
                              "type": "string"
                            },
                            "cname": {
                              "type": "string"
                            },
                            "Global": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/dnsZones/CNAME",
                              "apiVersion": "2018-05-01",
                              "name": "[format('{0}/{1}', parameters('Global').DomainNameExt, parameters('hostname'))]",
                              "properties": {
                                "TTL": 3600,
                                "metadata": {},
                                "CNAMERecord": {
                                  "cname": "[parameters('cname')]"
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ApiManagement/service', variables('apimName'))]"
                      ]
                    },
                    {
                      "condition": "[bool(parameters('Stage').SetExternalDNS)]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('setdns-public-{0}-apim-{1}-{2}-developer', parameters('Deployment'), parameters('apim').name, parameters('Global').DomainNameExt)]",
                      "subscriptionId": "[if(contains(parameters('Global'), 'DomainNameExtSubscriptionID'), parameters('Global').DomainNameExtSubscriptionID, subscription().subscriptionId)]",
                      "resourceGroup": "[if(contains(parameters('Global'), 'DomainNameExtRG'), parameters('Global').DomainNameExtRG, variables('globalRGName'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "hostname": {
                            "value": "[toLower(format('{0}-developer', variables('apimName')))]"
                          },
                          "cname": {
                            "value": "[toLower(format('{0}.azure-api.net', variables('apimName')))]"
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "2861540136838094664"
                            }
                          },
                          "parameters": {
                            "hostname": {
                              "type": "string"
                            },
                            "cname": {
                              "type": "string"
                            },
                            "Global": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/dnsZones/CNAME",
                              "apiVersion": "2018-05-01",
                              "name": "[format('{0}/{1}', parameters('Global').DomainNameExt, parameters('hostname'))]",
                              "properties": {
                                "TTL": 3600,
                                "metadata": {},
                                "CNAMERecord": {
                                  "cname": "[parameters('cname')]"
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ApiManagement/service', variables('apimName'))]"
                      ]
                    },
                    {
                      "condition": "[bool(parameters('Stage').SetInternalDNS)]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('private-A-{0}-apim-{1}-{2}-proxy', parameters('Deployment'), parameters('apim').name, parameters('Global').DomainName)]",
                      "subscriptionId": "[subscription().subscriptionId]",
                      "resourceGroup": "[variables('HubRGName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "hostname": {
                            "value": "[toLower(format('{0}-proxy', variables('apimName')))]"
                          },
                          "ipv4Address": {
                            "value": "[string(if(equals(parameters('apim').virtualNetworkType, 'Internal'), reference(resourceId('Microsoft.ApiManagement/service', variables('apimName'))).privateIPAddresses[0], reference(resourceId('Microsoft.ApiManagement/service', variables('apimName'))).publicIPAddresses[0]))]"
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "10691699643089507811"
                            }
                          },
                          "parameters": {
                            "hostname": {
                              "type": "string"
                            },
                            "ipv4Address": {
                              "type": "string"
                            },
                            "Global": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateDnsZones/A",
                              "apiVersion": "2020-06-01",
                              "name": "[format('{0}/{1}', parameters('Global').DomainName, parameters('hostname'))]",
                              "properties": {
                                "ttl": 3600,
                                "metadata": {},
                                "aRecords": [
                                  {
                                    "ipv4Address": "[parameters('ipv4Address')]"
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ApiManagement/service', variables('apimName'))]"
                      ]
                    },
                    {
                      "condition": "[bool(parameters('Stage').SetInternalDNS)]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('private-CNAME-{0}-apim-{1}-{2}', parameters('Deployment'), parameters('apim').name, parameters('Global').DomainName)]",
                      "subscriptionId": "[subscription().subscriptionId]",
                      "resourceGroup": "[variables('HubRGName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "hostname": {
                            "value": "[toLower(format('{0}{1}-apim{2}', parameters('Deployment'), if(contains(parameters('apim'), 'frontDoor'), format('-afd{0}', parameters('apim').frontDoor), ''), parameters('apim').name))]"
                          },
                          "cname": {
                            "value": "[toLower(format('{0}-proxy.{1}', variables('apimName'), parameters('Global').DomainName))]"
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "7023464365144402343"
                            }
                          },
                          "parameters": {
                            "hostname": {
                              "type": "string"
                            },
                            "cname": {
                              "type": "string"
                            },
                            "Global": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateDnsZones/CNAME",
                              "apiVersion": "2020-06-01",
                              "name": "[format('{0}/{1}', parameters('Global').DomainName, parameters('hostname'))]",
                              "properties": {
                                "metadata": {},
                                "ttl": 3600,
                                "cnameRecord": {
                                  "cname": "[parameters('cname')]"
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ApiManagement/service', variables('apimName'))]"
                      ]
                    },
                    {
                      "condition": "[bool(parameters('Stage').SetInternalDNS)]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('private-CNAME-{0}-apim-{1}-{2}-developer', parameters('Deployment'), parameters('apim').name, parameters('Global').DomainName)]",
                      "subscriptionId": "[subscription().subscriptionId]",
                      "resourceGroup": "[variables('HubRGName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "hostname": {
                            "value": "[toLower(format('{0}{1}-apim{2}-developer', parameters('Deployment'), if(contains(parameters('apim'), 'frontDoor'), format('-afd{0}', parameters('apim').frontDoor), ''), parameters('apim').name))]"
                          },
                          "cname": {
                            "value": "[toLower(format('{0}-proxy.{1}', variables('apimName'), parameters('Global').DomainName))]"
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "7023464365144402343"
                            }
                          },
                          "parameters": {
                            "hostname": {
                              "type": "string"
                            },
                            "cname": {
                              "type": "string"
                            },
                            "Global": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateDnsZones/CNAME",
                              "apiVersion": "2020-06-01",
                              "name": "[format('{0}/{1}', parameters('Global').DomainName, parameters('hostname'))]",
                              "properties": {
                                "metadata": {},
                                "ttl": 3600,
                                "cnameRecord": {
                                  "cname": "[parameters('cname')]"
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ApiManagement/service', variables('apimName'))]"
                      ]
                    },
                    {
                      "condition": "[bool(parameters('Stage').SetInternalDNS)]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('private-CNAME-{0}-apim-{1}-{2}-scm', parameters('Deployment'), parameters('apim').name, parameters('Global').DomainName)]",
                      "subscriptionId": "[subscription().subscriptionId]",
                      "resourceGroup": "[variables('HubRGName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "hostname": {
                            "value": "[toLower(format('{0}{1}-apim{2}-scm', parameters('Deployment'), if(contains(parameters('apim'), 'frontDoor'), format('-afd{0}', parameters('apim').frontDoor), ''), parameters('apim').name))]"
                          },
                          "cname": {
                            "value": "[toLower(format('{0}-proxy.{1}', variables('apimName'), parameters('Global').DomainName))]"
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "7023464365144402343"
                            }
                          },
                          "parameters": {
                            "hostname": {
                              "type": "string"
                            },
                            "cname": {
                              "type": "string"
                            },
                            "Global": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateDnsZones/CNAME",
                              "apiVersion": "2020-06-01",
                              "name": "[format('{0}/{1}', parameters('Global').DomainName, parameters('hostname'))]",
                              "properties": {
                                "metadata": {},
                                "ttl": 3600,
                                "cnameRecord": {
                                  "cname": "[parameters('cname')]"
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ApiManagement/service', variables('apimName'))]"
                      ]
                    },
                    {
                      "condition": "[contains(parameters('apim'), 'privatelinkinfo')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-APIM-privatelinkloop-{1}', parameters('Deployment'), parameters('apim').name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[parameters('Deployment')]"
                          },
                          "DeploymentURI": {
                            "value": "[parameters('DeploymentURI')]"
                          },
                          "PrivateLinkInfo": {
                            "value": "[parameters('apim').privateLinkInfo]"
                          },
                          "providerType": {
                            "value": "Microsoft.ApiManagement/service"
                          },
                          "resourceName": {
                            "value": "[variables('apimName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "1242957729837230630"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "DeploymentURI": {
                              "type": "string"
                            },
                            "PrivateLinkInfo": {
                              "type": "array"
                            },
                            "providerType": {
                              "type": "string"
                            },
                            "resourceName": {
                              "type": "string"
                            },
                            "resourceRG": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().name]"
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "privateLink",
                                "count": "[length(parameters('PrivateLinkInfo'))]",
                                "input": {
                                  "name": "[format('{0}-pl{1}', parameters('Deployment'), parameters('PrivateLinkInfo')[copyIndex('privateLink')].Subnet)]",
                                  "vNet": "[format('{0}-vn', parameters('Deployment'))]"
                                }
                              }
                            ]
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "subnetPrivateEndpoint",
                                "count": "[length(parameters('PrivateLinkInfo'))]"
                              },
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2019-11-01",
                              "name": "[format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet)]",
                              "location": "[resourceGroup().location]",
                              "properties": {
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet)]",
                                    "properties": {
                                      "privateLinkServiceId": "[resourceId(parameters('resourceRG'), parameters('providerType'), parameters('resourceName'))]",
                                      "groupIds": "[array(parameters('PrivateLinkInfo')[copyIndex()].groupID)]",
                                      "privateLinkServiceConnectionState": {
                                        "status": "Approved",
                                        "description": "Auto-Approved",
                                        "actionsRequired": "None"
                                      }
                                    }
                                  }
                                ],
                                "manualPrivateLinkServiceConnections": [],
                                "subnet": {
                                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('privateLink')[copyIndex()].vNet, parameters('PrivateLinkInfo')[copyIndex()].Subnet)]"
                                }
                              }
                            },
                            {
                              "copy": {
                                "name": "NICDiags",
                                "count": "[length(parameters('PrivateLinkInfo'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('dp-{0}-pl-{1}-{2}-diags', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet)]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "DeploymentURI": {
                                    "value": "[parameters('DeploymentURI')]"
                                  },
                                  "NICName": {
                                    "value": "[last(split(reference(resourceId('Microsoft.Network/privateEndpoints', format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet))).networkInterfaces[0].id, '/'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.4.1318.3566",
                                      "templateHash": "3372180053977311610"
                                    }
                                  },
                                  "parameters": {
                                    "DeploymentURI": {
                                      "type": "string"
                                    },
                                    "NICName": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', parameters('NICName'))]",
                                      "name": "service",
                                      "properties": {
                                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                                        "metrics": [
                                          {
                                            "timeGrain": "PT5M",
                                            "enabled": true,
                                            "retentionPolicy": {
                                              "enabled": false,
                                              "days": 0
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "NICID": {
                              "type": "array",
                              "copy": {
                                "count": "[length(parameters('PrivateLinkInfo'))]",
                                "input": "[reference(resourceId('Microsoft.Network/privateEndpoints', format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet))).networkInterfaces[0].id]"
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ApiManagement/service', variables('apimName'))]"
                      ]
                    },
                    {
                      "condition": "[contains(parameters('apim'), 'privatelinkinfo')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-APIM-registerPrivateDNS-{1}', parameters('Deployment'), parameters('apim').name)]",
                      "resourceGroup": "[variables('HubRGName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "PrivateLinkInfo": {
                            "value": "[parameters('apim').privateLinkInfo]"
                          },
                          "providerURL": {
                            "value": "net"
                          },
                          "providerType": {
                            "value": "Microsoft.ApiManagement/service"
                          },
                          "resourceName": {
                            "value": "[variables('apimName')]"
                          },
                          "Nics": {
                            "value": "[if(and(contains(parameters('apim'), 'privatelinkinfo'), not(equals(length(parameters('apim')), 0))), array(reference(resourceId('Microsoft.Resources/deployments', format('dp{0}-APIM-privatelinkloop-{1}', parameters('Deployment'), parameters('apim').name)), '2020-10-01').outputs.NICID.value), array(''))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "9527034148045878947"
                            }
                          },
                          "parameters": {
                            "PrivateLinkInfo": {
                              "type": "array"
                            },
                            "resourceName": {
                              "type": "string"
                            },
                            "providerURL": {
                              "type": "string"
                            },
                            "providerType": {
                              "type": "string"
                            },
                            "Nics": {
                              "type": "array"
                            }
                          },
                          "variables": {
                            "DNSLookup": {
                              "Microsoft.AzureCosmosDB/databaseAccounts/SQL": "documents",
                              "Microsoft.AzureCosmosDB/databaseAccounts/MongoDB": "mongo.cosmos",
                              "Microsoft.AzureCosmosDB/databaseAccounts/Cassandra": "cassandra.cosmos",
                              "Microsoft.AzureCosmosDB/databaseAccounts/Gremlin": "gremlin.cosmos",
                              "Microsoft.AzureCosmosDB/databaseAccounts/Table": "table.cosmos",
                              "Microsoft.KeyVault/vaults": "vaultcore",
                              "Microsoft.DBforMySQL/servers": "mysql",
                              "Microsoft.DBforMariaDB/servers": "mariadb",
                              "Microsoft.AppConfiguration/configurationStores": "azconfig",
                              "Microsoft.ServiceBus/namespaces": "servicebus",
                              "Microsoft.Sql/servers": "database",
                              "Microsoft.Cache/redis": "redis.cache",
                              "Microsoft.Web/sites": "azurewebsites",
                              "Microsoft.Synapse/workspaces": "sql",
                              "Microsoft.ApiManagement/service": "azure-api"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "privateLinkDNS",
                                "count": "[length(parameters('PrivateLinkInfo'))]"
                              },
                              "type": "Microsoft.Network/privateDnsZones/A",
                              "apiVersion": "2020-06-01",
                              "name": "[format('privatelink.{0}.{1}/{2}', if(contains(variables('DNSLookup'), parameters('providerType')), variables('DNSLookup')[parameters('providerType')], parameters('PrivateLinkInfo')[copyIndex()].groupID), parameters('providerURL'), parameters('resourceName'))]",
                              "properties": {
                                "ttl": 3600,
                                "aRecords": [
                                  {
                                    "ipv4Address": "[reference(parameters('Nics')[copyIndex()], '2018-05-01').ipConfigurations[0].properties.privateIPAddress]"
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ApiManagement/service', variables('apimName'))]",
                        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-APIM-privatelinkloop-{1}', parameters('Deployment'), parameters('apim').name))]"
                      ]
                    },
                    {
                      "condition": "[and(equals(parameters('apim').VirtualNetworkType, 'None'), contains(variables('additionalLocations')[copyIndex()], 'privatelinkinfo'))]",
                      "copy": {
                        "name": "vnetPrivateLinkAdditional",
                        "count": "[length(variables('additionalLocations'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-APIM-privatelinkloop-{1}', replace(parameters('Deployment'), parameters('Prefix'), variables('additionalLocations')[copyIndex()].prefix), parameters('apim').name)]",
                      "resourceGroup": "[replace(resourceGroup().name, parameters('Prefix'), variables('additionalLocations')[copyIndex()].prefix)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[replace(parameters('Deployment'), parameters('Prefix'), variables('additionalLocations')[copyIndex()].prefix)]"
                          },
                          "DeploymentURI": {
                            "value": "[replace(parameters('DeploymentURI'), toLower(parameters('Prefix')), toLower(variables('additionalLocations')[copyIndex()].prefix))]"
                          },
                          "PrivateLinkInfo": {
                            "value": "[parameters('apim').privateLinkInfo]"
                          },
                          "providerType": {
                            "value": "Microsoft.ApiManagement/service"
                          },
                          "resourceName": {
                            "value": "[variables('apimName')]"
                          },
                          "resourceRG": {
                            "value": "[resourceGroup().name]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "1242957729837230630"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "DeploymentURI": {
                              "type": "string"
                            },
                            "PrivateLinkInfo": {
                              "type": "array"
                            },
                            "providerType": {
                              "type": "string"
                            },
                            "resourceName": {
                              "type": "string"
                            },
                            "resourceRG": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().name]"
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "privateLink",
                                "count": "[length(parameters('PrivateLinkInfo'))]",
                                "input": {
                                  "name": "[format('{0}-pl{1}', parameters('Deployment'), parameters('PrivateLinkInfo')[copyIndex('privateLink')].Subnet)]",
                                  "vNet": "[format('{0}-vn', parameters('Deployment'))]"
                                }
                              }
                            ]
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "subnetPrivateEndpoint",
                                "count": "[length(parameters('PrivateLinkInfo'))]"
                              },
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2019-11-01",
                              "name": "[format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet)]",
                              "location": "[resourceGroup().location]",
                              "properties": {
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet)]",
                                    "properties": {
                                      "privateLinkServiceId": "[resourceId(parameters('resourceRG'), parameters('providerType'), parameters('resourceName'))]",
                                      "groupIds": "[array(parameters('PrivateLinkInfo')[copyIndex()].groupID)]",
                                      "privateLinkServiceConnectionState": {
                                        "status": "Approved",
                                        "description": "Auto-Approved",
                                        "actionsRequired": "None"
                                      }
                                    }
                                  }
                                ],
                                "manualPrivateLinkServiceConnections": [],
                                "subnet": {
                                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('privateLink')[copyIndex()].vNet, parameters('PrivateLinkInfo')[copyIndex()].Subnet)]"
                                }
                              }
                            },
                            {
                              "copy": {
                                "name": "NICDiags",
                                "count": "[length(parameters('PrivateLinkInfo'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('dp-{0}-pl-{1}-{2}-diags', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet)]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "DeploymentURI": {
                                    "value": "[parameters('DeploymentURI')]"
                                  },
                                  "NICName": {
                                    "value": "[last(split(reference(resourceId('Microsoft.Network/privateEndpoints', format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet))).networkInterfaces[0].id, '/'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.4.1318.3566",
                                      "templateHash": "3372180053977311610"
                                    }
                                  },
                                  "parameters": {
                                    "DeploymentURI": {
                                      "type": "string"
                                    },
                                    "NICName": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', parameters('NICName'))]",
                                      "name": "service",
                                      "properties": {
                                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                                        "metrics": [
                                          {
                                            "timeGrain": "PT5M",
                                            "enabled": true,
                                            "retentionPolicy": {
                                              "enabled": false,
                                              "days": 0
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "NICID": {
                              "type": "array",
                              "copy": {
                                "count": "[length(parameters('PrivateLinkInfo'))]",
                                "input": "[reference(resourceId('Microsoft.Network/privateEndpoints', format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet))).networkInterfaces[0].id]"
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ApiManagement/service', variables('apimName'))]"
                      ]
                    }
                  ]
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-OMS', variables('Deployment')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-VNET', variables('Deployment')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-VNETDNSDC2', variables('Deployment')))]"
      ]
    },
    {
      "condition": "[bool(parameters('Stage').FRONTDOOR)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('dp{0}-FRONTDOOR', variables('Deployment'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "DeploymentID": {
            "value": "[parameters('DeploymentID')]"
          },
          "DeploymentInfo": {
            "value": "[parameters('DeploymentInfo')]"
          },
          "Environment": {
            "value": "[parameters('Environment')]"
          },
          "Extensions": {
            "value": "[parameters('Extensions')]"
          },
          "Global": {
            "value": "[parameters('Global')]"
          },
          "Prefix": {
            "value": "[parameters('Prefix')]"
          },
          "Stage": {
            "value": "[parameters('Stage')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "10144688979991311841"
            }
          },
          "parameters": {
            "Prefix": {
              "type": "string"
            },
            "Environment": {
              "type": "string",
              "defaultValue": "D",
              "allowedValues": [
                "I",
                "D",
                "T",
                "U",
                "P",
                "S",
                "G",
                "A"
              ]
            },
            "DeploymentID": {
              "type": "string",
              "defaultValue": "1",
              "allowedValues": [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9"
              ]
            },
            "Stage": {
              "type": "object"
            },
            "Extensions": {
              "type": "object"
            },
            "Global": {
              "type": "object"
            },
            "DeploymentInfo": {
              "type": "object"
            }
          },
          "variables": {
            "copy": [
              {
                "name": "frontDoor",
                "count": "[length(variables('frontDoorInfo'))]",
                "input": {
                  "match": "[or(equals(parameters('Global').CN, '.'), contains(array(parameters('Global').CN), variables('frontDoorInfo')[copyIndex('frontDoor')].Name))]"
                }
              }
            ],
            "Deployment": "[format('{0}-{1}-{2}-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID'))]",
            "DeploymentURI": "[toLower(format('{0}{1}{2}{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID')))]",
            "regionLookup": "[json('{\r\n  \"francecentral\": {\r\n    \"displayname\": \"France Central\",\r\n    \"location\": \"francecentral\",\r\n    \"PREFIX\": \"AFC1\",\r\n    \"pairedRegion\": \"francesouth\"\r\n  },\r\n  \"southeastasia\": {\r\n    \"displayname\": \"Southeast Asia\",\r\n    \"location\": \"southeastasia\",\r\n    \"PREFIX\": \"ASA1\",\r\n    \"pairedRegion\": \"eastasia\"\r\n  },\r\n  \"southafricawest\": {\r\n    \"displayname\": \"South Africa West\",\r\n    \"location\": \"southafricawest\",\r\n    \"PREFIX\": \"ASAW\",\r\n    \"pairedRegion\": \"southafricanorth\"\r\n  },\r\n  \"eastus2\": {\r\n    \"displayname\": \"East US 2\",\r\n    \"location\": \"eastus2\",\r\n    \"PREFIX\": \"AEU2\",\r\n    \"pairedRegion\": \"centralus\"\r\n  },\r\n  \"eastus\": {\r\n    \"displayname\": \"East US\",\r\n    \"location\": \"eastus\",\r\n    \"PREFIX\": \"AEU1\",\r\n    \"pairedRegion\": \"westus\"\r\n  },\r\n  \"jioindiawest\": {\r\n    \"displayname\": \"Jio India West\",\r\n    \"location\": \"jioindiawest\",\r\n    \"PREFIX\": \"AJIW\",\r\n    \"pairedRegion\": \"jioindiacentral\"\r\n  },\r\n  \"westcentralus\": {\r\n    \"displayname\": \"West Central US\",\r\n    \"location\": \"westcentralus\",\r\n    \"PREFIX\": \"AWCU\",\r\n    \"pairedRegion\": \"westus2\"\r\n  },\r\n  \"koreacentral\": {\r\n    \"displayname\": \"Korea Central\",\r\n    \"location\": \"koreacentral\",\r\n    \"PREFIX\": \"AKC1\",\r\n    \"pairedRegion\": \"koreasouth\"\r\n  },\r\n  \"uaecentral\": {\r\n    \"displayname\": \"UAE Central\",\r\n    \"location\": \"uaecentral\",\r\n    \"PREFIX\": \"AUC1\",\r\n    \"pairedRegion\": \"uaenorth\"\r\n  },\r\n  \"westus\": {\r\n    \"displayname\": \"West US\",\r\n    \"location\": \"westus\",\r\n    \"PREFIX\": \"AWU1\",\r\n    \"pairedRegion\": \"eastus\"\r\n  },\r\n  \"southafricanorth\": {\r\n    \"displayname\": \"South Africa North\",\r\n    \"location\": \"southafricanorth\",\r\n    \"PREFIX\": \"ASAN\",\r\n    \"pairedRegion\": \"southafricawest\"\r\n  },\r\n  \"australiacentral2\": {\r\n    \"displayname\": \"Australia Central 2\",\r\n    \"location\": \"australiacentral2\",\r\n    \"PREFIX\": \"AAC2\",\r\n    \"pairedRegion\": \"australiacentral2\"\r\n  },\r\n  \"francesouth\": {\r\n    \"displayname\": \"France South\",\r\n    \"location\": \"francesouth\",\r\n    \"PREFIX\": \"AFS1\",\r\n    \"pairedRegion\": \"francecentral\"\r\n  },\r\n  \"ukwest\": {\r\n    \"displayname\": \"UK West\",\r\n    \"location\": \"ukwest\",\r\n    \"PREFIX\": \"AUW1\",\r\n    \"pairedRegion\": \"uksouth\"\r\n  },\r\n  \"southindia\": {\r\n    \"displayname\": \"South India\",\r\n    \"location\": \"southindia\",\r\n    \"PREFIX\": \"ASI1\",\r\n    \"pairedRegion\": \"centralindia\"\r\n  },\r\n  \"centralus\": {\r\n    \"displayname\": \"Central US\",\r\n    \"location\": \"centralus\",\r\n    \"PREFIX\": \"ACU1\",\r\n    \"pairedRegion\": \"eastus2\"\r\n  },\r\n  \"germanynorth\": {\r\n    \"displayname\": \"Germany North\",\r\n    \"location\": \"germanynorth\",\r\n    \"PREFIX\": \"AGN1\",\r\n    \"pairedRegion\": \"germanywestcentral\"\r\n  },\r\n  \"koreasouth\": {\r\n    \"displayname\": \"Korea South\",\r\n    \"location\": \"koreasouth\",\r\n    \"PREFIX\": \"AKS1\",\r\n    \"pairedRegion\": \"koreacentral\"\r\n  },\r\n  \"westindia\": {\r\n    \"displayname\": \"West India\",\r\n    \"location\": \"westindia\",\r\n    \"PREFIX\": \"AWI1\",\r\n    \"pairedRegion\": \"southindia\"\r\n  },\r\n  \"westus2\": {\r\n    \"displayname\": \"West US 2\",\r\n    \"location\": \"westus2\",\r\n    \"PREFIX\": \"AWU2\",\r\n    \"pairedRegion\": \"westcentralus\"\r\n  },\r\n  \"northcentralus\": {\r\n    \"displayname\": \"North Central US\",\r\n    \"location\": \"northcentralus\",\r\n    \"PREFIX\": \"ANCU\",\r\n    \"pairedRegion\": \"southcentralus\"\r\n  },\r\n  \"westeurope\": {\r\n    \"displayname\": \"West Europe\",\r\n    \"location\": \"westeurope\",\r\n    \"PREFIX\": \"AWEU\",\r\n    \"pairedRegion\": \"northeurope\"\r\n  },\r\n  \"canadacentral\": {\r\n    \"displayname\": \"Canada Central\",\r\n    \"location\": \"canadacentral\",\r\n    \"PREFIX\": \"ACC1\",\r\n    \"pairedRegion\": \"canadaeast\"\r\n  },\r\n  \"southcentralus\": {\r\n    \"displayname\": \"South Central US\",\r\n    \"location\": \"southcentralus\",\r\n    \"PREFIX\": \"ASCU\",\r\n    \"pairedRegion\": \"northcentralus\"\r\n  },\r\n  \"norwayeast\": {\r\n    \"displayname\": \"Norway East\",\r\n    \"location\": \"norwayeast\",\r\n    \"PREFIX\": \"ANE1\",\r\n    \"pairedRegion\": \"norwaywest\"\r\n  },\r\n  \"japanwest\": {\r\n    \"displayname\": \"Japan West\",\r\n    \"location\": \"japanwest\",\r\n    \"PREFIX\": \"AJW1\",\r\n    \"pairedRegion\": \"japaneast\"\r\n  },\r\n  \"norwaywest\": {\r\n    \"displayname\": \"Norway West\",\r\n    \"location\": \"norwaywest\",\r\n    \"PREFIX\": \"ANW1\",\r\n    \"pairedRegion\": \"norwayeast\"\r\n  },\r\n  \"jioindiacentral\": {\r\n    \"displayname\": \"Jio India Central\",\r\n    \"location\": \"jioindiacentral\",\r\n    \"PREFIX\": \"AJIC\",\r\n    \"pairedRegion\": \"jioindiawest\"\r\n  },\r\n  \"centralindia\": {\r\n    \"displayname\": \"Central India\",\r\n    \"location\": \"centralindia\",\r\n    \"PREFIX\": \"ACI1\",\r\n    \"pairedRegion\": \"southindia\"\r\n  },\r\n  \"westus3\": {\r\n    \"displayname\": \"West US 3\",\r\n    \"location\": \"westus3\",\r\n    \"PREFIX\": \"AWU3\",\r\n    \"pairedRegion\": \"eastus\"\r\n  },\r\n  \"brazilsouth\": {\r\n    \"displayname\": \"Brazil South\",\r\n    \"location\": \"brazilsouth\",\r\n    \"PREFIX\": \"ABS1\",\r\n    \"pairedRegion\": \"southcentralus\"\r\n  },\r\n  \"eastasia\": {\r\n    \"displayname\": \"East Asia\",\r\n    \"location\": \"eastasia\",\r\n    \"PREFIX\": \"AEA1\",\r\n    \"pairedRegion\": \"southeastasia\"\r\n  },\r\n  \"swedencentral\": {\r\n    \"displayname\": \"Sweden Central\",\r\n    \"location\": \"swedencentral\",\r\n    \"PREFIX\": \"ASC1\",\r\n    \"pairedRegion\": \"swedensouth\"\r\n  },\r\n  \"uksouth\": {\r\n    \"displayname\": \"UK South\",\r\n    \"location\": \"uksouth\",\r\n    \"PREFIX\": \"AUS1\",\r\n    \"pairedRegion\": \"ukwest\"\r\n  },\r\n  \"switzerlandnorth\": {\r\n    \"displayname\": \"Switzerland North\",\r\n    \"location\": \"switzerlandnorth\",\r\n    \"PREFIX\": \"ASN1\",\r\n    \"pairedRegion\": \"switzerlandwest\"\r\n  },\r\n  \"canadaeast\": {\r\n    \"displayname\": \"Canada East\",\r\n    \"location\": \"canadaeast\",\r\n    \"PREFIX\": \"ACE1\",\r\n    \"pairedRegion\": \"canadacentral\"\r\n  },\r\n  \"australiasoutheast\": {\r\n    \"displayname\": \"Australia Southeast\",\r\n    \"location\": \"australiasoutheast\",\r\n    \"PREFIX\": \"AAS1\",\r\n    \"pairedRegion\": \"australiaeast\"\r\n  },\r\n  \"northeurope\": {\r\n    \"displayname\": \"North Europe\",\r\n    \"location\": \"northeurope\",\r\n    \"PREFIX\": \"ANEU\",\r\n    \"pairedRegion\": \"westeurope\"\r\n  },\r\n  \"germanywestcentral\": {\r\n    \"displayname\": \"Germany West Central\",\r\n    \"location\": \"germanywestcentral\",\r\n    \"PREFIX\": \"AGWC\",\r\n    \"pairedRegion\": \"germanynorth\"\r\n  },\r\n  \"japaneast\": {\r\n    \"displayname\": \"Japan East\",\r\n    \"location\": \"japaneast\",\r\n    \"PREFIX\": \"AJE1\",\r\n    \"pairedRegion\": \"japanwest\"\r\n  },\r\n  \"uaenorth\": {\r\n    \"displayname\": \"UAE North\",\r\n    \"location\": \"uaenorth\",\r\n    \"PREFIX\": \"AUN1\",\r\n    \"pairedRegion\": \"uaecentral\"\r\n  },\r\n  \"australiaeast\": {\r\n    \"displayname\": \"Australia East\",\r\n    \"location\": \"australiaeast\",\r\n    \"PREFIX\": \"AAE1\",\r\n    \"pairedRegion\": \"australiasoutheast\"\r\n  },\r\n  \"switzerlandwest\": {\r\n    \"displayname\": \"Switzerland West\",\r\n    \"location\": \"switzerlandwest\",\r\n    \"PREFIX\": \"ASW1\",\r\n    \"pairedRegion\": \"switzerlandnorth\"\r\n  },\r\n  \"australiacentral\": {\r\n    \"displayname\": \"Australia Central\",\r\n    \"location\": \"australiacentral\",\r\n    \"PREFIX\": \"AAC1\",\r\n    \"pairedRegion\": \"australiacentral\"\r\n  },\r\n  \"brazilsoutheast\": {\r\n    \"displayname\": \"Brazil Southeast\",\r\n    \"location\": \"brazilsoutheast\",\r\n    \"PREFIX\": \"ABSE\",\r\n    \"pairedRegion\": \"brazilsouth\"\r\n  }\r\n}\r\n')]",
            "primaryPrefix": "[variables('regionLookup')[parameters('Global').PrimaryLocation].prefix]",
            "GlobalRGJ": "[json(parameters('Global').GlobalRG)]",
            "gh": {
              "globalRGPrefix": "[if(contains(variables('GlobalRGJ'), 'Prefix'), variables('GlobalRGJ').Prefix, variables('primaryPrefix'))]",
              "globalRGOrgName": "[if(contains(variables('GlobalRGJ'), 'OrgName'), variables('GlobalRGJ').OrgName, parameters('Global').OrgName)]",
              "globalRGAppName": "[if(contains(variables('GlobalRGJ'), 'AppName'), variables('GlobalRGJ').AppName, parameters('Global').AppName)]",
              "globalRGName": "[if(contains(variables('GlobalRGJ'), 'name'), variables('GlobalRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID')))]"
            },
            "globalRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').globalRGPrefix, variables('gh').globalRGOrgName, variables('gh').globalRGAppName, variables('gh').globalRGName)]",
            "frontDoorInfo": "[if(contains(parameters('DeploymentInfo'), 'frontDoorInfo'), parameters('DeploymentInfo').frontDoorInfo, createArray())]"
          },
          "resources": [
            {
              "condition": "[variables('frontDoor')[copyIndex()].match]",
              "copy": {
                "name": "FD",
                "count": "[length(variables('frontDoorInfo'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dp{0}-FD-Deploy{1}', variables('Deployment'), variables('frontDoorInfo')[copyIndex()].name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "Deployment": {
                    "value": "[variables('Deployment')]"
                  },
                  "DeploymentURI": {
                    "value": "[variables('DeploymentURI')]"
                  },
                  "globalRGName": {
                    "value": "[variables('globalRGName')]"
                  },
                  "frontDoorInfo": {
                    "value": "[variables('frontDoorInfo')[copyIndex()]]"
                  },
                  "Global": {
                    "value": "[parameters('Global')]"
                  },
                  "DeploymentID": {
                    "value": "[parameters('DeploymentID')]"
                  },
                  "Environment": {
                    "value": "[parameters('Environment')]"
                  },
                  "Prefix": {
                    "value": "[parameters('Prefix')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1318.3566",
                      "templateHash": "17641874206020197156"
                    }
                  },
                  "parameters": {
                    "Deployment": {
                      "type": "string"
                    },
                    "DeploymentURI": {
                      "type": "string"
                    },
                    "frontDoorInfo": {
                      "type": "object"
                    },
                    "Global": {
                      "type": "object"
                    },
                    "globalRGName": {
                      "type": "string"
                    },
                    "now": {
                      "type": "string",
                      "defaultValue": "[utcNow('F')]"
                    },
                    "Prefix": {
                      "type": "string"
                    },
                    "Environment": {
                      "type": "string"
                    },
                    "DeploymentID": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "frontendEndpoints",
                        "count": "[length(parameters('frontDoorInfo').services)]",
                        "input": {
                          "name": "[concat(parameters('frontDoorInfo').services[copyIndex('frontendEndpoints')].name)]",
                          "properties": {
                            "hostName": "[toLower(format('{0}-afd{1}{2}', parameters('Deployment'), parameters('frontDoorInfo').name, if(equals(parameters('frontDoorInfo').services[copyIndex('frontendEndpoints')].Name, 'Default'), '.azurefd.net', format('-{0}.{1}', parameters('frontDoorInfo').services[copyIndex('frontendEndpoints')].Name, parameters('Global').DomainNameExt))))]",
                            "sessionAffinityEnabledState": "[parameters('frontDoorInfo').services[copyIndex('frontendEndpoints')].sessionAffinityEnabledState]",
                            "sessionAffinityTtlSeconds": 0
                          }
                        }
                      },
                      {
                        "name": "healthProbeSettings",
                        "count": "[length(parameters('frontDoorInfo').probes)]",
                        "input": {
                          "name": "[parameters('frontDoorInfo').probes[copyIndex('healthProbeSettings')].name]",
                          "properties": {
                            "path": "[parameters('frontDoorInfo').probes[copyIndex('healthProbeSettings')].ProbePath]",
                            "protocol": "Https",
                            "intervalInSeconds": 30,
                            "healthProbeMethod": "[if(contains(parameters('frontDoorInfo').probes[copyIndex('healthProbeSettings')], 'probeMethod'), parameters('frontDoorInfo').probes[copyIndex('healthProbeSettings')].probeMethod, 'Head')]",
                            "enabledState": "Enabled"
                          }
                        }
                      },
                      {
                        "name": "loadBalancingSettings",
                        "count": "[length(parameters('frontDoorInfo').LBSettings)]",
                        "input": {
                          "name": "[parameters('frontDoorInfo').LBSettings[copyIndex('loadBalancingSettings')].name]",
                          "properties": {
                            "sampleSize": "[parameters('frontDoorInfo').LBSettings[copyIndex('loadBalancingSettings')].sampleSize]",
                            "successfulSamplesRequired": "[parameters('frontDoorInfo').LBSettings[copyIndex('loadBalancingSettings')].successfulSamplesRequired]",
                            "additionalLatencyMilliseconds": "[parameters('frontDoorInfo').LBSettings[copyIndex('loadBalancingSettings')].additionalLatencyMilliseconds]"
                          }
                        }
                      },
                      {
                        "name": "routingRules",
                        "count": "[length(parameters('frontDoorInfo').services)]",
                        "input": {
                          "name": "[parameters('frontDoorInfo').services[copyIndex('routingRules')].Name]",
                          "properties": {
                            "frontendEndpoints": [
                              {
                                "id": "[resourceId('Microsoft.Network/frontdoors/frontendEndpoints', variables('FDName'), parameters('frontDoorInfo').services[copyIndex('routingRules')].Name)]"
                              }
                            ],
                            "acceptedProtocols": [
                              "Http",
                              "Https"
                            ],
                            "patternsToMatch": "[parameters('frontDoorInfo').services[copyIndex('routingRules')].patternsToMatch]",
                            "enabledState": "Enabled",
                            "routeConfiguration": {
                              "@odata.type": "#Microsoft.Azure.FrontDoor.Models.FrontdoorForwardingConfiguration",
                              "customForwardingPath": null,
                              "forwardingProtocol": "HttpsOnly",
                              "backendPool": {
                                "id": "[resourceId('Microsoft.Network/frontdoors/backendPools', variables('FDName'), parameters('frontDoorInfo').services[copyIndex('routingRules')].Name)]"
                              }
                            },
                            "rulesEngine": "[if(not(and(contains(parameters('frontDoorInfo').services[copyIndex('routingRules')], 'rulesEngine'), and(contains(parameters('frontDoorInfo'), 'rulesEngineDetached'), equals(parameters('frontDoorInfo').rulesEngineDetached, 0)))), null(), createObject('id', resourceId('Microsoft.Network/frontDoors/rulesEngines', variables('FDName'), parameters('frontDoorInfo').services[copyIndex('routingRules')].rulesEngine)))]"
                          }
                        }
                      }
                    ],
                    "HubKVJ": "[json(parameters('Global').hubKV)]",
                    "HubRGJ": "[json(parameters('Global').hubRG)]",
                    "gh": {
                      "hubRGPrefix": "[if(contains(variables('HubRGJ'), 'Prefix'), variables('HubRGJ').Prefix, parameters('Prefix'))]",
                      "hubRGOrgName": "[if(contains(variables('HubRGJ'), 'OrgName'), variables('HubRGJ').OrgName, parameters('Global').OrgName)]",
                      "hubRGAppName": "[if(contains(variables('HubRGJ'), 'AppName'), variables('HubRGJ').AppName, parameters('Global').AppName)]",
                      "hubRGRGName": "[if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID'))))]",
                      "hubKVPrefix": "[if(contains(variables('HubKVJ'), 'Prefix'), variables('HubKVJ').Prefix, parameters('Prefix'))]",
                      "hubKVOrgName": "[if(contains(variables('HubKVJ'), 'OrgName'), variables('HubKVJ').OrgName, parameters('Global').OrgName)]",
                      "hubKVAppName": "[if(contains(variables('HubKVJ'), 'AppName'), variables('HubKVJ').AppName, parameters('Global').AppName)]",
                      "hubKVRGName": "[if(contains(variables('HubKVJ'), 'RG'), variables('HubKVJ').RG, variables('HubRGJ').name)]"
                    },
                    "HubRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').hubRGPrefix, variables('gh').hubRGOrgName, variables('gh').hubRGAppName, variables('gh').hubRGRGName)]",
                    "HubKVName": "[toLower(format('{0}-{1}-{2}-{3}-kv{4}', variables('gh').hubKVPrefix, variables('gh').hubKVOrgName, variables('gh').hubKVAppName, variables('gh').hubKVRGName, variables('HubKVJ').name))]",
                    "FDName": "[format('{0}-afd{1}', parameters('Deployment'), parameters('frontDoorInfo').Name)]",
                    "DefaultFrontEnd": [
                      {
                        "name": "[format('default{0}-azurefd-net', parameters('frontDoorInfo').name)]",
                        "properties": {
                          "hostName": "[toLower(format('{0}-afd{1}.azurefd.net', parameters('Deployment'), parameters('frontDoorInfo').name))]",
                          "sessionAffinityEnabledState": "Disabled",
                          "sessionAffinityTtlSeconds": 0,
                          "customHttpsConfiguration": null
                        }
                      }
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/frontDoors",
                      "apiVersion": "2020-05-01",
                      "name": "[variables('FDName')]",
                      "location": "global",
                      "properties": {
                        "copy": [
                          {
                            "name": "backendPools",
                            "count": "[length(parameters('frontDoorInfo').services)]",
                            "input": {
                              "name": "[parameters('frontDoorInfo').services[copyIndex('backendPools')].Name]",
                              "properties": {
                                "backends": "[reference(resourceId('Microsoft.Resources/deployments', format('dp{0}-FD-BE-Deploy-{1}-{2}', parameters('Deployment'), parameters('frontDoorInfo').Name, parameters('frontDoorInfo').services[copyIndex('backendPools')].Name))).outputs.backends.value]",
                                "loadBalancingSettings": {
                                  "id": "[resourceId('Microsoft.Network/frontdoors/loadBalancingSettings', variables('FDName'), parameters('frontDoorInfo').services[copyIndex('backendPools')].LBSettings)]"
                                },
                                "healthProbeSettings": {
                                  "id": "[resourceId('Microsoft.Network/frontdoors/healthProbeSettings', variables('FDName'), parameters('frontDoorInfo').services[copyIndex('backendPools')].ProbeName)]"
                                }
                              }
                            }
                          }
                        ],
                        "friendlyName": "[parameters('frontDoorInfo').name]",
                        "enabledState": "Enabled",
                        "frontendEndpoints": "[variables('frontendEndpoints')]",
                        "healthProbeSettings": "[variables('healthProbeSettings')]",
                        "loadBalancingSettings": "[variables('loadBalancingSettings')]",
                        "routingRules": "[variables('routingRules')]",
                        "backendPoolsSettings": {
                          "enforceCertificateNameCheck": "Enabled",
                          "sendRecvTimeoutSeconds": 30
                        }
                      },
                      "dependsOn": [
                        "DNSCNAME",
                        "FDServiceBE"
                      ]
                    },
                    {
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2017-05-01-preview",
                      "scope": "[format('Microsoft.Network/frontDoors/{0}', variables('FDName'))]",
                      "name": "service",
                      "properties": {
                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                        "logs": [
                          {
                            "category": "FrontdoorAccessLog",
                            "enabled": true
                          },
                          {
                            "category": "FrontdoorWebApplicationFirewallLog",
                            "enabled": true
                          }
                        ],
                        "metrics": [
                          {
                            "timeGrain": "PT5M",
                            "enabled": true,
                            "retentionPolicy": {
                              "enabled": false,
                              "days": 0
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/frontDoors', variables('FDName'))]"
                      ]
                    },
                    {
                      "condition": "[and(contains(parameters('frontDoorInfo').services[copyIndex()], 'EnableSSL'), bool(parameters('frontDoorInfo').services[copyIndex()].EnableSSL))]",
                      "copy": {
                        "name": "SetFDServicesCertificates",
                        "count": "[length(parameters('frontDoorInfo').services)]"
                      },
                      "type": "Microsoft.Resources/deploymentScripts",
                      "apiVersion": "2020-10-01",
                      "name": "[format('SetFDServicesCertificates{0}-{1}', add(copyIndex(), 1), parameters('frontDoorInfo').name)]",
                      "identity": {
                        "type": "UserAssigned",
                        "userAssignedIdentities": {
                          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-uaiNetworkContributor', parameters('Deployment'))))]": {}
                        }
                      },
                      "location": "[resourceGroup().location]",
                      "kind": "AzurePowerShell",
                      "properties": {
                        "azPowerShellVersion": "5.4",
                        "arguments": "[format(' -ResourceGroupName {0} -FrontDoorName {1}-afd{2} -Name {3} -VaultID {4} -certificateUrl {5}', resourceGroup().name, parameters('Deployment'), parameters('frontDoorInfo').name, variables('frontendEndpoints')[copyIndex()].name, extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubRGName')), 'Microsoft.KeyVault/vaults', variables('HubKVName')), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubRGName')), 'Microsoft.KeyVault/vaults/secrets', variables('HubKVName'), parameters('Global').CertName), '2021-06-01-preview').secretUri)]",
                        "scriptContent": "\r\nparam (\r\n    [string]$ResourceGroupName,\r\n    [string]$FrontDoorName,\r\n    [string]$Name,\r\n    [string]$VaultID,\r\n    [string]$certificateUrl\r\n)\r\n\r\ntry\r\n{\r\n    Write-Output \"`nUTC is: $(Get-Date)\"\r\n    \r\n    $c = Get-AzContext -ErrorAction stop\r\n    if ($c)\r\n    {\r\n        Write-Output \"`nContext is: \"\r\n        $c | Select-Object Account, Subscription, Tenant, Environment | Format-List | Out-String\r\n\r\n        # $EndPoint = Get-AzFrontDoorFrontendEndpoint -ResourceGroupName ACU1-BRW-AOA-RG-S1 -FrontDoorName ACU1-BRW-AOA-S1-afd01 -Name APIM01-Gateway\r\n        $EndPoint = Get-AzFrontDoorFrontendEndpoint -ResourceGroupName $ResourceGroupName -FrontDoorName $FrontDoorName -Name $Name -ErrorAction stop\r\n\r\n        if ($EndPoint.Vault)\r\n        {\r\n            Write-Output 'Provisioning CustomDomainHttp is complete!'\r\n        }\r\n        else\r\n        {\r\n            # /subscriptions/b8f402aa-20f7-4888-b45c-3cf086dad9c3/resourceGroups/ACU1-BRW-AOA-RG-P0/providers/Microsoft.KeyVault/vaults/ACU1-BRW-AOA-P0-kvVLT01\r\n            $SecretVersion = Split-Path -Path $certificateUrl -Leaf\r\n            $Secret = Split-Path -Path $certificateUrl\r\n            $SecretName = Split-Path -Path $Secret -Leaf\r\n            \r\n            $Params = @{\r\n                ResourceGroupName    = $ResourceGroupName\r\n                FrontDoorName        = $FrontDoorName\r\n                FrontendEndpointName = $Name\r\n                VaultId              = $VaultID\r\n                SecretName           = $SecretName\r\n                MinimumTlsVersion    = '1.2'\r\n                SecretVersion        = $SecretVersion\r\n            }\r\n            Enable-AzFrontDoorCustomDomainHttps @Params\r\n        }\r\n    }\r\n    else\r\n    {\r\n        throw 'Cannot get a context'\r\n    }\r\n}\r\ncatch\r\n{\r\n    Write-Warning $_\r\n    Write-Warning $_.exception\r\n}\r\n",
                        "forceUpdateTag": "[parameters('now')]",
                        "cleanupPreference": "OnSuccess",
                        "retentionInterval": "P1D",
                        "timeout": "PT3M"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/frontDoors', variables('FDName'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "FDServiceBE",
                        "count": "[length(parameters('frontDoorInfo').services)]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-FD-BE-Deploy-{1}-{2}', parameters('Deployment'), parameters('frontDoorInfo').Name, parameters('frontDoorInfo').services[copyIndex()].Name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[parameters('Deployment')]"
                          },
                          "AFDService": {
                            "value": "[parameters('frontDoorInfo').services[copyIndex()]]"
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "14202354922953226143"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "AFDService": {
                              "type": "object"
                            },
                            "Global": {
                              "type": "object"
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "backends",
                                "count": "[length(range(0, length(parameters('AFDService').BEAddress)))]",
                                "input": {
                                  "weight": "[if(contains(parameters('AFDService').BEAddress[range(0, length(parameters('AFDService').BEAddress))[copyIndex('backends')]], 'weight'), parameters('AFDService').BEAddress[range(0, length(parameters('AFDService').BEAddress))[copyIndex('backends')]].weight, 100)]",
                                  "address": "[replace(replace(parameters('AFDService').BEAddress[range(0, length(parameters('AFDService').BEAddress))[copyIndex('backends')]].address, '{Deployment}', parameters('Deployment')), '{Domain}', parameters('Global').DomainNameExt)]",
                                  "backendHostHeader": "[if(contains(parameters('AFDService').BEAddress[range(0, length(parameters('AFDService').BEAddress))[copyIndex('backends')]], 'hostheader'), replace(replace(parameters('AFDService').BEAddress[range(0, length(parameters('AFDService').BEAddress))[copyIndex('backends')]].hostheader, '{Deployment}', parameters('Deployment')), '{Domain}', parameters('Global').DomainNameExt), replace(replace(parameters('AFDService').BEAddress[range(0, length(parameters('AFDService').BEAddress))[copyIndex('backends')]].address, '{Deployment}', parameters('Deployment')), '{Domain}', parameters('Global').DomainNameExt))]",
                                  "enabledState": "Enabled",
                                  "httpPort": 80,
                                  "httpsPort": 443,
                                  "priority": 1
                                }
                              }
                            ]
                          },
                          "resources": [],
                          "outputs": {
                            "backends": {
                              "type": "array",
                              "value": "[variables('backends')]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "copy": {
                        "name": "DNSCNAME",
                        "count": "[length(parameters('frontDoorInfo').services)]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('setdnsServices-{0}-{1}', parameters('frontDoorInfo').name, parameters('frontDoorInfo').services[copyIndex()].name)]",
                      "subscriptionId": "[if(contains(parameters('Global'), 'DomainNameExtSubscriptionID'), parameters('Global').DomainNameExtSubscriptionID, subscription().subscriptionId)]",
                      "resourceGroup": "[if(contains(parameters('Global'), 'DomainNameExtRG'), parameters('Global').DomainNameExtRG, parameters('globalRGName'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "hostname": {
                            "value": "[toLower(format('{0}-afd{1}{2}', parameters('Deployment'), parameters('frontDoorInfo').name, if(equals(parameters('frontDoorInfo').services[copyIndex()].Name, 'Default'), '', format('-{0}', parameters('frontDoorInfo').services[copyIndex()].Name))))]"
                          },
                          "cname": {
                            "value": "[format('{0}-afd{1}.azurefd.net', parameters('Deployment'), parameters('frontDoorInfo').name)]"
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "2861540136838094664"
                            }
                          },
                          "parameters": {
                            "hostname": {
                              "type": "string"
                            },
                            "cname": {
                              "type": "string"
                            },
                            "Global": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/dnsZones/CNAME",
                              "apiVersion": "2018-05-01",
                              "name": "[format('{0}/{1}', parameters('Global').DomainNameExt, parameters('hostname'))]",
                              "properties": {
                                "TTL": 3600,
                                "metadata": {},
                                "CNAMERecord": {
                                  "cname": "[parameters('cname')]"
                                }
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "condition": "[contains(parameters('frontDoorInfo').services[copyIndex()], 'rulesEngine')]",
                      "copy": {
                        "name": "FDServiceRE",
                        "count": "[length(parameters('frontDoorInfo').services)]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-FD-RE-Deploy-{1}-{2}', parameters('Deployment'), variables('FDName'), parameters('frontDoorInfo').services[copyIndex()].Name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[parameters('Deployment')]"
                          },
                          "FDInfo": {
                            "value": "[parameters('frontDoorInfo')]"
                          },
                          "rules": {
                            "value": "[parameters('frontDoorInfo').rules]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "15790288376399399670"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "FDInfo": {
                              "type": "object"
                            },
                            "rules": {
                              "type": "array"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "RR",
                                "count": "[length(parameters('rules'))]"
                              },
                              "type": "Microsoft.Network/frontDoors/rulesEngines",
                              "apiVersion": "2020-05-01",
                              "name": "[format('{0}/{1}', format('{0}-afd{1}', parameters('Deployment'), parameters('FDInfo').name), parameters('rules')[copyIndex()].name)]",
                              "properties": {
                                "rules": [
                                  {
                                    "name": "[parameters('rules')[copyIndex()].name]",
                                    "priority": "[parameters('rules')[copyIndex()].priority]",
                                    "action": "[parameters('rules')[copyIndex()].action]"
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/frontDoors', variables('FDName'))]"
                      ]
                    }
                  ]
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-APIM', variables('Deployment')))]"
      ]
    },
    {
      "condition": "[bool(parameters('Stage').SB)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('dp{0}-SB', variables('Deployment'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "DeploymentID": {
            "value": "[parameters('DeploymentID')]"
          },
          "DeploymentInfo": {
            "value": "[parameters('DeploymentInfo')]"
          },
          "Environment": {
            "value": "[parameters('Environment')]"
          },
          "Extensions": {
            "value": "[parameters('Extensions')]"
          },
          "Global": {
            "value": "[parameters('Global')]"
          },
          "Prefix": {
            "value": "[parameters('Prefix')]"
          },
          "Stage": {
            "value": "[parameters('Stage')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "4469525350845997912"
            }
          },
          "parameters": {
            "Prefix": {
              "type": "string"
            },
            "Environment": {
              "type": "string",
              "defaultValue": "D",
              "allowedValues": [
                "I",
                "D",
                "T",
                "U",
                "P",
                "S",
                "G",
                "A"
              ]
            },
            "DeploymentID": {
              "type": "string",
              "defaultValue": "1",
              "allowedValues": [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9"
              ]
            },
            "Stage": {
              "type": "object"
            },
            "Extensions": {
              "type": "object"
            },
            "Global": {
              "type": "object"
            },
            "DeploymentInfo": {
              "type": "object"
            },
            "deploymentTime": {
              "type": "string",
              "defaultValue": "[utcNow()]"
            }
          },
          "variables": {
            "copy": [
              {
                "name": "SB",
                "count": "[length(variables('SBInfo'))]",
                "input": {
                  "match": "[or(equals(parameters('Global').CN, '.'), contains(array(parameters('Global').CN), variables('SBInfo')[copyIndex('SB')].Name))]"
                }
              }
            ],
            "Deployment": "[format('{0}-{1}-{2}-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID'))]",
            "DeploymentURI": "[toLower(format('{0}{1}{2}{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID')))]",
            "SBInfo": "[if(contains(parameters('DeploymentInfo'), 'SBInfo'), parameters('DeploymentInfo').SBInfo, createArray())]"
          },
          "resources": [
            {
              "condition": "[variables('SB')[copyIndex()].match]",
              "copy": {
                "name": "SBs",
                "count": "[length(variables('SBInfo'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dp{0}-SB-Deploy{1}', variables('Deployment'), variables('SBInfo')[copyIndex()].name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "Deployment": {
                    "value": "[variables('Deployment')]"
                  },
                  "DeploymentURI": {
                    "value": "[variables('DeploymentURI')]"
                  },
                  "DeploymentID": {
                    "value": "[parameters('DeploymentID')]"
                  },
                  "Environment": {
                    "value": "[parameters('Environment')]"
                  },
                  "SBInfo": {
                    "value": "[variables('SBInfo')[copyIndex()]]"
                  },
                  "Global": {
                    "value": "[parameters('Global')]"
                  },
                  "Stage": {
                    "value": "[parameters('Stage')]"
                  },
                  "Prefix": {
                    "value": "[parameters('Prefix')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1318.3566",
                      "templateHash": "14807272935455499704"
                    }
                  },
                  "parameters": {
                    "Deployment": {
                      "type": "string"
                    },
                    "DeploymentURI": {
                      "type": "string"
                    },
                    "DeploymentID": {
                      "type": "string"
                    },
                    "Environment": {
                      "type": "string"
                    },
                    "SBInfo": {
                      "type": "object"
                    },
                    "Global": {
                      "type": "object"
                    },
                    "Stage": {
                      "type": "object"
                    },
                    "now": {
                      "type": "string",
                      "defaultValue": "[utcNow('F')]"
                    },
                    "Prefix": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "HubRGJ": "[json(parameters('Global').hubRG)]",
                    "gh": {
                      "hubRGPrefix": "[if(contains(variables('HubRGJ'), 'Prefix'), variables('HubRGJ').Prefix, parameters('Prefix'))]",
                      "hubRGOrgName": "[if(contains(variables('HubRGJ'), 'OrgName'), variables('HubRGJ').OrgName, parameters('Global').OrgName)]",
                      "hubRGAppName": "[if(contains(variables('HubRGJ'), 'AppName'), variables('HubRGJ').AppName, parameters('Global').AppName)]",
                      "hubRGRGName": "[if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID'))))]"
                    },
                    "HubRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').hubRGPrefix, variables('gh').hubRGOrgName, variables('gh').hubRGAppName, variables('gh').hubRGRGName)]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.ServiceBus/namespaces",
                      "apiVersion": "2018-01-01-preview",
                      "name": "[format('{0}-sb{1}', parameters('Deployment'), parameters('SBInfo').Name)]",
                      "location": "[resourceGroup().location]",
                      "sku": {
                        "name": "[parameters('SBInfo').sku]",
                        "tier": "[parameters('SBInfo').sku]",
                        "capacity": "[parameters('SBInfo').skuCapacity]"
                      },
                      "properties": {
                        "zoneRedundant": "[parameters('SBInfo').zoneRedundant]"
                      }
                    },
                    {
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.ServiceBus/namespaces/{0}', format('{0}-sb{1}', parameters('Deployment'), parameters('SBInfo').Name))]",
                      "name": "service",
                      "properties": {
                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                        "logs": [
                          {
                            "category": "OperationalLogs",
                            "enabled": true
                          }
                        ],
                        "metrics": [
                          {
                            "timeGrain": "PT5M",
                            "enabled": true,
                            "retentionPolicy": {
                              "enabled": false,
                              "days": 0
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ServiceBus/namespaces', format('{0}-sb{1}', parameters('Deployment'), parameters('SBInfo').Name))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "SBTopic",
                        "count": "[length(parameters('SBInfo').topics)]"
                      },
                      "type": "Microsoft.ServiceBus/namespaces/topics",
                      "apiVersion": "2017-04-01",
                      "name": "[format('{0}/{1}', format('{0}-sb{1}', parameters('Deployment'), parameters('SBInfo').Name), parameters('SBInfo').topics[copyIndex()].Name)]",
                      "properties": {
                        "defaultMessageTimeToLive": "P14D",
                        "maxSizeInMegabytes": 1024,
                        "requiresDuplicateDetection": false,
                        "duplicateDetectionHistoryTimeWindow": "PT10M",
                        "enableBatchedOperations": true,
                        "status": "Active",
                        "supportOrdering": true,
                        "autoDeleteOnIdle": "P10675199DT2H48M5.4775807S",
                        "enablePartitioning": false,
                        "enableExpress": false
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ServiceBus/namespaces', format('{0}-sb{1}', parameters('Deployment'), parameters('SBInfo').Name))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "ServiceBus_TopicSubscriptions",
                        "count": "[length(parameters('SBInfo').topics)]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-SB-TopicSubscriptions-{1}-{2}', parameters('Deployment'), parameters('SBInfo').topics[copyIndex()].name, add(copyIndex(), 1))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "SBInfoTopic": {
                            "value": "[parameters('SBInfo').topics[copyIndex()]]"
                          },
                          "SBTopicName": {
                            "value": "[format('{0}-sb{1}/{2}', parameters('Deployment'), parameters('SBInfo').Name, parameters('SBInfo').topics[copyIndex()].Name)]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "18339082504854398441"
                            }
                          },
                          "parameters": {
                            "SBInfoTopic": {
                              "type": "object"
                            },
                            "SBTopicName": {
                              "type": "string"
                            },
                            "now": {
                              "type": "string",
                              "defaultValue": "[utcNow('F')]"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.ServiceBus/namespaces/topics/authorizationRules",
                              "apiVersion": "2017-04-01",
                              "name": "[format('{0}/root', parameters('SBTopicName'))]",
                              "properties": {
                                "rights": [
                                  "Manage",
                                  "Send",
                                  "Listen"
                                ]
                              }
                            },
                            {
                              "copy": {
                                "name": "SBTopicName_SBInfoTopic_subscriptions_0_Name",
                                "count": "[length(parameters('SBInfoTopic').subscriptions)]"
                              },
                              "type": "Microsoft.ServiceBus/namespaces/topics/subscriptions",
                              "apiVersion": "2017-04-01",
                              "name": "[format('{0}/{1}', parameters('SBTopicName'), parameters('SBInfoTopic').subscriptions[copyIndex()].Name)]",
                              "properties": {
                                "lockDuration": "PT5M",
                                "requiresSession": false,
                                "defaultMessageTimeToLive": "PT14H",
                                "deadLetteringOnMessageExpiration": true,
                                "deadLetteringOnFilterEvaluationExceptions": true,
                                "maxDeliveryCount": 10,
                                "enableBatchedOperations": false,
                                "status": "Active",
                                "autoDeleteOnIdle": "P3650D"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "SBTopic"
                      ]
                    },
                    {
                      "condition": "[contains(parameters('SBInfo'), 'privatelinkinfo')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-SB-privatelinkloop{1}', parameters('Deployment'), parameters('SBInfo').name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[parameters('Deployment')]"
                          },
                          "DeploymentURI": {
                            "value": "[parameters('DeploymentURI')]"
                          },
                          "PrivateLinkInfo": {
                            "value": "[parameters('SBInfo').privateLinkInfo]"
                          },
                          "resourceName": {
                            "value": "[format('{0}-sb{1}', parameters('Deployment'), parameters('SBInfo').Name)]"
                          },
                          "providerType": {
                            "value": "Microsoft.ServiceBus/namespaces"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "1242957729837230630"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "DeploymentURI": {
                              "type": "string"
                            },
                            "PrivateLinkInfo": {
                              "type": "array"
                            },
                            "providerType": {
                              "type": "string"
                            },
                            "resourceName": {
                              "type": "string"
                            },
                            "resourceRG": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().name]"
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "privateLink",
                                "count": "[length(parameters('PrivateLinkInfo'))]",
                                "input": {
                                  "name": "[format('{0}-pl{1}', parameters('Deployment'), parameters('PrivateLinkInfo')[copyIndex('privateLink')].Subnet)]",
                                  "vNet": "[format('{0}-vn', parameters('Deployment'))]"
                                }
                              }
                            ]
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "subnetPrivateEndpoint",
                                "count": "[length(parameters('PrivateLinkInfo'))]"
                              },
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2019-11-01",
                              "name": "[format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet)]",
                              "location": "[resourceGroup().location]",
                              "properties": {
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet)]",
                                    "properties": {
                                      "privateLinkServiceId": "[resourceId(parameters('resourceRG'), parameters('providerType'), parameters('resourceName'))]",
                                      "groupIds": "[array(parameters('PrivateLinkInfo')[copyIndex()].groupID)]",
                                      "privateLinkServiceConnectionState": {
                                        "status": "Approved",
                                        "description": "Auto-Approved",
                                        "actionsRequired": "None"
                                      }
                                    }
                                  }
                                ],
                                "manualPrivateLinkServiceConnections": [],
                                "subnet": {
                                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('privateLink')[copyIndex()].vNet, parameters('PrivateLinkInfo')[copyIndex()].Subnet)]"
                                }
                              }
                            },
                            {
                              "copy": {
                                "name": "NICDiags",
                                "count": "[length(parameters('PrivateLinkInfo'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('dp-{0}-pl-{1}-{2}-diags', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet)]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "DeploymentURI": {
                                    "value": "[parameters('DeploymentURI')]"
                                  },
                                  "NICName": {
                                    "value": "[last(split(reference(resourceId('Microsoft.Network/privateEndpoints', format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet))).networkInterfaces[0].id, '/'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.4.1318.3566",
                                      "templateHash": "3372180053977311610"
                                    }
                                  },
                                  "parameters": {
                                    "DeploymentURI": {
                                      "type": "string"
                                    },
                                    "NICName": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', parameters('NICName'))]",
                                      "name": "service",
                                      "properties": {
                                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                                        "metrics": [
                                          {
                                            "timeGrain": "PT5M",
                                            "enabled": true,
                                            "retentionPolicy": {
                                              "enabled": false,
                                              "days": 0
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "NICID": {
                              "type": "array",
                              "copy": {
                                "count": "[length(parameters('PrivateLinkInfo'))]",
                                "input": "[reference(resourceId('Microsoft.Network/privateEndpoints', format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet))).networkInterfaces[0].id]"
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ServiceBus/namespaces', format('{0}-sb{1}', parameters('Deployment'), parameters('SBInfo').Name))]"
                      ]
                    },
                    {
                      "condition": "[contains(parameters('SBInfo'), 'privatelinkinfo')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-SB-registerPrivateDNS{1}', parameters('Deployment'), parameters('SBInfo').name)]",
                      "resourceGroup": "[variables('HubRGName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "PrivateLinkInfo": {
                            "value": "[parameters('SBInfo').privateLinkInfo]"
                          },
                          "providerURL": {
                            "value": "windows.net"
                          },
                          "resourceName": {
                            "value": "[format('{0}-sb{1}', parameters('Deployment'), parameters('SBInfo').Name)]"
                          },
                          "providerType": {
                            "value": "Microsoft.ServiceBus/namespaces"
                          },
                          "Nics": {
                            "value": "[if(contains(parameters('SBInfo'), 'privatelinkinfo'), array(reference(resourceId('Microsoft.Resources/deployments', format('dp{0}-SB-privatelinkloop{1}', parameters('Deployment'), parameters('SBInfo').name)), '2020-10-01').outputs.NICID.value), array('na'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "9527034148045878947"
                            }
                          },
                          "parameters": {
                            "PrivateLinkInfo": {
                              "type": "array"
                            },
                            "resourceName": {
                              "type": "string"
                            },
                            "providerURL": {
                              "type": "string"
                            },
                            "providerType": {
                              "type": "string"
                            },
                            "Nics": {
                              "type": "array"
                            }
                          },
                          "variables": {
                            "DNSLookup": {
                              "Microsoft.AzureCosmosDB/databaseAccounts/SQL": "documents",
                              "Microsoft.AzureCosmosDB/databaseAccounts/MongoDB": "mongo.cosmos",
                              "Microsoft.AzureCosmosDB/databaseAccounts/Cassandra": "cassandra.cosmos",
                              "Microsoft.AzureCosmosDB/databaseAccounts/Gremlin": "gremlin.cosmos",
                              "Microsoft.AzureCosmosDB/databaseAccounts/Table": "table.cosmos",
                              "Microsoft.KeyVault/vaults": "vaultcore",
                              "Microsoft.DBforMySQL/servers": "mysql",
                              "Microsoft.DBforMariaDB/servers": "mariadb",
                              "Microsoft.AppConfiguration/configurationStores": "azconfig",
                              "Microsoft.ServiceBus/namespaces": "servicebus",
                              "Microsoft.Sql/servers": "database",
                              "Microsoft.Cache/redis": "redis.cache",
                              "Microsoft.Web/sites": "azurewebsites",
                              "Microsoft.Synapse/workspaces": "sql",
                              "Microsoft.ApiManagement/service": "azure-api"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "privateLinkDNS",
                                "count": "[length(parameters('PrivateLinkInfo'))]"
                              },
                              "type": "Microsoft.Network/privateDnsZones/A",
                              "apiVersion": "2020-06-01",
                              "name": "[format('privatelink.{0}.{1}/{2}', if(contains(variables('DNSLookup'), parameters('providerType')), variables('DNSLookup')[parameters('providerType')], parameters('PrivateLinkInfo')[copyIndex()].groupID), parameters('providerURL'), parameters('resourceName'))]",
                              "properties": {
                                "ttl": 3600,
                                "aRecords": [
                                  {
                                    "ipv4Address": "[reference(parameters('Nics')[copyIndex()], '2018-05-01').ipConfigurations[0].properties.privateIPAddress]"
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ServiceBus/namespaces', format('{0}-sb{1}', parameters('Deployment'), parameters('SBInfo').Name))]",
                        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-SB-privatelinkloop{1}', parameters('Deployment'), parameters('SBInfo').name))]"
                      ]
                    }
                  ]
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-OMS', variables('Deployment')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-VNET', variables('Deployment')))]"
      ]
    },
    {
      "condition": "[bool(parameters('Stage').APPCONFIG)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('dp{0}-APPCONFIG', variables('Deployment'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "DeploymentID": {
            "value": "[parameters('DeploymentID')]"
          },
          "DeploymentInfo": {
            "value": "[parameters('DeploymentInfo')]"
          },
          "Environment": {
            "value": "[parameters('Environment')]"
          },
          "Extensions": {
            "value": "[parameters('Extensions')]"
          },
          "Global": {
            "value": "[parameters('Global')]"
          },
          "Prefix": {
            "value": "[parameters('Prefix')]"
          },
          "Stage": {
            "value": "[parameters('Stage')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "15753255798214198051"
            }
          },
          "parameters": {
            "Prefix": {
              "type": "string"
            },
            "Environment": {
              "type": "string",
              "defaultValue": "D",
              "allowedValues": [
                "I",
                "D",
                "T",
                "U",
                "P",
                "S",
                "G",
                "A"
              ]
            },
            "DeploymentID": {
              "type": "string",
              "defaultValue": "1",
              "allowedValues": [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9"
              ]
            },
            "Stage": {
              "type": "object"
            },
            "Extensions": {
              "type": "object"
            },
            "Global": {
              "type": "object"
            },
            "DeploymentInfo": {
              "type": "object"
            }
          },
          "variables": {
            "Deployment": "[format('{0}-{1}-{2}-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID'))]",
            "DeploymentURI": "[toLower(format('{0}{1}{2}{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID')))]",
            "appConfigurationInfo": "[if(contains(parameters('DeploymentInfo'), 'appConfigurationInfo'), parameters('DeploymentInfo').appConfigurationInfo, createArray())]",
            "HubRGJ": "[json(parameters('Global').hubRG)]",
            "gh": {
              "hubRGPrefix": "[if(contains(variables('HubRGJ'), 'Prefix'), variables('HubRGJ').Prefix, parameters('Prefix'))]",
              "hubRGOrgName": "[if(contains(variables('HubRGJ'), 'OrgName'), variables('HubRGJ').OrgName, parameters('Global').OrgName)]",
              "hubRGAppName": "[if(contains(variables('HubRGJ'), 'AppName'), variables('HubRGJ').AppName, parameters('Global').AppName)]",
              "hubRGRGName": "[if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID'))))]"
            },
            "HubRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').hubRGPrefix, variables('gh').hubRGOrgName, variables('gh').hubRGAppName, variables('gh').hubRGRGName)]"
          },
          "resources": [
            {
              "type": "Microsoft.AppConfiguration/configurationStores",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}-ac{1}', variables('Deployment'), variables('appConfigurationInfo').Name)]",
              "location": "[resourceGroup().location]",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiKeyVaultSecretsGet', variables('Deployment'))))]": {}
                }
              },
              "sku": {
                "name": "[variables('appConfigurationInfo').sku]"
              },
              "properties": {
                "publicNetworkAccess": "[if(bool(variables('appConfigurationInfo').publicNetworkAccess), 'Enabled', 'Disabled')]"
              }
            },
            {
              "condition": "[contains(variables('appConfigurationInfo'), 'privatelinkinfo')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dp{0}-privatelinkloopAC{1}', variables('Deployment'), variables('appConfigurationInfo').name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "Deployment": {
                    "value": "[variables('Deployment')]"
                  },
                  "DeploymentURI": {
                    "value": "[variables('DeploymentURI')]"
                  },
                  "PrivateLinkInfo": {
                    "value": "[variables('appConfigurationInfo').privateLinkInfo]"
                  },
                  "providerType": {
                    "value": "Microsoft.AppConfiguration/configurationStores"
                  },
                  "resourceName": {
                    "value": "[format('{0}-ac{1}', variables('Deployment'), variables('appConfigurationInfo').Name)]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1318.3566",
                      "templateHash": "1242957729837230630"
                    }
                  },
                  "parameters": {
                    "Deployment": {
                      "type": "string"
                    },
                    "DeploymentURI": {
                      "type": "string"
                    },
                    "PrivateLinkInfo": {
                      "type": "array"
                    },
                    "providerType": {
                      "type": "string"
                    },
                    "resourceName": {
                      "type": "string"
                    },
                    "resourceRG": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().name]"
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "privateLink",
                        "count": "[length(parameters('PrivateLinkInfo'))]",
                        "input": {
                          "name": "[format('{0}-pl{1}', parameters('Deployment'), parameters('PrivateLinkInfo')[copyIndex('privateLink')].Subnet)]",
                          "vNet": "[format('{0}-vn', parameters('Deployment'))]"
                        }
                      }
                    ]
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "subnetPrivateEndpoint",
                        "count": "[length(parameters('PrivateLinkInfo'))]"
                      },
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2019-11-01",
                      "name": "[format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet)]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "privateLinkServiceConnections": [
                          {
                            "name": "[format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet)]",
                            "properties": {
                              "privateLinkServiceId": "[resourceId(parameters('resourceRG'), parameters('providerType'), parameters('resourceName'))]",
                              "groupIds": "[array(parameters('PrivateLinkInfo')[copyIndex()].groupID)]",
                              "privateLinkServiceConnectionState": {
                                "status": "Approved",
                                "description": "Auto-Approved",
                                "actionsRequired": "None"
                              }
                            }
                          }
                        ],
                        "manualPrivateLinkServiceConnections": [],
                        "subnet": {
                          "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('privateLink')[copyIndex()].vNet, parameters('PrivateLinkInfo')[copyIndex()].Subnet)]"
                        }
                      }
                    },
                    {
                      "copy": {
                        "name": "NICDiags",
                        "count": "[length(parameters('PrivateLinkInfo'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp-{0}-pl-{1}-{2}-diags', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "DeploymentURI": {
                            "value": "[parameters('DeploymentURI')]"
                          },
                          "NICName": {
                            "value": "[last(split(reference(resourceId('Microsoft.Network/privateEndpoints', format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet))).networkInterfaces[0].id, '/'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "3372180053977311610"
                            }
                          },
                          "parameters": {
                            "DeploymentURI": {
                              "type": "string"
                            },
                            "NICName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Network/networkInterfaces/{0}', parameters('NICName'))]",
                              "name": "service",
                              "properties": {
                                "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                                "metrics": [
                                  {
                                    "timeGrain": "PT5M",
                                    "enabled": true,
                                    "retentionPolicy": {
                                      "enabled": false,
                                      "days": 0
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "NICID": {
                      "type": "array",
                      "copy": {
                        "count": "[length(parameters('PrivateLinkInfo'))]",
                        "input": "[reference(resourceId('Microsoft.Network/privateEndpoints', format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet))).networkInterfaces[0].id]"
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.AppConfiguration/configurationStores', format('{0}-ac{1}', variables('Deployment'), variables('appConfigurationInfo').Name))]"
              ]
            },
            {
              "condition": "[contains(variables('appConfigurationInfo'), 'privatelinkinfo')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dp{0}-registerPrivateDNS{1}', variables('Deployment'), variables('appConfigurationInfo').name)]",
              "resourceGroup": "[variables('HubRGName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "PrivateLinkInfo": {
                    "value": "[variables('appConfigurationInfo').privateLinkInfo]"
                  },
                  "providerURL": {
                    "value": "io"
                  },
                  "providerType": {
                    "value": "Microsoft.AppConfiguration/configurationStores"
                  },
                  "resourceName": {
                    "value": "[format('{0}-ac{1}', variables('Deployment'), variables('appConfigurationInfo').Name)]"
                  },
                  "Nics": {
                    "value": "[if(contains(variables('appConfigurationInfo'), 'privatelinkinfo'), array(reference(resourceId('Microsoft.Resources/deployments', format('dp{0}-privatelinkloopAC{1}', variables('Deployment'), variables('appConfigurationInfo').name)), '2020-10-01').outputs.NICID.value), array('na'))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1318.3566",
                      "templateHash": "9527034148045878947"
                    }
                  },
                  "parameters": {
                    "PrivateLinkInfo": {
                      "type": "array"
                    },
                    "resourceName": {
                      "type": "string"
                    },
                    "providerURL": {
                      "type": "string"
                    },
                    "providerType": {
                      "type": "string"
                    },
                    "Nics": {
                      "type": "array"
                    }
                  },
                  "variables": {
                    "DNSLookup": {
                      "Microsoft.AzureCosmosDB/databaseAccounts/SQL": "documents",
                      "Microsoft.AzureCosmosDB/databaseAccounts/MongoDB": "mongo.cosmos",
                      "Microsoft.AzureCosmosDB/databaseAccounts/Cassandra": "cassandra.cosmos",
                      "Microsoft.AzureCosmosDB/databaseAccounts/Gremlin": "gremlin.cosmos",
                      "Microsoft.AzureCosmosDB/databaseAccounts/Table": "table.cosmos",
                      "Microsoft.KeyVault/vaults": "vaultcore",
                      "Microsoft.DBforMySQL/servers": "mysql",
                      "Microsoft.DBforMariaDB/servers": "mariadb",
                      "Microsoft.AppConfiguration/configurationStores": "azconfig",
                      "Microsoft.ServiceBus/namespaces": "servicebus",
                      "Microsoft.Sql/servers": "database",
                      "Microsoft.Cache/redis": "redis.cache",
                      "Microsoft.Web/sites": "azurewebsites",
                      "Microsoft.Synapse/workspaces": "sql",
                      "Microsoft.ApiManagement/service": "azure-api"
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "privateLinkDNS",
                        "count": "[length(parameters('PrivateLinkInfo'))]"
                      },
                      "type": "Microsoft.Network/privateDnsZones/A",
                      "apiVersion": "2020-06-01",
                      "name": "[format('privatelink.{0}.{1}/{2}', if(contains(variables('DNSLookup'), parameters('providerType')), variables('DNSLookup')[parameters('providerType')], parameters('PrivateLinkInfo')[copyIndex()].groupID), parameters('providerURL'), parameters('resourceName'))]",
                      "properties": {
                        "ttl": 3600,
                        "aRecords": [
                          {
                            "ipv4Address": "[reference(parameters('Nics')[copyIndex()], '2018-05-01').ipConfigurations[0].properties.privateIPAddress]"
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.AppConfiguration/configurationStores', format('{0}-ac{1}', variables('Deployment'), variables('appConfigurationInfo').Name))]",
                "[resourceId('Microsoft.Resources/deployments', format('dp{0}-privatelinkloopAC{1}', variables('Deployment'), variables('appConfigurationInfo').name))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-OMS', variables('Deployment')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-VNET', variables('Deployment')))]"
      ]
    },
    {
      "condition": "[bool(parameters('Stage').WAFPOLICY)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('dp{0}-WAFPOLICY', variables('Deployment'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "DeploymentID": {
            "value": "[parameters('DeploymentID')]"
          },
          "DeploymentInfo": {
            "value": "[parameters('DeploymentInfo')]"
          },
          "Environment": {
            "value": "[parameters('Environment')]"
          },
          "Extensions": {
            "value": "[parameters('Extensions')]"
          },
          "Global": {
            "value": "[parameters('Global')]"
          },
          "Prefix": {
            "value": "[parameters('Prefix')]"
          },
          "Stage": {
            "value": "[parameters('Stage')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "5207253981306299973"
            }
          },
          "parameters": {
            "Prefix": {
              "type": "string"
            },
            "Environment": {
              "type": "string",
              "defaultValue": "D",
              "allowedValues": [
                "I",
                "D",
                "T",
                "U",
                "P",
                "S",
                "G",
                "A"
              ]
            },
            "DeploymentID": {
              "type": "string",
              "defaultValue": "1",
              "allowedValues": [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9"
              ]
            },
            "Stage": {
              "type": "object"
            },
            "Extensions": {
              "type": "object"
            },
            "Global": {
              "type": "object"
            },
            "DeploymentInfo": {
              "type": "object"
            }
          },
          "variables": {
            "copy": [
              {
                "name": "POLICY",
                "count": "[length(variables('WAFPolicyInfo'))]",
                "input": {
                  "match": "[or(equals(parameters('Global').CN, '.'), contains(array(parameters('Global').CN), variables('WAFPolicyInfo')[copyIndex('POLICY')].Name))]"
                }
              }
            ],
            "Deployment": "[format('{0}-{1}-{2}-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID'))]",
            "DeploymentURI": "[toLower(format('{0}{1}{2}{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID')))]",
            "WAFPolicyInfo": "[if(contains(parameters('DeploymentInfo'), 'WAFPolicyInfo'), parameters('DeploymentInfo').WAFPolicyInfo, variables('WAFPolicyDefault'))]",
            "WAFPolicyDefault": [
              {
                "name": "API",
                "state": "enabled",
                "mode": "Prevention",
                "ruleSetVersion": "3.1",
                "customRules": [],
                "exclusions": [],
                "ruleGroupOverrides": []
              }
            ],
            "WAFPolicyDefaultNTE": [
              {
                "name": "fe2",
                "state": "enabled",
                "mode": "Prevention",
                "ruleSetVersion": "3.1",
                "customRules": [
                  {
                    "name": "BypassOpenOrder",
                    "priority": 100,
                    "ruleType": "MatchRule",
                    "action": "Allow",
                    "matchConditions": [
                      {
                        "matchVariables": [
                          {
                            "variableName": "RequestUri"
                          }
                        ],
                        "operator": "Contains",
                        "negationConditon": false,
                        "matchValues": [
                          "/jakarta/isapi_redirect.dll"
                        ],
                        "transforms": [
                          "Lowercase"
                        ]
                      }
                    ]
                  },
                  {
                    "name": "BlockCFIDE",
                    "priority": 99,
                    "ruleType": "MatchRule",
                    "action": "Block",
                    "matchConditions": [
                      {
                        "matchVariables": [
                          {
                            "variableName": "RequestUri"
                          }
                        ],
                        "operator": "Contains",
                        "negationConditon": false,
                        "matchValues": [
                          "/cfide/"
                        ],
                        "transforms": [
                          "Lowercase"
                        ]
                      }
                    ]
                  }
                ],
                "exclusions": []
              },
              {
                "name": "MYORDERS2",
                "state": "enabled",
                "mode": "Prevention",
                "ruleSetVersion": "3.1",
                "customRules": [
                  {
                    "name": "BypassOpenOrder",
                    "priority": 100,
                    "ruleType": "MatchRule",
                    "action": "Allow",
                    "matchConditions": [
                      {
                        "matchVariables": [
                          {
                            "variableName": "RequestUri"
                          }
                        ],
                        "operator": "Contains",
                        "negationConditon": false,
                        "matchValues": [
                          "/jakarta/isapi_redirect.dll"
                        ],
                        "transforms": [
                          "Lowercase"
                        ]
                      }
                    ]
                  },
                  {
                    "name": "BlockCFIDE",
                    "priority": 99,
                    "ruleType": "MatchRule",
                    "action": "Block",
                    "matchConditions": [
                      {
                        "matchVariables": [
                          {
                            "variableName": "RequestUri"
                          }
                        ],
                        "operator": "Contains",
                        "negationConditon": false,
                        "matchValues": [
                          "/cfide/"
                        ],
                        "transforms": [
                          "Lowercase"
                        ]
                      }
                    ]
                  }
                ],
                "exclusions": []
              },
              {
                "name": "XML2",
                "state": "enabled",
                "mode": "Prevention",
                "ruleSetVersion": "3.1",
                "customRules": [
                  {
                    "name": "BlockCFIDE",
                    "priority": 99,
                    "ruleType": "MatchRule",
                    "action": "Block",
                    "matchConditions": [
                      {
                        "matchVariables": [
                          {
                            "variableName": "RequestUri"
                          }
                        ],
                        "operator": "Contains",
                        "negationConditon": false,
                        "matchValues": [
                          "/cfide/"
                        ],
                        "transforms": [
                          "Lowercase"
                        ]
                      }
                    ]
                  }
                ],
                "exclusions": [
                  {
                    "matchVariable": "RequestArgNames",
                    "selectorMatchOperator": "Equals",
                    "selector": "bulkData"
                  },
                  {
                    "matchVariable": "RequestArgNames",
                    "selectorMatchOperator": "Equals",
                    "selector": "inputText"
                  },
                  {
                    "matchVariable": "RequestArgNames",
                    "selectorMatchOperator": "Equals",
                    "selector": "topsheetnotes"
                  },
                  {
                    "matchVariable": "RequestArgNames",
                    "selectorMatchOperator": "Equals",
                    "selector": "phrasetextonly"
                  },
                  {
                    "matchVariable": "RequestArgNames",
                    "selectorMatchOperator": "Equals",
                    "selector": "rtfText"
                  },
                  {
                    "matchVariable": "RequestArgNames",
                    "selectorMatchOperator": "Equals",
                    "selector": "comment"
                  },
                  {
                    "matchVariable": "RequestArgNames",
                    "selectorMatchOperator": "Equals",
                    "selector": "message"
                  },
                  {
                    "matchVariable": "RequestArgNames",
                    "selectorMatchOperator": "Equals",
                    "selector": "requiresattention"
                  },
                  {
                    "matchVariable": "RequestArgNames",
                    "selectorMatchOperator": "Equals",
                    "selector": "usernotes"
                  },
                  {
                    "matchVariable": "RequestArgNames",
                    "selectorMatchOperator": "Equals",
                    "selector": "pianoroll"
                  }
                ]
              }
            ],
            "ruleGroupOverrides": [
              {
                "ruleGroupName": "REQUEST-913-SCANNER-DETECTION",
                "rules": [
                  {
                    "ruleId": "913101",
                    "state": "Disabled"
                  }
                ]
              },
              {
                "ruleGroupName": "REQUEST-920-PROTOCOL-ENFORCEMENT",
                "rules": [
                  {
                    "ruleId": "920230",
                    "state": "Disabled"
                  },
                  {
                    "ruleId": "920300",
                    "state": "Disabled"
                  },
                  {
                    "ruleId": "920320",
                    "state": "Disabled"
                  },
                  {
                    "ruleId": "920350",
                    "state": "Disabled"
                  },
                  {
                    "ruleId": "920420",
                    "state": "Disabled"
                  }
                ]
              },
              {
                "ruleGroupName": "REQUEST-930-APPLICATION-ATTACK-LFI",
                "rules": [
                  {
                    "ruleId": "930100",
                    "state": "Disabled"
                  },
                  {
                    "ruleId": "930110",
                    "state": "Disabled"
                  }
                ]
              },
              {
                "ruleGroupName": "REQUEST-931-APPLICATION-ATTACK-RFI",
                "rules": [
                  {
                    "ruleId": "931130",
                    "state": "Disabled"
                  }
                ]
              },
              {
                "ruleGroupName": "REQUEST-932-APPLICATION-ATTACK-RCE",
                "rules": [
                  {
                    "ruleId": "932100",
                    "state": "Disabled"
                  },
                  {
                    "ruleId": "932105",
                    "state": "Disabled"
                  },
                  {
                    "ruleId": "932130",
                    "state": "Disabled"
                  },
                  {
                    "ruleId": "932110",
                    "state": "Disabled"
                  }
                ]
              },
              {
                "ruleGroupName": "REQUEST-942-APPLICATION-ATTACK-SQLI",
                "rules": [
                  {
                    "ruleId": "942110",
                    "state": "Disabled"
                  },
                  {
                    "ruleId": "942120",
                    "state": "Disabled"
                  },
                  {
                    "ruleId": "942130",
                    "state": "Disabled"
                  },
                  {
                    "ruleId": "942150",
                    "state": "Disabled"
                  },
                  {
                    "ruleId": "942180",
                    "state": "Disabled"
                  },
                  {
                    "ruleId": "942190",
                    "state": "Disabled"
                  },
                  {
                    "ruleId": "942200",
                    "state": "Disabled"
                  },
                  {
                    "ruleId": "942210",
                    "state": "Disabled"
                  },
                  {
                    "ruleId": "942260",
                    "state": "Disabled"
                  },
                  {
                    "ruleId": "942300",
                    "state": "Disabled"
                  },
                  {
                    "ruleId": "942310",
                    "state": "Disabled"
                  },
                  {
                    "ruleId": "942330",
                    "state": "Disabled"
                  },
                  {
                    "ruleId": "942340",
                    "state": "Disabled"
                  },
                  {
                    "ruleId": "942360",
                    "state": "Disabled"
                  },
                  {
                    "ruleId": "942370",
                    "state": "Disabled"
                  },
                  {
                    "ruleId": "942380",
                    "state": "Disabled"
                  },
                  {
                    "ruleId": "942390",
                    "state": "Disabled"
                  },
                  {
                    "ruleId": "942400",
                    "state": "Disabled"
                  },
                  {
                    "ruleId": "942430",
                    "state": "Disabled"
                  },
                  {
                    "ruleId": "942440",
                    "state": "Disabled"
                  },
                  {
                    "ruleId": "942240",
                    "state": "Disabled"
                  },
                  {
                    "ruleId": "942410",
                    "state": "Disabled"
                  },
                  {
                    "ruleId": "942100",
                    "state": "Disabled"
                  }
                ]
              },
              {
                "ruleGroupName": "REQUEST-941-APPLICATION-ATTACK-XSS",
                "rules": [
                  {
                    "ruleId": "941100",
                    "state": "Disabled"
                  },
                  {
                    "ruleId": "941130",
                    "state": "Disabled"
                  },
                  {
                    "ruleId": "941160",
                    "state": "Disabled"
                  },
                  {
                    "ruleId": "941200",
                    "state": "Disabled"
                  },
                  {
                    "ruleId": "941310",
                    "state": "Disabled"
                  },
                  {
                    "ruleId": "941320",
                    "state": "Disabled"
                  },
                  {
                    "ruleId": "941330",
                    "state": "Disabled"
                  },
                  {
                    "ruleId": "941340",
                    "state": "Disabled"
                  },
                  {
                    "ruleId": "941350",
                    "state": "Disabled"
                  },
                  {
                    "ruleId": "941150",
                    "state": "Disabled"
                  }
                ]
              },
              {
                "ruleGroupName": "REQUEST-943-APPLICATION-ATTACK-SESSION-FIXATION",
                "rules": [
                  {
                    "ruleId": "943110",
                    "state": "Disabled"
                  },
                  {
                    "ruleId": "943120",
                    "state": "Disabled"
                  }
                ]
              },
              {
                "ruleGroupName": "General",
                "rules": [
                  {
                    "ruleId": "200004",
                    "state": "Disabled"
                  }
                ]
              },
              {
                "ruleGroupName": "REQUEST-933-APPLICATION-ATTACK-PHP",
                "rules": [
                  {
                    "ruleId": "933100",
                    "state": "Disabled"
                  },
                  {
                    "ruleId": "933160",
                    "state": "Disabled"
                  }
                ]
              }
            ]
          },
          "resources": [
            {
              "condition": "[variables('POLICY')[copyIndex()].match]",
              "copy": {
                "name": "WAFPolicy",
                "count": "[length(variables('WAFPolicyInfo'))]"
              },
              "type": "Microsoft.Network/ApplicationGatewayWebApplicationFirewallPolicies",
              "apiVersion": "2020-04-01",
              "name": "[format('{0}Policywaf{1}', variables('DeploymentURI'), variables('WAFPolicyInfo')[copyIndex()].name)]",
              "location": "[resourceGroup().location]",
              "properties": {
                "customRules": "[if(contains(variables('WAFPolicyInfo')[copyIndex()], 'customRules'), variables('WAFPolicyInfo')[copyIndex()].customRules, null())]",
                "policySettings": {
                  "fileUploadLimitInMb": 100,
                  "maxRequestBodySizeInKb": 128,
                  "mode": "[variables('WAFPolicyInfo')[copyIndex()].mode]",
                  "requestBodyCheck": true,
                  "state": "[variables('WAFPolicyInfo')[copyIndex()].state]"
                },
                "managedRules": {
                  "exclusions": "[if(contains(variables('WAFPolicyInfo')[copyIndex()], 'exclusions'), variables('WAFPolicyInfo')[copyIndex()].exclusions, null())]",
                  "managedRuleSets": "[union(createArray(createObject('ruleSetType', 'OWASP', 'ruleSetVersion', variables('WAFPolicyInfo')[copyIndex()].ruleSetVersion, 'ruleGroupOverrides', if(contains(variables('WAFPolicyInfo')[copyIndex()], 'ruleGroupOverrides'), variables('WAFPolicyInfo')[copyIndex()].ruleGroupOverrides, variables('ruleGroupOverrides')))), if(not(and(contains(variables('WAFPolicyInfo')[copyIndex()], 'enableBotRule'), bool(variables('WAFPolicyInfo')[copyIndex()].enableBotRule))), createArray(), createArray(createObject('ruleSetType', 'Microsoft_BotManagerRuleSet', 'ruleSetVersion', '0.1', 'ruleGroupOverrides', createArray()))))]"
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-VNET', variables('Deployment')))]"
      ]
    },
    {
      "condition": "[bool(parameters('Stage').WAF)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('dp{0}-WAF', variables('Deployment'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "DeploymentID": {
            "value": "[parameters('DeploymentID')]"
          },
          "DeploymentInfo": {
            "value": "[parameters('DeploymentInfo')]"
          },
          "Environment": {
            "value": "[parameters('Environment')]"
          },
          "Extensions": {
            "value": "[parameters('Extensions')]"
          },
          "Global": {
            "value": "[parameters('Global')]"
          },
          "Prefix": {
            "value": "[parameters('Prefix')]"
          },
          "Stage": {
            "value": "[parameters('Stage')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "14512902561189914592"
            }
          },
          "parameters": {
            "Prefix": {
              "type": "string"
            },
            "Environment": {
              "type": "string",
              "defaultValue": "D",
              "allowedValues": [
                "I",
                "D",
                "T",
                "U",
                "P",
                "S",
                "G",
                "A"
              ]
            },
            "DeploymentID": {
              "type": "string",
              "defaultValue": "1",
              "allowedValues": [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9"
              ]
            },
            "Stage": {
              "type": "object"
            },
            "Extensions": {
              "type": "object"
            },
            "Global": {
              "type": "object"
            },
            "DeploymentInfo": {
              "type": "object"
            }
          },
          "variables": {
            "copy": [
              {
                "name": "WAFs",
                "count": "[length(variables('WAFInfo'))]",
                "input": {
                  "match": "[or(equals(parameters('Global').CN, '.'), contains(array(parameters('Global').CN), variables('WAFInfo')[copyIndex('WAFs')].WAFName))]"
                }
              }
            ],
            "Deployment": "[format('{0}-{1}-{2}-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID'))]",
            "DeploymentURI": "[toLower(format('{0}{1}{2}{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID')))]",
            "regionLookup": "[json('{\r\n  \"francecentral\": {\r\n    \"displayname\": \"France Central\",\r\n    \"location\": \"francecentral\",\r\n    \"PREFIX\": \"AFC1\",\r\n    \"pairedRegion\": \"francesouth\"\r\n  },\r\n  \"southeastasia\": {\r\n    \"displayname\": \"Southeast Asia\",\r\n    \"location\": \"southeastasia\",\r\n    \"PREFIX\": \"ASA1\",\r\n    \"pairedRegion\": \"eastasia\"\r\n  },\r\n  \"southafricawest\": {\r\n    \"displayname\": \"South Africa West\",\r\n    \"location\": \"southafricawest\",\r\n    \"PREFIX\": \"ASAW\",\r\n    \"pairedRegion\": \"southafricanorth\"\r\n  },\r\n  \"eastus2\": {\r\n    \"displayname\": \"East US 2\",\r\n    \"location\": \"eastus2\",\r\n    \"PREFIX\": \"AEU2\",\r\n    \"pairedRegion\": \"centralus\"\r\n  },\r\n  \"eastus\": {\r\n    \"displayname\": \"East US\",\r\n    \"location\": \"eastus\",\r\n    \"PREFIX\": \"AEU1\",\r\n    \"pairedRegion\": \"westus\"\r\n  },\r\n  \"jioindiawest\": {\r\n    \"displayname\": \"Jio India West\",\r\n    \"location\": \"jioindiawest\",\r\n    \"PREFIX\": \"AJIW\",\r\n    \"pairedRegion\": \"jioindiacentral\"\r\n  },\r\n  \"westcentralus\": {\r\n    \"displayname\": \"West Central US\",\r\n    \"location\": \"westcentralus\",\r\n    \"PREFIX\": \"AWCU\",\r\n    \"pairedRegion\": \"westus2\"\r\n  },\r\n  \"koreacentral\": {\r\n    \"displayname\": \"Korea Central\",\r\n    \"location\": \"koreacentral\",\r\n    \"PREFIX\": \"AKC1\",\r\n    \"pairedRegion\": \"koreasouth\"\r\n  },\r\n  \"uaecentral\": {\r\n    \"displayname\": \"UAE Central\",\r\n    \"location\": \"uaecentral\",\r\n    \"PREFIX\": \"AUC1\",\r\n    \"pairedRegion\": \"uaenorth\"\r\n  },\r\n  \"westus\": {\r\n    \"displayname\": \"West US\",\r\n    \"location\": \"westus\",\r\n    \"PREFIX\": \"AWU1\",\r\n    \"pairedRegion\": \"eastus\"\r\n  },\r\n  \"southafricanorth\": {\r\n    \"displayname\": \"South Africa North\",\r\n    \"location\": \"southafricanorth\",\r\n    \"PREFIX\": \"ASAN\",\r\n    \"pairedRegion\": \"southafricawest\"\r\n  },\r\n  \"australiacentral2\": {\r\n    \"displayname\": \"Australia Central 2\",\r\n    \"location\": \"australiacentral2\",\r\n    \"PREFIX\": \"AAC2\",\r\n    \"pairedRegion\": \"australiacentral2\"\r\n  },\r\n  \"francesouth\": {\r\n    \"displayname\": \"France South\",\r\n    \"location\": \"francesouth\",\r\n    \"PREFIX\": \"AFS1\",\r\n    \"pairedRegion\": \"francecentral\"\r\n  },\r\n  \"ukwest\": {\r\n    \"displayname\": \"UK West\",\r\n    \"location\": \"ukwest\",\r\n    \"PREFIX\": \"AUW1\",\r\n    \"pairedRegion\": \"uksouth\"\r\n  },\r\n  \"southindia\": {\r\n    \"displayname\": \"South India\",\r\n    \"location\": \"southindia\",\r\n    \"PREFIX\": \"ASI1\",\r\n    \"pairedRegion\": \"centralindia\"\r\n  },\r\n  \"centralus\": {\r\n    \"displayname\": \"Central US\",\r\n    \"location\": \"centralus\",\r\n    \"PREFIX\": \"ACU1\",\r\n    \"pairedRegion\": \"eastus2\"\r\n  },\r\n  \"germanynorth\": {\r\n    \"displayname\": \"Germany North\",\r\n    \"location\": \"germanynorth\",\r\n    \"PREFIX\": \"AGN1\",\r\n    \"pairedRegion\": \"germanywestcentral\"\r\n  },\r\n  \"koreasouth\": {\r\n    \"displayname\": \"Korea South\",\r\n    \"location\": \"koreasouth\",\r\n    \"PREFIX\": \"AKS1\",\r\n    \"pairedRegion\": \"koreacentral\"\r\n  },\r\n  \"westindia\": {\r\n    \"displayname\": \"West India\",\r\n    \"location\": \"westindia\",\r\n    \"PREFIX\": \"AWI1\",\r\n    \"pairedRegion\": \"southindia\"\r\n  },\r\n  \"westus2\": {\r\n    \"displayname\": \"West US 2\",\r\n    \"location\": \"westus2\",\r\n    \"PREFIX\": \"AWU2\",\r\n    \"pairedRegion\": \"westcentralus\"\r\n  },\r\n  \"northcentralus\": {\r\n    \"displayname\": \"North Central US\",\r\n    \"location\": \"northcentralus\",\r\n    \"PREFIX\": \"ANCU\",\r\n    \"pairedRegion\": \"southcentralus\"\r\n  },\r\n  \"westeurope\": {\r\n    \"displayname\": \"West Europe\",\r\n    \"location\": \"westeurope\",\r\n    \"PREFIX\": \"AWEU\",\r\n    \"pairedRegion\": \"northeurope\"\r\n  },\r\n  \"canadacentral\": {\r\n    \"displayname\": \"Canada Central\",\r\n    \"location\": \"canadacentral\",\r\n    \"PREFIX\": \"ACC1\",\r\n    \"pairedRegion\": \"canadaeast\"\r\n  },\r\n  \"southcentralus\": {\r\n    \"displayname\": \"South Central US\",\r\n    \"location\": \"southcentralus\",\r\n    \"PREFIX\": \"ASCU\",\r\n    \"pairedRegion\": \"northcentralus\"\r\n  },\r\n  \"norwayeast\": {\r\n    \"displayname\": \"Norway East\",\r\n    \"location\": \"norwayeast\",\r\n    \"PREFIX\": \"ANE1\",\r\n    \"pairedRegion\": \"norwaywest\"\r\n  },\r\n  \"japanwest\": {\r\n    \"displayname\": \"Japan West\",\r\n    \"location\": \"japanwest\",\r\n    \"PREFIX\": \"AJW1\",\r\n    \"pairedRegion\": \"japaneast\"\r\n  },\r\n  \"norwaywest\": {\r\n    \"displayname\": \"Norway West\",\r\n    \"location\": \"norwaywest\",\r\n    \"PREFIX\": \"ANW1\",\r\n    \"pairedRegion\": \"norwayeast\"\r\n  },\r\n  \"jioindiacentral\": {\r\n    \"displayname\": \"Jio India Central\",\r\n    \"location\": \"jioindiacentral\",\r\n    \"PREFIX\": \"AJIC\",\r\n    \"pairedRegion\": \"jioindiawest\"\r\n  },\r\n  \"centralindia\": {\r\n    \"displayname\": \"Central India\",\r\n    \"location\": \"centralindia\",\r\n    \"PREFIX\": \"ACI1\",\r\n    \"pairedRegion\": \"southindia\"\r\n  },\r\n  \"westus3\": {\r\n    \"displayname\": \"West US 3\",\r\n    \"location\": \"westus3\",\r\n    \"PREFIX\": \"AWU3\",\r\n    \"pairedRegion\": \"eastus\"\r\n  },\r\n  \"brazilsouth\": {\r\n    \"displayname\": \"Brazil South\",\r\n    \"location\": \"brazilsouth\",\r\n    \"PREFIX\": \"ABS1\",\r\n    \"pairedRegion\": \"southcentralus\"\r\n  },\r\n  \"eastasia\": {\r\n    \"displayname\": \"East Asia\",\r\n    \"location\": \"eastasia\",\r\n    \"PREFIX\": \"AEA1\",\r\n    \"pairedRegion\": \"southeastasia\"\r\n  },\r\n  \"swedencentral\": {\r\n    \"displayname\": \"Sweden Central\",\r\n    \"location\": \"swedencentral\",\r\n    \"PREFIX\": \"ASC1\",\r\n    \"pairedRegion\": \"swedensouth\"\r\n  },\r\n  \"uksouth\": {\r\n    \"displayname\": \"UK South\",\r\n    \"location\": \"uksouth\",\r\n    \"PREFIX\": \"AUS1\",\r\n    \"pairedRegion\": \"ukwest\"\r\n  },\r\n  \"switzerlandnorth\": {\r\n    \"displayname\": \"Switzerland North\",\r\n    \"location\": \"switzerlandnorth\",\r\n    \"PREFIX\": \"ASN1\",\r\n    \"pairedRegion\": \"switzerlandwest\"\r\n  },\r\n  \"canadaeast\": {\r\n    \"displayname\": \"Canada East\",\r\n    \"location\": \"canadaeast\",\r\n    \"PREFIX\": \"ACE1\",\r\n    \"pairedRegion\": \"canadacentral\"\r\n  },\r\n  \"australiasoutheast\": {\r\n    \"displayname\": \"Australia Southeast\",\r\n    \"location\": \"australiasoutheast\",\r\n    \"PREFIX\": \"AAS1\",\r\n    \"pairedRegion\": \"australiaeast\"\r\n  },\r\n  \"northeurope\": {\r\n    \"displayname\": \"North Europe\",\r\n    \"location\": \"northeurope\",\r\n    \"PREFIX\": \"ANEU\",\r\n    \"pairedRegion\": \"westeurope\"\r\n  },\r\n  \"germanywestcentral\": {\r\n    \"displayname\": \"Germany West Central\",\r\n    \"location\": \"germanywestcentral\",\r\n    \"PREFIX\": \"AGWC\",\r\n    \"pairedRegion\": \"germanynorth\"\r\n  },\r\n  \"japaneast\": {\r\n    \"displayname\": \"Japan East\",\r\n    \"location\": \"japaneast\",\r\n    \"PREFIX\": \"AJE1\",\r\n    \"pairedRegion\": \"japanwest\"\r\n  },\r\n  \"uaenorth\": {\r\n    \"displayname\": \"UAE North\",\r\n    \"location\": \"uaenorth\",\r\n    \"PREFIX\": \"AUN1\",\r\n    \"pairedRegion\": \"uaecentral\"\r\n  },\r\n  \"australiaeast\": {\r\n    \"displayname\": \"Australia East\",\r\n    \"location\": \"australiaeast\",\r\n    \"PREFIX\": \"AAE1\",\r\n    \"pairedRegion\": \"australiasoutheast\"\r\n  },\r\n  \"switzerlandwest\": {\r\n    \"displayname\": \"Switzerland West\",\r\n    \"location\": \"switzerlandwest\",\r\n    \"PREFIX\": \"ASW1\",\r\n    \"pairedRegion\": \"switzerlandnorth\"\r\n  },\r\n  \"australiacentral\": {\r\n    \"displayname\": \"Australia Central\",\r\n    \"location\": \"australiacentral\",\r\n    \"PREFIX\": \"AAC1\",\r\n    \"pairedRegion\": \"australiacentral\"\r\n  },\r\n  \"brazilsoutheast\": {\r\n    \"displayname\": \"Brazil Southeast\",\r\n    \"location\": \"brazilsoutheast\",\r\n    \"PREFIX\": \"ABSE\",\r\n    \"pairedRegion\": \"brazilsouth\"\r\n  }\r\n}\r\n')]",
            "primaryPrefix": "[variables('regionLookup')[parameters('Global').PrimaryLocation].prefix]",
            "GlobalRGJ": "[json(parameters('Global').GlobalRG)]",
            "gh": {
              "globalRGPrefix": "[if(contains(variables('GlobalRGJ'), 'Prefix'), variables('GlobalRGJ').Prefix, variables('primaryPrefix'))]",
              "globalRGOrgName": "[if(contains(variables('GlobalRGJ'), 'OrgName'), variables('GlobalRGJ').OrgName, parameters('Global').OrgName)]",
              "globalRGAppName": "[if(contains(variables('GlobalRGJ'), 'AppName'), variables('GlobalRGJ').AppName, parameters('Global').AppName)]",
              "globalRGName": "[if(contains(variables('GlobalRGJ'), 'name'), variables('GlobalRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID')))]"
            },
            "globalRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').globalRGPrefix, variables('gh').globalRGOrgName, variables('gh').globalRGAppName, variables('gh').globalRGName)]",
            "WAFInfo": "[if(contains(parameters('DeploymentInfo'), 'WAFInfo'), parameters('DeploymentInfo').WAFInfo, createArray())]"
          },
          "resources": [
            {
              "condition": "[variables('WAFs')[copyIndex()].match]",
              "copy": {
                "name": "PublicIP",
                "count": "[length(variables('WAFInfo'))]"
              },
              "type": "Microsoft.Network/publicIPAddresses",
              "apiVersion": "2019-02-01",
              "name": "[format('{0}-waf{1}-publicip1', variables('Deployment'), variables('WAFInfo')[copyIndex()].WAFName)]",
              "location": "[resourceGroup().location]",
              "sku": {
                "name": "Standard"
              },
              "properties": {
                "publicIPAllocationMethod": "Static",
                "dnsSettings": {
                  "domainNameLabel": "[toLower(format('{0}waf{1}', variables('DeploymentURI'), variables('WAFInfo')[copyIndex()].WAFName))]"
                }
              }
            },
            {
              "condition": "[variables('WAFs')[copyIndex()].match]",
              "copy": {
                "name": "PublicIPDiag",
                "count": "[length(variables('WAFInfo'))]"
              },
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2017-05-01-preview",
              "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', format('{0}-waf{1}-publicip1', variables('Deployment'), variables('WAFInfo')[copyIndex()].WAFName))]",
              "name": "service",
              "properties": {
                "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', variables('DeploymentURI')))]",
                "logs": [
                  {
                    "category": "DDoSProtectionNotifications",
                    "enabled": true
                  }
                ],
                "metrics": [
                  {
                    "timeGrain": "PT5M",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": false,
                      "days": 0
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', format('{0}-waf{1}-publicip1', variables('Deployment'), variables('WAFInfo')[copyIndex()].WAFName))]"
              ]
            },
            {
              "condition": "[variables('WAFs')[copyIndex()].match]",
              "copy": {
                "name": "WAF",
                "count": "[length(variables('WAFInfo'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dp{0}-WAFDeploy{1}', variables('Deployment'), variables('WAFInfo')[copyIndex()].WAFName)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "Deployment": {
                    "value": "[variables('Deployment')]"
                  },
                  "DeploymentURI": {
                    "value": "[variables('DeploymentURI')]"
                  },
                  "DeploymentID": {
                    "value": "[parameters('DeploymentID')]"
                  },
                  "globalRGName": {
                    "value": "[variables('globalRGName')]"
                  },
                  "wafinfo": {
                    "value": "[variables('WAFInfo')[copyIndex()]]"
                  },
                  "Global": {
                    "value": "[parameters('Global')]"
                  },
                  "Stage": {
                    "value": "[parameters('Stage')]"
                  },
                  "Environment": {
                    "value": "[parameters('Environment')]"
                  },
                  "Prefix": {
                    "value": "[parameters('Prefix')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1318.3566",
                      "templateHash": "333100130480330608"
                    }
                  },
                  "parameters": {
                    "Deployment": {
                      "type": "string"
                    },
                    "DeploymentURI": {
                      "type": "string"
                    },
                    "DeploymentID": {
                      "type": "string"
                    },
                    "Environment": {
                      "type": "string"
                    },
                    "Prefix": {
                      "type": "string"
                    },
                    "wafinfo": {
                      "type": "object"
                    },
                    "Global": {
                      "type": "object"
                    },
                    "globalRGName": {
                      "type": "string"
                    },
                    "Stage": {
                      "type": "object"
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "Listeners",
                        "count": "[length(parameters('wafinfo').Listeners)]",
                        "input": {
                          "name": "[parameters('wafinfo').Listeners[copyIndex('Listeners')].Port]",
                          "backendAddressPool": {
                            "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools', variables('WAFName'), 'appGatewayBackendPool')]"
                          },
                          "backendHttpSettings": {
                            "id": "[if(contains(parameters('wafinfo').Listeners[copyIndex('Listeners')], 'BackendPort'), resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection', variables('WAFName'), format('appGatewayBackendHttpSettings{0}', parameters('wafinfo').Listeners[copyIndex('Listeners')].BackendPort)), null())]"
                          },
                          "redirectConfiguration": {
                            "id": "[resourceId('Microsoft.Network/applicationGateways/redirectConfigurations', variables('WAFName'), format('redirectConfiguration-{0}-80', parameters('wafinfo').Listeners[copyIndex('Listeners')].Hostname))]"
                          },
                          "sslCertificate": {
                            "id": "[if(contains(parameters('wafinfo').Listeners[copyIndex('Listeners')], 'Cert'), resourceId('Microsoft.Network/applicationGateways/sslCertificates', variables('WAFName'), parameters('wafinfo').Listeners[copyIndex('Listeners')].Cert), null())]"
                          },
                          "urlPathMap": {
                            "id": "[if(contains(parameters('wafinfo').Listeners[copyIndex('Listeners')], 'pathRules'), resourceId('Microsoft.Network/applicationGateways/urlPathMaps', variables('WAFName'), parameters('wafinfo').Listeners[copyIndex('Listeners')].pathRules), null())]"
                          }
                        }
                      },
                      {
                        "name": "BackendHttp",
                        "count": "[length(parameters('wafinfo').BackendHttp)]",
                        "input": {
                          "probe": {
                            "id": "[resourceId('Microsoft.Network/applicationGateways/probes', variables('WAFName'), if(contains(parameters('wafinfo').BackendHttp[copyIndex('BackendHttp')], 'probeName'), parameters('wafinfo').BackendHttp[copyIndex('BackendHttp')].probeName, 'na'))]"
                          }
                        }
                      }
                    ],
                    "networkId": "[format('{0}{1}', parameters('Global').networkid[0], string(sub(parameters('Global').networkid[1], mul(2, int(parameters('DeploymentID'))))))]",
                    "networkIdUpper": "[format('{0}{1}', parameters('Global').networkid[0], string(add(1, sub(parameters('Global').networkid[1], mul(2, int(parameters('DeploymentID')))))))]",
                    "VnetID": "[resourceId('Microsoft.Network/virtualNetworks', format('{0}-vn', parameters('Deployment')))]",
                    "snWAF01Name": "snWAF01",
                    "SubnetRefGW": "[format('{0}/subnets/{1}', variables('VnetID'), variables('snWAF01Name'))]",
                    "HubKVJ": "[json(parameters('Global').hubKV)]",
                    "HubRGJ": "[json(parameters('Global').hubRG)]",
                    "gh": {
                      "hubRGPrefix": "[if(contains(variables('HubRGJ'), 'Prefix'), variables('HubRGJ').Prefix, parameters('Prefix'))]",
                      "hubRGOrgName": "[if(contains(variables('HubRGJ'), 'OrgName'), variables('HubRGJ').OrgName, parameters('Global').OrgName)]",
                      "hubRGAppName": "[if(contains(variables('HubRGJ'), 'AppName'), variables('HubRGJ').AppName, parameters('Global').AppName)]",
                      "hubRGRGName": "[if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID'))))]",
                      "hubKVPrefix": "[if(contains(variables('HubKVJ'), 'Prefix'), variables('HubKVJ').Prefix, parameters('Prefix'))]",
                      "hubKVOrgName": "[if(contains(variables('HubKVJ'), 'OrgName'), variables('HubKVJ').OrgName, parameters('Global').OrgName)]",
                      "hubKVAppName": "[if(contains(variables('HubKVJ'), 'AppName'), variables('HubKVJ').AppName, parameters('Global').AppName)]",
                      "hubKVRGName": "[if(contains(variables('HubKVJ'), 'RG'), variables('HubKVJ').RG, variables('HubRGJ').name)]"
                    },
                    "HubRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').hubRGPrefix, variables('gh').hubRGOrgName, variables('gh').hubRGAppName, variables('gh').hubRGRGName)]",
                    "HubKVName": "[toLower(format('{0}-{1}-{2}-{3}-kv{4}', variables('gh').hubKVPrefix, variables('gh').hubKVOrgName, variables('gh').hubKVAppName, variables('gh').hubKVRGName, variables('HubKVJ').name))]",
                    "WAFName": "[format('{0}-waf{1}', parameters('Deployment'), parameters('wafinfo').WAFName)]",
                    "WAFID": "[resourceId('Microsoft.Network/applicationGateways', variables('WAFName'))]",
                    "SSLpolicyLookup": {
                      "tls12": {
                        "policyName": "AppGwSslPolicy20170401S",
                        "policyType": "Predefined"
                      },
                      "Default": null
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/applicationGateways",
                      "apiVersion": "2021-05-01",
                      "name": "[variables('WAFName')]",
                      "location": "[resourceGroup().location]",
                      "zones": [
                        "1",
                        "2",
                        "3"
                      ],
                      "identity": {
                        "type": "UserAssigned",
                        "userAssignedIdentities": {
                          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiKeyVaultSecretsGet', parameters('Deployment'))))]": {}
                        }
                      },
                      "properties": {
                        "copy": [
                          {
                            "name": "sslCertificates",
                            "count": "[length(parameters('wafinfo').SSLCerts)]",
                            "input": {
                              "name": "[parameters('wafinfo').SSLCerts[copyIndex('sslCertificates')]]",
                              "properties": {
                                "keyVaultSecretId": "[format('{0}secrets/{1}', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubRGName')), 'Microsoft.KeyVault/vaults', variables('HubKVName')), '2021-06-01-preview').vaultUri, parameters('wafinfo').SSLCerts[copyIndex('sslCertificates')])]"
                              }
                            }
                          },
                          {
                            "name": "frontendPorts",
                            "count": "[length(parameters('wafinfo').frontendPorts)]",
                            "input": {
                              "name": "[format('appGatewayFrontendPort{0}', parameters('wafinfo').frontendPorts[copyIndex('frontendPorts')].Port)]",
                              "properties": {
                                "port": "[parameters('wafinfo').frontendPorts[copyIndex('frontendPorts')].Port]"
                              }
                            }
                          },
                          {
                            "name": "urlPathMaps",
                            "count": "[length(parameters('wafinfo').pathRules)]",
                            "input": {
                              "name": "[parameters('wafinfo').pathRules[copyIndex('urlPathMaps')].Name]",
                              "properties": {
                                "defaultBackendAddressPool": {
                                  "id": "[format('{0}/backendAddressPools/appGatewayBackendPool', variables('WAFID'))]"
                                },
                                "defaultBackendHttpSettings": {
                                  "id": "[format('{0}/backendHttpSettingsCollection/appGatewayBackendHttpSettings443', variables('WAFID'))]"
                                },
                                "pathRules": [
                                  {
                                    "name": "[parameters('wafinfo').pathRules[copyIndex('urlPathMaps')].Name]",
                                    "properties": {
                                      "paths": "[parameters('wafinfo').pathRules[copyIndex('urlPathMaps')].paths]",
                                      "backendAddressPool": {
                                        "id": "[format('{0}/backendAddressPools/appGatewayBackendPool', variables('WAFID'))]"
                                      },
                                      "backendHttpSettings": {
                                        "id": "[format('{0}/backendHttpSettingsCollection/appGatewayBackendHttpSettings443', variables('WAFID'))]"
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          },
                          {
                            "name": "backendHttpSettingsCollection",
                            "count": "[length(parameters('wafinfo').BackendHttp)]",
                            "input": {
                              "name": "[format('appGatewayBackendHttpSettings{0}', parameters('wafinfo').BackendHttp[copyIndex('backendHttpSettingsCollection')].Port)]",
                              "properties": {
                                "port": "[parameters('wafinfo').BackendHttp[copyIndex('backendHttpSettingsCollection')].Port]",
                                "protocol": "[parameters('wafinfo').BackendHttp[copyIndex('backendHttpSettingsCollection')].Protocol]",
                                "cookieBasedAffinity": "[if(contains(parameters('wafinfo').BackendHttp[copyIndex('backendHttpSettingsCollection')], 'CookieBasedAffinity'), parameters('wafinfo').BackendHttp[copyIndex('backendHttpSettingsCollection')].CookieBasedAffinity, 'Disabled')]",
                                "requestTimeout": "[if(contains(parameters('wafinfo').BackendHttp[copyIndex('backendHttpSettingsCollection')], 'RequestTimeout'), parameters('wafinfo').BackendHttp[copyIndex('backendHttpSettingsCollection')].RequestTimeout, 600)]",
                                "probe": "[if(contains(parameters('wafinfo').BackendHttp[copyIndex('backendHttpSettingsCollection')], 'probeName'), variables('BackendHttp')[copyIndex('backendHttpSettingsCollection')].probe, null())]"
                              }
                            }
                          },
                          {
                            "name": "httpListeners",
                            "count": "[length(parameters('wafinfo').Listeners)]",
                            "input": {
                              "name": "[format('httpListener-{0}-{1}-{2}', if(contains(parameters('wafinfo').Listeners[copyIndex('httpListeners')], 'pathRules'), 'PathBasedRouting', 'Basic'), parameters('wafinfo').Listeners[copyIndex('httpListeners')].Hostname, parameters('wafinfo').Listeners[copyIndex('httpListeners')].Port)]",
                              "properties": {
                                "frontendIPConfiguration": {
                                  "id": "[format('{0}/frontendIPConfigurations/appGatewayFrontend{1}', variables('WAFID'), parameters('wafinfo').Listeners[copyIndex('httpListeners')].Interface)]"
                                },
                                "frontendPort": {
                                  "id": "[format('{0}/frontendPorts/appGatewayFrontendPort{1}', variables('WAFID'), parameters('wafinfo').Listeners[copyIndex('httpListeners')].Port)]"
                                },
                                "protocol": "[parameters('wafinfo').Listeners[copyIndex('httpListeners')].Protocol]",
                                "hostName": "[toLower(format('{0}-{1}.{2}', parameters('Deployment'), parameters('wafinfo').Listeners[copyIndex('httpListeners')].Hostname, parameters('wafinfo').Listeners[copyIndex('httpListeners')].Domain))]",
                                "requireServerNameIndication": "[equals(parameters('wafinfo').Listeners[copyIndex('httpListeners')].Protocol, 'https')]",
                                "sslCertificate": "[if(equals(parameters('wafinfo').Listeners[copyIndex('httpListeners')].Protocol, 'https'), variables('Listeners')[copyIndex('httpListeners')].sslCertificate, null())]"
                              }
                            }
                          },
                          {
                            "name": "requestRoutingRules",
                            "count": "[length(parameters('wafinfo').Listeners)]",
                            "input": {
                              "name": "[format('requestRoutingRule-{0}-{1}', parameters('wafinfo').Listeners[copyIndex('requestRoutingRules')].Hostname, parameters('wafinfo').Listeners[copyIndex('requestRoutingRules')].Port)]",
                              "properties": {
                                "ruleType": "[if(contains(parameters('wafinfo').Listeners[copyIndex('requestRoutingRules')], 'pathRules'), 'PathBasedRouting', 'Basic')]",
                                "httpListener": {
                                  "id": "[format('{0}/httpListeners/httpListener-{1}-{2}-{3}', variables('WAFID'), if(contains(parameters('wafinfo').Listeners[copyIndex('requestRoutingRules')], 'pathRules'), 'PathBasedRouting', 'Basic'), parameters('wafinfo').Listeners[copyIndex('requestRoutingRules')].Hostname, parameters('wafinfo').Listeners[copyIndex('requestRoutingRules')].Port)]"
                                },
                                "backendAddressPool": "[if(and(contains(parameters('wafinfo').Listeners[copyIndex('requestRoutingRules')], 'httpsRedirect'), bool(parameters('wafinfo').Listeners[copyIndex('requestRoutingRules')].httpsRedirect)), null(), variables('Listeners')[copyIndex('requestRoutingRules')].backendAddressPool)]",
                                "backendHttpSettings": "[if(and(contains(parameters('wafinfo').Listeners[copyIndex('requestRoutingRules')], 'httpsRedirect'), bool(parameters('wafinfo').Listeners[copyIndex('requestRoutingRules')].httpsRedirect)), null(), variables('Listeners')[copyIndex('requestRoutingRules')].backendHttpSettings)]",
                                "redirectConfiguration": "[if(and(contains(parameters('wafinfo').Listeners[copyIndex('requestRoutingRules')], 'httpsRedirect'), bool(parameters('wafinfo').Listeners[copyIndex('requestRoutingRules')].httpsRedirect)), variables('Listeners')[copyIndex('requestRoutingRules')].redirectConfiguration, null())]",
                                "urlPathMap": "[if(contains(parameters('wafinfo').Listeners[copyIndex('requestRoutingRules')], 'pathRules'), variables('Listeners')[copyIndex('requestRoutingRules')].urlPathMap, null())]"
                              }
                            }
                          },
                          {
                            "name": "redirectConfigurations",
                            "count": "[length(parameters('wafinfo').Listeners)]",
                            "input": {
                              "name": "[format('redirectConfiguration-{0}-{1}', parameters('wafinfo').Listeners[copyIndex('redirectConfigurations')].Hostname, parameters('wafinfo').Listeners[copyIndex('redirectConfigurations')].Port)]",
                              "properties": {
                                "redirectType": "Permanent",
                                "targetListener": {
                                  "id": "[format('{0}/httpListeners/httpListener-{1}{2}-443', variables('WAFID'), if(contains(parameters('wafinfo').Listeners[copyIndex('redirectConfigurations')], 'pathRules'), 'PathBasedRouting-', 'Basic-'), parameters('wafinfo').Listeners[copyIndex('redirectConfigurations')].Hostname)]"
                                },
                                "includePath": true,
                                "includeQueryString": true
                              }
                            }
                          },
                          {
                            "name": "probes",
                            "count": "[length(parameters('wafinfo').probes)]",
                            "input": {
                              "name": "[parameters('wafinfo').probes[copyIndex('probes')].name]",
                              "properties": {
                                "protocol": "[parameters('wafinfo').probes[copyIndex('probes')].protocol]",
                                "path": "[parameters('wafinfo').probes[copyIndex('probes')].path]",
                                "host": "[if(bool(parameters('wafinfo').probes[copyIndex('probes')].useBE), null(), format('{0}.{1}', parameters('wafinfo').probes[copyIndex('probes')].name, parameters('Global').domainName))]",
                                "interval": 30,
                                "timeout": 30,
                                "unhealthyThreshold": 3,
                                "pickHostNameFromBackendHttpSettings": "[parameters('wafinfo').probes[copyIndex('probes')].useBE]",
                                "minServers": 0,
                                "match": {
                                  "body": "",
                                  "statusCodes": [
                                    "200-399"
                                  ]
                                }
                              }
                            }
                          }
                        ],
                        "forceFirewallPolicyAssociation": true,
                        "autoscaleConfiguration": {
                          "minCapacity": 0,
                          "maxCapacity": 10
                        },
                        "sslPolicy": "[if(contains(parameters('wafinfo'), 'SSLPolicy'), variables('SSLpolicyLookup')[parameters('wafinfo').SSLPolicy], null())]",
                        "firewallPolicy": "[if(not(and(contains(parameters('wafinfo'), 'WAFPolicyAttached'), bool(parameters('wafinfo').WAFPolicyAttached))), null(), createObject('id', resourceId('Microsoft.Network/ApplicationGatewayWebApplicationFirewallPolicies', format('{0}Policywaf{1}', parameters('DeploymentURI'), parameters('wafinfo').WAFPolicyName))))]",
                        "sku": {
                          "name": "[parameters('wafinfo').WAFTier]",
                          "tier": "[parameters('wafinfo').WAFTier]"
                        },
                        "gatewayIPConfigurations": [
                          {
                            "name": "appGatewayIpConfig",
                            "properties": {
                              "subnet": {
                                "id": "[variables('SubnetRefGW')]"
                              }
                            }
                          }
                        ],
                        "frontendIPConfigurations": [
                          {
                            "name": "appGatewayFrontendPublic",
                            "properties": {
                              "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', format('{0}-waf{1}-publicip1', parameters('Deployment'), parameters('wafinfo').WAFName))]"
                              }
                            }
                          },
                          {
                            "name": "appGatewayFrontendPrivate",
                            "properties": {
                              "privateIPAddress": "[format('{0}.{1}', variables('networkId'), parameters('wafinfo').PrivateIP)]",
                              "privateIPAllocationMethod": "Static",
                              "subnet": {
                                "id": "[variables('SubnetRefGW')]"
                              }
                            }
                          }
                        ],
                        "backendAddressPools": [
                          {
                            "name": "appGatewayBackendPool",
                            "properties": {
                              "copy": [
                                {
                                  "name": "backendAddresses",
                                  "count": "[length(if(contains(parameters('wafinfo'), 'FQDNs'), parameters('wafinfo').FQDNs, parameters('wafinfo').BEIPs))]",
                                  "input": {
                                    "fqdn": "[if(contains(parameters('wafinfo'), 'FQDNs'), format('{0}{1}.{2}', parameters('DeploymentURI'), if(contains(parameters('wafinfo'), 'FQDNs'), parameters('wafinfo').FQDNs, parameters('wafinfo').BEIPs)[copyIndex('backendAddresses')], parameters('Global').DomainName), null())]",
                                    "ipAddress": "[if(contains(parameters('wafinfo'), 'BEIPs'), format('{0}.{1}', variables('networkIdUpper'), if(contains(parameters('wafinfo'), 'FQDNs'), parameters('wafinfo').FQDNs, parameters('wafinfo').BEIPs)[copyIndex('backendAddresses')]), null())]"
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2017-05-01-preview",
                      "scope": "[format('Microsoft.Network/applicationGateways/{0}', variables('WAFName'))]",
                      "name": "service",
                      "properties": {
                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                        "logs": [
                          {
                            "category": "ApplicationGatewayAccessLog",
                            "enabled": true,
                            "retentionPolicy": {
                              "days": 30,
                              "enabled": false
                            }
                          },
                          {
                            "category": "ApplicationGatewayPerformanceLog",
                            "enabled": true,
                            "retentionPolicy": {
                              "days": 30,
                              "enabled": false
                            }
                          },
                          {
                            "category": "ApplicationGatewayFirewallLog",
                            "enabled": true,
                            "retentionPolicy": {
                              "days": 30,
                              "enabled": false
                            }
                          }
                        ],
                        "metrics": [
                          {
                            "timeGrain": "PT5M",
                            "enabled": true,
                            "retentionPolicy": {
                              "enabled": false,
                              "days": 0
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/applicationGateways', variables('WAFName'))]"
                      ]
                    },
                    {
                      "condition": "[and(equals(parameters('wafinfo').Listeners[copyIndex()].Interface, 'Public'), and(bool(parameters('Stage').SetExternalDNS), equals(parameters('wafinfo').Listeners[copyIndex()].Protocol, 'https')))]",
                      "copy": {
                        "name": "SetWAFDNSCNAME",
                        "count": "[length(parameters('wafinfo').Listeners)]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('setdns-public-{0}-{1}-{2}', parameters('wafinfo').Listeners[copyIndex()].Protocol, parameters('wafinfo').Listeners[copyIndex()].Hostname, parameters('Global').DomainNameExt)]",
                      "subscriptionId": "[if(contains(parameters('Global'), 'DomainNameExtSubscriptionID'), parameters('Global').DomainNameExtSubscriptionID, subscription().subscriptionId)]",
                      "resourceGroup": "[if(contains(parameters('Global'), 'DomainNameExtRG'), parameters('Global').DomainNameExtRG, parameters('globalRGName'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "hostname": {
                            "value": "[toLower(format('{0}-{1}', parameters('Deployment'), parameters('wafinfo').Listeners[copyIndex()].Hostname))]"
                          },
                          "cname": {
                            "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', format('{0}-waf{1}-publicip1', parameters('Deployment'), parameters('wafinfo').WAFName)), '2021-02-01').dnsSettings.fqdn]"
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "2861540136838094664"
                            }
                          },
                          "parameters": {
                            "hostname": {
                              "type": "string"
                            },
                            "cname": {
                              "type": "string"
                            },
                            "Global": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/dnsZones/CNAME",
                              "apiVersion": "2018-05-01",
                              "name": "[format('{0}/{1}', parameters('Global').DomainNameExt, parameters('hostname'))]",
                              "properties": {
                                "TTL": 3600,
                                "metadata": {},
                                "CNAMERecord": {
                                  "cname": "[parameters('cname')]"
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(resourceId('Microsoft.Network/applicationGateways', variables('WAFName')), 'Microsoft.Insights/diagnosticSettings', 'service')]"
                      ]
                    },
                    {
                      "condition": "[and(bool(parameters('Stage').SetExternalDNS), equals(parameters('wafinfo').Listeners[copyIndex()].Protocol, 'https'))]",
                      "copy": {
                        "name": "SetWAFDNSA",
                        "count": "[length(parameters('wafinfo').Listeners)]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('setdns-private-{0}-{1}-{2}', parameters('wafinfo').Listeners[copyIndex()].Protocol, parameters('wafinfo').Listeners[copyIndex()].Hostname, parameters('Global').DomainNameExt)]",
                      "subscriptionId": "[subscription().subscriptionId]",
                      "resourceGroup": "[variables('HubRGName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "hostname": {
                            "value": "[toLower(format('{0}-{1}', parameters('Deployment'), parameters('wafinfo').Listeners[copyIndex()].Hostname))]"
                          },
                          "ipv4Address": {
                            "value": "[if(equals(parameters('wafinfo').Listeners[copyIndex()].Interface, 'Private'), reference(resourceId('Microsoft.Network/applicationGateways', variables('WAFName'))).frontendIPConfigurations[1].properties.privateIPAddress, reference(resourceId('Microsoft.Network/publicIPAddresses', format('{0}-waf{1}-publicip1', parameters('Deployment'), parameters('wafinfo').WAFName)), '2021-02-01').ipAddress)]"
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "10691699643089507811"
                            }
                          },
                          "parameters": {
                            "hostname": {
                              "type": "string"
                            },
                            "ipv4Address": {
                              "type": "string"
                            },
                            "Global": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateDnsZones/A",
                              "apiVersion": "2020-06-01",
                              "name": "[format('{0}/{1}', parameters('Global').DomainName, parameters('hostname'))]",
                              "properties": {
                                "ttl": 3600,
                                "metadata": {},
                                "aRecords": [
                                  {
                                    "ipv4Address": "[parameters('ipv4Address')]"
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/applicationGateways', variables('WAFName'))]",
                        "[extensionResourceId(resourceId('Microsoft.Network/applicationGateways', variables('WAFName')), 'Microsoft.Insights/diagnosticSettings', 'service')]"
                      ]
                    }
                  ],
                  "outputs": {
                    "output1": {
                      "type": "array",
                      "value": "[reference(resourceId('Microsoft.Network/applicationGateways', variables('WAFName'))).frontendIPConfigurations]"
                    },
                    "output2": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/applicationGateways', variables('WAFName'))).frontendIPConfigurations[1].properties.privateIPAddress]"
                    }
                  }
                }
              },
              "dependsOn": [
                "PublicIP"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-OMS', variables('Deployment')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-VNET', variables('Deployment')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-WAFPOLICY', variables('Deployment')))]"
      ]
    },
    {
      "condition": "[bool(parameters('Stage').AKS)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('dp{0}-AKS', variables('Deployment'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "DeploymentID": {
            "value": "[parameters('DeploymentID')]"
          },
          "DeploymentInfo": {
            "value": "[parameters('DeploymentInfo')]"
          },
          "Environment": {
            "value": "[parameters('Environment')]"
          },
          "Extensions": {
            "value": "[parameters('Extensions')]"
          },
          "Global": {
            "value": "[parameters('Global')]"
          },
          "Prefix": {
            "value": "[parameters('Prefix')]"
          },
          "Stage": {
            "value": "[parameters('Stage')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "5836033419498706277"
            }
          },
          "parameters": {
            "Prefix": {
              "type": "string"
            },
            "Environment": {
              "type": "string",
              "defaultValue": "D",
              "allowedValues": [
                "I",
                "D",
                "T",
                "U",
                "P",
                "S",
                "G",
                "A"
              ]
            },
            "DeploymentID": {
              "type": "string",
              "defaultValue": "1",
              "allowedValues": [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9"
              ]
            },
            "Stage": {
              "type": "object"
            },
            "Extensions": {
              "type": "object"
            },
            "Global": {
              "type": "object",
              "defaultValue": {
                "n": "1"
              }
            },
            "DeploymentInfo": {
              "type": "object"
            }
          },
          "variables": {
            "copy": [
              {
                "name": "AKS",
                "count": "[length(range(0, length(variables('AKSInfo'))))]",
                "input": {
                  "match": "[or(equals(parameters('Global').CN, '.'), contains(array(parameters('Global').CN), parameters('DeploymentInfo').AKSInfo[range(0, length(variables('AKSInfo')))[copyIndex('AKS')]].Name))]"
                }
              }
            ],
            "Deployment": "[format('{0}-{1}-{2}-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID'))]",
            "DeploymentURI": "[toLower(format('{0}{1}{2}{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID')))]",
            "HubRGJ": "[json(parameters('Global').hubRG)]",
            "HubKVJ": "[json(parameters('Global').hubKV)]",
            "gh": {
              "hubRGPrefix": "[if(contains(variables('HubRGJ'), 'Prefix'), variables('HubRGJ').Prefix, parameters('Prefix'))]",
              "hubRGOrgName": "[if(contains(variables('HubRGJ'), 'OrgName'), variables('HubRGJ').OrgName, parameters('Global').OrgName)]",
              "hubRGAppName": "[if(contains(variables('HubRGJ'), 'AppName'), variables('HubRGJ').AppName, parameters('Global').AppName)]",
              "hubRGRGName": "[if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID'))))]",
              "hubKVPrefix": "[if(contains(variables('HubKVJ'), 'Prefix'), variables('HubKVJ').Prefix, parameters('Prefix'))]",
              "hubKVOrgName": "[if(contains(variables('HubKVJ'), 'OrgName'), variables('HubKVJ').OrgName, parameters('Global').OrgName)]",
              "hubKVAppName": "[if(contains(variables('HubKVJ'), 'AppName'), variables('HubKVJ').AppName, parameters('Global').AppName)]",
              "hubKVRGName": "[if(contains(variables('HubKVJ'), 'RG'), variables('HubKVJ').RG, variables('HubRGJ').name)]"
            },
            "HubRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').hubRGPrefix, variables('gh').hubRGOrgName, variables('gh').hubRGAppName, variables('gh').hubRGRGName)]",
            "HubKVName": "[toLower(format('{0}-{1}-{2}-{3}-kv{4}', variables('gh').hubKVPrefix, variables('gh').hubKVOrgName, variables('gh').hubKVAppName, variables('gh').hubKVRGName, variables('HubKVJ').name))]",
            "AKSInfo": "[if(contains(parameters('DeploymentInfo'), 'AKSInfo'), parameters('DeploymentInfo').AKSInfo, createArray())]"
          },
          "resources": [
            {
              "condition": "[variables('AKS')[copyIndex()].match]",
              "copy": {
                "name": "AKSAll",
                "count": "[length(variables('AKSInfo'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dp{0}-AKS-Deploy{1}', variables('Deployment'), variables('AKSInfo')[copyIndex()].name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "Deployment": {
                    "value": "[variables('Deployment')]"
                  },
                  "DeploymentURI": {
                    "value": "[variables('DeploymentURI')]"
                  },
                  "Prefix": {
                    "value": "[parameters('Prefix')]"
                  },
                  "DeploymentID": {
                    "value": "[parameters('DeploymentID')]"
                  },
                  "Environment": {
                    "value": "[parameters('Environment')]"
                  },
                  "AKSInfo": {
                    "value": "[variables('AKSInfo')[copyIndex()]]"
                  },
                  "Global": {
                    "value": "[parameters('Global')]"
                  },
                  "Stage": {
                    "value": "[parameters('Stage')]"
                  },
                  "vmAdminPassword": {
                    "reference": {
                      "keyVault": {
                        "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubRGName')), 'Microsoft.KeyVault/vaults', variables('HubKVName'))]"
                      },
                      "secretName": "localadmin"
                    }
                  },
                  "devOpsPat": {
                    "reference": {
                      "keyVault": {
                        "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubRGName')), 'Microsoft.KeyVault/vaults', variables('HubKVName'))]"
                      },
                      "secretName": "devOpsPat"
                    }
                  },
                  "sshPublic": {
                    "reference": {
                      "keyVault": {
                        "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubRGName')), 'Microsoft.KeyVault/vaults', variables('HubKVName'))]"
                      },
                      "secretName": "sshPublic"
                    }
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1318.3566",
                      "templateHash": "13884760042400266458"
                    }
                  },
                  "parameters": {
                    "Deployment": {
                      "type": "string"
                    },
                    "DeploymentURI": {
                      "type": "string"
                    },
                    "Prefix": {
                      "type": "string"
                    },
                    "DeploymentID": {
                      "type": "string"
                    },
                    "Environment": {
                      "type": "string"
                    },
                    "AKSInfo": {
                      "type": "object"
                    },
                    "Global": {
                      "type": "object"
                    },
                    "Stage": {
                      "type": "object"
                    },
                    "now": {
                      "type": "string",
                      "defaultValue": "[utcNow('F')]"
                    },
                    "vmAdminPassword": {
                      "type": "secureString"
                    },
                    "devOpsPat": {
                      "type": "secureString"
                    },
                    "sshPublic": {
                      "type": "secureString"
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "aksAADAdminLookup",
                        "count": "[length(range(0, if(not(contains(parameters('AKSInfo'), 'aksAADAdminGroups')), 0, length(parameters('AKSInfo').aksAADAdminGroups))))]",
                        "input": "[variables('objectIdLookup')[parameters('AKSInfo').aksAADAdminGroups[range(0, if(not(contains(parameters('AKSInfo'), 'aksAADAdminGroups')), 0, length(parameters('AKSInfo').aksAADAdminGroups)))[copyIndex('aksAADAdminLookup')]]]]"
                      }
                    ],
                    "RGName": "[format('{0}-{1}-{2}-RG-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').AppName, parameters('Environment'), parameters('DeploymentID'))]",
                    "Enviro": "[format('{0}{1}', parameters('Environment'), parameters('DeploymentID'))]",
                    "computeGlobal": "[json('{\r\n  \"DataDiskInfo\": {\r\n    \"0GB\": {},\r\n    \"32GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            32\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GBSS\": {\r\n      \"DATASS\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GB-2\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ],\r\n          [\r\n            1,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"128GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            128\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"FIL64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"SOFS\": {\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            1,\r\n            32\r\n          ],\r\n          [\r\n            2,\r\n            32\r\n          ],\r\n          [\r\n            3,\r\n            32\r\n          ]\r\n        ],\r\n        \"FileSystem\": \"ReFS\",\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"SQL64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"LOGS\": {\r\n        \"DriveLetter\": \"G\",\r\n        \"caching\": \"None\",\r\n        \"LUNS\": [\r\n          [\r\n            8,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"TEMPDB\": {\r\n        \"DriveLetter\": \"H\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            12,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"BACKUP\": {\r\n        \"DriveLetter\": \"I\",\r\n        \"caching\": \"None\",\r\n        \"LUNS\": [\r\n          [\r\n            15,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    }\r\n  },\r\n  \"computeSizeLookupOptions\": {\r\n    \"API-P\": \"Standard_D4s_v3\",\r\n    \"API-D\": \"Standard_D4s_v3\",\r\n    \"API-S\": \"Standard_D2s_v3\",\r\n    \"SF-P\": \"Standard_D4s_v3\",\r\n    \"SF-D\": \"Standard_D2s_v3\",\r\n    \"SF-S\": \"Standard_D2s_v3\",\r\n    \"CTNR-P\": \"Standard_D4s_v3\",\r\n    \"CTNR-D\": \"Standard_D2s_v3\",\r\n    \"ADp-P\": \"Standard_D2s_v3\",\r\n    \"ADp-D\": \"Standard_A2m_v2\",\r\n    \"ADs-P\": \"Standard_D2s_v3\",\r\n    \"ADs-D\": \"Standard_A2m_v2\",\r\n    \"AAP-P\": \"Standard_D2s_v3\",\r\n    \"AAP-D\": \"Standard_D2s_v3\",\r\n    \"DNS-P\": \"Standard_D2s_v3\",\r\n    \"DNS-D\": \"Standard_D2s_v3\",\r\n    \"BUS-P\": \"Standard_DS2_v2\",\r\n    \"BUS-D\": \"Standard_DS2_v2\",\r\n    \"LIN-P\": \"Standard_DS2_v2\",\r\n    \"LIN-D\": \"Standard_DS2_v2\",\r\n    \"FIL-P\": \"Standard_D4s_v3\",\r\n    \"FIL-D\": \"Standard_D4s_v3\",\r\n    \"DFS-P\": \"Standard_D4s_v3\",\r\n    \"DFS-D\": \"Standard_D4s_v3\",\r\n    \"JMP-P\": \"Standard_D4s_v3\",\r\n    \"JMP-D\": \"Standard_D4s_v3\",\r\n    \"CLT-P\": \"Standard_D4s_v3\",\r\n    \"CLT-D\": \"Standard_D4s_v3\",\r\n    \"PXY-P\": \"Standard_D4s_v3\",\r\n    \"PXY-D\": \"Standard_D2s_v3\",\r\n    \"CLS01-D\": \"Standard_D4s_v3\",\r\n    \"CLS02-D\": \"Standard_D4s_v3\",\r\n    \"CLS01-P\": \"Standard_D4s_v3\",\r\n    \"CLS02-P\": \"Standard_D4s_v3\",\r\n    \"FW-P\": \"Standard_F4\",\r\n    \"FW-D\": \"Standard_F2\"\r\n  },\r\n  \"OSType\": {\r\n    \"Server2022SSIMG\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/b8f402aa-20f7-4888-b45c-3cf086dad9c3/resourceGroups/ACU1-BRW-AOA-RG-G1/providers/Microsoft.Compute/galleries/acu1brwaoag1gallery01/images/vmss2022\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SSIMG\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/b8f402aa-20f7-4888-b45c-3cf086dad9c3/resourceGroups/ACU1-BRW-AOA-RG-G1/providers/Microsoft.Compute/galleries/acu1brwaoag1gallery01/images/vmss2019webnetcore27\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"cbld10\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/27b750cd-ed43-42fd-9044-8d75e124ae55/resourceGroups/SBID-Build-Test/providers/Microsoft.Compute/galleries/cbldtest/images/cbld10-ext\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 1,\r\n        \"IaaSDiagnostics\": 1,\r\n        \"Antimalware\": 0,\r\n        \"DependencyAgent\": 1,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Win10O365\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsDesktop\",\r\n        \"offer\": \"office-365\",\r\n        \"sku\": \"rs5-evd-o365pp\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Client\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Win10\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsDesktop\",\r\n        \"offer\": \"Windows-10\",\r\n        \"sku\": \"21h1-pro-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Client\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"SQLServer2016\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftSQLServer\",\r\n        \"Offer\": \"SQL2016SP2-WS2016\",\r\n        \"sku\": \"Enterprise\",\r\n        \"version\": \"latest\"\r\n      },\r\n      // \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016Core\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-Server-Core\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016small\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016Coresmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-Server-Core-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019-gen2\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"windowsserver-gen2preview\",\r\n        \"sku\": \"2019-Datacenter-gen2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2022\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2022-Datacenter-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"_plan\": {\r\n        \"name\": \"windows-server-2022\",\r\n        \"publisher\": \"microsoftwindowsserver\",\r\n        \"product\": \"microsoftserveroperatingsystems-previews\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2022Containerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"datacenter-core-20h2-with-containers-smalldisk-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Core\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-Core\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019small\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-datacenter-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Coresmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-Server-Core-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Containerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019CoreContainerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-datacenter-core-with-containers-smalldisk-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016SS\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-with-Containers\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SSgs\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers-gs\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SS\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"NetScaler\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"citrix\",\r\n        \"Offer\": \"netscalervpx-120\",\r\n        \"Sku\": \"netscalerbyol\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"netscalerbyol\",\r\n        \"publisher\": \"citrix\",\r\n        \"product\": \"netscalervpx-120\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"MaxLoadBalancer\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"loadbalancer\",\r\n        \"offer\": \"loadbalancer-org-load-balancer-for-azure\",\r\n        \"sku\": \"max_load_balancer\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"max_load_balancer\",\r\n        \"publisher\": \"loadbalancer\",\r\n        \"product\": \"loadbalancer-org-load-balancer-for-azure\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortigate\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet_fortigate-vm_v5\",\r\n        \"sku\": \"fortinet_fg-vm\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"fortinet_fg-vm\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet_fortigate-vm_v5\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortigatepayg\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet_fortigate-vm_v5\",\r\n        \"sku\": \"fortinet_fg-vm_payg\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"fortinet_fg-vm_payg\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet_fortigate-vm_v5\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortimngr\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet-fortimanager\",\r\n        \"sku\": \"fortinet-fortimanager\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 3,\r\n      \"plan\": {\r\n        \"name\": \"fortinet-fortimanager\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet-fortimanager\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"UbuntuServer1904\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"canonical\",\r\n        \"offer\": \"UbuntuServer\",\r\n        \"sku\": \"19.04\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"Antimalware\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 1,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0\r\n      }\r\n    },\r\n    \"Bus-debian\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"credativ\",\r\n        \"offer\": \"Debian\",\r\n        \"sku\": \"8\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 1,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"PROXY-UBUNTU\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"Canonical\",\r\n        \"offer\": \"UbuntuServer\",\r\n        \"sku\": \"16.04-LTS\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"fileUris\": \"[concat(parameters(''global'')._artifactsLocation, ''/scripts/pxy.zip\",\r\n      \"commandToExecute\": \"[concat(''sudo apt-get update && sudo apt-get install unzip && unzip Proxy.zip && sudo bash -x haproxyvm-configure.sh '', '' -a '', ''ilbIPAddress'', '' -r '', ''ilbRabbitMqPort'', '' -m '', ''ilbRabbitMqMgmtPort'', '' -b '', ''dnsName'', ''.'', ''location'', ''.cloudapp.azure.com -p '', ''vmNamePrefix'', ''0 -s '', ''vmNamePrefix'', ''1'')]\",\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"CentOS75\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"OpenLogic\",\r\n        \"Offer\": \"CentOS\",\r\n        \"sku\": \"7.5\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"Antimalware\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    }\r\n  },\r\n  \"ladCfg\": {\r\n    \"diagnosticMonitorConfiguration\": {\r\n      \"eventVolume\": \"Medium\",\r\n      \"metrics\": {\r\n        \"metricAggregation\": [\r\n          {\r\n            \"scheduledTransferPeriod\": \"PT1H\"\r\n          },\r\n          {\r\n            \"scheduledTransferPeriod\": \"PT1M\"\r\n          }\r\n        ],\r\n        \"resourceId\": \"__VM_RESOURCE_ID__\"\r\n      },\r\n      \"performanceCounters\": {\r\n        \"performanceCounterConfiguration\": [\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk read guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readbytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/readbytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk writes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/writespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk transfer time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagetransfertime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagetransfertime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk transfers\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"transferspersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/transferspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk write guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writebytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/writebytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk read time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagereadtime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagereadtime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk write time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagewritetime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagewritetime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk total bytes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/bytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk reads\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readspersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/readspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk queue length\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagediskqueuelength\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagediskqueuelength\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network in guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytesreceived\",\r\n            \"counterSpecifier\": \"/builtin/network/bytesreceived\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network total bytes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytestotal\",\r\n            \"counterSpecifier\": \"/builtin/network/bytestotal\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network out guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytestransmitted\",\r\n            \"counterSpecifier\": \"/builtin/network/bytestransmitted\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network collisions\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totalcollisions\",\r\n            \"counterSpecifier\": \"/builtin/network/totalcollisions\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets received errors\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totalrxerrors\",\r\n            \"counterSpecifier\": \"/builtin/network/totalrxerrors\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets sent\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"packetstransmitted\",\r\n            \"counterSpecifier\": \"/builtin/network/packetstransmitted\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets received\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"packetsreceived\",\r\n            \"counterSpecifier\": \"/builtin/network/packetsreceived\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets sent errors\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totaltxerrors\",\r\n            \"counterSpecifier\": \"/builtin/network/totaltxerrors\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem transfers/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"transferspersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/transferspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % free space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentfreespace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentfreespace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % used space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusedspace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentusedspace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem used space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"usedspace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/usedspace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem read bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytesreadpersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/bytesreadpersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem free space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"freespace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/freespace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % free inodes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentfreeinodes\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentfreeinodes\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/bytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem reads/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readspersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/readspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem write bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"byteswrittenpersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/byteswrittenpersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem writes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writespersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/writespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % used inodes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusedinodes\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentusedinodes\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU IO wait time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentiowaittime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentiowaittime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU user time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusertime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentusertime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU nice time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentnicetime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentnicetime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU percentage guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentprocessortime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentprocessortime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU interrupt time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentinterrupttime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentinterrupttime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU idle time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentidletime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentidletime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU privileged time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentprivilegedtime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentprivilegedtime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"availablememory\",\r\n            \"counterSpecifier\": \"/builtin/memory/availablememory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap percent used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentusedswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentusedswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"usedmemory\",\r\n            \"counterSpecifier\": \"/builtin/memory/usedmemory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Page reads\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pagesreadpersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pagesreadpersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"availableswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/availableswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap percent available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentavailableswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentavailableswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Mem. percent available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentavailablememory\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentavailablememory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Pages\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pagespersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pagespersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"usedswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/usedswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory percentage\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentusedmemory\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentusedmemory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Page writes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pageswrittenpersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pageswrittenpersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          }\r\n        ]\r\n      },\r\n      \"syslogEvents\": {\r\n        \"syslogEventConfiguration\": {\r\n          \"LOG_AUTH\": \"LOG_DEBUG\",\r\n          \"LOG_AUTHPRIV\": \"LOG_DEBUG\",\r\n          \"LOG_CRON\": \"LOG_DEBUG\",\r\n          \"LOG_DAEMON\": \"LOG_DEBUG\",\r\n          \"LOG_FTP\": \"LOG_DEBUG\",\r\n          \"LOG_KERN\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL0\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL1\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL2\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL3\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL4\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL5\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL6\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL7\": \"LOG_DEBUG\",\r\n          \"LOG_LPR\": \"LOG_DEBUG\",\r\n          \"LOG_MAIL\": \"LOG_DEBUG\",\r\n          \"LOG_NEWS\": \"LOG_DEBUG\",\r\n          \"LOG_SYSLOG\": \"LOG_DEBUG\",\r\n          \"LOG_USER\": \"LOG_DEBUG\",\r\n          \"LOG_UUCP\": \"LOG_DEBUG\"\r\n        }\r\n      }\r\n    },\r\n    \"sampleRateInSeconds\": 15\r\n  },\r\n  \"WadCfg\": {\r\n    \"DiagnosticMonitorConfiguration\": {\r\n      \"overallQuotaInMB\": 10000,\r\n      \"DiagnosticInfrastructureLogs\": {\r\n        \"scheduledTransferLogLevelFilter\": \"Error\"\r\n      },\r\n      \"PerformanceCounters\": {\r\n        \"scheduledTransferPeriod\": \"PT1M\",\r\n        \"PerformanceCounterConfiguration\": []\r\n      },\r\n      \"WindowsEventLog\": {\r\n        \"scheduledTransferPeriod\": \"PT5M\",\r\n        \"DataSource\": [\r\n          {\r\n            \"name\": \"Application!*[System[(Level = 1 or Level = 2)]]\"\r\n          },\r\n          {\r\n            \"name\": \"Security!*[System[(Level = 1 or Level = 2)]\"\r\n          },\r\n          {\r\n            \"name\": \"System!*[System[(Level = 1 or Level = 2)]]\"\r\n          },\r\n          {\r\n            \"name\": \"Microsoft-Windows-DSC/Operational!*[System[(EventID=4249 or EventID=4097)]]\"\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}')]",
                    "OSType": "[variables('computeGlobal').OSType]",
                    "WadCfg": "[variables('computeGlobal').WadCfg]",
                    "ladCfg": "[variables('computeGlobal').ladCfg]",
                    "DataDiskInfo": "[variables('computeGlobal').DataDiskInfo]",
                    "computeSizeLookupOptions": "[variables('computeGlobal').computeSizeLookupOptions]",
                    "HubRGJ": "[json(parameters('Global').hubRG)]",
                    "gh": {
                      "hubRGPrefix": "[if(contains(variables('HubRGJ'), 'Prefix'), variables('HubRGJ').Prefix, parameters('Prefix'))]",
                      "hubRGOrgName": "[if(contains(variables('HubRGJ'), 'OrgName'), variables('HubRGJ').OrgName, parameters('Global').OrgName)]",
                      "hubRGAppName": "[if(contains(variables('HubRGJ'), 'AppName'), variables('HubRGJ').AppName, parameters('Global').AppName)]",
                      "hubRGRGName": "[if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID'))))]"
                    },
                    "HubRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').hubRGPrefix, variables('gh').hubRGOrgName, variables('gh').hubRGAppName, variables('gh').hubRGRGName)]",
                    "RolesGroupsLookup": "[json(parameters('Global').RolesGroupsLookup)]",
                    "objectIdLookup": "[json(parameters('Global').objectIdLookup)]",
                    "networkId": "[format('{0}{1}', parameters('Global').networkid[0], string(sub(parameters('Global').networkid[1], mul(2, int(parameters('DeploymentID'))))))]",
                    "networkIdUpper": "[format('{0}{1}', parameters('Global').networkid[0], string(add(1, sub(parameters('Global').networkid[1], mul(2, int(parameters('DeploymentID')))))))]",
                    "IngressGreenfields": {
                      "effectiveApplicationGatewayId": "[format('{0}/resourceGroups/{1}-b/providers/Microsoft.Network/applicationGateways/{2}-waf{3}', subscription().id, resourceGroup().name, parameters('Deployment'), parameters('AKSInfo').WAFName)]",
                      "applicationGatewayName": "[format('{0}-waf{1}', parameters('Deployment'), parameters('AKSInfo').WAFName)]",
                      "subnetCIDR": "[format('{0}.128/25', variables('networkId'))]"
                    },
                    "aadProfile": {
                      "managed": true,
                      "enableAzureRBAC": "[bool(parameters('AKSInfo').enableRBAC)]",
                      "adminGroupObjectIDs": "[if(bool(parameters('AKSInfo').enableRBAC), variables('aksAADAdminLookup'), null())]",
                      "tenantID": "[tenant().tenantId]"
                    },
                    "podIdentityProfile": {
                      "enabled": "[bool(parameters('AKSInfo').enableRBAC)]"
                    },
                    "availabilityZones": [
                      "1",
                      "2",
                      "3"
                    ],
                    "autoScalerProfile": {},
                    "Environment_var": {
                      "D": "Dev",
                      "I": "Int",
                      "U": "UAT",
                      "P": "PROD",
                      "S": "SBX",
                      "T": "TEST"
                    },
                    "VMSizeLookup": {
                      "D": "D",
                      "I": "D",
                      "U": "D",
                      "P": "P",
                      "S": "D"
                    },
                    "MSILookup": {
                      "SQL": "Cluster",
                      "UTL": "DefaultKeyVault",
                      "FIL": "Cluster",
                      "OCR": "Storage",
                      "WVD": "WVD"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.ContainerService/managedClusters",
                      "apiVersion": "2022-01-02-preview",
                      "name": "[format('{0}-aks{1}', parameters('Deployment'), parameters('AKSInfo').Name)]",
                      "location": "[resourceGroup().location]",
                      "identity": {
                        "type": "UserAssigned",
                        "userAssignedIdentities": {
                          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-uaiIngressApplicationGateway', parameters('Deployment'))))]": {}
                        }
                      },
                      "sku": {
                        "name": "Basic",
                        "tier": "[parameters('AKSInfo').skuTier]"
                      },
                      "tags": {
                        "Environment": "[variables('Environment_var')[parameters('Environment')]]"
                      },
                      "properties": {
                        "copy": [
                          {
                            "name": "agentPoolProfiles",
                            "count": "[length(parameters('AKSInfo').agentPools)]",
                            "input": {
                              "name": "[parameters('AKSInfo').agentPools[copyIndex('agentPoolProfiles')].name]",
                              "mode": "[parameters('AKSInfo').agentPools[copyIndex('agentPoolProfiles')].mode]",
                              "count": "[parameters('AKSInfo').agentPools[copyIndex('agentPoolProfiles')].count]",
                              "minCount": "[parameters('AKSInfo').agentPools[copyIndex('agentPoolProfiles')].count]",
                              "maxCount": "[if(contains(parameters('AKSInfo').agentPools[copyIndex('agentPoolProfiles')], 'maxcount'), parameters('AKSInfo').agentPools[copyIndex('agentPoolProfiles')].maxcount, parameters('AKSInfo').agentPools[copyIndex('agentPoolProfiles')].count)]",
                              "enableAutoScaling": true,
                              "scaleDownMode": "Delete",
                              "osDiskSizeGB": "[parameters('AKSInfo').agentPools[copyIndex('agentPoolProfiles')].osDiskSizeGb]",
                              "osType": "[parameters('AKSInfo').agentPools[copyIndex('agentPoolProfiles')].osType]",
                              "maxPods": "[parameters('AKSInfo').agentPools[copyIndex('agentPoolProfiles')].maxPods]",
                              "vmSize": "Standard_DS2_v2",
                              "vnetSubnetID": "[if(contains(parameters('AKSInfo').agentPools[copyIndex('agentPoolProfiles')], 'Subnet'), resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('AKSInfo').agentPools[copyIndex('agentPoolProfiles')].Subnet), resourceId('Microsoft.Network/virtualNetworks/subnets', format('{0}-vn', parameters('Deployment')), parameters('AKSInfo').AgentPoolsSN))]",
                              "type": "VirtualMachineScaleSets",
                              "availabilityZones": "[if(equals(parameters('AKSInfo').loadBalancer, 'basic'), null(), variables('availabilityZones'))]"
                            }
                          }
                        ],
                        "kubernetesVersion": "[parameters('AKSInfo').Version]",
                        "nodeResourceGroup": "[format('{0}-aks{1}', resourceGroup().name, parameters('AKSInfo').Name)]",
                        "enableRBAC": "[bool(parameters('AKSInfo').enableRBAC)]",
                        "dnsPrefix": "[toLower(format('{0}-aks{1}', parameters('Deployment'), parameters('AKSInfo').Name))]",
                        "linuxProfile": {
                          "adminUsername": "[if(contains(parameters('AKSInfo'), 'AdminUser'), parameters('AKSInfo').AdminUser, parameters('Global').vmAdminUserName)]",
                          "ssh": {
                            "publicKeys": [
                              {
                                "keyData": "[parameters('sshPublic')]"
                              }
                            ]
                          }
                        },
                        "windowsProfile": {
                          "adminUsername": "[if(contains(parameters('AKSInfo'), 'AdminUser'), parameters('AKSInfo').AdminUser, parameters('Global').vmAdminUserName)]",
                          "adminPassword": "[parameters('vmAdminPassword')]",
                          "licenseType": "Windows_Server",
                          "enableCSIProxy": true
                        },
                        "securityProfile": {
                          "azureDefender": {
                            "enabled": true,
                            "logAnalyticsWorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]"
                          }
                        },
                        "aadProfile": "[if(bool(parameters('AKSInfo').enableRBAC), variables('aadProfile'), null())]",
                        "apiServerAccessProfile": {
                          "authorizedIPRanges": "[if(bool(parameters('AKSInfo').privateCluster), null(), parameters('Global').IPAddressforRemoteAccess)]",
                          "enablePrivateCluster": "[bool(parameters('AKSInfo').privateCluster)]",
                          "privateDNSZone": "[if(bool(parameters('AKSInfo').privateCluster), resourceId(variables('HubRGName'), 'Microsoft.Network/privateDnsZones', 'privatelink.centralus.azmk8s.io'), null())]"
                        },
                        "publicNetworkAccess": "[if(bool(parameters('AKSInfo').privateCluster), 'Disabled', 'Enabled')]",
                        "networkProfile": {
                          "outboundType": "loadBalancer",
                          "loadBalancerSku": "[parameters('AKSInfo').loadBalancer]",
                          "networkPlugin": "azure",
                          "networkMode": "transparent",
                          "networkPolicy": "azure",
                          "serviceCidr": "10.0.0.0/16",
                          "dnsServiceIP": "10.0.0.10",
                          "dockerBridgeCidr": "172.17.0.1/16"
                        },
                        "autoScalerProfile": "[if(bool(parameters('AKSInfo').AutoScale), variables('autoScalerProfile'), null())]",
                        "podIdentityProfile": "[if(bool(parameters('AKSInfo').podIdentity), variables('podIdentityProfile'), null())]",
                        "addonProfiles": {
                          "gitops": {
                            "enabled": "[if(equals(resourceGroup().location, 'eastus'), true(), false())]",
                            "config": {}
                          },
                          "azureKeyvaultSecretsProvider": {
                            "enabled": true,
                            "config": {
                              "enableSecretRotation": "true"
                            }
                          },
                          "IngressApplicationGateway": {
                            "enabled": "[bool(parameters('AKSInfo').AppGateway)]",
                            "config": "[if(not(bool(parameters('AKSInfo').BrownFields)), variables('IngressGreenfields'), createObject('applicationGatewayId', resourceId('Microsoft.Network/applicationGateways', format('{0}-waf{1}', parameters('Deployment'), parameters('AKSInfo').WAFName))))]"
                          },
                          "openServiceMesh": {
                            "enabled": "[if(contains(parameters('AKSInfo'), 'enableOSM'), bool(parameters('AKSInfo').enableOSM), false())]",
                            "config": {}
                          },
                          "httpApplicationRouting": {
                            "enabled": false
                          },
                          "azurePolicy": {
                            "enabled": false,
                            "config": {
                              "version": "v2"
                            }
                          },
                          "omsAgent": {
                            "enabled": true,
                            "config": {
                              "logAnalyticsWorkspaceResourceID": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]"
                            }
                          },
                          "aciConnectorLinux": {
                            "enabled": true,
                            "config": {
                              "SubnetName": "snMT01"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2017-05-01-preview",
                      "scope": "[format('Microsoft.ContainerService/managedClusters/{0}', format('{0}-aks{1}', parameters('Deployment'), parameters('AKSInfo').Name))]",
                      "name": "service",
                      "properties": {
                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                        "logs": [
                          {
                            "category": "kube-apiserver",
                            "enabled": true
                          },
                          {
                            "category": "kube-audit",
                            "enabled": true
                          },
                          {
                            "category": "kube-audit-admin",
                            "enabled": true
                          },
                          {
                            "category": "kube-controller-manager",
                            "enabled": true
                          },
                          {
                            "category": "kube-scheduler",
                            "enabled": true
                          },
                          {
                            "category": "cluster-autoscaler",
                            "enabled": true
                          },
                          {
                            "category": "guard",
                            "enabled": true
                          }
                        ],
                        "metrics": [
                          {
                            "timeGrain": "PT5M",
                            "enabled": true,
                            "retentionPolicy": {
                              "enabled": false,
                              "days": 0
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ContainerService/managedClusters', format('{0}-aks{1}', parameters('Deployment'), parameters('AKSInfo').Name))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp-identities-{0}-aks{1}', parameters('Deployment'), parameters('AKSInfo').Name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "AKSInfo": {
                            "value": "[parameters('AKSInfo')]"
                          },
                          "Deployment": {
                            "value": "[parameters('Deployment')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "13504834588168988783"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string",
                              "defaultValue": "ACU1-BRW-AOA-T5"
                            },
                            "AKSInfo": {
                              "type": "object",
                              "defaultValue": {
                                "name": "01"
                              }
                            }
                          },
                          "resources": [],
                          "outputs": {
                            "ManagedIdentities": {
                              "type": "array",
                              "value": [
                                {
                                  "name": "[reference(resourceId('Microsoft.ContainerService/managedClusters', format('{0}-aks{1}', parameters('Deployment'), parameters('AKSInfo').Name)), '2020-12-01').identityProfile.kubeletidentity.objectId]",
                                  "RBAC": [
                                    {
                                      "Name": "Contributor"
                                    },
                                    {
                                      "Name": "Network Contributor"
                                    },
                                    {
                                      "Name": "Managed Identity Operator"
                                    },
                                    {
                                      "Name": "Virtual Machine Contributor"
                                    },
                                    {
                                      "Name": "Key Vault Certificates Officer"
                                    },
                                    {
                                      "Name": "Key Vault Secrets User"
                                    },
                                    {
                                      "Name": "Key Vault Crypto User"
                                    }
                                  ]
                                },
                                {
                                  "name": "[reference(resourceId('Microsoft.ContainerService/managedClusters', format('{0}-aks{1}', parameters('Deployment'), parameters('AKSInfo').Name)), '2020-12-01').addonProfiles.omsAgent.identity.objectId]",
                                  "RBAC": [
                                    {
                                      "Name": "Monitoring Metrics Publisher"
                                    }
                                  ]
                                },
                                {
                                  "name": "[reference(resourceId('Microsoft.ContainerService/managedClusters', format('{0}-aks{1}', parameters('Deployment'), parameters('AKSInfo').Name)), '2020-12-01').addonProfiles.IngressApplicationGateway.identity.objectId]",
                                  "RBAC": [
                                    {
                                      "Name": "Network Contributor"
                                    },
                                    {
                                      "Name": "Managed Identity Operator"
                                    },
                                    {
                                      "Name": "Virtual Machine Contributor"
                                    }
                                  ]
                                },
                                {
                                  "name": "[reference(resourceId('Microsoft.ContainerService/managedClusters', format('{0}-aks{1}', parameters('Deployment'), parameters('AKSInfo').Name)), '2020-12-01').addonProfiles.aciConnectorLinux.identity.objectId]",
                                  "RBAC": [
                                    {
                                      "Name": "Contributor"
                                    }
                                  ]
                                }
                              ]
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ContainerService/managedClusters', format('{0}-aks{1}', parameters('Deployment'), parameters('AKSInfo').Name))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "rgroleassignmentsAKSUAI",
                        "count": "[length(range(0, 4))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-rgroleassignmentsAKSUAI-{1}', parameters('Deployment'), add(range(0, 4)[copyIndex()], 1))]",
                      "subscriptionId": "[subscription().subscriptionId]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[parameters('Deployment')]"
                          },
                          "Prefix": {
                            "value": "[parameters('Prefix')]"
                          },
                          "rgName": {
                            "value": "[variables('RGName')]"
                          },
                          "Enviro": {
                            "value": "[variables('Enviro')]"
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          },
                          "roleInfo": {
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('dp-identities-{0}-aks{1}', parameters('Deployment'), parameters('AKSInfo').Name))).outputs.ManagedIdentities.value[range(0, 4)[copyIndex()]]]"
                          },
                          "providerPath": {
                            "value": "guid"
                          },
                          "namePrefix": {
                            "value": ""
                          },
                          "providerAPI": {
                            "value": ""
                          },
                          "principalType": {
                            "value": "ServicePrincipal"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "950202784780854467"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "Prefix": {
                              "type": "string"
                            },
                            "rgName": {
                              "type": "string"
                            },
                            "Enviro": {
                              "type": "string"
                            },
                            "Global": {
                              "type": "object"
                            },
                            "roleInfo": {
                              "type": "object"
                            },
                            "providerPath": {
                              "type": "string"
                            },
                            "namePrefix": {
                              "type": "string"
                            },
                            "providerAPI": {
                              "type": "string"
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": ""
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "roleAssignment",
                                "count": "[length(parameters('roleInfo').RBAC)]",
                                "input": {
                                  "SourceSubscriptionID": "[subscription().subscriptionId]",
                                  "SourceRG": "[parameters('rgName')]",
                                  "RoleName": "[parameters('roleInfo').RBAC[copyIndex('roleAssignment')].Name]",
                                  "RoleID": "[variables('rolesGroupsLookup')[parameters('roleInfo').RBAC[copyIndex('roleAssignment')].Name].Id]",
                                  "DestSubscriptionID": "[if(contains(parameters('roleInfo').RBAC[copyIndex('roleAssignment')], 'SubscriptionID'), parameters('roleInfo').RBAC[copyIndex('roleAssignment')].SubScriptionID, subscription().subscriptionId)]",
                                  "DestSubscription": "[if(contains(parameters('roleInfo').RBAC[copyIndex('roleAssignment')], 'SubscriptionID'), parameters('roleInfo').RBAC[copyIndex('roleAssignment')].SubScriptionID, subscription().id)]",
                                  "DestManagementGroup": "[if(contains(parameters('roleInfo').RBAC[copyIndex('roleAssignment')], 'ManagementGroupName'), parameters('roleInfo').RBAC[copyIndex('roleAssignment')].ManagementGroupName, null())]",
                                  "DestRG": "[if(contains(parameters('roleInfo').RBAC[copyIndex('roleAssignment')], 'RG'), parameters('roleInfo').RBAC[copyIndex('roleAssignment')].RG, parameters('Enviro'))]",
                                  "DestPrefix": "[if(contains(parameters('roleInfo').RBAC[copyIndex('roleAssignment')], 'Prefix'), parameters('roleInfo').RBAC[copyIndex('roleAssignment')].Prefix, parameters('Prefix'))]",
                                  "DestApp": "[if(contains(parameters('roleInfo').RBAC[copyIndex('roleAssignment')], 'Tenant'), parameters('roleInfo').RBAC[copyIndex('roleAssignment')].Tenant, parameters('Global').AppName)]",
                                  "principalType": "[parameters('principalType')]",
                                  "GUID": "[guid(subscription().subscriptionId, parameters('rgName'), parameters('roleInfo').Name, parameters('roleInfo').RBAC[copyIndex('roleAssignment')].Name, if(contains(parameters('roleInfo').RBAC[copyIndex('roleAssignment')], 'SubscriptionID'), parameters('roleInfo').RBAC[copyIndex('roleAssignment')].SubScriptionID, subscription().subscriptionId), if(contains(parameters('roleInfo').RBAC[copyIndex('roleAssignment')], 'RG'), parameters('roleInfo').RBAC[copyIndex('roleAssignment')].RG, parameters('Enviro')), if(contains(parameters('roleInfo').RBAC[copyIndex('roleAssignment')], 'Prefix'), parameters('roleInfo').RBAC[copyIndex('roleAssignment')].Prefix, parameters('Prefix')), if(contains(parameters('roleInfo').RBAC[copyIndex('roleAssignment')], 'Tenant'), parameters('roleInfo').RBAC[copyIndex('roleAssignment')].Tenant, parameters('Global').AppName))]",
                                  "FriendlyName": "[format('source: {0} --> {1} --> {2} --> destination: {3}-{4}-{5}', parameters('rgName'), parameters('roleInfo').Name, parameters('roleInfo').RBAC[copyIndex('roleAssignment')].Name, if(contains(parameters('roleInfo').RBAC[copyIndex('roleAssignment')], 'Prefix'), parameters('roleInfo').RBAC[copyIndex('roleAssignment')].Prefix, parameters('Prefix')), if(contains(parameters('roleInfo').RBAC[copyIndex('roleAssignment')], 'RG'), parameters('roleInfo').RBAC[copyIndex('roleAssignment')].RG, parameters('Enviro')), if(contains(parameters('roleInfo').RBAC[copyIndex('roleAssignment')], 'Tenant'), parameters('roleInfo').RBAC[copyIndex('roleAssignment')].Tenant, parameters('Global').AppName))]"
                                }
                              }
                            ],
                            "objectIdLookup": "[json(parameters('Global').objectIdLookup)]",
                            "rolesGroupsLookup": "[json(parameters('Global').RolesGroupsLookup)]"
                          },
                          "resources": [
                            {
                              "condition": "[equals(parameters('Enviro'), 'G0')]",
                              "copy": {
                                "name": "RBACRASUB",
                                "count": "[length(variables('roleAssignment'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[replace(format('dp-rbac-all-ra-{0}-{1}', parameters('roleInfo').name, copyIndex()), '@', '_')]",
                              "location": "[deployment().location]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "description": {
                                    "value": "[parameters('roleInfo').name]"
                                  },
                                  "name": {
                                    "value": "[variables('roleAssignment')[copyIndex()].GUID]"
                                  },
                                  "roledescription": {
                                    "value": "[variables('roleAssignment')[copyIndex()].RoleName]"
                                  },
                                  "roleDefinitionId": {
                                    "value": "[format('{0}/providers/Microsoft.Authorization/roleDefinitions/{1}', variables('roleAssignment')[copyIndex()].DestSubscription, variables('roleAssignment')[copyIndex()].RoleID)]"
                                  },
                                  "principalType": {
                                    "value": "[variables('roleAssignment')[copyIndex()].principalType]"
                                  },
                                  "principalId": {
                                    "value": "[if(equals(parameters('providerPath'), 'guid'), parameters('roleInfo').name, if(equals(length(parameters('providerPath')), 0), variables('objectIdLookup')[parameters('roleInfo').name], reference(format('{0}/resourceGroups/{1}/providers/{2}/{3}{4}{5}', variables('roleAssignment')[copyIndex()].DestSubscription, variables('roleAssignment')[copyIndex()].SourceRG, parameters('providerPath'), parameters('Deployment'), parameters('namePrefix'), parameters('roleInfo').Name), parameters('providerAPI')).principalId))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.4.1318.3566",
                                      "templateHash": "4835843647169814981"
                                    }
                                  },
                                  "parameters": {
                                    "roleDefinitionId": {
                                      "type": "string"
                                    },
                                    "principalId": {
                                      "type": "string"
                                    },
                                    "principalType": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "description": {
                                      "type": "string"
                                    },
                                    "roledescription": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2020-04-01-preview",
                                      "name": "[parameters('name')]",
                                      "properties": {
                                        "roleDefinitionId": "[parameters('roleDefinitionId')]",
                                        "principalType": "[parameters('principalType')]",
                                        "principalId": "[parameters('principalId')]"
                                      }
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "condition": "[and(not(equals(parameters('Enviro'), 'G0')), not(equals(parameters('Enviro'), 'M0')))]",
                              "copy": {
                                "name": "RBACRARG",
                                "count": "[length(variables('roleAssignment'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[replace(format('dp-rbac-all-ra-{0}-{1}', parameters('roleInfo').name, copyIndex()), '@', '_')]",
                              "subscriptionId": "[variables('roleAssignment')[copyIndex()].DestSubscriptionID]",
                              "resourceGroup": "[format('{0}-{1}-{2}-RG-{3}', variables('roleAssignment')[copyIndex()].DestPrefix, parameters('Global').OrgName, variables('roleAssignment')[copyIndex()].DestApp, variables('roleAssignment')[copyIndex()].DestRG)]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "description": {
                                    "value": "[parameters('roleInfo').name]"
                                  },
                                  "name": {
                                    "value": "[variables('roleAssignment')[copyIndex()].GUID]"
                                  },
                                  "roledescription": {
                                    "value": "[variables('roleAssignment')[copyIndex()].RoleName]"
                                  },
                                  "roleDefinitionId": {
                                    "value": "[format('{0}/providers/Microsoft.Authorization/roleDefinitions/{1}', variables('roleAssignment')[copyIndex()].DestSubscription, variables('roleAssignment')[copyIndex()].RoleID)]"
                                  },
                                  "principalType": {
                                    "value": "[variables('roleAssignment')[copyIndex()].principalType]"
                                  },
                                  "principalId": {
                                    "value": "[if(equals(parameters('providerPath'), 'guid'), parameters('roleInfo').name, if(equals(length(parameters('providerPath')), 0), variables('objectIdLookup')[parameters('roleInfo').name], reference(format('{0}/resourceGroups/{1}/providers/{2}/{3}{4}{5}', variables('roleAssignment')[copyIndex()].DestSubscription, variables('roleAssignment')[copyIndex()].SourceRG, parameters('providerPath'), parameters('Deployment'), parameters('namePrefix'), parameters('roleInfo').Name), parameters('providerAPI')).principalId))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.4.1318.3566",
                                      "templateHash": "11184549812243014465"
                                    }
                                  },
                                  "parameters": {
                                    "roleDefinitionId": {
                                      "type": "string"
                                    },
                                    "principalId": {
                                      "type": "string"
                                    },
                                    "principalType": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "description": {
                                      "type": "string"
                                    },
                                    "roledescription": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2020-04-01-preview",
                                      "name": "[parameters('name')]",
                                      "properties": {
                                        "roleDefinitionId": "[parameters('roleDefinitionId')]",
                                        "principalType": "[parameters('principalType')]",
                                        "principalId": "[parameters('principalId')]"
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "RoleAssignments": {
                              "type": "array",
                              "value": "[variables('roleAssignment')]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', format('dp-identities-{0}-aks{1}', parameters('Deployment'), parameters('AKSInfo').Name))]"
                      ]
                    }
                  ]
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-ACR', variables('Deployment')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-OMS', variables('Deployment')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-VNET', variables('Deployment')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-WAF', variables('Deployment')))]"
      ]
    },
    {
      "condition": "[bool(parameters('Stage').VMSS)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "VMSS",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "DeploymentID": {
            "value": "[parameters('DeploymentID')]"
          },
          "DeploymentInfo": {
            "value": "[parameters('DeploymentInfo')]"
          },
          "Environment": {
            "value": "[parameters('Environment')]"
          },
          "Extensions": {
            "value": "[parameters('Extensions')]"
          },
          "Global": {
            "value": "[parameters('Global')]"
          },
          "Prefix": {
            "value": "[parameters('Prefix')]"
          },
          "Stage": {
            "value": "[parameters('Stage')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "10200183098505079101"
            }
          },
          "parameters": {
            "Prefix": {
              "type": "string"
            },
            "Environment": {
              "type": "string",
              "defaultValue": "D",
              "allowedValues": [
                "I",
                "D",
                "T",
                "U",
                "P",
                "S",
                "G",
                "A"
              ]
            },
            "DeploymentID": {
              "type": "string",
              "defaultValue": "1",
              "allowedValues": [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9"
              ]
            },
            "Stage": {
              "type": "object"
            },
            "Extensions": {
              "type": "object"
            },
            "Global": {
              "type": "object"
            },
            "DeploymentInfo": {
              "type": "object"
            }
          },
          "variables": {
            "copy": [
              {
                "name": "VM",
                "count": "[length(variables('AppServers'))]",
                "input": {
                  "match": "[or(equals(parameters('Global').CN, '.'), contains(array(parameters('Global').CN), variables('AppServers')[copyIndex('VM')].Name))]",
                  "name": "[variables('AppServers')[copyIndex('VM')].Name]",
                  "Extensions": "[if(contains(variables('OSType')[variables('AppServers')[copyIndex('VM')].OSType], 'RoleExtensions'), union(parameters('Extensions'), variables('OSType')[variables('AppServers')[copyIndex('VM')].OSType].RoleExtensions), parameters('Extensions'))]",
                  "DataDisk": "[if(contains(variables('AppServers')[copyIndex('VM')], 'DDRole'), variables('DataDiskInfo')[variables('AppServers')[copyIndex('VM')].DDRole], json('null'))]",
                  "NodeType": "[toLower(concat(parameters('Global').AppName, variables('AppServers')[copyIndex('VM')].Name))]",
                  "vmHostName": "[toLower(format('{0}{1}{2}', parameters('Environment'), parameters('DeploymentID'), variables('AppServers')[copyIndex('VM')].Name))]",
                  "Name": "[format('{0}{1}-{2}{3}-{4}', parameters('Prefix'), parameters('Global').AppName, parameters('Environment'), parameters('DeploymentID'), variables('AppServers')[copyIndex('VM')].Name)]",
                  "durabilityLevel": "[variables('AppServers')[copyIndex('VM')].durabilityLevel]",
                  "placementProperties": "[variables('AppServers')[copyIndex('VM')].placementProperties]"
                }
              }
            ],
            "Deployment": "[format('{0}-{1}-{2}-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID'))]",
            "computeGlobal": "[json('{\r\n  \"DataDiskInfo\": {\r\n    \"0GB\": {},\r\n    \"32GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            32\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GBSS\": {\r\n      \"DATASS\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GB-2\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ],\r\n          [\r\n            1,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"128GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            128\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"FIL64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"SOFS\": {\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            1,\r\n            32\r\n          ],\r\n          [\r\n            2,\r\n            32\r\n          ],\r\n          [\r\n            3,\r\n            32\r\n          ]\r\n        ],\r\n        \"FileSystem\": \"ReFS\",\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"SQL64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"LOGS\": {\r\n        \"DriveLetter\": \"G\",\r\n        \"caching\": \"None\",\r\n        \"LUNS\": [\r\n          [\r\n            8,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"TEMPDB\": {\r\n        \"DriveLetter\": \"H\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            12,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"BACKUP\": {\r\n        \"DriveLetter\": \"I\",\r\n        \"caching\": \"None\",\r\n        \"LUNS\": [\r\n          [\r\n            15,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    }\r\n  },\r\n  \"computeSizeLookupOptions\": {\r\n    \"API-P\": \"Standard_D4s_v3\",\r\n    \"API-D\": \"Standard_D4s_v3\",\r\n    \"API-S\": \"Standard_D2s_v3\",\r\n    \"SF-P\": \"Standard_D4s_v3\",\r\n    \"SF-D\": \"Standard_D2s_v3\",\r\n    \"SF-S\": \"Standard_D2s_v3\",\r\n    \"CTNR-P\": \"Standard_D4s_v3\",\r\n    \"CTNR-D\": \"Standard_D2s_v3\",\r\n    \"ADp-P\": \"Standard_D2s_v3\",\r\n    \"ADp-D\": \"Standard_A2m_v2\",\r\n    \"ADs-P\": \"Standard_D2s_v3\",\r\n    \"ADs-D\": \"Standard_A2m_v2\",\r\n    \"AAP-P\": \"Standard_D2s_v3\",\r\n    \"AAP-D\": \"Standard_D2s_v3\",\r\n    \"DNS-P\": \"Standard_D2s_v3\",\r\n    \"DNS-D\": \"Standard_D2s_v3\",\r\n    \"BUS-P\": \"Standard_DS2_v2\",\r\n    \"BUS-D\": \"Standard_DS2_v2\",\r\n    \"LIN-P\": \"Standard_DS2_v2\",\r\n    \"LIN-D\": \"Standard_DS2_v2\",\r\n    \"FIL-P\": \"Standard_D4s_v3\",\r\n    \"FIL-D\": \"Standard_D4s_v3\",\r\n    \"DFS-P\": \"Standard_D4s_v3\",\r\n    \"DFS-D\": \"Standard_D4s_v3\",\r\n    \"JMP-P\": \"Standard_D4s_v3\",\r\n    \"JMP-D\": \"Standard_D4s_v3\",\r\n    \"CLT-P\": \"Standard_D4s_v3\",\r\n    \"CLT-D\": \"Standard_D4s_v3\",\r\n    \"PXY-P\": \"Standard_D4s_v3\",\r\n    \"PXY-D\": \"Standard_D2s_v3\",\r\n    \"CLS01-D\": \"Standard_D4s_v3\",\r\n    \"CLS02-D\": \"Standard_D4s_v3\",\r\n    \"CLS01-P\": \"Standard_D4s_v3\",\r\n    \"CLS02-P\": \"Standard_D4s_v3\",\r\n    \"FW-P\": \"Standard_F4\",\r\n    \"FW-D\": \"Standard_F2\"\r\n  },\r\n  \"OSType\": {\r\n    \"Server2022SSIMG\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/b8f402aa-20f7-4888-b45c-3cf086dad9c3/resourceGroups/ACU1-BRW-AOA-RG-G1/providers/Microsoft.Compute/galleries/acu1brwaoag1gallery01/images/vmss2022\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SSIMG\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/b8f402aa-20f7-4888-b45c-3cf086dad9c3/resourceGroups/ACU1-BRW-AOA-RG-G1/providers/Microsoft.Compute/galleries/acu1brwaoag1gallery01/images/vmss2019webnetcore27\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"cbld10\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/27b750cd-ed43-42fd-9044-8d75e124ae55/resourceGroups/SBID-Build-Test/providers/Microsoft.Compute/galleries/cbldtest/images/cbld10-ext\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 1,\r\n        \"IaaSDiagnostics\": 1,\r\n        \"Antimalware\": 0,\r\n        \"DependencyAgent\": 1,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Win10O365\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsDesktop\",\r\n        \"offer\": \"office-365\",\r\n        \"sku\": \"rs5-evd-o365pp\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Client\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Win10\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsDesktop\",\r\n        \"offer\": \"Windows-10\",\r\n        \"sku\": \"21h1-pro-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Client\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"SQLServer2016\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftSQLServer\",\r\n        \"Offer\": \"SQL2016SP2-WS2016\",\r\n        \"sku\": \"Enterprise\",\r\n        \"version\": \"latest\"\r\n      },\r\n      // \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016Core\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-Server-Core\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016small\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016Coresmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-Server-Core-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019-gen2\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"windowsserver-gen2preview\",\r\n        \"sku\": \"2019-Datacenter-gen2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2022\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2022-Datacenter-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"_plan\": {\r\n        \"name\": \"windows-server-2022\",\r\n        \"publisher\": \"microsoftwindowsserver\",\r\n        \"product\": \"microsoftserveroperatingsystems-previews\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2022Containerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"datacenter-core-20h2-with-containers-smalldisk-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Core\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-Core\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019small\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-datacenter-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Coresmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-Server-Core-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Containerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019CoreContainerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-datacenter-core-with-containers-smalldisk-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016SS\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-with-Containers\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SSgs\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers-gs\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SS\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"NetScaler\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"citrix\",\r\n        \"Offer\": \"netscalervpx-120\",\r\n        \"Sku\": \"netscalerbyol\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"netscalerbyol\",\r\n        \"publisher\": \"citrix\",\r\n        \"product\": \"netscalervpx-120\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"MaxLoadBalancer\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"loadbalancer\",\r\n        \"offer\": \"loadbalancer-org-load-balancer-for-azure\",\r\n        \"sku\": \"max_load_balancer\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"max_load_balancer\",\r\n        \"publisher\": \"loadbalancer\",\r\n        \"product\": \"loadbalancer-org-load-balancer-for-azure\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortigate\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet_fortigate-vm_v5\",\r\n        \"sku\": \"fortinet_fg-vm\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"fortinet_fg-vm\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet_fortigate-vm_v5\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortigatepayg\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet_fortigate-vm_v5\",\r\n        \"sku\": \"fortinet_fg-vm_payg\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"fortinet_fg-vm_payg\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet_fortigate-vm_v5\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortimngr\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet-fortimanager\",\r\n        \"sku\": \"fortinet-fortimanager\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 3,\r\n      \"plan\": {\r\n        \"name\": \"fortinet-fortimanager\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet-fortimanager\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"UbuntuServer1904\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"canonical\",\r\n        \"offer\": \"UbuntuServer\",\r\n        \"sku\": \"19.04\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"Antimalware\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 1,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0\r\n      }\r\n    },\r\n    \"Bus-debian\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"credativ\",\r\n        \"offer\": \"Debian\",\r\n        \"sku\": \"8\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 1,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"PROXY-UBUNTU\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"Canonical\",\r\n        \"offer\": \"UbuntuServer\",\r\n        \"sku\": \"16.04-LTS\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"fileUris\": \"[concat(parameters(''global'')._artifactsLocation, ''/scripts/pxy.zip\",\r\n      \"commandToExecute\": \"[concat(''sudo apt-get update && sudo apt-get install unzip && unzip Proxy.zip && sudo bash -x haproxyvm-configure.sh '', '' -a '', ''ilbIPAddress'', '' -r '', ''ilbRabbitMqPort'', '' -m '', ''ilbRabbitMqMgmtPort'', '' -b '', ''dnsName'', ''.'', ''location'', ''.cloudapp.azure.com -p '', ''vmNamePrefix'', ''0 -s '', ''vmNamePrefix'', ''1'')]\",\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"CentOS75\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"OpenLogic\",\r\n        \"Offer\": \"CentOS\",\r\n        \"sku\": \"7.5\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"Antimalware\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    }\r\n  },\r\n  \"ladCfg\": {\r\n    \"diagnosticMonitorConfiguration\": {\r\n      \"eventVolume\": \"Medium\",\r\n      \"metrics\": {\r\n        \"metricAggregation\": [\r\n          {\r\n            \"scheduledTransferPeriod\": \"PT1H\"\r\n          },\r\n          {\r\n            \"scheduledTransferPeriod\": \"PT1M\"\r\n          }\r\n        ],\r\n        \"resourceId\": \"__VM_RESOURCE_ID__\"\r\n      },\r\n      \"performanceCounters\": {\r\n        \"performanceCounterConfiguration\": [\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk read guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readbytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/readbytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk writes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/writespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk transfer time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagetransfertime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagetransfertime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk transfers\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"transferspersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/transferspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk write guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writebytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/writebytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk read time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagereadtime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagereadtime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk write time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagewritetime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagewritetime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk total bytes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/bytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk reads\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readspersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/readspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk queue length\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagediskqueuelength\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagediskqueuelength\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network in guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytesreceived\",\r\n            \"counterSpecifier\": \"/builtin/network/bytesreceived\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network total bytes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytestotal\",\r\n            \"counterSpecifier\": \"/builtin/network/bytestotal\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network out guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytestransmitted\",\r\n            \"counterSpecifier\": \"/builtin/network/bytestransmitted\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network collisions\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totalcollisions\",\r\n            \"counterSpecifier\": \"/builtin/network/totalcollisions\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets received errors\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totalrxerrors\",\r\n            \"counterSpecifier\": \"/builtin/network/totalrxerrors\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets sent\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"packetstransmitted\",\r\n            \"counterSpecifier\": \"/builtin/network/packetstransmitted\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets received\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"packetsreceived\",\r\n            \"counterSpecifier\": \"/builtin/network/packetsreceived\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets sent errors\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totaltxerrors\",\r\n            \"counterSpecifier\": \"/builtin/network/totaltxerrors\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem transfers/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"transferspersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/transferspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % free space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentfreespace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentfreespace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % used space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusedspace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentusedspace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem used space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"usedspace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/usedspace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem read bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytesreadpersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/bytesreadpersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem free space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"freespace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/freespace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % free inodes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentfreeinodes\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentfreeinodes\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/bytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem reads/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readspersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/readspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem write bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"byteswrittenpersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/byteswrittenpersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem writes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writespersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/writespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % used inodes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusedinodes\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentusedinodes\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU IO wait time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentiowaittime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentiowaittime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU user time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusertime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentusertime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU nice time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentnicetime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentnicetime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU percentage guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentprocessortime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentprocessortime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU interrupt time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentinterrupttime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentinterrupttime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU idle time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentidletime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentidletime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU privileged time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentprivilegedtime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentprivilegedtime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"availablememory\",\r\n            \"counterSpecifier\": \"/builtin/memory/availablememory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap percent used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentusedswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentusedswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"usedmemory\",\r\n            \"counterSpecifier\": \"/builtin/memory/usedmemory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Page reads\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pagesreadpersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pagesreadpersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"availableswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/availableswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap percent available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentavailableswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentavailableswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Mem. percent available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentavailablememory\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentavailablememory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Pages\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pagespersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pagespersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"usedswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/usedswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory percentage\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentusedmemory\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentusedmemory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Page writes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pageswrittenpersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pageswrittenpersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          }\r\n        ]\r\n      },\r\n      \"syslogEvents\": {\r\n        \"syslogEventConfiguration\": {\r\n          \"LOG_AUTH\": \"LOG_DEBUG\",\r\n          \"LOG_AUTHPRIV\": \"LOG_DEBUG\",\r\n          \"LOG_CRON\": \"LOG_DEBUG\",\r\n          \"LOG_DAEMON\": \"LOG_DEBUG\",\r\n          \"LOG_FTP\": \"LOG_DEBUG\",\r\n          \"LOG_KERN\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL0\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL1\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL2\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL3\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL4\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL5\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL6\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL7\": \"LOG_DEBUG\",\r\n          \"LOG_LPR\": \"LOG_DEBUG\",\r\n          \"LOG_MAIL\": \"LOG_DEBUG\",\r\n          \"LOG_NEWS\": \"LOG_DEBUG\",\r\n          \"LOG_SYSLOG\": \"LOG_DEBUG\",\r\n          \"LOG_USER\": \"LOG_DEBUG\",\r\n          \"LOG_UUCP\": \"LOG_DEBUG\"\r\n        }\r\n      }\r\n    },\r\n    \"sampleRateInSeconds\": 15\r\n  },\r\n  \"WadCfg\": {\r\n    \"DiagnosticMonitorConfiguration\": {\r\n      \"overallQuotaInMB\": 10000,\r\n      \"DiagnosticInfrastructureLogs\": {\r\n        \"scheduledTransferLogLevelFilter\": \"Error\"\r\n      },\r\n      \"PerformanceCounters\": {\r\n        \"scheduledTransferPeriod\": \"PT1M\",\r\n        \"PerformanceCounterConfiguration\": []\r\n      },\r\n      \"WindowsEventLog\": {\r\n        \"scheduledTransferPeriod\": \"PT5M\",\r\n        \"DataSource\": [\r\n          {\r\n            \"name\": \"Application!*[System[(Level = 1 or Level = 2)]]\"\r\n          },\r\n          {\r\n            \"name\": \"Security!*[System[(Level = 1 or Level = 2)]\"\r\n          },\r\n          {\r\n            \"name\": \"System!*[System[(Level = 1 or Level = 2)]]\"\r\n          },\r\n          {\r\n            \"name\": \"Microsoft-Windows-DSC/Operational!*[System[(EventID=4249 or EventID=4097)]]\"\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}')]",
            "OSType": "[variables('computeGlobal').OSType]",
            "DataDiskInfo": "[variables('computeGlobal').DataDiskInfo]",
            "AppServers": "[if(contains(parameters('DeploymentInfo'), 'AppServersVMSS'), parameters('DeploymentInfo').AppServersVMSS, createArray())]",
            "HubRGJ": "[json(parameters('Global').hubRG)]",
            "HubKVJ": "[json(parameters('Global').hubKV)]",
            "gh": {
              "hubRGPrefix": "[if(contains(variables('HubRGJ'), 'Prefix'), variables('HubRGJ').Prefix, parameters('Prefix'))]",
              "hubRGOrgName": "[if(contains(variables('HubRGJ'), 'OrgName'), variables('HubRGJ').OrgName, parameters('Global').OrgName)]",
              "hubRGAppName": "[if(contains(variables('HubRGJ'), 'AppName'), variables('HubRGJ').AppName, parameters('Global').AppName)]",
              "hubRGRGName": "[if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID'))))]",
              "hubKVPrefix": "[if(contains(variables('HubKVJ'), 'Prefix'), variables('HubKVJ').Prefix, parameters('Prefix'))]",
              "hubKVOrgName": "[if(contains(variables('HubKVJ'), 'OrgName'), variables('HubKVJ').OrgName, parameters('Global').OrgName)]",
              "hubKVAppName": "[if(contains(variables('HubKVJ'), 'AppName'), variables('HubKVJ').AppName, parameters('Global').AppName)]",
              "hubKVRGName": "[if(contains(variables('HubKVJ'), 'RG'), variables('HubKVJ').RG, variables('HubRGJ').name)]"
            },
            "HubRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').hubRGPrefix, variables('gh').hubRGOrgName, variables('gh').hubRGAppName, variables('gh').hubRGRGName)]",
            "HubKVName": "[toLower(format('{0}-{1}-{2}-{3}-kv{4}', variables('gh').hubKVPrefix, variables('gh').hubKVOrgName, variables('gh').hubKVAppName, variables('gh').hubKVRGName, variables('HubKVJ').name))]"
          },
          "resources": [
            {
              "condition": "[variables('VM')[copyIndex()].match]",
              "copy": {
                "name": "VMSS",
                "count": "[length(variables('AppServers'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dp{0}-VMSS-Deploy{1}', variables('Deployment'), variables('AppServers')[copyIndex()].Name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "Prefix": {
                    "value": "[parameters('Prefix')]"
                  },
                  "DeploymentID": {
                    "value": "[parameters('DeploymentID')]"
                  },
                  "Environment": {
                    "value": "[parameters('Environment')]"
                  },
                  "AppServer": {
                    "value": "[variables('AppServers')[copyIndex()]]"
                  },
                  "VM": {
                    "value": "[variables('VM')[copyIndex()]]"
                  },
                  "DeploymentName": {
                    "value": "AppServers"
                  },
                  "Global": {
                    "value": "[parameters('Global')]"
                  },
                  "vmAdminPassword": {
                    "reference": {
                      "keyVault": {
                        "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubRGName')), 'Microsoft.KeyVault/vaults', variables('HubKVName'))]"
                      },
                      "secretName": "localadmin"
                    }
                  },
                  "devOpsPat": {
                    "reference": {
                      "keyVault": {
                        "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubRGName')), 'Microsoft.KeyVault/vaults', variables('HubKVName'))]"
                      },
                      "secretName": "devOpsPat"
                    }
                  },
                  "sshPublic": {
                    "reference": {
                      "keyVault": {
                        "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubRGName')), 'Microsoft.KeyVault/vaults', variables('HubKVName'))]"
                      },
                      "secretName": "sshPublic"
                    }
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1318.3566",
                      "templateHash": "3169690792719803274"
                    }
                  },
                  "parameters": {
                    "Prefix": {
                      "type": "string"
                    },
                    "DeploymentID": {
                      "type": "string"
                    },
                    "Environment": {
                      "type": "string"
                    },
                    "AppServer": {
                      "type": "object"
                    },
                    "VM": {
                      "type": "object"
                    },
                    "Global": {
                      "type": "object"
                    },
                    "deploymentTime": {
                      "type": "string",
                      "defaultValue": "[utcNow()]"
                    },
                    "DeploymentName": {
                      "type": "string"
                    },
                    "vmAdminPassword": {
                      "type": "secureString"
                    },
                    "devOpsPat": {
                      "type": "secureString"
                    },
                    "sshPublic": {
                      "type": "secureString"
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "applicationGatewayBackendAddressPools",
                        "count": "[length(variables('WAFBE'))]",
                        "input": {
                          "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools', format('{0}-waf{1}', variables('Deployment'), variables('LB')), 'appGatewayBackendPool')]"
                        }
                      },
                      {
                        "name": "loadBalancerBackendAddressPools",
                        "count": "[length(variables('LBBE'))]",
                        "input": {
                          "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', format('{0}-lb{1}', variables('Deployment'), variables('LB')), variables('LBBE')[copyIndex('loadBalancerBackendAddressPools')])]"
                        }
                      },
                      {
                        "name": "loadBalancerInboundNatPools",
                        "count": "[length(variables('NATPools'))]",
                        "input": {
                          "id": "[resourceId('Microsoft.Network/loadBalancers/inboundNatPools', format('{0}-lb{1}', variables('Deployment'), variables('LB')), variables('NATPools')[copyIndex('loadBalancerInboundNatPools')])]"
                        }
                      }
                    ],
                    "Deployment": "[format('{0}-{1}-{2}-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID'))]",
                    "DeploymentURI": "[toLower(format('{0}{1}{2}{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID')))]",
                    "computeGlobal": "[json('{\r\n  \"DataDiskInfo\": {\r\n    \"0GB\": {},\r\n    \"32GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            32\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GBSS\": {\r\n      \"DATASS\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"64GB-2\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ],\r\n          [\r\n            1,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"128GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            128\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"FIL64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"SOFS\": {\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            1,\r\n            32\r\n          ],\r\n          [\r\n            2,\r\n            32\r\n          ],\r\n          [\r\n            3,\r\n            32\r\n          ]\r\n        ],\r\n        \"FileSystem\": \"ReFS\",\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    },\r\n    \"SQL64GB\": {\r\n      \"DATA\": {\r\n        \"DriveLetter\": \"F\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            0,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"LOGS\": {\r\n        \"DriveLetter\": \"G\",\r\n        \"caching\": \"None\",\r\n        \"LUNS\": [\r\n          [\r\n            8,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"TEMPDB\": {\r\n        \"DriveLetter\": \"H\",\r\n        \"caching\": \"ReadOnly\",\r\n        \"LUNS\": [\r\n          [\r\n            12,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      },\r\n      \"BACKUP\": {\r\n        \"DriveLetter\": \"I\",\r\n        \"caching\": \"None\",\r\n        \"LUNS\": [\r\n          [\r\n            15,\r\n            64\r\n          ]\r\n        ],\r\n        \"saType\": \"StandardSSD_LRS\"\r\n      }\r\n    }\r\n  },\r\n  \"computeSizeLookupOptions\": {\r\n    \"API-P\": \"Standard_D4s_v3\",\r\n    \"API-D\": \"Standard_D4s_v3\",\r\n    \"API-S\": \"Standard_D2s_v3\",\r\n    \"SF-P\": \"Standard_D4s_v3\",\r\n    \"SF-D\": \"Standard_D2s_v3\",\r\n    \"SF-S\": \"Standard_D2s_v3\",\r\n    \"CTNR-P\": \"Standard_D4s_v3\",\r\n    \"CTNR-D\": \"Standard_D2s_v3\",\r\n    \"ADp-P\": \"Standard_D2s_v3\",\r\n    \"ADp-D\": \"Standard_A2m_v2\",\r\n    \"ADs-P\": \"Standard_D2s_v3\",\r\n    \"ADs-D\": \"Standard_A2m_v2\",\r\n    \"AAP-P\": \"Standard_D2s_v3\",\r\n    \"AAP-D\": \"Standard_D2s_v3\",\r\n    \"DNS-P\": \"Standard_D2s_v3\",\r\n    \"DNS-D\": \"Standard_D2s_v3\",\r\n    \"BUS-P\": \"Standard_DS2_v2\",\r\n    \"BUS-D\": \"Standard_DS2_v2\",\r\n    \"LIN-P\": \"Standard_DS2_v2\",\r\n    \"LIN-D\": \"Standard_DS2_v2\",\r\n    \"FIL-P\": \"Standard_D4s_v3\",\r\n    \"FIL-D\": \"Standard_D4s_v3\",\r\n    \"DFS-P\": \"Standard_D4s_v3\",\r\n    \"DFS-D\": \"Standard_D4s_v3\",\r\n    \"JMP-P\": \"Standard_D4s_v3\",\r\n    \"JMP-D\": \"Standard_D4s_v3\",\r\n    \"CLT-P\": \"Standard_D4s_v3\",\r\n    \"CLT-D\": \"Standard_D4s_v3\",\r\n    \"PXY-P\": \"Standard_D4s_v3\",\r\n    \"PXY-D\": \"Standard_D2s_v3\",\r\n    \"CLS01-D\": \"Standard_D4s_v3\",\r\n    \"CLS02-D\": \"Standard_D4s_v3\",\r\n    \"CLS01-P\": \"Standard_D4s_v3\",\r\n    \"CLS02-P\": \"Standard_D4s_v3\",\r\n    \"FW-P\": \"Standard_F4\",\r\n    \"FW-D\": \"Standard_F2\"\r\n  },\r\n  \"OSType\": {\r\n    \"Server2022SSIMG\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/b8f402aa-20f7-4888-b45c-3cf086dad9c3/resourceGroups/ACU1-BRW-AOA-RG-G1/providers/Microsoft.Compute/galleries/acu1brwaoag1gallery01/images/vmss2022\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SSIMG\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/b8f402aa-20f7-4888-b45c-3cf086dad9c3/resourceGroups/ACU1-BRW-AOA-RG-G1/providers/Microsoft.Compute/galleries/acu1brwaoag1gallery01/images/vmss2019webnetcore27\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"cbld10\": {\r\n      \"imageReference\": {\r\n        \"id\": \"/subscriptions/27b750cd-ed43-42fd-9044-8d75e124ae55/resourceGroups/SBID-Build-Test/providers/Microsoft.Compute/galleries/cbldtest/images/cbld10-ext\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 1,\r\n        \"IaaSDiagnostics\": 1,\r\n        \"Antimalware\": 0,\r\n        \"DependencyAgent\": 1,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Win10O365\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsDesktop\",\r\n        \"offer\": \"office-365\",\r\n        \"sku\": \"rs5-evd-o365pp\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Client\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Win10\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsDesktop\",\r\n        \"offer\": \"Windows-10\",\r\n        \"sku\": \"21h1-pro-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Client\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"SQLServer2016\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftSQLServer\",\r\n        \"Offer\": \"SQL2016SP2-WS2016\",\r\n        \"sku\": \"Enterprise\",\r\n        \"version\": \"latest\"\r\n      },\r\n      // \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016Core\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-Server-Core\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016small\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016Coresmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-Server-Core-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019-gen2\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"windowsserver-gen2preview\",\r\n        \"sku\": \"2019-Datacenter-gen2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2022\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2022-Datacenter-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"_plan\": {\r\n        \"name\": \"windows-server-2022\",\r\n        \"publisher\": \"microsoftwindowsserver\",\r\n        \"product\": \"microsoftserveroperatingsystems-previews\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2022Containerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"datacenter-core-20h2-with-containers-smalldisk-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 127,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Core\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-Core\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"patchMode\": \"AutomaticByPlatform\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019small\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-datacenter-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Coresmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-Server-Core-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019Containerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers-smalldisk\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019CoreContainerssmall\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"Offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-datacenter-core-with-containers-smalldisk-g2\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2016SS\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2016-Datacenter-with-Containers\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SSgs\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers-gs\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"Server2019SS\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"MicrosoftWindowsServer\",\r\n        \"offer\": \"WindowsServer\",\r\n        \"sku\": \"2019-Datacenter-with-Containers\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"licenseType\": \"Windows_Server\",\r\n      \"OS\": \"Windows\",\r\n      \"RoleExtensions\": {\r\n        \"Scripts\": 0,\r\n        \"chefClient\": 0\r\n      }\r\n    },\r\n    \"NetScaler\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"citrix\",\r\n        \"Offer\": \"netscalervpx-120\",\r\n        \"Sku\": \"netscalerbyol\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"netscalerbyol\",\r\n        \"publisher\": \"citrix\",\r\n        \"product\": \"netscalervpx-120\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"MaxLoadBalancer\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"loadbalancer\",\r\n        \"offer\": \"loadbalancer-org-load-balancer-for-azure\",\r\n        \"sku\": \"max_load_balancer\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"max_load_balancer\",\r\n        \"publisher\": \"loadbalancer\",\r\n        \"product\": \"loadbalancer-org-load-balancer-for-azure\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortigate\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet_fortigate-vm_v5\",\r\n        \"sku\": \"fortinet_fg-vm\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"fortinet_fg-vm\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet_fortigate-vm_v5\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortigatepayg\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet_fortigate-vm_v5\",\r\n        \"sku\": \"fortinet_fg-vm_payg\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"plan\": {\r\n        \"name\": \"fortinet_fg-vm_payg\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet_fortigate-vm_v5\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"Fortimngr\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"fortinet\",\r\n        \"offer\": \"fortinet-fortimanager\",\r\n        \"sku\": \"fortinet-fortimanager\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 3,\r\n      \"plan\": {\r\n        \"name\": \"fortinet-fortimanager\",\r\n        \"publisher\": \"fortinet\",\r\n        \"product\": \"fortinet-fortimanager\"\r\n      },\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"UbuntuServer1904\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"canonical\",\r\n        \"offer\": \"UbuntuServer\",\r\n        \"sku\": \"19.04\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"Antimalware\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 1,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0\r\n      }\r\n    },\r\n    \"Bus-debian\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"credativ\",\r\n        \"offer\": \"Debian\",\r\n        \"sku\": \"8\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 1,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"PROXY-UBUNTU\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"Canonical\",\r\n        \"offer\": \"UbuntuServer\",\r\n        \"sku\": \"16.04-LTS\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 32,\r\n      \"fileUris\": \"[concat(parameters(''global'')._artifactsLocation, ''/scripts/pxy.zip\",\r\n      \"commandToExecute\": \"[concat(''sudo apt-get update && sudo apt-get install unzip && unzip Proxy.zip && sudo bash -x haproxyvm-configure.sh '', '' -a '', ''ilbIPAddress'', '' -r '', ''ilbRabbitMqPort'', '' -m '', ''ilbRabbitMqMgmtPort'', '' -b '', ''dnsName'', ''.'', ''location'', ''.cloudapp.azure.com -p '', ''vmNamePrefix'', ''0 -s '', ''vmNamePrefix'', ''1'')]\",\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    },\r\n    \"CentOS75\": {\r\n      \"imageReference\": {\r\n        \"publisher\": \"OpenLogic\",\r\n        \"Offer\": \"CentOS\",\r\n        \"sku\": \"7.5\",\r\n        \"version\": \"latest\"\r\n      },\r\n      \"OS\": \"Linux\",\r\n      \"OSDiskGB\": 64,\r\n      \"RoleExtensions\": {\r\n        \"MonitoringAgent\": 0,\r\n        \"IaaSDiagnostics\": 0,\r\n        \"DependencyAgent\": 0,\r\n        \"DSC\": 0,\r\n        \"Scripts\": 0,\r\n        \"MSI\": 0,\r\n        \"CertMgmt\": 0,\r\n        \"DomainJoin\": 0,\r\n        \"Antimalware\": 0,\r\n        \"chefClient\": 0,\r\n        \"GuestHealthAgent\": 0,\r\n        \"AdminCenter\": 0,\r\n        \"WindowsOpenSSH\": 0\r\n      }\r\n    }\r\n  },\r\n  \"ladCfg\": {\r\n    \"diagnosticMonitorConfiguration\": {\r\n      \"eventVolume\": \"Medium\",\r\n      \"metrics\": {\r\n        \"metricAggregation\": [\r\n          {\r\n            \"scheduledTransferPeriod\": \"PT1H\"\r\n          },\r\n          {\r\n            \"scheduledTransferPeriod\": \"PT1M\"\r\n          }\r\n        ],\r\n        \"resourceId\": \"__VM_RESOURCE_ID__\"\r\n      },\r\n      \"performanceCounters\": {\r\n        \"performanceCounterConfiguration\": [\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk read guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readbytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/readbytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk writes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/writespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk transfer time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagetransfertime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagetransfertime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk transfers\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"transferspersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/transferspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk write guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writebytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/writebytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk read time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagereadtime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagereadtime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk write time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagewritetime\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagewritetime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Seconds\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk total bytes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/bytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk reads\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readspersecond\",\r\n            \"counterSpecifier\": \"/builtin/disk/readspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Disk queue length\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"disk\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"averagediskqueuelength\",\r\n            \"counterSpecifier\": \"/builtin/disk/averagediskqueuelength\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network in guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytesreceived\",\r\n            \"counterSpecifier\": \"/builtin/network/bytesreceived\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network total bytes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytestotal\",\r\n            \"counterSpecifier\": \"/builtin/network/bytestotal\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network out guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"bytestransmitted\",\r\n            \"counterSpecifier\": \"/builtin/network/bytestransmitted\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Network collisions\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totalcollisions\",\r\n            \"counterSpecifier\": \"/builtin/network/totalcollisions\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets received errors\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totalrxerrors\",\r\n            \"counterSpecifier\": \"/builtin/network/totalrxerrors\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets sent\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"packetstransmitted\",\r\n            \"counterSpecifier\": \"/builtin/network/packetstransmitted\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets received\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"packetsreceived\",\r\n            \"counterSpecifier\": \"/builtin/network/packetsreceived\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Packets sent errors\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"network\",\r\n            \"counter\": \"totaltxerrors\",\r\n            \"counterSpecifier\": \"/builtin/network/totaltxerrors\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Count\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem transfers/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"transferspersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/transferspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % free space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentfreespace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentfreespace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % used space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusedspace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentusedspace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem used space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"usedspace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/usedspace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem read bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytesreadpersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/bytesreadpersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem free space\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"freespace\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/freespace\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % free inodes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentfreeinodes\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentfreeinodes\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"bytespersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/bytespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"BytesPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem reads/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"readspersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/readspersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem write bytes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"byteswrittenpersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/byteswrittenpersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem writes/sec\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"writespersecond\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/writespersecond\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Filesystem % used inodes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"filesystem\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusedinodes\",\r\n            \"counterSpecifier\": \"/builtin/filesystem/percentusedinodes\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU IO wait time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentiowaittime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentiowaittime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU user time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentusertime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentusertime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU nice time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentnicetime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentnicetime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU percentage guest OS\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentprocessortime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentprocessortime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU interrupt time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentinterrupttime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentinterrupttime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU idle time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentidletime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentidletime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"CPU privileged time\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"processor\",\r\n            \"condition\": \"IsAggregate=TRUE\",\r\n            \"counter\": \"percentprivilegedtime\",\r\n            \"counterSpecifier\": \"/builtin/processor/percentprivilegedtime\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"availablememory\",\r\n            \"counterSpecifier\": \"/builtin/memory/availablememory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap percent used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentusedswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentusedswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"usedmemory\",\r\n            \"counterSpecifier\": \"/builtin/memory/usedmemory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Page reads\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pagesreadpersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pagesreadpersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"availableswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/availableswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap percent available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentavailableswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentavailableswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Mem. percent available\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentavailablememory\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentavailablememory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Pages\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pagespersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pagespersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Swap used\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"usedswap\",\r\n            \"counterSpecifier\": \"/builtin/memory/usedswap\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Bytes\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Memory percentage\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"percentusedmemory\",\r\n            \"counterSpecifier\": \"/builtin/memory/percentusedmemory\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"Percent\"\r\n          },\r\n          {\r\n            \"annotation\": [\r\n              {\r\n                \"displayName\": \"Page writes\",\r\n                \"locale\": \"en-us\"\r\n              }\r\n            ],\r\n            \"class\": \"memory\",\r\n            \"counter\": \"pageswrittenpersec\",\r\n            \"counterSpecifier\": \"/builtin/memory/pageswrittenpersec\",\r\n            \"type\": \"builtin\",\r\n            \"unit\": \"CountPerSecond\"\r\n          }\r\n        ]\r\n      },\r\n      \"syslogEvents\": {\r\n        \"syslogEventConfiguration\": {\r\n          \"LOG_AUTH\": \"LOG_DEBUG\",\r\n          \"LOG_AUTHPRIV\": \"LOG_DEBUG\",\r\n          \"LOG_CRON\": \"LOG_DEBUG\",\r\n          \"LOG_DAEMON\": \"LOG_DEBUG\",\r\n          \"LOG_FTP\": \"LOG_DEBUG\",\r\n          \"LOG_KERN\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL0\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL1\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL2\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL3\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL4\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL5\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL6\": \"LOG_DEBUG\",\r\n          \"LOG_LOCAL7\": \"LOG_DEBUG\",\r\n          \"LOG_LPR\": \"LOG_DEBUG\",\r\n          \"LOG_MAIL\": \"LOG_DEBUG\",\r\n          \"LOG_NEWS\": \"LOG_DEBUG\",\r\n          \"LOG_SYSLOG\": \"LOG_DEBUG\",\r\n          \"LOG_USER\": \"LOG_DEBUG\",\r\n          \"LOG_UUCP\": \"LOG_DEBUG\"\r\n        }\r\n      }\r\n    },\r\n    \"sampleRateInSeconds\": 15\r\n  },\r\n  \"WadCfg\": {\r\n    \"DiagnosticMonitorConfiguration\": {\r\n      \"overallQuotaInMB\": 10000,\r\n      \"DiagnosticInfrastructureLogs\": {\r\n        \"scheduledTransferLogLevelFilter\": \"Error\"\r\n      },\r\n      \"PerformanceCounters\": {\r\n        \"scheduledTransferPeriod\": \"PT1M\",\r\n        \"PerformanceCounterConfiguration\": []\r\n      },\r\n      \"WindowsEventLog\": {\r\n        \"scheduledTransferPeriod\": \"PT5M\",\r\n        \"DataSource\": [\r\n          {\r\n            \"name\": \"Application!*[System[(Level = 1 or Level = 2)]]\"\r\n          },\r\n          {\r\n            \"name\": \"Security!*[System[(Level = 1 or Level = 2)]\"\r\n          },\r\n          {\r\n            \"name\": \"System!*[System[(Level = 1 or Level = 2)]]\"\r\n          },\r\n          {\r\n            \"name\": \"Microsoft-Windows-DSC/Operational!*[System[(EventID=4249 or EventID=4097)]]\"\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}')]",
                    "OSType": "[variables('computeGlobal').OSType]",
                    "WadCfg": "[variables('computeGlobal').WadCfg]",
                    "ladCfg": "[variables('computeGlobal').ladCfg]",
                    "DataDiskInfo": "[variables('computeGlobal').DataDiskInfo]",
                    "computeSizeLookupOptions": "[variables('computeGlobal').computeSizeLookupOptions]",
                    "GlobalRGJ": "[json(parameters('Global').GlobalRG)]",
                    "GlobalSAJ": "[json(parameters('Global').GlobalSA)]",
                    "HubKVJ": "[json(parameters('Global').hubKV)]",
                    "HubRGJ": "[json(parameters('Global').hubRG)]",
                    "HubAAJ": "[json(parameters('Global').hubAA)]",
                    "regionLookup": "[json('{\r\n  \"francecentral\": {\r\n    \"displayname\": \"France Central\",\r\n    \"location\": \"francecentral\",\r\n    \"PREFIX\": \"AFC1\",\r\n    \"pairedRegion\": \"francesouth\"\r\n  },\r\n  \"southeastasia\": {\r\n    \"displayname\": \"Southeast Asia\",\r\n    \"location\": \"southeastasia\",\r\n    \"PREFIX\": \"ASA1\",\r\n    \"pairedRegion\": \"eastasia\"\r\n  },\r\n  \"southafricawest\": {\r\n    \"displayname\": \"South Africa West\",\r\n    \"location\": \"southafricawest\",\r\n    \"PREFIX\": \"ASAW\",\r\n    \"pairedRegion\": \"southafricanorth\"\r\n  },\r\n  \"eastus2\": {\r\n    \"displayname\": \"East US 2\",\r\n    \"location\": \"eastus2\",\r\n    \"PREFIX\": \"AEU2\",\r\n    \"pairedRegion\": \"centralus\"\r\n  },\r\n  \"eastus\": {\r\n    \"displayname\": \"East US\",\r\n    \"location\": \"eastus\",\r\n    \"PREFIX\": \"AEU1\",\r\n    \"pairedRegion\": \"westus\"\r\n  },\r\n  \"jioindiawest\": {\r\n    \"displayname\": \"Jio India West\",\r\n    \"location\": \"jioindiawest\",\r\n    \"PREFIX\": \"AJIW\",\r\n    \"pairedRegion\": \"jioindiacentral\"\r\n  },\r\n  \"westcentralus\": {\r\n    \"displayname\": \"West Central US\",\r\n    \"location\": \"westcentralus\",\r\n    \"PREFIX\": \"AWCU\",\r\n    \"pairedRegion\": \"westus2\"\r\n  },\r\n  \"koreacentral\": {\r\n    \"displayname\": \"Korea Central\",\r\n    \"location\": \"koreacentral\",\r\n    \"PREFIX\": \"AKC1\",\r\n    \"pairedRegion\": \"koreasouth\"\r\n  },\r\n  \"uaecentral\": {\r\n    \"displayname\": \"UAE Central\",\r\n    \"location\": \"uaecentral\",\r\n    \"PREFIX\": \"AUC1\",\r\n    \"pairedRegion\": \"uaenorth\"\r\n  },\r\n  \"westus\": {\r\n    \"displayname\": \"West US\",\r\n    \"location\": \"westus\",\r\n    \"PREFIX\": \"AWU1\",\r\n    \"pairedRegion\": \"eastus\"\r\n  },\r\n  \"southafricanorth\": {\r\n    \"displayname\": \"South Africa North\",\r\n    \"location\": \"southafricanorth\",\r\n    \"PREFIX\": \"ASAN\",\r\n    \"pairedRegion\": \"southafricawest\"\r\n  },\r\n  \"australiacentral2\": {\r\n    \"displayname\": \"Australia Central 2\",\r\n    \"location\": \"australiacentral2\",\r\n    \"PREFIX\": \"AAC2\",\r\n    \"pairedRegion\": \"australiacentral2\"\r\n  },\r\n  \"francesouth\": {\r\n    \"displayname\": \"France South\",\r\n    \"location\": \"francesouth\",\r\n    \"PREFIX\": \"AFS1\",\r\n    \"pairedRegion\": \"francecentral\"\r\n  },\r\n  \"ukwest\": {\r\n    \"displayname\": \"UK West\",\r\n    \"location\": \"ukwest\",\r\n    \"PREFIX\": \"AUW1\",\r\n    \"pairedRegion\": \"uksouth\"\r\n  },\r\n  \"southindia\": {\r\n    \"displayname\": \"South India\",\r\n    \"location\": \"southindia\",\r\n    \"PREFIX\": \"ASI1\",\r\n    \"pairedRegion\": \"centralindia\"\r\n  },\r\n  \"centralus\": {\r\n    \"displayname\": \"Central US\",\r\n    \"location\": \"centralus\",\r\n    \"PREFIX\": \"ACU1\",\r\n    \"pairedRegion\": \"eastus2\"\r\n  },\r\n  \"germanynorth\": {\r\n    \"displayname\": \"Germany North\",\r\n    \"location\": \"germanynorth\",\r\n    \"PREFIX\": \"AGN1\",\r\n    \"pairedRegion\": \"germanywestcentral\"\r\n  },\r\n  \"koreasouth\": {\r\n    \"displayname\": \"Korea South\",\r\n    \"location\": \"koreasouth\",\r\n    \"PREFIX\": \"AKS1\",\r\n    \"pairedRegion\": \"koreacentral\"\r\n  },\r\n  \"westindia\": {\r\n    \"displayname\": \"West India\",\r\n    \"location\": \"westindia\",\r\n    \"PREFIX\": \"AWI1\",\r\n    \"pairedRegion\": \"southindia\"\r\n  },\r\n  \"westus2\": {\r\n    \"displayname\": \"West US 2\",\r\n    \"location\": \"westus2\",\r\n    \"PREFIX\": \"AWU2\",\r\n    \"pairedRegion\": \"westcentralus\"\r\n  },\r\n  \"northcentralus\": {\r\n    \"displayname\": \"North Central US\",\r\n    \"location\": \"northcentralus\",\r\n    \"PREFIX\": \"ANCU\",\r\n    \"pairedRegion\": \"southcentralus\"\r\n  },\r\n  \"westeurope\": {\r\n    \"displayname\": \"West Europe\",\r\n    \"location\": \"westeurope\",\r\n    \"PREFIX\": \"AWEU\",\r\n    \"pairedRegion\": \"northeurope\"\r\n  },\r\n  \"canadacentral\": {\r\n    \"displayname\": \"Canada Central\",\r\n    \"location\": \"canadacentral\",\r\n    \"PREFIX\": \"ACC1\",\r\n    \"pairedRegion\": \"canadaeast\"\r\n  },\r\n  \"southcentralus\": {\r\n    \"displayname\": \"South Central US\",\r\n    \"location\": \"southcentralus\",\r\n    \"PREFIX\": \"ASCU\",\r\n    \"pairedRegion\": \"northcentralus\"\r\n  },\r\n  \"norwayeast\": {\r\n    \"displayname\": \"Norway East\",\r\n    \"location\": \"norwayeast\",\r\n    \"PREFIX\": \"ANE1\",\r\n    \"pairedRegion\": \"norwaywest\"\r\n  },\r\n  \"japanwest\": {\r\n    \"displayname\": \"Japan West\",\r\n    \"location\": \"japanwest\",\r\n    \"PREFIX\": \"AJW1\",\r\n    \"pairedRegion\": \"japaneast\"\r\n  },\r\n  \"norwaywest\": {\r\n    \"displayname\": \"Norway West\",\r\n    \"location\": \"norwaywest\",\r\n    \"PREFIX\": \"ANW1\",\r\n    \"pairedRegion\": \"norwayeast\"\r\n  },\r\n  \"jioindiacentral\": {\r\n    \"displayname\": \"Jio India Central\",\r\n    \"location\": \"jioindiacentral\",\r\n    \"PREFIX\": \"AJIC\",\r\n    \"pairedRegion\": \"jioindiawest\"\r\n  },\r\n  \"centralindia\": {\r\n    \"displayname\": \"Central India\",\r\n    \"location\": \"centralindia\",\r\n    \"PREFIX\": \"ACI1\",\r\n    \"pairedRegion\": \"southindia\"\r\n  },\r\n  \"westus3\": {\r\n    \"displayname\": \"West US 3\",\r\n    \"location\": \"westus3\",\r\n    \"PREFIX\": \"AWU3\",\r\n    \"pairedRegion\": \"eastus\"\r\n  },\r\n  \"brazilsouth\": {\r\n    \"displayname\": \"Brazil South\",\r\n    \"location\": \"brazilsouth\",\r\n    \"PREFIX\": \"ABS1\",\r\n    \"pairedRegion\": \"southcentralus\"\r\n  },\r\n  \"eastasia\": {\r\n    \"displayname\": \"East Asia\",\r\n    \"location\": \"eastasia\",\r\n    \"PREFIX\": \"AEA1\",\r\n    \"pairedRegion\": \"southeastasia\"\r\n  },\r\n  \"swedencentral\": {\r\n    \"displayname\": \"Sweden Central\",\r\n    \"location\": \"swedencentral\",\r\n    \"PREFIX\": \"ASC1\",\r\n    \"pairedRegion\": \"swedensouth\"\r\n  },\r\n  \"uksouth\": {\r\n    \"displayname\": \"UK South\",\r\n    \"location\": \"uksouth\",\r\n    \"PREFIX\": \"AUS1\",\r\n    \"pairedRegion\": \"ukwest\"\r\n  },\r\n  \"switzerlandnorth\": {\r\n    \"displayname\": \"Switzerland North\",\r\n    \"location\": \"switzerlandnorth\",\r\n    \"PREFIX\": \"ASN1\",\r\n    \"pairedRegion\": \"switzerlandwest\"\r\n  },\r\n  \"canadaeast\": {\r\n    \"displayname\": \"Canada East\",\r\n    \"location\": \"canadaeast\",\r\n    \"PREFIX\": \"ACE1\",\r\n    \"pairedRegion\": \"canadacentral\"\r\n  },\r\n  \"australiasoutheast\": {\r\n    \"displayname\": \"Australia Southeast\",\r\n    \"location\": \"australiasoutheast\",\r\n    \"PREFIX\": \"AAS1\",\r\n    \"pairedRegion\": \"australiaeast\"\r\n  },\r\n  \"northeurope\": {\r\n    \"displayname\": \"North Europe\",\r\n    \"location\": \"northeurope\",\r\n    \"PREFIX\": \"ANEU\",\r\n    \"pairedRegion\": \"westeurope\"\r\n  },\r\n  \"germanywestcentral\": {\r\n    \"displayname\": \"Germany West Central\",\r\n    \"location\": \"germanywestcentral\",\r\n    \"PREFIX\": \"AGWC\",\r\n    \"pairedRegion\": \"germanynorth\"\r\n  },\r\n  \"japaneast\": {\r\n    \"displayname\": \"Japan East\",\r\n    \"location\": \"japaneast\",\r\n    \"PREFIX\": \"AJE1\",\r\n    \"pairedRegion\": \"japanwest\"\r\n  },\r\n  \"uaenorth\": {\r\n    \"displayname\": \"UAE North\",\r\n    \"location\": \"uaenorth\",\r\n    \"PREFIX\": \"AUN1\",\r\n    \"pairedRegion\": \"uaecentral\"\r\n  },\r\n  \"australiaeast\": {\r\n    \"displayname\": \"Australia East\",\r\n    \"location\": \"australiaeast\",\r\n    \"PREFIX\": \"AAE1\",\r\n    \"pairedRegion\": \"australiasoutheast\"\r\n  },\r\n  \"switzerlandwest\": {\r\n    \"displayname\": \"Switzerland West\",\r\n    \"location\": \"switzerlandwest\",\r\n    \"PREFIX\": \"ASW1\",\r\n    \"pairedRegion\": \"switzerlandnorth\"\r\n  },\r\n  \"australiacentral\": {\r\n    \"displayname\": \"Australia Central\",\r\n    \"location\": \"australiacentral\",\r\n    \"PREFIX\": \"AAC1\",\r\n    \"pairedRegion\": \"australiacentral\"\r\n  },\r\n  \"brazilsoutheast\": {\r\n    \"displayname\": \"Brazil Southeast\",\r\n    \"location\": \"brazilsoutheast\",\r\n    \"PREFIX\": \"ABSE\",\r\n    \"pairedRegion\": \"brazilsouth\"\r\n  }\r\n}\r\n')]",
                    "primaryPrefix": "[variables('regionLookup')[parameters('Global').PrimaryLocation].prefix]",
                    "gh": {
                      "globalRGPrefix": "[if(contains(variables('GlobalRGJ'), 'Prefix'), variables('GlobalRGJ').Prefix, variables('primaryPrefix'))]",
                      "globalRGOrgName": "[if(contains(variables('GlobalRGJ'), 'OrgName'), variables('GlobalRGJ').OrgName, parameters('Global').OrgName)]",
                      "globalRGAppName": "[if(contains(variables('GlobalRGJ'), 'AppName'), variables('GlobalRGJ').AppName, parameters('Global').AppName)]",
                      "globalRGName": "[if(contains(variables('GlobalRGJ'), 'name'), variables('GlobalRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID')))]",
                      "globalSAPrefix": "[if(contains(variables('GlobalSAJ'), 'Prefix'), variables('GlobalSAJ').Prefix, variables('primaryPrefix'))]",
                      "globalSAOrgName": "[if(contains(variables('GlobalSAJ'), 'OrgName'), variables('GlobalSAJ').OrgName, parameters('Global').OrgName)]",
                      "globalSAAppName": "[if(contains(variables('GlobalSAJ'), 'AppName'), variables('GlobalSAJ').AppName, parameters('Global').AppName)]",
                      "globalSARGName": "[if(contains(variables('GlobalSAJ'), 'RG'), variables('GlobalSAJ').RG, if(contains(variables('GlobalRGJ'), 'name'), variables('GlobalRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID'))))]",
                      "hubRGPrefix": "[if(contains(variables('HubRGJ'), 'Prefix'), variables('HubRGJ').Prefix, parameters('Prefix'))]",
                      "hubRGOrgName": "[if(contains(variables('HubRGJ'), 'OrgName'), variables('HubRGJ').OrgName, parameters('Global').OrgName)]",
                      "hubRGAppName": "[if(contains(variables('HubRGJ'), 'AppName'), variables('HubRGJ').AppName, parameters('Global').AppName)]",
                      "hubRGRGName": "[if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID'))))]",
                      "hubKVPrefix": "[if(contains(variables('HubKVJ'), 'Prefix'), variables('HubKVJ').Prefix, parameters('Prefix'))]",
                      "hubKVOrgName": "[if(contains(variables('HubKVJ'), 'OrgName'), variables('HubKVJ').OrgName, parameters('Global').OrgName)]",
                      "hubKVAppName": "[if(contains(variables('HubKVJ'), 'AppName'), variables('HubKVJ').AppName, parameters('Global').AppName)]",
                      "hubKVRGName": "[if(contains(variables('HubKVJ'), 'RG'), variables('HubKVJ').RG, variables('HubRGJ').name)]",
                      "hubAAPrefix": "[if(contains(variables('HubAAJ'), 'Prefix'), variables('HubAAJ').Prefix, parameters('Prefix'))]",
                      "hubAAOrgName": "[if(contains(variables('HubAAJ'), 'OrgName'), variables('HubAAJ').OrgName, parameters('Global').OrgName)]",
                      "hubAAAppName": "[if(contains(variables('HubAAJ'), 'AppName'), variables('HubAAJ').AppName, parameters('Global').AppName)]",
                      "hubAARGName": "[if(contains(variables('HubAAJ'), 'RG'), variables('HubAAJ').RG, variables('HubRGJ').name)]"
                    },
                    "globalRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').globalRGPrefix, variables('gh').globalRGOrgName, variables('gh').globalRGAppName, variables('gh').globalRGName)]",
                    "HubRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').hubRGPrefix, variables('gh').hubRGOrgName, variables('gh').hubRGAppName, variables('gh').hubRGRGName)]",
                    "globalSAName": "[toLower(format('{0}{1}{2}{3}sa{4}', variables('gh').globalSAPrefix, variables('gh').globalSAOrgName, variables('gh').globalSAAppName, variables('gh').globalSARGName, variables('GlobalRGJ').name))]",
                    "KVName": "[toLower(format('{0}-{1}-{2}-{3}-kv{4}', variables('gh').hubKVPrefix, variables('gh').hubKVOrgName, variables('gh').hubKVAppName, variables('gh').hubKVRGName, variables('HubKVJ').name))]",
                    "AAName": "[toLower(format('{0}{1}{2}{3}{4}', variables('gh').hubAAPrefix, variables('gh').hubAAOrgName, variables('gh').hubAAAppName, variables('gh').hubAARGName, variables('HubAAJ').name))]",
                    "DSCConfigLookup": {
                      "AppServers": "AppServers",
                      "InitialDOP": "AppServers",
                      "WVDServers": "AppServers",
                      "VMAppSS": "AppServers"
                    },
                    "VMSizeLookup": {
                      "D": "D",
                      "T": "D",
                      "I": "D",
                      "U": "P",
                      "P": "P",
                      "S": "S"
                    },
                    "RebootNodeLookup": {
                      "D": true,
                      "Q": true,
                      "T": true,
                      "U": true,
                      "P": false
                    },
                    "ConfigurationMode": {
                      "D": "ApplyAndAutoCorrect",
                      "Q": "ApplyAndAutoCorrect",
                      "T": "ApplyAndAutoCorrect",
                      "U": "ApplyAndAutoCorrect",
                      "P": "ApplyAndMonitor"
                    },
                    "DSCConfigurationModeFrequencyMins": 15,
                    "networkId": "[format('{0}{1}', parameters('Global').networkid[0], string(sub(parameters('Global').networkid[1], mul(2, int(parameters('DeploymentID'))))))]",
                    "storageAccountType": "[if(equals(parameters('Environment'), 'P'), 'Premium_LRS', 'Standard_LRS')]",
                    "SADiagName": "[format('{0}sadiag', variables('DeploymentURI'))]",
                    "saaccountiddiag": "[resourceId('Microsoft.Storage/storageAccounts', variables('SADiagName'))]",
                    "VNetID": "[resourceId('Microsoft.Network/VirtualNetworks', format('{0}-vn', variables('Deployment')))]",
                    "userAssignedIdentities": {
                      "Cluster": {
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiKeyVaultSecretsGet', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperator', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperatorGlobal', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountFileContributor', variables('Deployment'))))]": {}
                      },
                      "Default": {
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiKeyVaultSecretsGet', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountOperatorGlobal', variables('Deployment'))))]": {},
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiStorageAccountFileContributor', variables('Deployment'))))]": {}
                      }
                    },
                    "azureActiveDirectory": {
                      "clientApplication": "[parameters('Global').clientApplication]",
                      "clusterApplication": "[parameters('Global').clusterApplication]",
                      "tenantId": "[subscription().tenantId]"
                    },
                    "WAFBE": "[if(contains(parameters('AppServer'), 'WAFBE'), parameters('AppServer').WAFBE, createArray())]",
                    "LBBE": "[if(contains(parameters('AppServer'), 'LBBE'), parameters('AppServer').LBBE, createArray())]",
                    "NATPools": "[if(contains(parameters('AppServer'), 'NATName'), parameters('AppServer').NATName, createArray())]",
                    "LB": "[if(contains(parameters('AppServer'), 'LB'), parameters('AppServer').LB, null())]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachineScaleSets",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}-vmss{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "location": "[resourceGroup().location]",
                      "identity": {
                        "type": "SystemAssigned, UserAssigned",
                        "userAssignedIdentities": "[variables('userAssignedIdentities').Cluster]"
                      },
                      "sku": {
                        "name": "[variables('computeSizeLookupOptions')[format('{0}-{1}', parameters('AppServer').ROLE, variables('VMSizeLookup')[parameters('Environment')])]]",
                        "tier": "Standard",
                        "capacity": "[parameters('AppServer').AutoScalecapacity.minimum]"
                      },
                      "zones": "[if(contains(parameters('AppServer'), 'zones'), parameters('AppServer').zones, createArray('1', '2', '3'))]",
                      "properties": {
                        "zoneBalance": true,
                        "overprovision": false,
                        "singlePlacementGroup": true,
                        "upgradePolicy": {
                          "mode": "Automatic",
                          "automaticOSUpgradePolicy": {
                            "enableAutomaticOSUpgrade": false
                          }
                        },
                        "virtualMachineProfile": {
                          "licenseType": "[if(contains(variables('OSType')[parameters('AppServer').OSType], 'licenseType'), variables('OSType')[parameters('AppServer').OSType].licenseType, null())]",
                          "osProfile": {
                            "computerNamePrefix": "[parameters('VM').vmHostName]",
                            "adminUsername": "[parameters('Global').vmAdminUserName]",
                            "adminPassword": "[parameters('vmAdminPassword')]",
                            "windowsConfiguration": {
                              "provisionVMAgent": true,
                              "enableAutomaticUpdates": true
                            },
                            "secrets": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), createArray(createObject('sourceVault', createObject('id', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubRGName')), 'Microsoft.KeyVault/vaults', variables('KVName'))), 'vaultCertificates', createArray(createObject('certificateUrl', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubRGName')), 'Microsoft.KeyVault/vaults/secrets', variables('KVName'), parameters('Global').CertName), '2021-06-01-preview').secretUriWithVersion, 'certificateStore', 'My'), createObject('certificateUrl', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubRGName')), 'Microsoft.KeyVault/vaults/secrets', variables('KVName'), parameters('Global').CertName), '2021-06-01-preview').secretUriWithVersion, 'certificateStore', 'Root'), createObject('certificateUrl', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubRGName')), 'Microsoft.KeyVault/vaults/secrets', variables('KVName'), parameters('Global').CertName), '2021-06-01-preview').secretUriWithVersion, 'certificateStore', 'CA')))), null())]"
                          },
                          "storageProfile": {
                            "osDisk": {
                              "createOption": "FromImage",
                              "caching": "ReadOnly",
                              "managedDisk": {
                                "storageAccountType": "[variables('storageAccountType')]"
                              }
                            },
                            "dataDisks": "[reference(resourceId('Microsoft.Resources/deployments', format('dp{0}-VMSS-diskLookup{1}', variables('Deployment'), parameters('AppServer').Name))).outputs.DATADisks.value]",
                            "imageReference": "[variables('OSType')[parameters('AppServer').OSType].imageReference]"
                          },
                          "diagnosticsProfile": {
                            "bootDiagnostics": {
                              "enabled": true,
                              "storageUri": "[format('https://{0}.blob.{1}', variables('SADiagName'), environment().suffixes.storage)]"
                            }
                          },
                          "networkProfile": {
                            "copy": [
                              {
                                "name": "networkInterfaceConfigurations",
                                "count": "[length(parameters('AppServer').NICs)]",
                                "input": {
                                  "name": "[format('NIC-{0}', sub(0, copyIndex('networkInterfaceConfigurations')))]",
                                  "properties": {
                                    "primary": "[contains(parameters('AppServer').NICs[copyIndex('networkInterfaceConfigurations')], 'Primary')]",
                                    "enableAcceleratedNetworking": "[if(and(contains(parameters('AppServer').NICs[copyIndex('networkInterfaceConfigurations')], 'FastNic'), bool(parameters('AppServer').NICs[copyIndex('networkInterfaceConfigurations')].FastNic)), true(), false())]",
                                    "dnsSettings": {
                                      "dnsServers": []
                                    },
                                    "ipConfigurations": [
                                      {
                                        "name": "[format('{0}-{1}-nic{2}', variables('Deployment'), parameters('AppServer').Name, sub(0, copyIndex('networkInterfaceConfigurations')))]",
                                        "properties": {
                                          "subnet": {
                                            "id": "[format('{0}/subnets/sn{1}', variables('VNetID'), parameters('AppServer').NICs[copyIndex('networkInterfaceConfigurations')].Subnet)]"
                                          },
                                          "publicIPAddressConfiguration": "[if(not(and(contains(parameters('AppServer').NICs[copyIndex('networkInterfaceConfigurations')], 'PublicIP'), equals(parameters('AppServer').NICs[copyIndex('networkInterfaceConfigurations')].PublicIP, 1))), null(), createObject('name', 'pub1'))]",
                                          "privateIPAddressVersion": "IPv4",
                                          "applicationGatewayBackendAddressPools": "[variables('applicationGatewayBackendAddressPools')]",
                                          "loadBalancerBackendAddressPools": "[variables('loadBalancerBackendAddressPools')]",
                                          "loadBalancerInboundNatPools": "[if(contains(parameters('AppServer'), 'NATName'), variables('loadBalancerInboundNatPools'), null())]"
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-VMSS-diskLookup{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.IaaSDiagnostics))]",
                      "type": "Microsoft.Compute/virtualMachineScaleSets/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vmss{1}', variables('Deployment'), parameters('AppServer').Name), 'vmDiagnostics')]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Diagnostics",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'IaaSDiagnostics', 'LinuxDiagnostic')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '1.9', '3.0')]",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "WadCfg": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), variables('WadCfg'), null())]",
                          "ladCfg": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), null(), variables('ladCfg'))]",
                          "StorageAccount": "[variables('saaccountiddiag')]",
                          "StorageType": "TableAndBlob"
                        },
                        "protectedSettings": {
                          "storageAccountName": "[variables('saaccountiddiag')]",
                          "storageAccountKey": "[listKeys(variables('saaccountiddiag'), '2016-01-01').keys[0].value]",
                          "storageAccountEndPoint": "[format('https://{0}/', environment().suffixes.storage)]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachineScaleSets', format('{0}-vmss{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.DependencyAgent))]",
                      "type": "Microsoft.Compute/virtualMachineScaleSets/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vmss{1}', variables('Deployment'), parameters('AppServer').Name), 'DependencyAgent')]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'DependencyAgentWindows', 'DependencyAgentLinux')]",
                        "typeHandlerVersion": "9.5",
                        "autoUpgradeMinorVersion": true
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachineScaleSets/extensions', format('{0}-vmss{1}', variables('Deployment'), parameters('AppServer').Name), 'vmDiagnostics')]",
                        "[resourceId('Microsoft.Compute/virtualMachineScaleSets', format('{0}-vmss{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.GuestHealthAgent))]",
                      "type": "Microsoft.Compute/virtualMachineScaleSets/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vmss{1}', variables('Deployment'), parameters('AppServer').Name), format('{0}', if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'GuestHealthWindowsAgent', 'GuestHealthLinuxAgent')))]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "publisher": "Microsoft.Azure.Monitor.VirtualMachines.GuestHealth",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'GuestHealthWindowsAgent', 'GuestHealthLinuxAgent')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '1.0', '1.0')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachineScaleSets/extensions', format('{0}-vmss{1}', variables('Deployment'), parameters('AppServer').Name), 'DependencyAgent')]",
                        "[resourceId('Microsoft.Compute/virtualMachineScaleSets', format('{0}-vmss{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.MonitoringAgent))]",
                      "type": "Microsoft.Compute/virtualMachineScaleSets/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vmss{1}', variables('Deployment'), parameters('AppServer').Name), 'MonitoringAgent')]",
                      "properties": {
                        "publisher": "Microsoft.EnterpriseCloud.Monitoring",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'MicrosoftMonitoringAgent', 'OmsAgentForLinux')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '1.0', '1.4')]",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "workspaceId": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', variables('DeploymentURI'))), '2021-06-01').customerId]"
                        },
                        "protectedSettings": {
                          "workspaceKey": "[listKeys(resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', variables('DeploymentURI'))), '2021-06-01').primarySharedKey]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachineScaleSets/extensions', format('{0}-vmss{1}', variables('Deployment'), parameters('AppServer').Name), format('{0}', if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'GuestHealthWindowsAgent', 'GuestHealthLinuxAgent')))]",
                        "[resourceId('Microsoft.Compute/virtualMachineScaleSets', format('{0}-vmss{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('VM').match, bool(parameters('VM').Extensions.AzureMonitorAgent))]",
                      "type": "Microsoft.Compute/virtualMachineScaleSets/extensions",
                      "apiVersion": "2021-07-01",
                      "name": "[format('{0}/{1}', format('{0}-vmss{1}', variables('Deployment'), parameters('AppServer').Name), format('{0}', if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'AzureMonitorWindowsAgent', 'AzureMonitorLinuxAgent')))]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "publisher": "Microsoft.Azure.Monitor",
                        "type": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), 'AzureMonitorWindowsAgent', 'AzureMonitorLinuxAgent')]",
                        "typeHandlerVersion": "[if(equals(variables('OSType')[parameters('AppServer').OSType].OS, 'Windows'), '1.0', '1.5')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachineScaleSets/extensions', format('{0}-vmss{1}', variables('Deployment'), parameters('AppServer').Name), 'MonitoringAgent')]",
                        "[resourceId('Microsoft.Compute/virtualMachineScaleSets', format('{0}-vmss{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Insights/autoscalesettings",
                      "apiVersion": "2021-05-01-preview",
                      "name": "[format('{0}-ss{1}-Autoscale', variables('Deployment'), parameters('AppServer').Name)]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "name": "[format('{0}-ss{1}-Autoscale', variables('Deployment'), parameters('AppServer').Name)]",
                        "enabled": "[parameters('AppServer').AutoScale]",
                        "predictiveAutoscalePolicy": {
                          "scaleMode": "[parameters('AppServer').PredictiveScale]"
                        },
                        "notifications": [],
                        "targetResourceLocation": "[resourceGroup().location]",
                        "targetResourceUri": "[resourceId('Microsoft.Compute/virtualMachineScaleSets', format('{0}-vmss{1}', variables('Deployment'), parameters('AppServer').Name))]",
                        "profiles": [
                          {
                            "name": "Auto created scale condition",
                            "capacity": {
                              "minimum": "[parameters('AppServer').AutoScalecapacity.minimum]",
                              "maximum": "[parameters('AppServer').AutoScalecapacity.maximum]",
                              "default": "[parameters('AppServer').AutoScalecapacity.default]"
                            },
                            "rules": [
                              {
                                "scaleAction": {
                                  "direction": "Increase",
                                  "type": "ChangeCount",
                                  "value": "1",
                                  "cooldown": "PT5M"
                                },
                                "metricTrigger": {
                                  "metricName": "Percentage CPU",
                                  "metricNamespace": "microsoft.compute/virtualmachinescalesets",
                                  "metricResourceUri": "[resourceId('Microsoft.Compute/virtualMachineScaleSets', format('{0}-vmss{1}', variables('Deployment'), parameters('AppServer').Name))]",
                                  "operator": "GreaterThan",
                                  "statistic": "Average",
                                  "threshold": 70,
                                  "timeAggregation": "Average",
                                  "timeGrain": "PT1M",
                                  "timeWindow": "PT6M",
                                  "dimensions": [],
                                  "dividePerInstance": false
                                }
                              },
                              {
                                "scaleAction": {
                                  "direction": "Decrease",
                                  "type": "ChangeCount",
                                  "value": "1",
                                  "cooldown": "PT5M"
                                },
                                "metricTrigger": {
                                  "metricName": "Percentage CPU",
                                  "metricNamespace": "microsoft.compute/virtualmachinescalesets",
                                  "metricResourceUri": "[resourceId('Microsoft.Compute/virtualMachineScaleSets', format('{0}-vmss{1}', variables('Deployment'), parameters('AppServer').Name))]",
                                  "operator": "LessThan",
                                  "statistic": "Average",
                                  "threshold": 15,
                                  "timeAggregation": "Average",
                                  "timeGrain": "PT1M",
                                  "timeWindow": "PT6M",
                                  "dimensions": [],
                                  "dividePerInstance": false
                                }
                              }
                            ]
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachineScaleSets', format('{0}-vmss{1}', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2017-05-01-preview",
                      "scope": "[format('Microsoft.Insights/autoscalesettings/{0}', format('{0}-ss{1}-Autoscale', variables('Deployment'), parameters('AppServer').Name))]",
                      "name": "service",
                      "properties": {
                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', variables('DeploymentURI')))]",
                        "logs": [
                          {
                            "category": "AutoscaleEvaluations",
                            "enabled": true
                          },
                          {
                            "category": "AutoscaleScaleActions",
                            "enabled": true
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Insights/autoscalesettings', format('{0}-ss{1}-Autoscale', variables('Deployment'), parameters('AppServer').Name))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-VMSS-diskLookup{1}', variables('Deployment'), parameters('AppServer').Name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[variables('Deployment')]"
                          },
                          "DeploymentID": {
                            "value": "[parameters('DeploymentID')]"
                          },
                          "Name": {
                            "value": "[parameters('AppServer').Name]"
                          },
                          "DATASS": {
                            "value": "[if(contains(variables('DataDiskInfo')[parameters('AppServer').DDRole], 'DATASS'), variables('DataDiskInfo')[parameters('AppServer').DDRole].DATASS, json('{\"1\":1}'))]"
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "13688646372196984293"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "DeploymentID": {
                              "type": "string"
                            },
                            "Name": {
                              "type": "string"
                            },
                            "DATA": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "DATASS": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "SOFS": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "LOGS": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "TEMPDB": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "BACKUP": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "DISKS": {
                              "type": "object",
                              "defaultValue": {
                                "1": 1
                              }
                            },
                            "Global": {
                              "type": "object"
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "Data_var",
                                "count": "[length(range(0, if(contains(parameters('DATA'), '1'), 1, length(parameters('DATA').LUNS))))]",
                                "input": {
                                  "name": "[if(contains(parameters('DATA'), '1'), 1, format('{0}-{1}-DATA-DATA{2}', parameters('Deployment'), parameters('Name'), padLeft(parameters('DATA').LUNS[range(0, if(contains(parameters('DATA'), '1'), 1, length(parameters('DATA').LUNS)))[copyIndex('Data_var')]][0], 2, '0')))]",
                                  "lun": "[if(contains(parameters('DATA'), '1'), 1, int(parameters('DATA').LUNS[range(0, if(contains(parameters('DATA'), '1'), 1, length(parameters('DATA').LUNS)))[copyIndex('Data_var')]][0]))]",
                                  "caching": "[if(contains(parameters('DATA'), '1'), 1, parameters('DATA').caching)]",
                                  "diskSizeGB": "[if(contains(parameters('DATA'), '1'), 1, int(parameters('DATA').LUNS[range(0, if(contains(parameters('DATA'), '1'), 1, length(parameters('DATA').LUNS)))[copyIndex('Data_var')]][1]))]",
                                  "createOption": "[if(contains(parameters('DATA'), '1'), 1, if(equals(length(parameters('DATA').LUNS[range(0, if(contains(parameters('DATA'), '1'), 1, length(parameters('DATA').LUNS)))[copyIndex('Data_var')]]), 3), parameters('DATA').LUNS[range(0, if(contains(parameters('DATA'), '1'), 1, length(parameters('DATA').LUNS)))[copyIndex('Data_var')]][2], 'Empty'))]",
                                  "managedDisk": "[if(contains(parameters('DATA'), '1'), 1, if(contains(parameters('DATA'), 'saType'), json(format('{{\"storageAccountType\":\"{0}\"}}', parameters('DATA').saType)), json('null')))]"
                                }
                              },
                              {
                                "name": "Datass_var",
                                "count": "[length(range(0, if(contains(parameters('DATASS'), '1'), 1, length(parameters('DATASS').LUNS))))]",
                                "input": {
                                  "lun": "[if(contains(parameters('DATASS'), '1'), 1, int(parameters('DATASS').LUNS[range(0, if(contains(parameters('DATASS'), '1'), 1, length(parameters('DATASS').LUNS)))[copyIndex('Datass_var')]][0]))]",
                                  "caching": "[if(contains(parameters('DATASS'), '1'), 1, parameters('DATASS').caching)]",
                                  "diskSizeGB": "[if(contains(parameters('DATASS'), '1'), 1, int(parameters('DATASS').LUNS[range(0, if(contains(parameters('DATASS'), '1'), 1, length(parameters('DATASS').LUNS)))[copyIndex('Datass_var')]][1]))]",
                                  "createOption": "[if(contains(parameters('DATASS'), '1'), 1, if(equals(length(parameters('DATASS').LUNS[range(0, if(contains(parameters('DATASS'), '1'), 1, length(parameters('DATASS').LUNS)))[copyIndex('Datass_var')]]), 3), parameters('DATASS').LUNS[range(0, if(contains(parameters('DATASS'), '1'), 1, length(parameters('DATASS').LUNS)))[copyIndex('Datass_var')]][2], 'Empty'))]",
                                  "managedDisk": "[if(contains(parameters('DATASS'), '1'), 1, if(contains(parameters('DATASS'), 'saType'), json(format('{{\"storageAccountType\":\"{0}\"}}', parameters('DATASS').saType)), json('null')))]"
                                }
                              },
                              {
                                "name": "SOFS_var",
                                "count": "[length(range(0, if(contains(parameters('SOFS'), '1'), 1, length(parameters('SOFS').LUNS))))]",
                                "input": {
                                  "name": "[if(contains(parameters('SOFS'), '1'), 1, format('{0}-{1}-DATA-SOFS{2}', parameters('Deployment'), parameters('Name'), padLeft(parameters('SOFS').LUNS[range(0, if(contains(parameters('SOFS'), '1'), 1, length(parameters('SOFS').LUNS)))[copyIndex('SOFS_var')]][0], 2, '0')))]",
                                  "lun": "[if(contains(parameters('SOFS'), '1'), 1, int(parameters('SOFS').LUNS[range(0, if(contains(parameters('SOFS'), '1'), 1, length(parameters('SOFS').LUNS)))[copyIndex('SOFS_var')]][0]))]",
                                  "caching": "[if(contains(parameters('SOFS'), '1'), 1, parameters('SOFS').caching)]",
                                  "diskSizeGB": "[if(contains(parameters('SOFS'), '1'), 1, int(parameters('SOFS').LUNS[range(0, if(contains(parameters('SOFS'), '1'), 1, length(parameters('SOFS').LUNS)))[copyIndex('SOFS_var')]][1]))]",
                                  "createOption": "[if(contains(parameters('SOFS'), '1'), 1, if(equals(length(parameters('SOFS').LUNS[range(0, if(contains(parameters('SOFS'), '1'), 1, length(parameters('SOFS').LUNS)))[copyIndex('SOFS_var')]]), 3), parameters('SOFS').LUNS[range(0, if(contains(parameters('SOFS'), '1'), 1, length(parameters('SOFS').LUNS)))[copyIndex('SOFS_var')]][2], 'Empty'))]",
                                  "managedDisk": "[if(contains(parameters('SOFS'), '1'), 1, if(contains(parameters('SOFS'), 'saType'), json(format('{{\"storageAccountType\":\"{0}\"}}', parameters('SOFS').saType)), json('null')))]"
                                }
                              },
                              {
                                "name": "LOGS_var",
                                "count": "[length(range(0, if(contains(parameters('LOGS'), '1'), 1, length(parameters('LOGS').LUNS))))]",
                                "input": {
                                  "name": "[if(contains(parameters('LOGS'), '1'), 1, format('{0}-{1}-DATA-LOGS{2}', parameters('Deployment'), parameters('Name'), padLeft(parameters('LOGS').LUNS[range(0, if(contains(parameters('LOGS'), '1'), 1, length(parameters('LOGS').LUNS)))[copyIndex('LOGS_var')]][0], 2, '0')))]",
                                  "lun": "[if(contains(parameters('LOGS'), '1'), 1, int(parameters('LOGS').LUNS[range(0, if(contains(parameters('LOGS'), '1'), 1, length(parameters('LOGS').LUNS)))[copyIndex('LOGS_var')]][0]))]",
                                  "caching": "[if(contains(parameters('LOGS'), '1'), 1, parameters('LOGS').caching)]",
                                  "diskSizeGB": "[if(contains(parameters('LOGS'), '1'), 1, int(parameters('LOGS').LUNS[range(0, if(contains(parameters('LOGS'), '1'), 1, length(parameters('LOGS').LUNS)))[copyIndex('LOGS_var')]][1]))]",
                                  "createOption": "[if(contains(parameters('LOGS'), '1'), 1, if(equals(length(parameters('LOGS').LUNS[range(0, if(contains(parameters('LOGS'), '1'), 1, length(parameters('LOGS').LUNS)))[copyIndex('LOGS_var')]]), 3), parameters('LOGS').LUNS[range(0, if(contains(parameters('LOGS'), '1'), 1, length(parameters('LOGS').LUNS)))[copyIndex('LOGS_var')]][2], 'Empty'))]",
                                  "managedDisk": "[if(contains(parameters('LOGS'), '1'), 1, if(contains(parameters('LOGS'), 'saType'), json(format('{{\"storageAccountType\":\"{0}\"}}', parameters('LOGS').saType)), json('null')))]"
                                }
                              },
                              {
                                "name": "TEMPDB_var",
                                "count": "[length(range(0, if(contains(parameters('TEMPDB'), '1'), 1, length(parameters('TEMPDB').LUNS))))]",
                                "input": {
                                  "name": "[if(contains(parameters('TEMPDB'), '1'), 1, format('{0}-{1}-DATA-TEMPDB{2}', parameters('Deployment'), parameters('Name'), padLeft(parameters('TEMPDB').LUNS[range(0, if(contains(parameters('TEMPDB'), '1'), 1, length(parameters('TEMPDB').LUNS)))[copyIndex('TEMPDB_var')]][0], 2, '0')))]",
                                  "lun": "[if(contains(parameters('TEMPDB'), '1'), 1, int(parameters('TEMPDB').LUNS[range(0, if(contains(parameters('TEMPDB'), '1'), 1, length(parameters('TEMPDB').LUNS)))[copyIndex('TEMPDB_var')]][0]))]",
                                  "caching": "[if(contains(parameters('TEMPDB'), '1'), 1, parameters('TEMPDB').caching)]",
                                  "diskSizeGB": "[if(contains(parameters('TEMPDB'), '1'), 1, int(parameters('TEMPDB').LUNS[range(0, if(contains(parameters('TEMPDB'), '1'), 1, length(parameters('TEMPDB').LUNS)))[copyIndex('TEMPDB_var')]][1]))]",
                                  "createOption": "[if(contains(parameters('TEMPDB'), '1'), 1, if(equals(length(parameters('TEMPDB').LUNS[range(0, if(contains(parameters('TEMPDB'), '1'), 1, length(parameters('TEMPDB').LUNS)))[copyIndex('TEMPDB_var')]]), 3), parameters('TEMPDB').LUNS[range(0, if(contains(parameters('TEMPDB'), '1'), 1, length(parameters('TEMPDB').LUNS)))[copyIndex('TEMPDB_var')]][2], 'Empty'))]",
                                  "managedDisk": "[if(contains(parameters('TEMPDB'), '1'), 1, if(contains(parameters('TEMPDB'), 'saType'), json(format('{{\"storageAccountType\":\"{0}\"}}', parameters('TEMPDB').saType)), json('null')))]"
                                }
                              },
                              {
                                "name": "BACKUP_var",
                                "count": "[length(range(0, if(contains(parameters('BACKUP'), '1'), 1, length(parameters('BACKUP').LUNS))))]",
                                "input": {
                                  "name": "[if(contains(parameters('BACKUP'), '1'), 1, format('{0}-{1}-DATA-BACKUP{2}', parameters('Deployment'), parameters('Name'), padLeft(parameters('BACKUP').LUNS[range(0, if(contains(parameters('BACKUP'), '1'), 1, length(parameters('BACKUP').LUNS)))[copyIndex('BACKUP_var')]][0], 2, '0')))]",
                                  "lun": "[if(contains(parameters('BACKUP'), '1'), 1, int(parameters('BACKUP').LUNS[range(0, if(contains(parameters('BACKUP'), '1'), 1, length(parameters('BACKUP').LUNS)))[copyIndex('BACKUP_var')]][0]))]",
                                  "caching": "[if(contains(parameters('BACKUP'), '1'), 1, parameters('BACKUP').caching)]",
                                  "diskSizeGB": "[if(contains(parameters('BACKUP'), '1'), 1, int(parameters('BACKUP').LUNS[range(0, if(contains(parameters('BACKUP'), '1'), 1, length(parameters('BACKUP').LUNS)))[copyIndex('BACKUP_var')]][1]))]",
                                  "createOption": "[if(contains(parameters('BACKUP'), '1'), 1, if(equals(length(parameters('BACKUP').LUNS[range(0, if(contains(parameters('BACKUP'), '1'), 1, length(parameters('BACKUP').LUNS)))[copyIndex('BACKUP_var')]]), 3), parameters('BACKUP').LUNS[range(0, if(contains(parameters('BACKUP'), '1'), 1, length(parameters('BACKUP').LUNS)))[copyIndex('BACKUP_var')]][2], 'Empty'))]",
                                  "managedDisk": "[if(contains(parameters('BACKUP'), '1'), 1, if(contains(parameters('BACKUP'), 'saType'), json(format('{{\"storageAccountType\":\"{0}\"}}', parameters('BACKUP').saType)), json('null')))]"
                                }
                              }
                            ]
                          },
                          "resources": [],
                          "outputs": {
                            "SOFS": {
                              "type": "array",
                              "value": "[if(contains(parameters('SOFS'), '1'), array('no SOFS disks'), variables('SOFS_var'))]"
                            },
                            "DATA": {
                              "type": "array",
                              "value": "[if(contains(parameters('DATA'), '1'), array('no DATA disks'), variables('Data_var'))]"
                            },
                            "DATASS": {
                              "type": "array",
                              "value": "[if(contains(parameters('DATASS'), '1'), array('no DATA disks'), variables('Datass_var'))]"
                            },
                            "LOGS": {
                              "type": "array",
                              "value": "[if(contains(parameters('LOGS'), '1'), array('no LOGS disks'), variables('LOGS_var'))]"
                            },
                            "TEMPDB": {
                              "type": "array",
                              "value": "[if(contains(parameters('TEMPDB'), '1'), array('no TEMPDB disks'), variables('TEMPDB_var'))]"
                            },
                            "BACKUP": {
                              "type": "array",
                              "value": "[if(contains(parameters('BACKUP'), '1'), array('no BACKUP disks'), variables('BACKUP_var'))]"
                            },
                            "DATADisks": {
                              "type": "array",
                              "value": "[union(if(contains(parameters('SOFS'), '1'), createArray(), variables('SOFS_var')), if(contains(parameters('DATA'), '1'), createArray(), variables('Data_var')), if(contains(parameters('DATASS'), '1'), createArray(), variables('Datass_var')), if(contains(parameters('LOGS'), '1'), createArray(), variables('LOGS_var')), if(contains(parameters('TEMPDB'), '1'), createArray(), variables('TEMPDB_var')), if(contains(parameters('BACKUP'), '1'), createArray(), variables('BACKUP_var')))]"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-LB', variables('Deployment')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-OMS', variables('Deployment')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-SA', variables('Deployment')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-VNETDNSDC1', variables('Deployment')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-VNETDNSDC2', variables('Deployment')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-WAF', variables('Deployment')))]"
      ]
    },
    {
      "condition": "[bool(parameters('Stage').AzureSYN)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('dp{0}-Synapse', variables('Deployment'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "DeploymentID": {
            "value": "[parameters('DeploymentID')]"
          },
          "DeploymentInfo": {
            "value": "[parameters('DeploymentInfo')]"
          },
          "Environment": {
            "value": "[parameters('Environment')]"
          },
          "Extensions": {
            "value": "[parameters('Extensions')]"
          },
          "Global": {
            "value": "[parameters('Global')]"
          },
          "Prefix": {
            "value": "[parameters('Prefix')]"
          },
          "Stage": {
            "value": "[parameters('Stage')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "2945622700016242173"
            }
          },
          "parameters": {
            "Prefix": {
              "type": "string"
            },
            "Environment": {
              "type": "string",
              "defaultValue": "D",
              "allowedValues": [
                "I",
                "D",
                "T",
                "U",
                "P",
                "S",
                "G",
                "A"
              ]
            },
            "DeploymentID": {
              "type": "string",
              "defaultValue": "1",
              "allowedValues": [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9"
              ]
            },
            "Stage": {
              "type": "object"
            },
            "Extensions": {
              "type": "object"
            },
            "Global": {
              "type": "object"
            },
            "DeploymentInfo": {
              "type": "object"
            }
          },
          "variables": {
            "copy": [
              {
                "name": "Synapse",
                "count": "[length(variables('SynapseInfo'))]",
                "input": {
                  "match": "[or(equals(parameters('Global').CN, '.'), contains(array(parameters('Global').CN), variables('SynapseInfo')[copyIndex('Synapse')].Name))]"
                }
              }
            ],
            "Deployment": "[format('{0}-{1}-{2}-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID'))]",
            "DeploymentURI": "[toLower(format('{0}{1}{2}{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID')))]",
            "SynapseInfo": "[if(contains(parameters('DeploymentInfo'), 'SynapseInfo'), parameters('DeploymentInfo').SynapseInfo, createArray())]"
          },
          "resources": [
            {
              "condition": "[variables('Synapse')[copyIndex()].match]",
              "copy": {
                "name": "LBs",
                "count": "[length(variables('SynapseInfo'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dp{0}-Synapse-Deploy{1}', variables('Deployment'), variables('SynapseInfo')[copyIndex()].Name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "Deployment": {
                    "value": "[variables('Deployment')]"
                  },
                  "DeploymentURI": {
                    "value": "[variables('DeploymentURI')]"
                  },
                  "DeploymentID": {
                    "value": "[parameters('DeploymentID')]"
                  },
                  "Synapse": {
                    "value": "[variables('SynapseInfo')[copyIndex()]]"
                  },
                  "Global": {
                    "value": "[parameters('Global')]"
                  },
                  "Environment": {
                    "value": "[parameters('Environment')]"
                  },
                  "Prefix": {
                    "value": "[parameters('Prefix')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1318.3566",
                      "templateHash": "18349345107579742823"
                    }
                  },
                  "parameters": {
                    "Deployment": {
                      "type": "string"
                    },
                    "DeploymentURI": {
                      "type": "string"
                    },
                    "Synapse": {
                      "type": "object"
                    },
                    "Global": {
                      "type": "object"
                    },
                    "Prefix": {
                      "type": "string"
                    },
                    "Environment": {
                      "type": "string"
                    },
                    "DeploymentID": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "HubRGJ": "[json(parameters('Global').hubRG)]",
                    "gh": {
                      "hubRGPrefix": "[if(contains(variables('HubRGJ'), 'Prefix'), variables('HubRGJ').Prefix, parameters('Prefix'))]",
                      "hubRGOrgName": "[if(contains(variables('HubRGJ'), 'OrgName'), variables('HubRGJ').OrgName, parameters('Global').OrgName)]",
                      "hubRGAppName": "[if(contains(variables('HubRGJ'), 'AppName'), variables('HubRGJ').AppName, parameters('Global').AppName)]",
                      "hubRGRGName": "[if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID'))))]"
                    },
                    "objectIdLookup": "[json(parameters('Global').objectIdLookup)]",
                    "HubRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').hubRGPrefix, variables('gh').hubRGOrgName, variables('gh').hubRGAppName, variables('gh').hubRGRGName)]",
                    "userAssignedIdentities": {
                      "Default": {
                        "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', format('{0}-uaiSynapseDataContributor', parameters('Deployment'))))]": {}
                      },
                      "None": {}
                    },
                    "sapname": "[toLower(format('{0}-sqlsyn{1}', parameters('Deployment'), parameters('Synapse').name))]",
                    "rolesInfo": "[if(contains(parameters('Synapse'), 'rolesInfo'), parameters('Synapse').rolesInfo, createArray())]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Synapse/workspaces",
                      "apiVersion": "2021-06-01",
                      "name": "[variables('sapname')]",
                      "location": "[resourceGroup().location]",
                      "identity": {
                        "type": "SystemAssigned,UserAssigned",
                        "userAssignedIdentities": "[variables('userAssignedIdentities').Default]"
                      },
                      "tags": {
                        "Env": "Pre-Production",
                        "ringValue": "r1"
                      },
                      "properties": {
                        "sqlAdministratorLogin": "[parameters('Global').sqlCredentialName]",
                        "defaultDataLakeStorage": {
                          "resourceId": "[resourceId('Microsoft.Storage/storageAccounts', toLower(format('{0}sa{1}', parameters('DeploymentURI'), parameters('Synapse').saname)))]",
                          "accountUrl": "[reference(resourceId('Microsoft.Storage/storageAccounts', toLower(format('{0}sa{1}', parameters('DeploymentURI'), parameters('Synapse').saname))), '2021-06-01').primaryEndpoints.dfs]",
                          "filesystem": "[parameters('Synapse').sashare]"
                        },
                        "managedVirtualNetwork": "default",
                        "managedVirtualNetworkSettings": {
                          "preventDataExfiltration": true
                        },
                        "trustedServiceBypassEnabled": true,
                        "managedResourceGroupName": "[format('{0}-sqlsyn{1}', resourceGroup().name, parameters('Synapse').name)]",
                        "publicNetworkAccess": "[if(bool(parameters('Synapse').publicNetworkAccess), 'Enabled', 'Disabled')]",
                        "cspWorkspaceAdminProperties": {
                          "initialWorkspaceAdminObjectId": "[variables('objectIdLookup')[parameters('Global').ServicePrincipalAdmins[0]]]"
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Synapse/workspaces/{0}', variables('sapname'))]",
                      "name": "service",
                      "properties": {
                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                        "logs": [
                          {
                            "category": "SQLSecurityAuditEvents",
                            "enabled": true
                          },
                          {
                            "category": "SynapseRbacOperations",
                            "enabled": true
                          },
                          {
                            "category": "GatewayApiRequests",
                            "enabled": true
                          },
                          {
                            "category": "BuiltinSqlReqsEnded",
                            "enabled": true
                          },
                          {
                            "category": "IntegrationPipelineRuns",
                            "enabled": true
                          },
                          {
                            "category": "IntegrationActivityRuns",
                            "enabled": true
                          },
                          {
                            "category": "IntegrationTriggerRuns",
                            "enabled": true
                          }
                        ],
                        "metrics": [
                          {
                            "timeGrain": "PT5M",
                            "enabled": true,
                            "retentionPolicy": {
                              "enabled": false,
                              "days": 0
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Synapse/workspaces', variables('sapname'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Synapse/workspaces/securityAlertPolicies",
                      "apiVersion": "2021-06-01",
                      "name": "[format('{0}/{1}', variables('sapname'), 'Default')]",
                      "properties": {
                        "state": "Enabled",
                        "disabledAlerts": []
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Synapse/workspaces', variables('sapname'))]",
                        "[extensionResourceId(resourceId('Microsoft.Synapse/workspaces', variables('sapname')), 'Microsoft.Insights/diagnosticSettings', 'service')]"
                      ]
                    },
                    {
                      "type": "Microsoft.Synapse/workspaces/vulnerabilityAssessments",
                      "apiVersion": "2021-06-01",
                      "name": "[format('{0}/{1}', variables('sapname'), 'default')]",
                      "properties": {
                        "storageContainerPath": "[format('{0}sascans/', reference(resourceId('Microsoft.Storage/storageAccounts', format('{0}sadiag', parameters('DeploymentURI'))), '2021-06-01').primaryEndpoints.blob)]",
                        "recurringScans": {
                          "isEnabled": true,
                          "emailSubscriptionAdmins": true
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Synapse/workspaces', variables('sapname'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Synapse/workspaces/auditingSettings",
                      "apiVersion": "2021-06-01",
                      "name": "[format('{0}/{1}', variables('sapname'), 'default')]",
                      "properties": {
                        "retentionDays": 0,
                        "isAzureMonitorTargetEnabled": true,
                        "state": "Enabled",
                        "auditActionsAndGroups": [
                          "FAILED_DATABASE_AUTHENTICATION_GROUP"
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Synapse/workspaces', variables('sapname'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "RBAC",
                        "count": "[length(variables('rolesInfo'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp-rbac-role-{0}-{1}', variables('sapname'), variables('rolesInfo')[copyIndex()].name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "resourceId": {
                            "value": "[resourceId('Microsoft.Synapse/workspaces', variables('sapname'))]"
                          },
                          "Global": {
                            "value": "[parameters('Global')]"
                          },
                          "roleInfo": {
                            "value": "[variables('rolesInfo')[copyIndex()]]"
                          },
                          "Type": {
                            "value": "[if(contains(variables('rolesInfo')[copyIndex()], 'Type'), variables('rolesInfo')[copyIndex()].Type, 'lookup')]"
                          },
                          "deployment": {
                            "value": "[parameters('Deployment')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "18000982583333431838"
                            }
                          },
                          "parameters": {
                            "resourceId": {
                              "type": "string"
                            },
                            "Global": {
                              "type": "object"
                            },
                            "roleInfo": {
                              "type": "object"
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": ""
                            },
                            "Type": {
                              "type": "string"
                            },
                            "deployment": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "roleAssignment",
                                "count": "[length(parameters('roleInfo').RBAC)]",
                                "input": {
                                  "RoleName": "[parameters('roleInfo').RBAC[copyIndex('roleAssignment')].Name]",
                                  "RoleID": "[variables('rolesGroupsLookup')[parameters('roleInfo').RBAC[copyIndex('roleAssignment')].Name].Id]",
                                  "principalType": "[parameters('principalType')]",
                                  "GUID": "[guid(parameters('roleInfo').Name, parameters('roleInfo').RBAC[copyIndex('roleAssignment')].Name, parameters('resourceId'))]",
                                  "FriendlyName": "[format('user: {0} --> roleInfoName: {1} --> resourceId: {2}', parameters('roleInfo').Name, parameters('roleInfo').RBAC[copyIndex('roleAssignment')].Name, parameters('resourceId'))]"
                                }
                              }
                            ],
                            "objectIdLookup": "[json(parameters('Global').objectIdLookup)]",
                            "rolesGroupsLookup": "[json(parameters('Global').RolesGroupsLookup)]"
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "RBACRAResource",
                                "count": "[length(variables('roleAssignment'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[take(replace(format('dp-rbac-all-ra-{0}-{1}-{2}', last(split(parameters('resourceId'), '/')), parameters('roleInfo').name, copyIndex()), '@', '_'), 64)]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "resourceId": {
                                    "value": "[parameters('resourceId')]"
                                  },
                                  "description": {
                                    "value": "[parameters('roleInfo').name]"
                                  },
                                  "roledescription": {
                                    "value": "[variables('roleAssignment')[copyIndex()].RoleName]"
                                  },
                                  "name": {
                                    "value": "[variables('roleAssignment')[copyIndex()].GUID]"
                                  },
                                  "roleDefinitionId": {
                                    "value": "[variables('roleAssignment')[copyIndex()].RoleID]"
                                  },
                                  "principalId": {
                                    "value": "[if(equals(parameters('Type'), 'lookup'), variables('objectIdLookup')[parameters('roleInfo').name], reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-uai{1}', parameters('deployment'), parameters('roleInfo').name)), '2018-11-30').principalId)]"
                                  },
                                  "principalType": {
                                    "value": "[variables('roleAssignment')[copyIndex()].principalType]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.4.1318.3566",
                                      "templateHash": "15020166987174036705"
                                    }
                                  },
                                  "parameters": {
                                    "resourceId": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "roleDefinitionId": {
                                      "type": "string"
                                    },
                                    "principalId": {
                                      "type": "string"
                                    },
                                    "principalType": {
                                      "type": "string",
                                      "defaultValue": ""
                                    },
                                    "description": {
                                      "type": "string"
                                    },
                                    "roledescription": {
                                      "type": "string",
                                      "defaultValue": ""
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2021-04-01",
                                      "name": "[take(format('dp-RRA-{0}-{1}', parameters('description'), last(split(parameters('resourceId'), '/'))), 64)]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "expressionEvaluationOptions": {
                                          "scope": "Outer"
                                        },
                                        "template": "[json('{\r\n  \"$schema\": \"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#\",\r\n  \"contentVersion\": \"1.0.0.0\",\r\n  \"parameters\": {\r\n    \"scope\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"name\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"roleDefinitionId\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"principalId\": {\r\n      \"type\": \"string\"\r\n    },\r\n    \"principalType\": {\r\n      \"type\": \"string\"\r\n    }\r\n  },\r\n  \"resources\": [\r\n    {\r\n      \"type\": \"Microsoft.Authorization/roleAssignments\",\r\n      \"apiVersion\": \"2020-08-01-preview\",\r\n      \"scope\": \"[parameters(''scope'')]\",\r\n      \"name\": \"[parameters(''name'')]\",\r\n      \"properties\": {\r\n        \"roleDefinitionId\": \"[resourceId(''Microsoft.Authorization/roleDefinitions'', parameters(''roleDefinitionId''))]\",\r\n        \"principalId\": \"[parameters(''principalId'')]\",\r\n        \"principalType\": \"[parameters(''principalType'')]\"\r\n      }\r\n    }\r\n  ],\r\n  \"outputs\": {\r\n    \"roleAssignmentId\": {\r\n      \"type\": \"string\",\r\n      \"value\": \"[extensionResourceId(parameters(''scope''), ''Microsoft.Authorization/roleAssignments'', parameters(''name''))]\"\r\n    }\r\n  }\r\n}')]",
                                        "parameters": {
                                          "scope": {
                                            "value": "[parameters('resourceId')]"
                                          },
                                          "name": {
                                            "value": "[parameters('name')]"
                                          },
                                          "roleDefinitionId": {
                                            "value": "[parameters('roleDefinitionId')]"
                                          },
                                          "principalId": {
                                            "value": "[parameters('principalId')]"
                                          },
                                          "principalType": {
                                            "value": "[parameters('principalType')]"
                                          }
                                        }
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "resourceid": {
                                      "type": "string",
                                      "value": "[parameters('resourceId')]"
                                    },
                                    "roleAssignmentId": {
                                      "type": "string",
                                      "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('dp-RRA-{0}-{1}', parameters('description'), last(split(parameters('resourceId'), '/'))), 64))).outputs.roleAssignmentId.value]"
                                    }
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "RoleAssignments": {
                              "type": "array",
                              "value": "[variables('roleAssignment')]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Synapse/workspaces', variables('sapname'))]"
                      ]
                    },
                    {
                      "condition": "[contains(parameters('Synapse'), 'privatelinkinfo')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-Synapse-privatelinkloop{1}', parameters('Deployment'), parameters('Synapse').name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[parameters('Deployment')]"
                          },
                          "DeploymentURI": {
                            "value": "[parameters('DeploymentURI')]"
                          },
                          "PrivateLinkInfo": {
                            "value": "[parameters('Synapse').privateLinkInfo]"
                          },
                          "resourceName": {
                            "value": "[variables('sapname')]"
                          },
                          "providerType": {
                            "value": "Microsoft.Synapse/workspaces"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "1242957729837230630"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "DeploymentURI": {
                              "type": "string"
                            },
                            "PrivateLinkInfo": {
                              "type": "array"
                            },
                            "providerType": {
                              "type": "string"
                            },
                            "resourceName": {
                              "type": "string"
                            },
                            "resourceRG": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().name]"
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "privateLink",
                                "count": "[length(parameters('PrivateLinkInfo'))]",
                                "input": {
                                  "name": "[format('{0}-pl{1}', parameters('Deployment'), parameters('PrivateLinkInfo')[copyIndex('privateLink')].Subnet)]",
                                  "vNet": "[format('{0}-vn', parameters('Deployment'))]"
                                }
                              }
                            ]
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "subnetPrivateEndpoint",
                                "count": "[length(parameters('PrivateLinkInfo'))]"
                              },
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2019-11-01",
                              "name": "[format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet)]",
                              "location": "[resourceGroup().location]",
                              "properties": {
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet)]",
                                    "properties": {
                                      "privateLinkServiceId": "[resourceId(parameters('resourceRG'), parameters('providerType'), parameters('resourceName'))]",
                                      "groupIds": "[array(parameters('PrivateLinkInfo')[copyIndex()].groupID)]",
                                      "privateLinkServiceConnectionState": {
                                        "status": "Approved",
                                        "description": "Auto-Approved",
                                        "actionsRequired": "None"
                                      }
                                    }
                                  }
                                ],
                                "manualPrivateLinkServiceConnections": [],
                                "subnet": {
                                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('privateLink')[copyIndex()].vNet, parameters('PrivateLinkInfo')[copyIndex()].Subnet)]"
                                }
                              }
                            },
                            {
                              "copy": {
                                "name": "NICDiags",
                                "count": "[length(parameters('PrivateLinkInfo'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('dp-{0}-pl-{1}-{2}-diags', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet)]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "DeploymentURI": {
                                    "value": "[parameters('DeploymentURI')]"
                                  },
                                  "NICName": {
                                    "value": "[last(split(reference(resourceId('Microsoft.Network/privateEndpoints', format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet))).networkInterfaces[0].id, '/'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.4.1318.3566",
                                      "templateHash": "3372180053977311610"
                                    }
                                  },
                                  "parameters": {
                                    "DeploymentURI": {
                                      "type": "string"
                                    },
                                    "NICName": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', parameters('NICName'))]",
                                      "name": "service",
                                      "properties": {
                                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                                        "metrics": [
                                          {
                                            "timeGrain": "PT5M",
                                            "enabled": true,
                                            "retentionPolicy": {
                                              "enabled": false,
                                              "days": 0
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "NICID": {
                              "type": "array",
                              "copy": {
                                "count": "[length(parameters('PrivateLinkInfo'))]",
                                "input": "[reference(resourceId('Microsoft.Network/privateEndpoints', format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet))).networkInterfaces[0].id]"
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Synapse/workspaces', variables('sapname'))]"
                      ]
                    },
                    {
                      "condition": "[contains(parameters('Synapse'), 'privatelinkinfo')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-Synapse-registerPrivateDNS{1}', parameters('Deployment'), parameters('Synapse').name)]",
                      "resourceGroup": "[variables('HubRGName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "PrivateLinkInfo": {
                            "value": "[parameters('Synapse').privateLinkInfo]"
                          },
                          "providerURL": {
                            "value": "azuresynapse.net"
                          },
                          "resourceName": {
                            "value": "[variables('sapname')]"
                          },
                          "providerType": {
                            "value": "Microsoft.Synapse/workspaces"
                          },
                          "Nics": {
                            "value": "[if(and(contains(parameters('Synapse'), 'privatelinkinfo'), not(equals(length(parameters('Synapse')), 0))), array(reference(resourceId('Microsoft.Resources/deployments', format('dp{0}-Synapse-privatelinkloop{1}', parameters('Deployment'), parameters('Synapse').name)), '2020-10-01').outputs.NICID.value), array('na'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "9527034148045878947"
                            }
                          },
                          "parameters": {
                            "PrivateLinkInfo": {
                              "type": "array"
                            },
                            "resourceName": {
                              "type": "string"
                            },
                            "providerURL": {
                              "type": "string"
                            },
                            "providerType": {
                              "type": "string"
                            },
                            "Nics": {
                              "type": "array"
                            }
                          },
                          "variables": {
                            "DNSLookup": {
                              "Microsoft.AzureCosmosDB/databaseAccounts/SQL": "documents",
                              "Microsoft.AzureCosmosDB/databaseAccounts/MongoDB": "mongo.cosmos",
                              "Microsoft.AzureCosmosDB/databaseAccounts/Cassandra": "cassandra.cosmos",
                              "Microsoft.AzureCosmosDB/databaseAccounts/Gremlin": "gremlin.cosmos",
                              "Microsoft.AzureCosmosDB/databaseAccounts/Table": "table.cosmos",
                              "Microsoft.KeyVault/vaults": "vaultcore",
                              "Microsoft.DBforMySQL/servers": "mysql",
                              "Microsoft.DBforMariaDB/servers": "mariadb",
                              "Microsoft.AppConfiguration/configurationStores": "azconfig",
                              "Microsoft.ServiceBus/namespaces": "servicebus",
                              "Microsoft.Sql/servers": "database",
                              "Microsoft.Cache/redis": "redis.cache",
                              "Microsoft.Web/sites": "azurewebsites",
                              "Microsoft.Synapse/workspaces": "sql",
                              "Microsoft.ApiManagement/service": "azure-api"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "privateLinkDNS",
                                "count": "[length(parameters('PrivateLinkInfo'))]"
                              },
                              "type": "Microsoft.Network/privateDnsZones/A",
                              "apiVersion": "2020-06-01",
                              "name": "[format('privatelink.{0}.{1}/{2}', if(contains(variables('DNSLookup'), parameters('providerType')), variables('DNSLookup')[parameters('providerType')], parameters('PrivateLinkInfo')[copyIndex()].groupID), parameters('providerURL'), parameters('resourceName'))]",
                              "properties": {
                                "ttl": 3600,
                                "aRecords": [
                                  {
                                    "ipv4Address": "[reference(parameters('Nics')[copyIndex()], '2018-05-01').ipConfigurations[0].properties.privateIPAddress]"
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Synapse/workspaces', variables('sapname'))]",
                        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-Synapse-privatelinkloop{1}', parameters('Deployment'), parameters('Synapse').name))]"
                      ]
                    }
                  ]
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-OMS', variables('Deployment')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-VNET', variables('Deployment')))]"
      ]
    },
    {
      "condition": "[bool(parameters('Stage').AzureSQL)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('dp{0}-AzureSQL', variables('Deployment'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "DeploymentID": {
            "value": "[parameters('DeploymentID')]"
          },
          "DeploymentInfo": {
            "value": "[parameters('DeploymentInfo')]"
          },
          "Environment": {
            "value": "[parameters('Environment')]"
          },
          "Extensions": {
            "value": "[parameters('Extensions')]"
          },
          "Global": {
            "value": "[parameters('Global')]"
          },
          "Prefix": {
            "value": "[parameters('Prefix')]"
          },
          "Stage": {
            "value": "[parameters('Stage')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "944844801325262165"
            }
          },
          "parameters": {
            "Prefix": {
              "type": "string"
            },
            "Environment": {
              "type": "string",
              "defaultValue": "D",
              "allowedValues": [
                "I",
                "D",
                "T",
                "U",
                "P",
                "S",
                "G",
                "A"
              ]
            },
            "DeploymentID": {
              "type": "string",
              "defaultValue": "1",
              "allowedValues": [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9"
              ]
            },
            "Stage": {
              "type": "object"
            },
            "Extensions": {
              "type": "object"
            },
            "Global": {
              "type": "object",
              "defaultValue": {
                "n": "1"
              }
            },
            "DeploymentInfo": {
              "type": "object"
            }
          },
          "variables": {
            "copy": [
              {
                "name": "azSQL",
                "count": "[length(variables('azSQLInfo'))]",
                "input": {
                  "match": "[or(equals(parameters('Global').CN, '.'), contains(array(parameters('Global').CN), variables('azSQLInfo')[copyIndex('azSQL')].Name))]"
                }
              }
            ],
            "Deployment": "[format('{0}-{1}-{2}-{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID'))]",
            "DeploymentURI": "[toLower(format('{0}{1}{2}{3}{4}', parameters('Prefix'), parameters('Global').OrgName, parameters('Global').Appname, parameters('Environment'), parameters('DeploymentID')))]",
            "HubRGJ": "[json(parameters('Global').hubRG)]",
            "HubKVJ": "[json(parameters('Global').hubKV)]",
            "gh": {
              "hubRGPrefix": "[if(contains(variables('HubRGJ'), 'Prefix'), variables('HubRGJ').Prefix, parameters('Prefix'))]",
              "hubRGOrgName": "[if(contains(variables('HubRGJ'), 'OrgName'), variables('HubRGJ').OrgName, parameters('Global').OrgName)]",
              "hubRGAppName": "[if(contains(variables('HubRGJ'), 'AppName'), variables('HubRGJ').AppName, parameters('Global').AppName)]",
              "hubRGRGName": "[if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID'))))]",
              "hubKVPrefix": "[if(contains(variables('HubKVJ'), 'Prefix'), variables('HubKVJ').Prefix, parameters('Prefix'))]",
              "hubKVOrgName": "[if(contains(variables('HubKVJ'), 'OrgName'), variables('HubKVJ').OrgName, parameters('Global').OrgName)]",
              "hubKVAppName": "[if(contains(variables('HubKVJ'), 'AppName'), variables('HubKVJ').AppName, parameters('Global').AppName)]",
              "hubKVRGName": "[if(contains(variables('HubKVJ'), 'RG'), variables('HubKVJ').RG, variables('HubRGJ').name)]"
            },
            "HubRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').hubRGPrefix, variables('gh').hubRGOrgName, variables('gh').hubRGAppName, variables('gh').hubRGRGName)]",
            "HubKVName": "[toLower(format('{0}-{1}-{2}-{3}-kv{4}', variables('gh').hubKVPrefix, variables('gh').hubKVOrgName, variables('gh').hubKVAppName, variables('gh').hubKVRGName, variables('HubKVJ').name))]",
            "appConfigurationInfo": "[if(contains(parameters('DeploymentInfo'), 'appConfigurationInfo'), parameters('DeploymentInfo').appConfigurationInfo, json('null'))]",
            "azSQLInfo": "[if(contains(parameters('DeploymentInfo'), 'azSQLInfo'), parameters('DeploymentInfo').azSQLInfo, createArray())]"
          },
          "resources": [
            {
              "condition": "[variables('azSQL')[copyIndex()].match]",
              "copy": {
                "name": "SQL",
                "count": "[length(variables('azSQLInfo'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dp{0}-azSQLDeploy{1}', variables('Deployment'), variables('azSQLInfo')[copyIndex()].name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "Deployment": {
                    "value": "[variables('Deployment')]"
                  },
                  "DeploymentURI": {
                    "value": "[variables('DeploymentURI')]"
                  },
                  "azSQLInfo": {
                    "value": "[variables('azSQLInfo')[copyIndex()]]"
                  },
                  "Global": {
                    "value": "[parameters('Global')]"
                  },
                  "vmAdminPassword": {
                    "reference": {
                      "keyVault": {
                        "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('HubRGName')), 'Microsoft.KeyVault/vaults', variables('HubKVName'))]"
                      },
                      "secretName": "localadmin"
                    }
                  },
                  "DeploymentID": {
                    "value": "[parameters('DeploymentID')]"
                  },
                  "Environment": {
                    "value": "[parameters('Environment')]"
                  },
                  "Prefix": {
                    "value": "[parameters('Prefix')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.4.1318.3566",
                      "templateHash": "7581548340760279835"
                    }
                  },
                  "parameters": {
                    "Deployment": {
                      "type": "string"
                    },
                    "DeploymentURI": {
                      "type": "string"
                    },
                    "azSQLInfo": {
                      "type": "object"
                    },
                    "Global": {
                      "type": "object"
                    },
                    "Prefix": {
                      "type": "string"
                    },
                    "Environment": {
                      "type": "string"
                    },
                    "DeploymentID": {
                      "type": "string"
                    },
                    "vmAdminPassword": {
                      "type": "secureString"
                    }
                  },
                  "variables": {
                    "objectIdLookup": "[json(parameters('Global').objectIdLookup)]",
                    "HubRGJ": "[json(parameters('Global').hubRG)]",
                    "gh": {
                      "hubRGPrefix": "[if(contains(variables('HubRGJ'), 'Prefix'), variables('HubRGJ').Prefix, parameters('Prefix'))]",
                      "hubRGOrgName": "[if(contains(variables('HubRGJ'), 'OrgName'), variables('HubRGJ').OrgName, parameters('Global').OrgName)]",
                      "hubRGAppName": "[if(contains(variables('HubRGJ'), 'AppName'), variables('HubRGJ').AppName, parameters('Global').AppName)]",
                      "hubRGRGName": "[if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, if(contains(variables('HubRGJ'), 'name'), variables('HubRGJ').name, format('{0}{1}', parameters('Environment'), parameters('DeploymentID'))))]"
                    },
                    "HubRGName": "[format('{0}-{1}-{2}-RG-{3}', variables('gh').hubRGPrefix, variables('gh').hubRGOrgName, variables('gh').hubRGAppName, variables('gh').hubRGRGName)]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Sql/servers",
                      "apiVersion": "2020-11-01-preview",
                      "name": "[toLower(format('{0}-azsql{1}', parameters('Deployment'), parameters('azSQLInfo').Name))]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "administratorLogin": "[parameters('azSQLInfo').administratorLogin]",
                        "administratorLoginPassword": "[parameters('vmAdminPassword')]",
                        "minimalTlsVersion": "1.2",
                        "publicNetworkAccess": "[if(bool(parameters('azSQLInfo').publicNetworkAccess), 'Enabled', 'Disabled')]"
                      }
                    },
                    {
                      "condition": "[contains(parameters('azSQLInfo'), 'AdminName')]",
                      "type": "Microsoft.Sql/servers/administrators",
                      "apiVersion": "2020-11-01-preview",
                      "name": "[format('{0}/{1}', toLower(format('{0}-azsql{1}', parameters('Deployment'), parameters('azSQLInfo').Name)), 'ActiveDirectory')]",
                      "properties": {
                        "administratorType": "ActiveDirectory",
                        "login": "[parameters('azSQLInfo').AdminName]",
                        "sid": "[variables('objectIdLookup')[parameters('azSQLInfo').AdminName]]",
                        "tenantId": "[tenant().tenantId]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers', toLower(format('{0}-azsql{1}', parameters('Deployment'), parameters('azSQLInfo').Name)))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Sql/servers/firewallRules",
                      "apiVersion": "2020-11-01-preview",
                      "name": "[format('{0}/{1}', toLower(format('{0}-azsql{1}', parameters('Deployment'), parameters('azSQLInfo').Name)), 'AllowAllWindowsAzureIps')]",
                      "properties": {
                        "startIpAddress": "0.0.0.0",
                        "endIpAddress": "0.0.0.0"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers', toLower(format('{0}-azsql{1}', parameters('Deployment'), parameters('azSQLInfo').Name)))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Sql/servers/firewallRules",
                      "apiVersion": "2020-11-01-preview",
                      "name": "[format('{0}/{1}', toLower(format('{0}-azsql{1}', parameters('Deployment'), parameters('azSQLInfo').Name)), 'AllConnectionsAllowed')]",
                      "properties": {
                        "startIpAddress": "0.0.0.0",
                        "endIpAddress": "255.255.255.255"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers', toLower(format('{0}-azsql{1}', parameters('Deployment'), parameters('azSQLInfo').Name)))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "SQLDB",
                        "count": "[length(parameters('azSQLInfo').DBInfo)]"
                      },
                      "type": "Microsoft.Sql/servers/databases",
                      "apiVersion": "2020-11-01-preview",
                      "name": "[format('{0}/{1}', toLower(format('{0}-azsql{1}', parameters('Deployment'), parameters('azSQLInfo').Name)), parameters('azSQLInfo').DBInfo[copyIndex()].Name)]",
                      "location": "[resourceGroup().location]",
                      "sku": {
                        "name": "[parameters('azSQLInfo').DBInfo[copyIndex()].skuName]"
                      },
                      "properties": {
                        "collation": "SQL_Latin1_General_CP1_CI_AS",
                        "licenseType": "BasePrice"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers', toLower(format('{0}-azsql{1}', parameters('Deployment'), parameters('azSQLInfo').Name)))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "SQLDBDiags",
                        "count": "[length(parameters('azSQLInfo').DBInfo)]"
                      },
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Sql/servers/{0}/databases/{1}', toLower(format('{0}-azsql{1}', parameters('Deployment'), parameters('azSQLInfo').Name)), parameters('azSQLInfo').DBInfo[copyIndex()].Name)]",
                      "name": "service",
                      "properties": {
                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                        "logs": [
                          {
                            "enabled": true,
                            "category": "SQLInsights"
                          },
                          {
                            "enabled": true,
                            "category": "AutomaticTuning"
                          },
                          {
                            "enabled": true,
                            "category": "QueryStoreRuntimeStatistics"
                          },
                          {
                            "enabled": true,
                            "category": "QueryStoreWaitStatistics"
                          },
                          {
                            "enabled": true,
                            "category": "Errors"
                          },
                          {
                            "enabled": true,
                            "category": "DatabaseWaitStatistics"
                          },
                          {
                            "enabled": true,
                            "category": "Timeouts"
                          },
                          {
                            "enabled": true,
                            "category": "Blocks"
                          },
                          {
                            "enabled": true,
                            "category": "Deadlocks"
                          }
                        ],
                        "metrics": [
                          {
                            "category": "Basic",
                            "enabled": true,
                            "retentionPolicy": {
                              "enabled": false,
                              "days": 0
                            }
                          },
                          {
                            "category": "InstanceAndAppAdvanced",
                            "enabled": true,
                            "retentionPolicy": {
                              "enabled": false,
                              "days": 0
                            }
                          },
                          {
                            "category": "WorkloadManagement",
                            "enabled": true,
                            "retentionPolicy": {
                              "enabled": false,
                              "days": 0
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers/databases', toLower(format('{0}-azsql{1}', parameters('Deployment'), parameters('azSQLInfo').Name)), parameters('azSQLInfo').DBInfo[copyIndex()].Name)]"
                      ]
                    },
                    {
                      "condition": "[contains(parameters('azSQLInfo'), 'privatelinkinfo')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-SQL-privatelinkloop{1}', parameters('Deployment'), parameters('azSQLInfo').name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Deployment": {
                            "value": "[parameters('Deployment')]"
                          },
                          "DeploymentURI": {
                            "value": "[parameters('DeploymentURI')]"
                          },
                          "PrivateLinkInfo": {
                            "value": "[parameters('azSQLInfo').privateLinkInfo]"
                          },
                          "providerType": {
                            "value": "Microsoft.Sql/servers"
                          },
                          "resourceName": {
                            "value": "[toLower(format('{0}-azsql{1}', parameters('Deployment'), parameters('azSQLInfo').Name))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "1242957729837230630"
                            }
                          },
                          "parameters": {
                            "Deployment": {
                              "type": "string"
                            },
                            "DeploymentURI": {
                              "type": "string"
                            },
                            "PrivateLinkInfo": {
                              "type": "array"
                            },
                            "providerType": {
                              "type": "string"
                            },
                            "resourceName": {
                              "type": "string"
                            },
                            "resourceRG": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().name]"
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "privateLink",
                                "count": "[length(parameters('PrivateLinkInfo'))]",
                                "input": {
                                  "name": "[format('{0}-pl{1}', parameters('Deployment'), parameters('PrivateLinkInfo')[copyIndex('privateLink')].Subnet)]",
                                  "vNet": "[format('{0}-vn', parameters('Deployment'))]"
                                }
                              }
                            ]
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "subnetPrivateEndpoint",
                                "count": "[length(parameters('PrivateLinkInfo'))]"
                              },
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2019-11-01",
                              "name": "[format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet)]",
                              "location": "[resourceGroup().location]",
                              "properties": {
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet)]",
                                    "properties": {
                                      "privateLinkServiceId": "[resourceId(parameters('resourceRG'), parameters('providerType'), parameters('resourceName'))]",
                                      "groupIds": "[array(parameters('PrivateLinkInfo')[copyIndex()].groupID)]",
                                      "privateLinkServiceConnectionState": {
                                        "status": "Approved",
                                        "description": "Auto-Approved",
                                        "actionsRequired": "None"
                                      }
                                    }
                                  }
                                ],
                                "manualPrivateLinkServiceConnections": [],
                                "subnet": {
                                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('privateLink')[copyIndex()].vNet, parameters('PrivateLinkInfo')[copyIndex()].Subnet)]"
                                }
                              }
                            },
                            {
                              "copy": {
                                "name": "NICDiags",
                                "count": "[length(parameters('PrivateLinkInfo'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('dp-{0}-pl-{1}-{2}-diags', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet)]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "DeploymentURI": {
                                    "value": "[parameters('DeploymentURI')]"
                                  },
                                  "NICName": {
                                    "value": "[last(split(reference(resourceId('Microsoft.Network/privateEndpoints', format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet))).networkInterfaces[0].id, '/'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.4.1318.3566",
                                      "templateHash": "3372180053977311610"
                                    }
                                  },
                                  "parameters": {
                                    "DeploymentURI": {
                                      "type": "string"
                                    },
                                    "NICName": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', parameters('NICName'))]",
                                      "name": "service",
                                      "properties": {
                                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}LogAnalytics', parameters('DeploymentURI')))]",
                                        "metrics": [
                                          {
                                            "timeGrain": "PT5M",
                                            "enabled": true,
                                            "retentionPolicy": {
                                              "enabled": false,
                                              "days": 0
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "NICID": {
                              "type": "array",
                              "copy": {
                                "count": "[length(parameters('PrivateLinkInfo'))]",
                                "input": "[reference(resourceId('Microsoft.Network/privateEndpoints', format('{0}-pl-{1}-{2}', parameters('resourceName'), parameters('PrivateLinkInfo')[copyIndex()].groupID, parameters('PrivateLinkInfo')[copyIndex()].Subnet))).networkInterfaces[0].id]"
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers', toLower(format('{0}-azsql{1}', parameters('Deployment'), parameters('azSQLInfo').Name)))]"
                      ]
                    },
                    {
                      "condition": "[contains(parameters('azSQLInfo'), 'privatelinkinfo')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('dp{0}-SQL-registerPrivateLinkDNS-{1}', parameters('Deployment'), parameters('azSQLInfo').name)]",
                      "resourceGroup": "[variables('HubRGName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "PrivateLinkInfo": {
                            "value": "[parameters('azSQLInfo').privateLinkInfo]"
                          },
                          "providerURL": {
                            "value": "windows.net"
                          },
                          "resourceName": {
                            "value": "[toLower(format('{0}-azsql{1}', parameters('Deployment'), parameters('azSQLInfo').Name))]"
                          },
                          "providerType": {
                            "value": "Microsoft.Sql/servers"
                          },
                          "Nics": {
                            "value": "[if(contains(parameters('azSQLInfo'), 'privatelinkinfo'), array(reference(resourceId('Microsoft.Resources/deployments', format('dp{0}-SQL-privatelinkloop{1}', parameters('Deployment'), parameters('azSQLInfo').name)), '2020-10-01').outputs.NICID.value), array(''))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.4.1318.3566",
                              "templateHash": "9527034148045878947"
                            }
                          },
                          "parameters": {
                            "PrivateLinkInfo": {
                              "type": "array"
                            },
                            "resourceName": {
                              "type": "string"
                            },
                            "providerURL": {
                              "type": "string"
                            },
                            "providerType": {
                              "type": "string"
                            },
                            "Nics": {
                              "type": "array"
                            }
                          },
                          "variables": {
                            "DNSLookup": {
                              "Microsoft.AzureCosmosDB/databaseAccounts/SQL": "documents",
                              "Microsoft.AzureCosmosDB/databaseAccounts/MongoDB": "mongo.cosmos",
                              "Microsoft.AzureCosmosDB/databaseAccounts/Cassandra": "cassandra.cosmos",
                              "Microsoft.AzureCosmosDB/databaseAccounts/Gremlin": "gremlin.cosmos",
                              "Microsoft.AzureCosmosDB/databaseAccounts/Table": "table.cosmos",
                              "Microsoft.KeyVault/vaults": "vaultcore",
                              "Microsoft.DBforMySQL/servers": "mysql",
                              "Microsoft.DBforMariaDB/servers": "mariadb",
                              "Microsoft.AppConfiguration/configurationStores": "azconfig",
                              "Microsoft.ServiceBus/namespaces": "servicebus",
                              "Microsoft.Sql/servers": "database",
                              "Microsoft.Cache/redis": "redis.cache",
                              "Microsoft.Web/sites": "azurewebsites",
                              "Microsoft.Synapse/workspaces": "sql",
                              "Microsoft.ApiManagement/service": "azure-api"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "privateLinkDNS",
                                "count": "[length(parameters('PrivateLinkInfo'))]"
                              },
                              "type": "Microsoft.Network/privateDnsZones/A",
                              "apiVersion": "2020-06-01",
                              "name": "[format('privatelink.{0}.{1}/{2}', if(contains(variables('DNSLookup'), parameters('providerType')), variables('DNSLookup')[parameters('providerType')], parameters('PrivateLinkInfo')[copyIndex()].groupID), parameters('providerURL'), parameters('resourceName'))]",
                              "properties": {
                                "ttl": 3600,
                                "aRecords": [
                                  {
                                    "ipv4Address": "[reference(parameters('Nics')[copyIndex()], '2018-05-01').ipConfigurations[0].properties.privateIPAddress]"
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers', toLower(format('{0}-azsql{1}', parameters('Deployment'), parameters('azSQLInfo').Name)))]",
                        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-SQL-privatelinkloop{1}', parameters('Deployment'), parameters('azSQLInfo').name))]"
                      ]
                    }
                  ]
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-OMS', variables('Deployment')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dp{0}-VNET', variables('Deployment')))]"
      ]
    }
  ]
}