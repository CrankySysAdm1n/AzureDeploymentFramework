{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Prefix": {
      "type": "string",
      "defaultValue": "AZE2",
      "allowedValues": [
        "AZE2",
        "AZC1",
        "AEU2",
        "ACU1"
      ]
    },
    "Environment": {
      "type": "string",
      "defaultValue": "D",
      "allowedValues": [
        "I",
        "D",
        "U",
        "P",
        "S",
        "G",
        "A"
      ]
    },
    "DeploymentID": {
      "type": "string",
      "defaultValue": "1",
      "allowedValues": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9"
      ]
    },
    "Stage": {
      "type": "object"
    },
    "Extensions": {
      "type": "object"
    },
    "Global": {
      "type": "object"
    },
    "DeploymentInfo": {
      "type": "object"
    },
    "_artifactsLocation": {
      "type": "string",
      "metadata": {
        "description": "Auto-generated container in staging storage account to receive post-build staging folder upload"
      }
    },
    "_artifactsLocationSasToken": {
      "type": "securestring",
      "metadata": {
        "description": "Auto-generated token to access artifactsLocation"
      }
    },
    "vmAdminPassword": {
      "type": "securestring"
    },
    "DevOpsAgentPATToken": {
      "type": "securestring"
    }
  },
  "variables": {
    // Global  BRWDev101
    "Deployment": "[concat(parameters('Prefix'),'-',parameters('Global').OrgName,'-',parameters('Global').Appname,'-',parameters('Environment'),parameters('DeploymentID'))]",
    // subscriptionId
    "subscriptionId": "[subscription().subscriptionId]",
    "Domain": "[split(parameters('Global').DomainName,'.')[0]]",
    // rgName
    "resourceGroupName": "[resourceGroup().name]",
    "OMSworkspaceName": "[replace(concat(variables('Deployment'),'LogAnalytics'),'-','')]",
    "OMSworkspaceID": "[resourceid('Microsoft.OperationalInsights/workspaces/',variables('OMSworkspaceName'))]",
    "VNetID": "[resourceId(variables('subscriptionId'),variables('ResourceGroupName'), 'Microsoft.Network/VirtualNetworks', concat(Variables('Deployment'),'-vn'))]",
    "networkId": "[concat(parameters('Global').networkid[0],string(           sub(parameters('Global').networkid[1],mul(2,int(parameters('DeploymentID'))))))]",
    "networkIdUpper": "[concat(parameters('Global').networkid[0],string(add(1,sub(parameters('Global').networkid[1],mul(2,int(parameters('DeploymentID')))))))]",
    "LBInfo": "[parameters('DeploymentInfo').LBInfo]",

  },
  "resources": [
    {
      "name": "[concat('dp', variables('Deployment'), '-publicIPDeploy', variables('LBInfo')[copyIndex(0)].LBName)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-05-01",
      "dependsOn": [],
      "copy": {
        "name": "publicIPLoop",
        "count": "[length( variables('LBInfo') )]"
      },
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('_artifactsLocation'), '/', 'templates-nested/PublicIP.json', parameters('_artifactsLocationSasToken'))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "Deployment": {
            "value": "[variables('Deployment')]"
          },
          "DeploymentID": {
            "value": "[parameters('DeploymentID')]"
          },
          "NICs": {
            "value": "[variables('LBInfo')[copyIndex(0)].FrontEnd]"
          },
          "vm": {
            "value": "[variables('LBInfo')[copyIndex(0)]]"
          },
          "Global": {
            "value": "[parameters('Global')]"
          },
          "OMSworkspaceID": {
            "value": "[variables('OMSworkspaceID')]"
          }
        }
      }
    },
    {
      "condition": "[not(contains(variables('LBInfo')[copyIndex(0)],'NATPools'))]",
      "name": "[concat('dp', variables('Deployment'), '-LBDeploy', variables('LBInfo')[copyIndex(0)].LBName)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-05-01",
      "dependsOn": [
        "[concat('dp', variables('Deployment'), '-publicIPDeploy', variables('LBInfo')[copyIndex(0)].LBName)]"
      ],
      "copy": {
        "name": "LBLoop",
        "count": "[length( variables('LBInfo') )]"
      },
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('_artifactsLocation'), '/', 'templates-nested/loadBalancer.json', parameters('_artifactsLocationSasToken'))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "Deployment": {
            "value": "[variables('Deployment')]"
          },
          "DeploymentID": {
            "value": "[parameters('DeploymentID')]"
          },
          "NATRules": {
            "value": "[if(contains(variables('LBInfo')[copyIndex(0)],'NATRules'),variables('LBInfo')[copyIndex(0)].NATRules,array(1))]"
          },
          "outboundRules": {
            "value": "[if(contains(variables('LBInfo')[copyIndex(0)],'outboundRules'),variables('LBInfo')[copyIndex(0)].outboundRules,array(1))]"
          },
          "Services": {
            "value": "[if(contains(variables('LBInfo')[copyIndex(0)],'Services'),variables('LBInfo')[copyIndex(0)].Services,array(1))]"
          },
          "probes": {
            "value": "[if(contains(variables('LBInfo')[copyIndex(0)],'probes'),variables('LBInfo')[copyIndex(0)].probes,array(1))]"
          },
          "LB": {
            "value": "[variables('LBInfo')[copyIndex(0)]]"
          },
          "Global": {
            "value": "[parameters('Global')]"
          },
          "OMSworkspaceID": {
            "value": "[variables('OMSworkspaceID')]"
          }
        }
      }
    },
    {
      "condition": "[contains(variables('LBInfo')[copyIndex(0)],'NATPools')]",
      "name": "[concat('dp', variables('Deployment'), '-LBDeploySS', variables('LBInfo')[copyIndex(0)].LBName)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-05-01",
      "dependsOn": [
        "[concat('dp', variables('Deployment'), '-publicIPDeploy', variables('LBInfo')[copyIndex(0)].LBName)]"
      ],
      "copy": {
        "name": "LBLoop",
        "count": "[length( variables('LBInfo') )]"
      },
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('_artifactsLocation'), '/', 'templates-nested/loadBalancerSS.json', parameters('_artifactsLocationSasToken'))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "Deployment": {
            "value": "[variables('Deployment')]"
          },
          "DeploymentID": {
            "value": "[parameters('DeploymentID')]"
          },
          "NATPools": {
            "value": "[if(contains(variables('LBInfo')[copyIndex(0)],'NATPools'),variables('LBInfo')[copyIndex(0)].NATPools,array(1))]"
          },
          "LB": {
            "value": "[variables('LBInfo')[copyIndex(0)]]"
          },
          "Global": {
            "value": "[parameters('Global')]"
          },
          "OMSworkspaceID": {
            "value": "[variables('OMSworkspaceID')]"
          }
        }
      }
    }
    // {
    //   "name": "[concat(variables('Deployment'),'-lb',variables('LBInfo')[copyIndex()].LBName)]",
    //   "type": "Microsoft.Network/loadBalancers",
    //   "apiVersion": "2018-03-01",
    //   "location": "[resourceGroup().location]",
    //   "sku": {
    //     "name": "[variables('LBInfo')[copyIndex()].Sku]"
    //   },
    //   "dependsOn": [
    //     "[concat('dp', variables('Deployment'), '-publicIPDeploy', variables('LBInfo')[copyIndex(0)].LBName)]"
    //   ],
    //   "copy": {
    //     "name": "ilbLoop",
    //     "count": "[length(variables('LBInfo'))]"
    //   },
    //   "tags": {
    //     "displayName": "ILB_Deploy"
    //   },
    //   "properties": {
    //     "backendAddressPools": [
    //       {
    //         "name": "[variables('LBInfo')[copyIndex()].ASName]"
    //       }
    //     ],
    //     "copy": [
    //       {
    //         "name": "inboundNatPools",
    //         "count": "[length(variables('LBInfo')[copyIndex(0)].NATPools)]",
    //         "input": {
    //           "name": "[variables('LBInfo')[copyIndex(0)].NATPools[copyIndex('inboundNatPools')].backendPort]",
    //           "properties": {
    //             "frontendIPConfiguration": {
    //               "id": "[concat(resourceId('Microsoft.Network/loadBalancers/',concat(variables('Deployment'),'-lb',variables('LBInfo')[copyIndex(0)].LBName)),'/frontendIPConfigurations/',variables('LBInfo')[copyIndex()].NATPools[copyIndex('inboundNatPools')].LBFEName)]"
    //             },
    //             "frontendPortRangeStart": "[variables('LBInfo')[copyIndex(0)].NATPools[copyIndex('inboundNatPools')].frontendPortRangeStart]",
    //             "frontendPortRangeEnd": "[variables('LBInfo')[copyIndex(0)].NATPools[copyIndex('inboundNatPools')].frontendPortRangeEnd]",
    //             "backendPort": "[variables('LBInfo')[copyIndex(0)].NATPools[copyIndex('inboundNatPools')].backendPort]",
    //             "enableFloatingIP": "[variables('LBInfo')[copyIndex(0)].NATPools[copyIndex('inboundNatPools')].enableFloatingIP]",
    //             "idleTimeoutInMinutes": "[variables('LBInfo')[copyIndex(0)].NATPools[copyIndex('inboundNatPools')].idleTimeoutInMinutes]",
    //             "protocol": "[variables('LBInfo')[copyIndex(0)].NATPools[copyIndex('inboundNatPools')].protocol]"
    //           }
    //         }
    //       },
    //       // {
    //       //   "name": "inboundNatRules",
    //       //   "count": "[length(variables('LBInfo')[copyIndex()].NAT)]",
    //       //   "input": {
    //       //     "name": "[variables('LBInfo')[copyIndex()].NAT[copyIndex('inboundNatRules')].NATName]",
    //       //     "properties": {
    //       //       "frontendIPConfiguration": {
    //       //         "id": "[concat(resourceId('Microsoft.Network/loadBalancers/',concat(variables('Deployment'),'-lb',variables('LBInfo')[copyIndex()].LBName)),'/frontendIPConfigurations/',variables('LBInfo')[copyIndex()].NAT[copyIndex('inboundNatRules')].LBFEName)]"
    //       //       },
    //       //       "frontendPort": "[variables('LBInfo')[copyIndex()].NAT[copyIndex('inboundNatRules')].frontendPort]",
    //       //       "backendPort": "[variables('LBInfo')[copyIndex()].NAT[copyIndex('inboundNatRules')].backendPort]",
    //       //       "enableFloatingIP": "[variables('LBInfo')[copyIndex()].NAT[copyIndex('inboundNatRules')].enableFloatingIP]",
    //       //       "idleTimeoutInMinutes": "[variables('LBInfo')[copyIndex()].NAT[copyIndex('inboundNatRules')].idleTimeoutInMinutes]",
    //       //       "protocol": "[variables('LBInfo')[copyIndex()].NAT[copyIndex('inboundNatRules')].protocol]"
    //       //     }
    //       //   }
    //       // },
    //       {
    //         "name": "frontendIPConfigurations",
    //         "count": "[length(variables('LBInfo')[copyIndex()].FrontEnd)]",
    //         "input": {
    //           "name": "[variables('LBInfo')[copyIndex()].FrontEnd[copyIndex('frontendIPConfigurations')].LBFEName]",
    //           "properties": {
    //             "privateIPAllocationMethod": "[if( equals(variables('LBInfo')[copyIndex()].FrontEnd[copyIndex('frontendIPConfigurations')].Type,'Private'), 'Static',json('null'))]",
    //             "privateIPAddress": "[if( equals(variables('LBInfo')[copyIndex()].FrontEnd[copyIndex('frontendIPConfigurations')].Type,'Private'), concat(variables('networkId'),'.',variables('LBInfo')[copyIndex()].FrontEnd[copyIndex('frontendIPConfigurations')].LBFEIP),json('null'))]",
    //             "subnet": "[if( equals(variables('LBInfo')[copyIndex()].FrontEnd[copyIndex('frontendIPConfigurations')].Type,'Private'), json( concat('{\"id\":\"',concat(variables('VNetID'), '/subnets/sn', variables('LBInfo')[copyIndex()].FrontEnd[copyIndex('frontendIPConfigurations')].SNName) ,'\"}')), json('null'))]",
    //             "publicIPAddress": "[if( equals(variables('LBInfo')[copyIndex()].FrontEnd[copyIndex('frontendIPConfigurations')].Type,'Private'), json('null'), json( concat('{\"id\":\"',string(resourceid('Microsoft.Network/publicIPAddresses',concat(variables('Deployment'),'-',variables('LBInfo')[copyIndex()].LBName,'-publicip', copyIndex('frontendIPConfigurations',1)))),'\"}')))]"
    //           }
    //         }
    //       },
    //       {
    //         "name": "loadBalancingRules",
    //         "count": "[length(variables('LBInfo')[copyIndex()].Services)]",
    //         "input": {
    //           "name": "[variables('LBInfo')[copyIndex()].Services[copyIndex('loadBalancingRules')].RuleName]",
    //           "properties": {
    //             "frontendIPConfiguration": {
    //               "id": "[concat(resourceId('Microsoft.Network/loadBalancers/',concat(variables('Deployment'),'-lb',variables('LBInfo')[copyIndex()].LBName)),'/frontendIPConfigurations/',variables('LBInfo')[copyIndex()].Services[copyIndex('loadBalancingRules')].LBFEName)]"
    //             },
    //             "backendAddressPool": {
    //               "id": "[concat(resourceId('Microsoft.Network/loadBalancers/',concat(variables('Deployment'),'-lb',variables('LBInfo')[copyIndex()].LBName)),'/backendAddressPools/',variables('LBInfo')[copyIndex()].ASName)]"
    //             },
    //             "probe": {
    //               "id": "[concat(resourceId('Microsoft.Network/loadBalancers/',concat(variables('Deployment'),'-lb',variables('LBInfo')[copyIndex()].LBName)),'/probes/',variables('LBInfo')[copyIndex()].Services[copyIndex('loadBalancingRules')].ProbeName)]"
    //             },
    //             "protocol": "[if(contains(variables('LBInfo')[copyIndex()].Services[copyIndex('loadBalancingRules')],'protocol'),variables('LBInfo')[copyIndex()].Services[copyIndex('loadBalancingRules')].Protocol ,'tcp')]",
    //             "frontendPort": "[variables('LBInfo')[copyIndex()].Services[copyIndex('loadBalancingRules')].LBFEPort]",
    //             "backendPort": "[variables('LBInfo')[copyIndex()].Services[copyIndex('loadBalancingRules')].LBBEPort]",
    //             "enableFloatingIP": "[variables('LBInfo')[copyIndex()].Services[copyIndex('loadBalancingRules')].DirectReturn]"
    //           }
    //         }
    //       },
    //       {
    //         "name": "probes",
    //         "count": "[length(variables('LBInfo')[copyIndex()].Probes)]",
    //         "input": {
    //           "name": "[variables('LBInfo')[copyIndex()].Probes[copyIndex('probes')].ProbeName]",
    //           "properties": {
    //             "protocol": "Tcp",
    //             "port": "[variables('LBInfo')[copyIndex()].Probes[copyIndex('probes')].LBBEProbePort]",
    //             "intervalInSeconds": 5,
    //             "numberOfProbes": 2
    //           }
    //         }
    //       }
    //     ]
    //   },
    //   "resources": [
    //     {
    //       "type": "providers/diagnosticSettings",
    //       "name": "Microsoft.Insights/service",
    //       "dependsOn": [
    //         "[concat(variables('Deployment'),'-lb',variables('LBInfo')[copyIndex()].LBName)]"
    //       ],
    //       "apiVersion": "2015-07-01",
    //       "properties": {
    //         "workspaceId": "[variables('OMSworkspaceID')]",
    //         "logs": [
    //           {
    //             "category": "LoadBalancerAlertEvent",
    //             "enabled": true
    //           },
    //           {
    //             "category": "LoadBalancerProbeHealthStatus",
    //             "enabled": true
    //           }
    //         ],
    //         "metrics": [
    //           {
    //             "timeGrain": "PT5M",
    //             "enabled": true,
    //             "retentionPolicy": {
    //               "enabled": false,
    //               "days": 0
    //             }
    //           }
    //         ]
    //       }
    //     }
    //   ]
    // }
  ],
  "outputs": {}
}