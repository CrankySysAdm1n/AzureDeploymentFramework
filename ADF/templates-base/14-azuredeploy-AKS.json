{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Prefix": {
      "type": "string",
      "defaultValue": "AZE2",
      "allowedValues": [
        "AZE2",
        "AZC1",
        "AEU2",
        "ACU1"
      ]
    },
    "Environment": {
      "type": "string",
      "defaultValue": "D",
      "allowedValues": [
        "I",
        "D",
        "U",
        "P",
        "S",
        "G",
        "A"
      ]
    },
    "DeploymentID": {
      "type": "string",
      "defaultValue": "1",
      "allowedValues": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9"
      ]
    },
    "Stage": {
      "type": "object"
    },
    "Extensions": {
      "type": "object"
    },
    "Global": {
      "type": "object"
    },
    "DeploymentInfo": {
      "type": "object"
    },
    "_artifactsLocation": {
      "type": "string",
      "metadata": {
        "description": "Auto-generated container in staging storage account to receive post-build staging folder upload"
      }
    },
    "_artifactsLocationSasToken": {
      "type": "securestring",
      "metadata": {
        "description": "Auto-generated token to access artifactsLocation"
      }
    },
    "vmAdminPassword": {
      "type": "securestring"
    },
    "sshPublic": {
      "type": "securestring"
    }
  },
  "variables": {
    "Deployment": "[concat(parameters('Prefix'),'-',parameters('Global').OrgName,'-',parameters('Global').Appname,'-',parameters('Environment'),parameters('DeploymentID'))]",
    "Domain": "[split(parameters('Global').DomainName,'.')[0]]",
    "OMSworkspaceName": "[replace(concat(variables('Deployment'),'LogAnalytics'),'-','')]",
    "OMSworkspaceID": "[resourceid('Microsoft.OperationalInsights/workspaces/',variables('OMSworkspaceName'))]",
    "AKS": "[parameters('DeploymentInfo').AKS]",

    "networkId": "[concat(parameters('Global').networkid[0],string(           sub(parameters('Global').networkid[1],mul(2,int(parameters('DeploymentID'))))))]",
    "networkIdUpper": "[concat(parameters('Global').networkid[0],string(add(1,sub(parameters('Global').networkid[1],mul(2,int(parameters('DeploymentID')))))))]",

    "Environment": {
      "D": "Dev",
      "I": "Int",
      "U": "UAT",
      "P": "PROD",
      "S": "SBX"
    },
    "VMSizeLookup": {
      "D": "D",
      "I": "D",
      "U": "D",
      "P": "P",
      "S": "D"
    },
    "OSType": "[json(parameters('Global').OSType)]",
    "computeSizeLookupOptions": "[json(parameters('Global').computeSizeLookupOptions)]",
    "WadCfg": "[json(parameters('Global').WadCfg)]",
    "ladCfg": "[json(parameters('Global').ladCfg)]",
    "DataDiskInfo": "[json(parameters('Global').DataDiskInfo)]",
    "MSILookup": {
      "SQL": "Cluster",
      "UTL": "DefaultKeyVault",
      "FIL": "Cluster",
      "OCR": "Storage",
      "WVD": "WVD"
    },
    "userAssignedIdentities": {
      "Cluster": {
        "[resourceID('Microsoft.ManagedIdentity/userAssignedIdentities/',concat(variables('Deployment'),'-uaiKeyVaultSecretsGet'))]": {
        },
        "[resourceID('Microsoft.ManagedIdentity/userAssignedIdentities/',concat(variables('Deployment'),'-uaiStorageAccountOperator'))]": {
        },
        "[resourceID('Microsoft.ManagedIdentity/userAssignedIdentities/',concat(variables('Deployment'),'-uaiStorageAccountOperatorGlobal'))]": {
        }
      },
      "Default": {
        "[resourceID('Microsoft.ManagedIdentity/userAssignedIdentities/',concat(variables('Deployment'),'-uaiKeyVaultSecretsGet'))]": {
        },
        "[resourceID('Microsoft.ManagedIdentity/userAssignedIdentities/',concat(variables('Deployment'),'-uaiStorageAccountOperatorGlobal'))]": {
        },
        "[resourceID('Microsoft.ManagedIdentity/userAssignedIdentities/',concat(variables('Deployment'),'-uaiStorageAccountFileContributor'))]": {
        }
      },
      "DefaultKeyVault": {
        "[resourceID('Microsoft.ManagedIdentity/userAssignedIdentities/',concat(variables('Deployment'),'-uaiStorageAccountOperatorGlobal'))]": {
        },
        "[resourceID('Microsoft.ManagedIdentity/userAssignedIdentities/',concat(variables('Deployment'),'-uaiKeyVaultSecretsGetApp'))]": {
        },
        "[resourceID('Microsoft.ManagedIdentity/userAssignedIdentities/',concat(variables('Deployment'),'-uaiAzureServiceBusDataOwner'))]": {
        }
      },
      "WVD": {
        "[resourceID('Microsoft.ManagedIdentity/userAssignedIdentities/',concat(variables('Deployment'),'-uaiStorageAccountOperatorGlobal'))]": {
        },
        "[resourceID('Microsoft.ManagedIdentity/userAssignedIdentities/',concat(variables('Deployment'),'-uaiStorageAccountFileContributor'))]": {
        },
        "[resourceID('Microsoft.ManagedIdentity/userAssignedIdentities/',concat(variables('Deployment'),'-uaiWVDRegKeyReader'))]": {
        }
      },
      "Storage": {
        "[resourceID('Microsoft.ManagedIdentity/userAssignedIdentities/',concat(variables('Deployment'),'-uaiStorageAccountContributor'))]": {
        },
        "[resourceID('Microsoft.ManagedIdentity/userAssignedIdentities/',concat(variables('Deployment'),'-uaiStorageAccountOperatorGlobal'))]": {
        }
      },
      "None": {
      }
    }
    // "copy": [
    //   {
    //     "name": "aksAADAdminGroupsLookup",
    //     "count": "[length(variables('AKS')[copyIndex(0)].aksAADAdminGroups)]",
    //     "input": {
    //       "adminGroupObjectIDs": "[parameters('Global').RolesLookup[]]"
    //     }
    //   }
    // ]
  },
  "resources": [
    {
      "name": "[concat(variables('Deployment'), '-aks', variables('AKS')[copyIndex(0)].Name)]",
      "type": "Microsoft.ContainerService/managedClusters",
      "apiVersion": "2020-12-01",
      "location": "[resourceGroup().location]",
      "identity": {
        // "type": "SystemAssigned"
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities',concat(variables('Deployment'),'-uaiIngressApplicationGateway'))]": {}
        }
      },
      "sku": {
        "name": "Basic",
        "tier": "[variables('AKS')[copyIndex(0)].skuTier]"
      },
      "copy": {
        "name": "AKSLoop",
        "count": "[length(variables('AKS'))]"
      },
      "tags": {
        "Environment": "[variables('Environment')[parameters('Environment')]]"
      },
      "properties": {
        "kubernetesVersion": "[variables('AKS')[copyIndex(0)].Version]",
        "nodeResourceGroup": "[replace(resourceGroup().name,concat(parameters('Environment'),parameters('DeploymentID')),variables('AKS')[copyIndex(0)].AgentPoolRG)]",
        "enableRBAC": "[variables('AKS')[copyIndex(0)].enableRBAC]",
        "dnsPrefix": "[toLower(concat(variables('Deployment'), '-aks',variables('AKS')[copyIndex(0)].Name))]",
        "copy": [
          {
            "name": "agentPoolProfiles",
            "count": "[length(variables('AKS')[copyIndex(0)].agentPools)]",
            "Input": {
              "name": "[variables('AKS')[copyIndex(0)].agentPools[CopyIndex('agentPoolProfiles')].name]",
              "mode": "[variables('AKS')[copyIndex(0)].agentPools[CopyIndex('agentPoolProfiles')].mode]",
              "count": "[variables('AKS')[copyIndex(0)].agentPools[CopyIndex('agentPoolProfiles')].count]",
              "osDiskSizeGb": "[variables('AKS')[copyIndex(0)].agentPools[CopyIndex('agentPoolProfiles')].osDiskSizeGb]",
              "osType": "[variables('AKS')[copyIndex(0)].agentPools[CopyIndex('agentPoolProfiles')].osType]",
              "maxPods": "[variables('AKS')[copyIndex(0)].agentPools[CopyIndex('agentPoolProfiles')].maxPods]",
              // "storageProfile": "[variables('AKS')[copyIndex(0)].agentPools[CopyIndex('agentPoolProfiles')].storageProfile]",
              // "vmSize": "[variables('computeSizeLookupOptions')[concat(variables('AKS')[copyIndex(0)].agentPools[CopyIndex('agentPoolProfiles')].ASNAME,'-',variables('vmsizelookup')[parameters('Environment')])]]",
              "vmSize": "Standard_DS2_v2",
              "vnetSubnetID": "[if(
                                  contains(variables('AKS')[copyIndex(0)].agentPools[CopyIndex('agentPoolProfiles')],'Subnet'),
                                  resourceId('Microsoft.Network/virtualNetworks/subnets',variables('AKS')[copyIndex(0)].agentPools[CopyIndex('agentPoolProfiles')].Subnet),
                                  resourceId('Microsoft.Network/virtualNetworks/subnets', concat(Variables('Deployment'),'-vn'),variables('AKS')[copyIndex(0)].AgentPoolsSN))]",
              "type": "VirtualMachineScaleSets",
              "availabilityZones": [ "1", "2", "3" ],
              "storageProfile": "ManagedDisks"
            }
          }
        ],
        "linuxProfile": {
          "adminUsername": "[if(contains(variables('AKS')[copyIndex(0)],'AdminUser'),variables('AKS')[copyIndex(0)].AdminUser,parameters('Global').vmAdminUserName)]",
          "ssh": {
            "publicKeys": [
              {
                "keyData": "[parameters('sshPublic')]"
              }
            ]
          }
        },
        "windowsProfile": {
          "adminUsername": "[if(contains(variables('AKS')[copyIndex(0)],'AdminUser'),variables('AKS')[copyIndex(0)].AdminUser,parameters('Global').vmAdminUserName)]",
          "adminPassword": "[parameters('vmAdminPassword')]",
          "licenseType": "Windows_Server"
        },
        "aadProfile": {
          "managed": "[variables('AKS')[copyIndex(0)].enableRBAC]",
          "enableAzureRBAC": "[variables('AKS')[copyIndex(0)].enableRBAC]",
          "adminGroupObjectIDs": "[variables('AKS')[copyIndex(0)].aksAADAdminGroups]",
          "tenantID": "[parameters('global').tenantId]"
        },
        "networkProfile": {
          "loadBalancerSku": "standard",
          "networkPlugin": "azure",
          "networkPolicy": "azure",
          "serviceCidr": "10.0.0.0/16", //Not used anywhere on network, can be re-used across all clusters.
          "dnsServiceIP": "10.0.0.0",
          "dockerBridgeCidr": "192.168.0.1/16", //Not used anywhere on network, can be re-used across all clusters.
          "loadBalancerProfile": null,
          "outboundType": "loadBalancer"
        },
        // "servicePrincipalProfile": {
        //   "clientId": "msi"
        // },

        //  from deployed aks
        // "identityProfile": {
        //   "kubeletidentity": {
        //     "resourceId": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities',concat(variables('Deployment'),'-uaiKubeletidentity'))]",
        //     "clientId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities',concat(variables('Deployment'),'-uaiKubeletidentity')),'2018-11-30').clientId]",
        //     "objectId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities',concat(variables('Deployment'),'-uaiKubeletidentity')),'2018-11-30').principalId]"
        //   }
        // },
        "podIdentityProfile": {
          "enabled": true
          //  not supported on creation.
          // "userAssignedIdentities": [
          //   {
          //     "name": "Apps1",
          //     "namespace": "Apps1",
          //     "identity": {
          //       "resourceId": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities',concat(variables('Deployment'),'-uaiNetworkContributor'))]",
          //       "clientId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities',concat(variables('Deployment'),'-uaiNetworkContributor')),'2018-11-30').clientId]",
          //       "objectId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities',concat(variables('Deployment'),'-uaiNetworkContributor')),'2018-11-30').principalId]"
          //     }
          //   }
          // ],
          // "userAssignedIdentityExceptions": [
          //   {
          //     "name": "string",
          //     "namespace": "string",
          //     "podLabels": {}
          //   }
          // ]
        },
        "apiServerAccessProfile": {
          "enablePrivateCluster": "[variables('AKS')[copyIndex(0)].privateCluster]",
          "privateDNSZone": "[resourceId(parameters('Global').HubRGName,'Microsoft.Network/privateDnsZones','privatelink.centralus.azmk8s.io')]"
        },
        "addonProfiles": {
          "IngressApplicationGateway": {
            "enabled": true,
            "config": {
              "applicationGatewayId": "[resourceid('Microsoft.Network/applicationGateways',concat(variables('Deployment'), '-waf', variables('AKS')[copyIndex(0)].WAFName))]",
              "effectiveApplicationGatewayId": "[resourceid('Microsoft.Network/applicationGateways',concat(variables('Deployment'), '-waf', variables('AKS')[copyIndex(0)].WAFName))]"
            }
            // not currently assignable
            // "identity": {
            //   "resourceId": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities',concat(variables('Deployment'),'-uaiIngressApplicationGateway'))]",
            //   "clientId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities',concat(variables('Deployment'),'-uaiIngressApplicationGateway')),'2018-11-30').clientId]",
            //   "objectId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities',concat(variables('Deployment'),'-uaiIngressApplicationGateway')),'2018-11-30').principalId]"
            // }
          },
          "httpApplicationRouting": {
            "enabled": false
          },
          "azurePolicy": {
            "enabled": false
          },
          "omsAgent": {
            "enabled": true,
            "config": {
              "logAnalyticsWorkspaceResourceID": "[variables('OMSworkspaceID')]"
            }
            // not currently assignable
            // "identity": {
            //   "resourceId": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities',concat(variables('Deployment'),'-uaiOmsAgent'))]",
            //   "clientId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities',concat(variables('Deployment'),'-uaiOmsAgent')),'2018-11-30').clientId]",
            //   "objectId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities',concat(variables('Deployment'),'-uaiOmsAgent')),'2018-11-30').principalId]"
            // }
          },
          "aciConnectorLinux": {
            "enabled": true,
            "config": {
              "SubnetName": "snMT01"
            }
            // not currently assignable
            // "identity": {
            //   "resourceId": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities',concat(variables('Deployment'),'-uaiAciConnectorLinux'))]",
            //   "clientId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities',concat(variables('Deployment'),'-uaiAciConnectorLinux')),'2018-11-30').clientId]",
            //   "objectId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities',concat(variables('Deployment'),'-uaiAciConnectorLinux')),'2018-11-30').principalId]"
            // }
          }
        }
      },
      "resources": [
        {
          "name": "Microsoft.Insights/service",
          "type": "providers/diagnosticSettings",
          "dependsOn": [
            "[concat(variables('Deployment'), '-aks', variables('AKS')[copyIndex(0)].Name)]"
          ],
          "apiVersion": "2017-05-01-preview",
          "properties": {
            "workspaceId": "[variables('OMSworkspaceID')]",
            "logs": [
              {
                "category": "kube-apiserver",
                "enabled": true
              },
              {
                "category": "kube-audit",
                "enabled": true
              },
              {
                "category": "kube-audit-admin",
                "enabled": true
              },
              {
                "category": "kube-controller-manager",
                "enabled": true
              },
              {
                "category": "kube-scheduler",
                "enabled": true
              },
              {
                "category": "cluster-autoscaler",
                "enabled": true
              },
              {
                "category": "guard",
                "enabled": true
              }
            ],
            "metrics": [
              {
                "timeGrain": "PT5M",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": false,
                  "days": 0
                }
              }
            ]
          }
        }
      ]
    }
  ],
  "outputs": {}
}
